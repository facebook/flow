Error -------------------------------------------------------------------------------------------- intersection.js:10:32

Cannot return `x` because `B` [1] is incompatible with `A` [2].

   intersection.js:10:32
   10| function foo(x: X): A { return x; } // error
                                      ^

References:
   intersection.js:10:17
   10| function foo(x: X): A { return x; } // error
                       ^ [1]
   intersection.js:10:21
   10| function foo(x: X): A { return x; } // error
                           ^ [2]


Error -------------------------------------------------------------------------------------------- intersection.js:11:32

Cannot return `x` because `A` [1] is incompatible with `B` [2].

   intersection.js:11:32
   11| function bar(x: X): B { return x; } // error
                                      ^

References:
   intersection.js:11:17
   11| function bar(x: X): B { return x; } // error
                       ^ [1]
   intersection.js:11:21
   11| function bar(x: X): B { return x; } // error
                           ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:7:10

Cannot use type without at least 1 type argument.

   7| type A = $Call; // Error: one or more arguments are required.
               ^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:8:10

Cannot use type without at least 1 type argument.

   8| type B = $Call<>; // Error: one or more arguments are required.
               ^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:13:3

Cannot cast `null` to `C` because mixed [1] is incompatible with number [2].

   test.js:13:3
   13| ((null: mixed): C); // Error: mixed ~> number
         ^^^^^^^^^^^

References:
   test.js:13:9
   13| ((null: mixed): C); // Error: mixed ~> number
               ^^^^^ [1]
   test.js:13:17
   13| ((null: mixed): C); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:15:2

Cannot cast `c` to empty because number [1] is incompatible with empty [2].

   test.js:15:2
   15| (c: empty); // Error: number ~> empty
        ^

References:
   test.js:11:16
   11| declare var c: C;
                      ^ [1]
   test.js:15:5
   15| (c: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:19:2

Cannot cast `42` to `D` because number [1] is incompatible with undefined [2].

   test.js:19:2
   19| (42: D); // Error: number ~> undefined
        ^^ [1]

References:
   test.js:19:6
   19| (42: D); // Error: number ~> undefined
            ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:24:3

Cannot cast `null` to `E` because mixed [1] is incompatible with number [2].

   test.js:24:3
   24| ((null: mixed): E); // Error: mixed ~> number
         ^^^^^^^^^^^

References:
   test.js:24:9
   24| ((null: mixed): E); // Error: mixed ~> number
               ^^^^^ [1]
   test.js:24:17
   24| ((null: mixed): E); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:26:2

Cannot cast `e` to empty because number [1] is incompatible with empty [2].

   test.js:26:2
   26| (e: empty); // Error: number ~> empty
        ^

References:
   test.js:22:16
   22| declare var e: E;
                      ^ [1]
   test.js:26:5
   26| (e: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:31:3

Cannot cast `null` to `F` because mixed [1] is incompatible with number [2].

   test.js:31:3
   31| ((null: mixed): F); // Error: mixed ~> number
         ^^^^^^^^^^^

References:
   test.js:31:9
   31| ((null: mixed): F); // Error: mixed ~> number
               ^^^^^ [1]
   test.js:31:17
   31| ((null: mixed): F); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:33:2

Cannot cast `f` to empty because number [1] is incompatible with empty [2].

   test.js:33:2
   33| (f: empty); // Error: number ~> empty
        ^

References:
   test.js:29:16
   29| declare var f: F;
                      ^ [1]
   test.js:33:5
   33| (f: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:38:3

Cannot cast `null` to `G` because:
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   test.js:38:3
   38| ((null: mixed): G); // Error: mixed ~> number | string
         ^^^^^^^^^^^

References:
   test.js:38:9
   38| ((null: mixed): G); // Error: mixed ~> number | string
               ^^^^^ [1]
   test.js:35:21
   35| type G = $Call<Fn2, number, string>;
                           ^^^^^^ [2]
   test.js:35:29
   35| type G = $Call<Fn2, number, string>;
                                   ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:39:2

Cannot cast `g` to number because string [1] is incompatible with number [2].

   test.js:39:2
   39| (g: number); // Error: number | string ~> number
        ^

References:
   test.js:36:16
   36| declare var g: G;
                      ^ [1]
   test.js:39:5
   39| (g: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:41:2

Cannot cast `g` to empty because:
 - number [1] is incompatible with empty [2].
 - string [1] is incompatible with empty [2].

   test.js:41:2
   41| (g: empty); // Error: number | string ~> empty
        ^

References:
   test.js:36:16
   36| declare var g: G;
                      ^ [1]
   test.js:41:5
   41| (g: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:6:3

Cannot cast `null` to `A` because:
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:6:3
   6| ((null: mixed): A); // Error: mixed ~> number | string
        ^^^^^^^^^^^

References:
   union.js:6:9
   6| ((null: mixed): A); // Error: mixed ~> number | string
              ^^^^^ [1]
   union.js:3:23
   3| type A = $Call<(() => number) | (() => string)>;
                            ^^^^^^ [2]
   union.js:3:40
   3| type A = $Call<(() => number) | (() => string)>;
                                             ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- union.js:7:2

Cannot cast `a` to number because string [1] is incompatible with number [2].

   union.js:7:2
   7| (a: number); // Error: number | string ~> number
       ^

References:
   union.js:4:16
   4| declare var a: A;
                     ^ [1]
   union.js:7:5
   7| (a: number); // Error: number | string ~> number
          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:9:2

Cannot cast `a` to empty because:
 - number [1] is incompatible with empty [2].
 - string [1] is incompatible with empty [2].

   union.js:9:2
   9| (a: empty); // Error: number | string ~> empty
       ^

References:
   union.js:4:16
   4| declare var a: A;
                     ^ [1]
   union.js:9:5
   9| (a: empty); // Error: number | string ~> empty
          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:14:3

Cannot cast `null` to `B` because:
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:14:3
   14| ((null: mixed): B); // Error: mixed ~> number | string
         ^^^^^^^^^^^

References:
   union.js:14:9
   14| ((null: mixed): B); // Error: mixed ~> number | string
               ^^^^^ [1]
   union.js:11:52
   11| type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                                                          ^^^^^^ [2]
   union.js:11:60
   11| type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                                                                  ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:15:2

Cannot cast `b` to number because string [1] is incompatible with number [2].

   union.js:15:2
   15| (b: number); // Error: number | string ~> number
        ^

References:
   union.js:12:16
   12| declare var b: B;
                      ^ [1]
   union.js:15:5
   15| (b: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:17:2

Cannot cast `b` to empty because:
 - number [1] is incompatible with empty [2].
 - string [1] is incompatible with empty [2].

   union.js:17:2
   17| (b: empty); // Error: number | string ~> empty
        ^

References:
   union.js:12:16
   12| declare var b: B;
                      ^ [1]
   union.js:17:5
   17| (b: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:22:3

Cannot cast `null` to `C` because:
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:22:3
   22| ((null: mixed): C); // Error: mixed ~> number | string
         ^^^^^^^^^^^

References:
   union.js:22:9
   22| ((null: mixed): C); // Error: mixed ~> number | string
               ^^^^^ [1]
   union.js:19:29
   19| type C = $Call<<T>(T) => T, number | string>;
                                   ^^^^^^ [2]
   union.js:19:38
   19| type C = $Call<<T>(T) => T, number | string>;
                                            ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:23:2

Cannot cast `c` to number because string [1] is incompatible with number [2].

   union.js:23:2
   23| (c: number); // Error: number | string ~> number
        ^

References:
   union.js:20:16
   20| declare var c: C;
                      ^ [1]
   union.js:23:5
   23| (c: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:25:2

Cannot cast `c` to empty because:
 - number [1] is incompatible with empty [2].
 - string [1] is incompatible with empty [2].

   union.js:25:2
   25| (c: empty); // Error: number | string ~> empty
        ^

References:
   union.js:20:16
   20| declare var c: C;
                      ^ [1]
   union.js:25:5
   25| (c: empty); // Error: number | string ~> empty
           ^^^^^ [2]



Found 27 errors
