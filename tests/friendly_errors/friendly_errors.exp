Error ----------------------------------------------------------------------------- class-extends-and-implements.js:14:1

Cannot extend `A` [1] with `C` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:14:1
       v------------------
   14| class C extends A {
   15|   p: string;
   16| }
       ^

References:
   class-extends-and-implements.js:14:17
   14| class C extends A {
                       ^ [1]
   class-extends-and-implements.js:15:6
   15|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:7:6
    7|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:18:1

Cannot extend `B` [1] with `D` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:18:1
       v-------------------------
   18| class D extends B<empty> {
   19|   p: string;
   20| }
       ^

References:
   class-extends-and-implements.js:18:17
   18| class D extends B<empty> {
                       ^^^^^^^^ [1]
   class-extends-and-implements.js:19:6
   19|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:11:6
   11|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:30:1

Cannot implement `E` [1] with `G` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:30:1
       v---------------------
   30| class G implements E {
   31|   p: string;
   32| }
       ^

References:
   class-extends-and-implements.js:30:20
   30| class G implements E {
                          ^ [1]
   class-extends-and-implements.js:31:6
   31|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:23:6
   23|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:34:1

Cannot implement `F` [1] with `H` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:34:1
       v----------------------------
   34| class H implements F<empty> {
   35|   p: string;
   36| }
       ^

References:
   class-extends-and-implements.js:34:20
   34| class H implements F<empty> {
                          ^^^^^^^^ [1]
   class-extends-and-implements.js:35:6
   35|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:27:6
   27|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:46:1

Cannot extend `I` [1] with `K` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:46:1
       v----------------------
   46| interface K extends I {
   47|   p: string;
   48| }
       ^

References:
   class-extends-and-implements.js:46:21
   46| interface K extends I {
                           ^ [1]
   class-extends-and-implements.js:47:6
   47|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:39:6
   39|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:50:1

Cannot extend `J` [1] with `L` because string [2] is incompatible with number [3] in property `p`.

   class-extends-and-implements.js:50:1
       v-----------------------------
   50| interface L extends J<empty> {
   51|   p: string;
   52| }
       ^

References:
   class-extends-and-implements.js:50:21
   50| interface L extends J<empty> {
                           ^^^^^^^^ [1]
   class-extends-and-implements.js:51:6
   51|   p: string;
            ^^^^^^ [2]
   class-extends-and-implements.js:43:6
   43|   p: number;
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:70:1

Cannot extend `M1` [1] with `O` because string [2] is incompatible with number [3] in property `p1`.

   class-extends-and-implements.js:70:1
       v---------------------------
   70| interface O extends M1, M2 {
   71|   p1: string;
   72|   p2: string;
   73| }
       ^

References:
   class-extends-and-implements.js:70:21
   70| interface O extends M1, M2 {
                           ^^ [1]
   class-extends-and-implements.js:71:7
   71|   p1: string;
             ^^^^^^ [2]
   class-extends-and-implements.js:55:7
   55|   p1: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:70:1

Cannot extend `M2` [1] with `O` because string [2] is incompatible with number [3] in property `p2`.

   class-extends-and-implements.js:70:1
       v---------------------------
   70| interface O extends M1, M2 {
   71|   p1: string;
   72|   p2: string;
   73| }
       ^

References:
   class-extends-and-implements.js:70:25
   70| interface O extends M1, M2 {
                               ^^ [1]
   class-extends-and-implements.js:72:7
   72|   p2: string;
             ^^^^^^ [2]
   class-extends-and-implements.js:59:7
   59|   p2: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:75:1

Cannot extend `N1` [1] with `P` because string [2] is incompatible with number [3] in property `p1`.

   class-extends-and-implements.js:75:1
       v-----------------------------------------
   75| interface P extends N1<empty>, N2<empty> {
   76|   p1: string;
   77|   p2: string;
   78| }
       ^

References:
   class-extends-and-implements.js:75:21
   75| interface P extends N1<empty>, N2<empty> {
                           ^^^^^^^^^ [1]
   class-extends-and-implements.js:76:7
   76|   p1: string;
             ^^^^^^ [2]
   class-extends-and-implements.js:63:7
   63|   p1: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:75:1

Cannot extend `N2` [1] with `P` because string [2] is incompatible with number [3] in property `p2`.

   class-extends-and-implements.js:75:1
       v-----------------------------------------
   75| interface P extends N1<empty>, N2<empty> {
   76|   p1: string;
   77|   p2: string;
   78| }
       ^

References:
   class-extends-and-implements.js:75:32
   75| interface P extends N1<empty>, N2<empty> {
                                      ^^^^^^^^^ [1]
   class-extends-and-implements.js:77:7
   77|   p2: string;
             ^^^^^^ [2]
   class-extends-and-implements.js:67:7
   67|   p2: number;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:96:1

Cannot implement `Q1` [1] with `S` because number [2] is incompatible with string [3] in property `p1`.

   class-extends-and-implements.js:96:1
       v--------------------------
   96| class S implements Q1, Q2 {
   97|   p1: number;
   98|   p2: number;
   99| }
       ^

References:
   class-extends-and-implements.js:96:20
   96| class S implements Q1, Q2 {
                          ^^ [1]
   class-extends-and-implements.js:97:7
   97|   p1: number;
             ^^^^^^ [2]
   class-extends-and-implements.js:81:7
   81|   p1: string;
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------- class-extends-and-implements.js:96:1

Cannot implement `Q2` [1] with `S` because number [2] is incompatible with string [3] in property `p2`.

   class-extends-and-implements.js:96:1
       v--------------------------
   96| class S implements Q1, Q2 {
   97|   p1: number;
   98|   p2: number;
   99| }
       ^

References:
   class-extends-and-implements.js:96:24
   96| class S implements Q1, Q2 {
                              ^^ [1]
   class-extends-and-implements.js:98:7
   98|   p2: number;
             ^^^^^^ [2]
   class-extends-and-implements.js:85:7
   85|   p2: string;
             ^^^^^^ [3]


Error ---------------------------------------------------------------------------- class-extends-and-implements.js:101:1

Cannot implement `R1` [1] with `T` because number [2] is incompatible with string [3] in property `p1`.

   class-extends-and-implements.js:101:1
        v----------------------------------------
   101| class T implements R1<empty>, R2<empty> {
   102|   p1: number;
   103|   p2: number;
   104| }
        ^

References:
   class-extends-and-implements.js:101:20
   101| class T implements R1<empty>, R2<empty> {
                           ^^^^^^^^^ [1]
   class-extends-and-implements.js:102:7
   102|   p1: number;
              ^^^^^^ [2]
   class-extends-and-implements.js:89:7
    89|   p1: string;
              ^^^^^^ [3]


Error ---------------------------------------------------------------------------- class-extends-and-implements.js:101:1

Cannot implement `R2` [1] with `T` because number [2] is incompatible with string [3] in property `p2`.

   class-extends-and-implements.js:101:1
        v----------------------------------------
   101| class T implements R1<empty>, R2<empty> {
   102|   p1: number;
   103|   p2: number;
   104| }
        ^

References:
   class-extends-and-implements.js:101:31
   101| class T implements R1<empty>, R2<empty> {
                                      ^^^^^^^^^ [1]
   class-extends-and-implements.js:103:7
   103|   p2: number;
              ^^^^^^ [2]
   class-extends-and-implements.js:93:7
    93|   p2: string;
              ^^^^^^ [3]


Error ------------------------------------------------------------------------------- class-refinement-env-merge.js:12:6

Cannot cast `this.p` to number because:
 - string [1] is incompatible with number [2].
 - string [3] is incompatible with number [2].

   class-refinement-env-merge.js:12:6
   12|     (this.p: number);
            ^^^^^^

References:
   class-refinement-env-merge.js:7:15
    7|   p: number | string;
                     ^^^^^^ [1]
   class-refinement-env-merge.js:12:14
   12|     (this.p: number);
                    ^^^^^^ [2]
   class-refinement-env-merge.js:10:16
   10|       this.p = 'foo';
                      ^^^^^ [3]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:16:6

Cannot cast `this.a` to number because string [1] is incompatible with number [2].

   desc-class-properties.js:16:6
   16|     (this.a: number); // Error: string ~> number
            ^^^^^^

References:
   desc-class-properties.js:7:6
    7|   a: string;
            ^^^^^^ [1]
   desc-class-properties.js:16:14
   16|     (this.a: number); // Error: string ~> number
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:17:6

Cannot cast `super.a` to number because string [1] is incompatible with number [2].

   desc-class-properties.js:17:6
   17|     (super.a: number); // Error: string ~> number
            ^^^^^^^

References:
   desc-class-properties.js:7:6
    7|   a: string;
            ^^^^^^ [1]
   desc-class-properties.js:17:15
   17|     (super.a: number); // Error: string ~> number
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:18:6

Cannot cast `this.b` to number because string [1] is incompatible with number [2].

   desc-class-properties.js:18:6
   18|     (this.b: number); // Error: string ~> number
            ^^^^^^

References:
   desc-class-properties.js:11:6
   11|   b: string;
            ^^^^^^ [1]
   desc-class-properties.js:18:14
   18|     (this.b: number); // Error: string ~> number
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ desc-class-properties.js:19:6

Cannot cast `this.#c` to number because string [1] is incompatible with number [2].

   desc-class-properties.js:19:6
   19|     (this.#c: number); // Error: string ~> number
            ^^^^^^^

References:
   desc-class-properties.js:13:7
   13|   #c: string;
             ^^^^^^ [1]
   desc-class-properties.js:19:15
   19|     (this.#c: number); // Error: string ~> number
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------- indexer-key-compatibility.js:7:2

Cannot cast `o` to object type because number [1] is incompatible with string [2] in the indexer property's key.

   indexer-key-compatibility.js:7:2
   7| (o: {[k: string]: any});
       ^

References:
   indexer-key-compatibility.js:6:21
   6| declare var o: {[k: number]: any};
                          ^^^^^^ [1]
   indexer-key-compatibility.js:7:10
   7| (o: {[k: string]: any});
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------- loc-primary-for-covariant-ops.js:8:3

Cannot cast `any` to function type because number [1] is incompatible with string [2] in property `p` of the first
argument.

   loc-primary-for-covariant-ops.js:8:3
   8| ((any: (x: {p: number}) => void): (x: {p: string}) => void);
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   loc-primary-for-covariant-ops.js:8:16
   8| ((any: (x: {p: number}) => void): (x: {p: string}) => void);
                     ^^^^^^ [1]
   loc-primary-for-covariant-ops.js:8:43
   8| ((any: (x: {p: number}) => void): (x: {p: string}) => void);
                                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------- loc-primary-for-covariant-ops.js:11:3

Cannot cast `any` to `X` because number [1] is incompatible with string [2] in property `p` of type argument `T` [3].

   loc-primary-for-covariant-ops.js:11:3
   11| ((any: X<{p: number}>): X<{p: string}>);
         ^^^^^^^^^^^^^^^^^^^

References:
   loc-primary-for-covariant-ops.js:11:14
   11| ((any: X<{p: number}>): X<{p: string}>);
                    ^^^^^^ [1]
   loc-primary-for-covariant-ops.js:11:31
   11| ((any: X<{p: number}>): X<{p: string}>);
                                     ^^^^^^ [2]
   loc-primary-for-covariant-ops.js:10:9
   10| type X<-T> = mixed;
               ^ [3]


Error ----------------------------------------------------------------------------------------------- loc-primary.js:8:2

Cannot cast `a1` to `A` because number [1] is incompatible with string [2] in property `p`.

   loc-primary.js:8:2
   8| (a1: A); // Error: string ~> number. We should point to a1.
       ^^

References:
   loc-primary.js:7:21
   7| declare var a1: {p: number};
                          ^^^^^^ [1]
   loc-primary.js:6:14
   6| type A = {p: string};
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:10:2

Cannot cast object literal to `A` because number [1] is incompatible with string [2] in property `p`.

   loc-primary.js:10:2
   10| ({p: a2}: A); // Error: string ~> number. We should point to a2.
        ^^^^^^^

References:
   loc-primary.js:9:17
    9| declare var a2: number;
                       ^^^^^^ [1]
   loc-primary.js:6:14
    6| type A = {p: string};
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:11:2

Cannot cast object literal to `A` because number [1] is incompatible with string [2] in property `p`.

   loc-primary.js:11:2
   11| ({p: 42}: A); // Error: string ~> number. We should point to 42.
        ^^^^^^^

References:
   loc-primary.js:11:6
   11| ({p: 42}: A); // Error: string ~> number. We should point to 42.
            ^^ [1]
   loc-primary.js:6:14
    6| type A = {p: string};
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:15:2

Cannot cast `b1` to `B` because number [1] is incompatible with string [2] in property `a.b`.

   loc-primary.js:15:2
   15| (b1: B); // Error: string ~> number. We should point to b1.
        ^^

References:
   loc-primary.js:14:25
   14| declare var b1: {a: {b: number}};
                               ^^^^^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:17:2

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `a.b`.

   loc-primary.js:17:2
   17| ({a: b2}: B); // Error: string ~> number. We should point to b2.
        ^^^^^^^

References:
   loc-primary.js:16:21
   16| declare var b2: {b: number};
                           ^^^^^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:19:2

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `a.b`.

   loc-primary.js:19:2
   19| ({a: {b: b3}}: B); // Error: string ~> number. We should point to b3.
        ^^^^^^^^^^^^

References:
   loc-primary.js:18:17
   18| declare var b3: number;
                       ^^^^^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:20:2

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `a.b`.

   loc-primary.js:20:2
   20| ({a: {b: 42}}: B); // Error: string ~> number. We should point to 42.
        ^^^^^^^^^^^^

References:
   loc-primary.js:20:10
   20| ({a: {b: 42}}: B); // Error: string ~> number. We should point to 42.
                ^^ [1]
   loc-primary.js:13:18
   13| type B = {a: {b: string}};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:24:2

Cannot cast `c1` to `C` because number [1] is incompatible with string [2] in property `a.b.c`.

   loc-primary.js:24:2
   24| (c1: C); // Error: string ~> number. We should point to c1.
        ^^

References:
   loc-primary.js:23:29
   23| declare var c1: {a: {b: {c: number}}};
                                   ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:26:2

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.

   loc-primary.js:26:2
   26| ({a: c2}: C); // Error: string ~> number. We should point to c2.
        ^^^^^^^

References:
   loc-primary.js:25:25
   25| declare var c2: {b: {c: number}};
                               ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:28:2

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.

   loc-primary.js:28:2
   28| ({a: {b: c3}}: C); // Error: string ~> number. We should point to c3.
        ^^^^^^^^^^^^

References:
   loc-primary.js:27:21
   27| declare var c3: {c: number};
                           ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:30:2

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.

   loc-primary.js:30:2
   30| ({a: {b: {c: c4}}}: C); // Error: string ~> number. We should point to c4.
        ^^^^^^^^^^^^^^^^^

References:
   loc-primary.js:29:17
   29| declare var c4: number;
                       ^^^^^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:31:2

Cannot cast object literal to `C` because number [1] is incompatible with string [2] in property `a.b.c`.

   loc-primary.js:31:2
   31| ({a: {b: {c: 42}}}: C); // Error: string ~> number. We should point to 42.
        ^^^^^^^^^^^^^^^^^

References:
   loc-primary.js:31:14
   31| ({a: {b: {c: 42}}}: C); // Error: string ~> number. We should point to 42.
                    ^^ [1]
   loc-primary.js:22:22
   22| type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:35:2

Cannot cast `d1` to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:35:2
   35| (d1: D); // Error: string ~> number. We should point to d1.
        ^^

References:
   loc-primary.js:34:33
   34| declare var d1: {a: {b: {c: {d: number}}}};
                                       ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:37:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:37:2
   37| ({a: d2}: D); // Error: string ~> number. We should point to d2.
        ^^^^^^^

References:
   loc-primary.js:36:29
   36| declare var d2: {b: {c: {d: number}}};
                                   ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:39:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:39:2
   39| ({a: {b: d3}}: D); // Error: string ~> number. We should point to d3.
        ^^^^^^^^^^^^

References:
   loc-primary.js:38:25
   38| declare var d3: {c: {d: number}};
                               ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:41:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:41:2
   41| ({a: {b: {c: d4}}}: D); // Error: string ~> number. We should point to d4.
        ^^^^^^^^^^^^^^^^^

References:
   loc-primary.js:40:21
   40| declare var d4: {d: number};
                           ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:43:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:43:2
   43| ({a: {b: {c: {d: d5}}}}: D); // Error: string ~> number. We should point to d5.
        ^^^^^^^^^^^^^^^^^^^^^^

References:
   loc-primary.js:42:17
   42| declare var d5: number;
                       ^^^^^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- loc-primary.js:44:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b.c.d`.

   loc-primary.js:44:2
   44| ({a: {b: {c: {d: 42}}}}: D); // Error: string ~> number. We should point to 42.
        ^^^^^^^^^^^^^^^^^^^^^^

References:
   loc-primary.js:44:18
   44| ({a: {b: {c: {d: 42}}}}: D); // Error: string ~> number. We should point to 42.
                        ^^ [1]
   loc-primary.js:33:26
   33| type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:15:2

Cannot cast `x1` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:15:2
   15| (x1: empty); // X ~> empty. Ref should point to first `new X()`.
        ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:15:6
   15| (x1: empty); // X ~> empty. Ref should point to first `new X()`.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:16:2

Cannot cast `x2` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:16:2
   16| (x2: empty); // X ~> empty. Ref should point to first `X` annotation.
        ^^

References:
   loc-reference.js:9:11
    9| const x2: X = new X();
                 ^ [1]
   loc-reference.js:16:6
   16| (x2: empty); // X ~> empty. Ref should point to first `X` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:17:2

Cannot cast `x3` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:17:2
   17| (x3: empty); // X ~> empty. Ref should point to first `new X()`.
        ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:17:6
   17| (x3: empty); // X ~> empty. Ref should point to first `new X()`.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:18:2

Cannot cast `x4` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:18:2
   18| (x4: empty); // X ~> empty. Ref should point to first `X` annotation.
        ^^

References:
   loc-reference.js:9:11
    9| const x2: X = new X();
                 ^ [1]
   loc-reference.js:18:6
   18| (x4: empty); // X ~> empty. Ref should point to first `X` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:19:2

Cannot cast `x5` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:19:2
   19| (x5: empty); // X ~> empty. Ref should point to second `X` annotation.
        ^^

References:
   loc-reference.js:12:11
   12| const x5: X = x1;
                 ^ [1]
   loc-reference.js:19:6
   19| (x5: empty); // X ~> empty. Ref should point to second `X` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:20:2

Cannot cast `x6` to empty because `X` [1] is incompatible with empty [2].

   loc-reference.js:20:2
   20| (x6: empty); // X ~> empty. Ref should point to second `X` annotation.
        ^^

References:
   loc-reference.js:8:12
    8| const x1 = new X();
                  ^^^^^^^ [1]
   loc-reference.js:20:6
   20| (x6: empty); // X ~> empty. Ref should point to second `X` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:29:2

Cannot cast `y1` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:29:2
   29| (y1: empty); // number ~> empty. Ref should point to 42.
        ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:29:6
   29| (y1: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:30:2

Cannot cast `y2` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:30:2
   30| (y2: empty); // number ~> empty. Ref should point to first `number` annotation.
        ^^

References:
   loc-reference.js:23:11
   23| const y2: number = -42;
                 ^^^^^^ [1]
   loc-reference.js:30:6
   30| (y2: empty); // number ~> empty. Ref should point to first `number` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:31:2

Cannot cast `y3` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:31:2
   31| (y3: empty); // number ~> empty. Ref should point to 42.
        ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:31:6
   31| (y3: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:32:2

Cannot cast `y4` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:32:2
   32| (y4: empty); // number ~> empty. Ref should point to first `number` annotation.
        ^^

References:
   loc-reference.js:23:11
   23| const y2: number = -42;
                 ^^^^^^ [1]
   loc-reference.js:32:6
   32| (y4: empty); // number ~> empty. Ref should point to first `number` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:33:2

Cannot cast `y5` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:33:2
   33| (y5: empty); // number ~> empty. Ref should point to second `number` annotation.
        ^^

References:
   loc-reference.js:26:11
   26| const y5: number = y1;
                 ^^^^^^ [1]
   loc-reference.js:33:6
   33| (y5: empty); // number ~> empty. Ref should point to second `number` annotation.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:34:2

Cannot cast `y6` to empty because number [1] is incompatible with empty [2].

   loc-reference.js:34:2
   34| (y6: empty); // number ~> empty. Ref should point to 42.
        ^^

References:
   loc-reference.js:22:12
   22| const y1 = 42;
                  ^^ [1]
   loc-reference.js:34:6
   34| (y6: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:37:4

Cannot cast `x` to number because string [1] is incompatible with number [2].

   loc-reference.js:37:4
   37|   (x: number); // string ~> number. Ref should point to `x: string`.
          ^

References:
   loc-reference.js:36:17
   36| function fn1(x: string) {
                       ^^^^^^ [1]
   loc-reference.js:37:7
   37|   (x: number); // string ~> number. Ref should point to `x: string`.
             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- loc-reference.js:41:4

Cannot cast `x` to number because `T` [1] is incompatible with number [2].

   loc-reference.js:41:4
   41|   (x: number); // T ~> number. Ref should point to `x: T`.
          ^

References:
   loc-reference.js:40:20
   40| function fn2<T>(x: T) {
                          ^ [1]
   loc-reference.js:41:7
   41|   (x: number); // T ~> number. Ref should point to `x: T`.
             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:8:24

number [1] is not a class.

   misc-incompatibles.js:8:24
   8| declare class X mixins Y {}
                             ^

References:
   misc-incompatibles.js:6:11
   6| const Y = 42;
                ^^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:11:1

Cannot extend `A` [1] with `B` because number [1] is not inheritable.

   misc-incompatibles.js:11:1
   11| interface B extends A {}
       ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   misc-incompatibles.js:11:21
   11| interface B extends A {}
                           ^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:14:3

Cannot access computed property using boolean [1].

   14| o[true];
         ^^^^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:15:3

Cannot assign computed property using boolean [1].

   15| o[true] = 42;
         ^^^^ [1]


Error --------------------------------------------------------------------------------------- misc-incompatibles.js:17:1

Invalid left-hand side in assignment expression.

   17| [nope] += 1;
       ^^^^^^


Error ----------------------------------------------------------------------------------------------------- order.js:8:2

Cannot cast object literal to object type because:
 - number [1] is incompatible with boolean [2] in property `a`.
 - boolean [3] is incompatible with number [4] in property `c`.

   order.js:8:2
        v
    8| ({
    9|   a: 42,
   10|   b: ('foo': empty),
   11|   c: true,
   12| }: {
       ^

References:
   order.js:9:6
    9|   a: 42,
            ^^ [1]
   order.js:13:6
   13|   a: boolean,
            ^^^^^^^ [2]
   order.js:11:6
   11|   c: true,
            ^^^^ [3]
   order.js:14:6
   14|   c: number,
            ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- order.js:10:7

Cannot cast `'foo'` to empty because string [1] is incompatible with empty [2].

   order.js:10:7
   10|   b: ('foo': empty),
             ^^^^^ [1]

References:
   order.js:10:14
   10|   b: ('foo': empty),
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:12:3

Cannot cast `any` to object type because property `p` is read-only in object type [1] but writable in object type [2].

   prop-variance.js:12:3
   12| ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
         ^^^^^^^^^^^^

References:
   prop-variance.js:12:8
   12| ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
              ^^^^^^^ [1]
   prop-variance.js:12:18
   12| ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:14:3

Cannot cast `any` to object type because property `p` is read-only in object type [1] but write-only in object type [2].

   prop-variance.js:14:3
   14| ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
         ^^^^^^^^^^^^

References:
   prop-variance.js:14:8
   14| ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
              ^^^^^^^ [1]
   prop-variance.js:14:18
   14| ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
                        ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:15:3

Cannot cast `any` to object type because property `p` is write-only in object type [1] but readable in object type [2].

   prop-variance.js:15:3
   15| ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
         ^^^^^^^^^^^^

References:
   prop-variance.js:15:8
   15| ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
              ^^^^^^^ [1]
   prop-variance.js:15:18
   15| ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- prop-variance.js:16:3

Cannot cast `any` to object type because property `p` is write-only in object type [1] but read-only in object type [2].

   prop-variance.js:16:3
   16| ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
         ^^^^^^^^^^^^

References:
   prop-variance.js:16:8
   16| ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
              ^^^^^^^ [1]
   prop-variance.js:16:18
   16| ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
                        ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- typeof-unexpected.js:6:15

`typeof` can only be used to get the type of variables.

   6| (null: typeof 42);
                    ^^



Found 68 errors
