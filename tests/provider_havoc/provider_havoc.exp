Error --------------------------------------------------------------------------------------------------- empty.js:14:17

Cannot assign `si.add(...)` to `si` because null or undefined [1] is incompatible with empty [2] in type argument
`T` [3]. 

All writes to `si` must be compatible with the type of its initializer [4]. Add an annotation to `si` [4] if a different
type is desired. [incompatible-type]

   empty.js:14:17
   14|     si = si.add(x);
                       ^

References:
   empty.js:13:20
   13|     declare var x: ?string;
                          ^^^^^^^ [1]
   empty.js:11:20
   11|   let si = new Set<empty>();
                          ^^^^^ [2]
   empty.js:67:20
   67| declare class Set<+T> {
                          ^ [3]
   empty.js:11:7
   11|   let si = new Set<empty>();
             ^^ [4]


Error --------------------------------------------------------------------------------------------------- empty.js:14:17

Cannot assign `si.add(...)` to `si` because string [1] is incompatible with empty [2] in type argument `T` [3]. 

All writes to `si` must be compatible with the type of its initializer [4]. Add an annotation to `si` [4] if a different
type is desired. [incompatible-type]

   empty.js:14:17
   14|     si = si.add(x);
                       ^

References:
   empty.js:13:21
   13|     declare var x: ?string;
                           ^^^^^^ [1]
   empty.js:11:20
   11|   let si = new Set<empty>();
                          ^^^^^ [2]
   empty.js:67:20
   67| declare class Set<+T> {
                          ^ [3]
   empty.js:11:7
   11|   let si = new Set<empty>();
             ^^ [4]


Error --------------------------------------------------------------------------------------------------- empty.js:22:10

Cannot assign array literal to `arr` because number [1] is incompatible with empty [2] in array element.
[incompatible-type]

   empty.js:22:10
   22|   arr = [1, 2, 3]; // error
                ^ [1]

References:
   empty.js:21:18
   21|   let arr: Array<empty> = [];
                        ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- empty.js:22:13

Cannot assign array literal to `arr` because number [1] is incompatible with empty [2] in array element.
[incompatible-type]

   empty.js:22:13
   22|   arr = [1, 2, 3]; // error
                   ^ [1]

References:
   empty.js:21:18
   21|   let arr: Array<empty> = [];
                        ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- empty.js:22:16

Cannot assign array literal to `arr` because number [1] is incompatible with empty [2] in array element.
[incompatible-type]

   empty.js:22:16
   22|   arr = [1, 2, 3]; // error
                      ^ [1]

References:
   empty.js:21:18
   21|   let arr: Array<empty> = [];
                        ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- empty.js:49:15

Cannot reference `this` from within method `f` [1]. For safety, Flow restricts access to `this` inside object methods
since these methods may be unbound and rebound. Consider replacing the reference to `this` with the name of the object,
or rewriting the object as a class. [object-this-reference]

   empty.js:49:15
   49|       let b = this.b; // Error: object-this-reference
                     ^^^^

References:
   empty.js:48:5
           v----
   48|     f() {
   49|       let b = this.b; // Error: object-this-reference
   50|       b = 42; // no error since `this` is any-typed above.
   51|     },
           ^ [1]


Error --------------------------------------------------------------------------------------------------- empty.js:74:16

Cannot assign `new Set<...>()` to `si` because string [1] is incompatible with number [2] in type argument `T` [3]. 

All writes to `si` must be compatible with the type of its initializer [4]. Add an annotation to `si` [4] if a different
type is desired. [incompatible-type]

   empty.js:74:16
   74|   si = new Set<string>(); // error
                      ^^^^^^ [1]

References:
   empty.js:72:20
   72|   let si = new Set<number>();
                          ^^^^^^ [2]
   empty.js:67:20
   67| declare class Set<+T> {
                          ^ [3]
   empty.js:72:7
   72|   let si = new Set<number>();
             ^^ [4]


Error ---------------------------------------------------------------------------------------------------- empty.js:76:3

Cannot cast `si` to `Set` because string [1] is incompatible with number [2] in type argument `T` [3].
[incompatible-type]

   empty.js:76:3
   76|   si as Set<number>;
         ^^

References:
   empty.js:74:16
   74|   si = new Set<string>(); // error
                      ^^^^^^ [1]
   empty.js:76:13
   76|   si as Set<number>;
                   ^^^^^^ [2]
   empty.js:67:20
   67| declare class Set<+T> {
                          ^ [3]


Error --------------------------------------------------------------------------------------------------- empty.js:88:15

Cannot assign `si.add(...)` to `si` because number [1] is incompatible with empty [2] in type argument `T` [3]. 

All writes to `si` must be compatible with the type of its initializer [4]. Add an annotation to `si` [4] if a different
type is desired. [incompatible-type]

   empty.js:88:15
   88|   si = si.add(42); // error
                     ^^ [1]

References:
   empty.js:86:20
   86|   let si = new Set<empty>();
                          ^^^^^ [2]
   empty.js:67:20
   67| declare class Set<+T> {
                          ^ [3]
   empty.js:86:7
   86|   let si = new Set<empty>();
             ^^ [4]


Error --------------------------------------------------------------------------------------- provider_edge_cases.js:5:5

Cannot compare function [1] to `console.log` [2], because function [1] is not a subtype of function type [3] and
function type [3] is not a subtype of function [1]. In **rare** cases, these types may have overlapping values but lack
a subtyping relationship. If that happens, you can cast one side to the union of both types to pass the flow check. 
[invalid-compare]

   provider_edge_cases.js:5:5
      5| if (((x: mixed) => 42) === console.log) { // constant-condition error
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   provider_edge_cases.js:5:6
      5| if (((x: mixed) => 42) === console.log) { // constant-condition error
              ^^^^^^^^^^^^^^^^ [1]
   provider_edge_cases.js:5:28
      5| if (((x: mixed) => 42) === console.log) { // constant-condition error
                                    ^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:2870:5
   2870|     log(...data: Array<any>): void,
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- provider_edge_cases.js:8:1

Cannot resolve name `f`. [cannot-resolve-name]

   8| f = function() {
      ^


Error --------------------------------------------------------------------------------------- provider_edge_cases.js:8:1

The following definitions recursively depend on each other, and Flow cannot compute their types:
 - `f` [1] depends on other definition [2]
Please add type annotations to these definitions [definition-cycle]

   provider_edge_cases.js:8:1
   8| f = function() {
      ^ [1]

References:
   provider_edge_cases.js:9:3
   9|   f = 42;
        ^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:17:3

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   providers_closure.js:17:3
   17|   x as empty; // error, just to show that x is not empty
         ^

References:
   providers_closure.js:6:7
    6|   x = 21;
             ^^ [1]
   providers_closure.js:17:8
   17|   x as empty; // error, just to show that x is not empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:21:3

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   providers_closure.js:21:3
   21|   x as empty; // error similarly
         ^

References:
   providers_closure.js:6:7
    6|   x = 21;
             ^^ [1]
   providers_closure.js:21:8
   21|   x as empty; // error similarly
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:22:3

Cannot cast `y` to number because null [1] is incompatible with number [2]. [incompatible-type]

   providers_closure.js:22:3
   22|   y as number; // error b/c y was fully havoced
         ^

References:
   providers_closure.js:4:7
    4|   y = null;
             ^^^^ [1]
   providers_closure.js:22:8
   22|   y as number; // error b/c y was fully havoced
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:32:1

Cannot cast `z` to number because null [1] is incompatible with number [2]. [incompatible-type]

   providers_closure.js:32:1
   32| z as number; // should fail, initial type of z was null
       ^

References:
   providers_closure.js:25:9
   25| var z = null;
               ^^^^ [1]
   providers_closure.js:32:6
   32| z as number; // should fail, initial type of z was null
            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:42:3

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   providers_closure.js:42:3
   42|   x as empty; // error, just to show that x is not empty
         ^

References:
   providers_closure.js:6:7
    6|   x = 21;
             ^^ [1]
   providers_closure.js:42:8
   42|   x as empty; // error, just to show that x is not empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:46:3

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-type]

   providers_closure.js:46:3
   46|   x as empty; // error similarly
         ^

References:
   providers_closure.js:6:7
    6|   x = 21;
             ^^ [1]
   providers_closure.js:46:8
   46|   x as empty; // error similarly
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- providers_closure.js:47:3

Cannot cast `y` to number because null [1] is incompatible with number [2]. [incompatible-type]

   providers_closure.js:47:3
   47|   y as number; // error b/c y was fully havoced
         ^

References:
   providers_closure.js:4:7
    4|   y = null;
             ^^^^ [1]
   providers_closure.js:47:8
   47|   y as number; // error b/c y was fully havoced
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:10:23

Cannot assign `var_x` to `y` because null or undefined [1] is incompatible with number [2]. [incompatible-type]

   test.js:10:23
   10|       var y: number = var_x;
                             ^^^^^

References:
   test.js:5:15
    5| function g(x: ?number) {
                     ^^^^^^^ [1]
   test.js:10:14
   10|       var y: number = var_x;
                    ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:23:3

Cannot cast `x` to undefined because number [1] is incompatible with undefined [2]. [incompatible-type]

   test.js:23:3
   23|   x as void; // should error
         ^

References:
   test.js:17:17
   17|   var x: void | number;
                       ^^^^^^ [1]
   test.js:23:8
   23|   x as void; // should error
              ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:33:5

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-type]

   test.js:33:5
   33|     x as number; // should fail
           ^

References:
   test.js:27:19
   27|   var x: number | string = 42;
                         ^^^^^^ [1]
   test.js:33:10
   33|     x as number; // should fail
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:46:20

Cannot assign `{...}` to `x` because inexact object type [1] is incompatible with exact object literal [2]. 

All writes to `x` must be compatible with the type of its initializer [3]. Add an annotation to `x` [3] if a different
type is desired. [incompatible-exact]

   test.js:46:20
   46|     x = {a: 42} as {a: number, ...}; // error here
                          ^^^^^^^^^^^^^^^^ [1]

References:
   test.js:39:11
   39|   let x = {};
                 ^^ [2]
   test.js:39:7
   39|   let x = {};
             ^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:46:20

Cannot assign `{...}` to `x` because property `a` is extra in object type [1] but missing in object literal [2]. Exact
objects do not accept extra props. 

All writes to `x` must be compatible with the type of its initializer [3]. Add an annotation to `x` [3] if a different
type is desired. [incompatible-type]

   test.js:46:20
   46|     x = {a: 42} as {a: number, ...}; // error here
                          ^^^^^^^^^^^^^^^^ [1]

References:
   test.js:39:11
   39|   let x = {};
                 ^^ [2]
   test.js:39:7
   39|   let x = {};
             ^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:63:12

Cannot assign `f` to `fn` because: [incompatible-type]
 - Either empty [1] is incompatible with number [2] in the first parameter.
 - Or empty [3] is incompatible with number [2] in the first parameter.

All writes to `fn` must be compatible with the type of its initializer [4]. Add an annotation to `fn` [4] if a different
type is desired.

   test.js:63:12
   63|       fn = f;
                  ^

References:
   test.js:55:18
   55|   const f1 = (y: empty) => 42; // error, x has number as LB
                        ^^^^^ [1]
   test.js:61:18
   61|     let fn = (x: number) => 42;
                        ^^^^^^ [2]
   test.js:56:18
   56|   const f2 = (y: empty) => 42; // error, x has number as LB
                        ^^^^^ [3]
   test.js:61:9
   61|     let fn = (x: number) => 42;
               ^^ [4]


Error ------------------------------------------------------------------------------------------------ truncate.js:106:5

Cannot assign `"hello"` to `y` because: [incompatible-type]
 - Either string literal `hello` [1] is incompatible with string literal `a1` [2].
 - Or string literal `hello` [1] is incompatible with string literal `a2` [3].
 - Or string literal `hello` [1] is incompatible with string literal `a3` [4].
 - Or string literal `hello` [1] is incompatible with string literal `a4` [5].
 - Or string literal `hello` [1] is incompatible with string literal `a5` [6].
 - Or string literal `hello` [1] is incompatible with string literal `a6` [7].
 - Or string literal `hello` [1] is incompatible with string literal `a7` [8].
 - Or string literal `hello` [1] is incompatible with string literal `a8` [9].
 - Or string literal `hello` [1] is incompatible with string literal `a9` [10].
 - Or string literal `hello` [1] is incompatible with string literal `a10` [11].
 - Or string literal `hello` [1] is incompatible with string literal `a11` [12].
 - Or string literal `hello` [1] is incompatible with string literal `a12` [13].
 - Or string literal `hello` [1] is incompatible with string literal `a13` [14].
 - Or string literal `hello` [1] is incompatible with string literal `a14` [15].
 - Or string literal `hello` [1] is incompatible with string literal `a15` [16].
 - Or string literal `hello` [1] is incompatible with string literal `a16` [17].
 - Or string literal `hello` [1] is incompatible with string literal `a17` [18].
 - Or string literal `hello` [1] is incompatible with string literal `a18` [19].
 - Or string literal `hello` [1] is incompatible with string literal `a19` [20].
 - Or string literal `hello` [1] is incompatible with string literal `a20` [21].
 - Or string literal `hello` [1] is incompatible with string literal `a21` [22].
 - Or string literal `hello` [1] is incompatible with string literal `a22` [23].
 - Or string literal `hello` [1] is incompatible with string literal `a23` [24].
 - Or string literal `hello` [1] is incompatible with string literal `a24` [25].
 - Or string literal `hello` [1] is incompatible with string literal `a25` [26].
 - Or string literal `hello` [1] is incompatible with string literal `a26` [27].
 - Or string literal `hello` [1] is incompatible with string literal `a27` [28].
 - Or string literal `hello` [1] is incompatible with string literal `a28` [29].
 - Or string literal `hello` [1] is incompatible with string literal `a29` [30].
 - Or string literal `hello` [1] is incompatible with string literal `a30` [31].
 - Or string literal `hello` [1] is incompatible with string literal `a31` [32].
 - Or string literal `hello` [1] is incompatible with string literal `a32` [33].
 - Or string literal `hello` [1] is incompatible with string literal `a33` [34].
 - Or string literal `hello` [1] is incompatible with string literal `a34` [35].
 - Or string literal `hello` [1] is incompatible with string literal `a35` [36].
 - Or string literal `hello` [1] is incompatible with string literal `a36` [37].
 - Or string literal `hello` [1] is incompatible with string literal `a37` [38].
 - Or string literal `hello` [1] is incompatible with string literal `a38` [39].
 - Or string literal `hello` [1] is incompatible with string literal `a39` [40].
 - Or string literal `hello` [1] is incompatible with string literal `a40` [41].
 - Or string literal `hello` [1] is incompatible with string literal `a41` [42].
 - Or string literal `hello` [1] is incompatible with string literal `a42` [43].
 - Or string literal `hello` [1] is incompatible with string literal `a43` [44].
 - Or string literal `hello` [1] is incompatible with string literal `a44` [45].
 - Or string literal `hello` [1] is incompatible with string literal `a45` [46].
 - Or string literal `hello` [1] is incompatible with string literal `a46` [47].
 - Or string literal `hello` [1] is incompatible with string literal `a47` [48].
 - Or string literal `hello` [1] is incompatible with string literal `a48` [49].
 - Or string literal `hello` [1] is incompatible with string literal `a49` [50].
 - Or string literal `hello` [1] is incompatible with string literal `a50` [51].

Only showing the the first 50 branches. To see all branches, re-run Flow with --show-all-branches.

All writes to `y` must be compatible with the type of its initializer [52]. Add an annotation to `y` [52] if a different
type is desired.

   truncate.js:106:5
   106| y = "hello"; // error;
            ^^^^^^^ [1]

References:
   truncate.js:2:5
     2|   | 'a1'
            ^^^^ [2]
   truncate.js:3:5
     3|   | 'a2'
            ^^^^ [3]
   truncate.js:4:5
     4|   | 'a3'
            ^^^^ [4]
   truncate.js:5:5
     5|   | 'a4'
            ^^^^ [5]
   truncate.js:6:5
     6|   | 'a5'
            ^^^^ [6]
   truncate.js:7:5
     7|   | 'a6'
            ^^^^ [7]
   truncate.js:8:5
     8|   | 'a7'
            ^^^^ [8]
   truncate.js:9:5
     9|   | 'a8'
            ^^^^ [9]
   truncate.js:10:5
    10|   | 'a9'
            ^^^^ [10]
   truncate.js:11:5
    11|   | 'a10'
            ^^^^^ [11]
   truncate.js:12:5
    12|   | 'a11'
            ^^^^^ [12]
   truncate.js:13:5
    13|   | 'a12'
            ^^^^^ [13]
   truncate.js:14:5
    14|   | 'a13'
            ^^^^^ [14]
   truncate.js:15:5
    15|   | 'a14'
            ^^^^^ [15]
   truncate.js:16:5
    16|   | 'a15'
            ^^^^^ [16]
   truncate.js:17:5
    17|   | 'a16'
            ^^^^^ [17]
   truncate.js:18:5
    18|   | 'a17'
            ^^^^^ [18]
   truncate.js:19:5
    19|   | 'a18'
            ^^^^^ [19]
   truncate.js:20:5
    20|   | 'a19'
            ^^^^^ [20]
   truncate.js:21:5
    21|   | 'a20'
            ^^^^^ [21]
   truncate.js:22:5
    22|   | 'a21'
            ^^^^^ [22]
   truncate.js:23:5
    23|   | 'a22'
            ^^^^^ [23]
   truncate.js:24:5
    24|   | 'a23'
            ^^^^^ [24]
   truncate.js:25:5
    25|   | 'a24'
            ^^^^^ [25]
   truncate.js:26:5
    26|   | 'a25'
            ^^^^^ [26]
   truncate.js:27:5
    27|   | 'a26'
            ^^^^^ [27]
   truncate.js:28:5
    28|   | 'a27'
            ^^^^^ [28]
   truncate.js:29:5
    29|   | 'a28'
            ^^^^^ [29]
   truncate.js:30:5
    30|   | 'a29'
            ^^^^^ [30]
   truncate.js:31:5
    31|   | 'a30'
            ^^^^^ [31]
   truncate.js:32:5
    32|   | 'a31'
            ^^^^^ [32]
   truncate.js:33:5
    33|   | 'a32'
            ^^^^^ [33]
   truncate.js:34:5
    34|   | 'a33'
            ^^^^^ [34]
   truncate.js:35:5
    35|   | 'a34'
            ^^^^^ [35]
   truncate.js:36:5
    36|   | 'a35'
            ^^^^^ [36]
   truncate.js:37:5
    37|   | 'a36'
            ^^^^^ [37]
   truncate.js:38:5
    38|   | 'a37'
            ^^^^^ [38]
   truncate.js:39:5
    39|   | 'a38'
            ^^^^^ [39]
   truncate.js:40:5
    40|   | 'a39'
            ^^^^^ [40]
   truncate.js:41:5
    41|   | 'a40'
            ^^^^^ [41]
   truncate.js:42:5
    42|   | 'a41'
            ^^^^^ [42]
   truncate.js:43:5
    43|   | 'a42'
            ^^^^^ [43]
   truncate.js:44:5
    44|   | 'a43'
            ^^^^^ [44]
   truncate.js:45:5
    45|   | 'a44'
            ^^^^^ [45]
   truncate.js:46:5
    46|   | 'a45'
            ^^^^^ [46]
   truncate.js:47:5
    47|   | 'a46'
            ^^^^^ [47]
   truncate.js:48:5
    48|   | 'a47'
            ^^^^^ [48]
   truncate.js:49:5
    49|   | 'a48'
            ^^^^^ [49]
   truncate.js:50:5
    50|   | 'a49'
            ^^^^^ [50]
   truncate.js:51:5
    51|   | 'a50'
            ^^^^^ [51]
   truncate.js:105:5
   105| var y = x;
            ^ [52]


Error ----------------------------------------------------------------------------------------------- unreachable.js:5:3

Unreachable code. [unreachable-code]

   5|   (function (why: number) {});
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^



Found 27 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
