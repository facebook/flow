Error ----------------------------------------------------------------------------------------------------- maybe.js:9:2

Cannot cast `'foo'` to `typeof x` because string [1] is incompatible with number [2]. [incompatible-cast]

   maybe.js:9:2
   9| ('foo': typeof x); // error: string ~> number
       ^^^^^ [1]

References:
   maybe.js:8:11
   8| var x = f(42);
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:9:2

Cannot cast `null` to `typeof x` because null [1] is incompatible with number [2]. [incompatible-cast]

   optional.js:9:2
   9| (null: typeof x); // error: null ~> $Optional<number> (i.e., void|number)
       ^^^^ [1]

References:
   optional.js:8:11
   8| var x = f(42).p;
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:45:19

Cannot assign `MyClass1` to `b` because class `MyClass1` [1] is incompatible with `MyClass1` [2]. [incompatible-type]

   typeof.js:45:19
   45| var b: MyClass1 = MyClass1;
                         ^^^^^^^^

References:
   typeof.js:11:7
   11| class MyClass1 {
             ^^^^^^^^ [1]
   typeof.js:45:8
   45| var b: MyClass1 = MyClass1;
              ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:57:26

Cannot assign `new MyClass2()` to `c` because `MyClass2` [1] is incompatible with class `MyClass2` [2].
[incompatible-type]

   typeof.js:57:26
   57| var c: typeof MyClass2 = new MyClass2();
                                ^^^^^^^^^^^^^^ [1]

References:
   typeof.js:57:8
   57| var c: typeof MyClass2 = new MyClass2();
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:65:26

Cannot assign `'asdf'` to `e` because string [1] is incompatible with number [2]. [incompatible-type]

   typeof.js:65:26
   65| var e: typeof numValue = 'asdf'; // Error: string ~> number
                                ^^^^^^ [1]

References:
   typeof.js:65:8
   65| var e: typeof numValue = 'asdf'; // Error: string ~> number
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:77:15

Cannot use type `numberAlias` [1] as a value. Types are erased and don't exist at runtime. [type-as-value]

   typeof.js:77:15
   77| var f: typeof numberAlias = 42; // Error: 'typeof <<type-alias>>' makes no sense...
                     ^^^^^^^^^^^

References:
   typeof.js:71:6
   71| type numberAlias = number;
            ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- typeof.js:86:17

Cannot use `Map` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   86| var keys: $Keys<Map> = 'A'; // Error: ineligible value used in type anno
                       ^^^


Error --------------------------------------------------------------------------------------------------- typeof.js:95:1

Cannot cast `g` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   typeof.js:95:1
   95| g as string; // error
       ^

References:
   typeof.js:92:16
   92| declare var g: typeof h;
                      ^^^^^^^^ [1]
   typeof.js:95:6
   95| g as string; // error
            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:101:1

Cannot cast `i.p` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   typeof.js:101:1
   101| i.p as string; // error
        ^^^

References:
   typeof.js:99:15
    99| const j = {p: 1};
                      ^ [1]
   typeof.js:101:8
   101| i.p as string; // error
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:9:2

Cannot cast `null` to `typeof x` because: [incompatible-cast]
 - Either null [1] is incompatible with number [2].
 - Or null [1] is incompatible with string [3].

   union.js:9:2
   9| (null: typeof x); // error: null ~> number|string
       ^^^^ [1]

References:
   union.js:8:13
   8| const x = f(42, 'foo');
                  ^^ [2]
   union.js:8:17
   8| const x = f(42, 'foo');
                      ^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ with-targs.js:9:1

Cannot cast `new FooClass()` to `Foo` because string [1] is incompatible with number [2] in type argument `T` [3].
[incompatible-cast]

   with-targs.js:9:1
   9| new FooClass() as Foo<number>; // error: string ~> number
      ^^^^^^^^^^^^^^

References:
   with-targs.js:4:36
   4| declare const FooClass: typeof Foo<string>;
                                         ^^^^^^ [1]
   with-targs.js:9:23
   9| new FooClass() as Foo<number>; // error: string ~> number
                            ^^^^^^ [2]
   with-targs.js:3:11
   3| class Foo<T> {}
                ^ [3]


Error ----------------------------------------------------------------------------------------------- with-targs.js:10:1

Cannot cast `barF()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   with-targs.js:10:1
   10| barF() as number; // error: string ~> number
       ^^^^^^

References:
   with-targs.js:7:32
    7| declare const barF: typeof bar<string>;
                                      ^^^^^^ [1]
   with-targs.js:10:11
   10| barF() as number; // error: string ~> number
                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- with-targs.js:11:1

Cannot cast `new FooClassStringExported()` to `FooClassExported` because string [1] is incompatible with number [2] in
type argument `T` [3]. [incompatible-cast]

   with-targs.js:11:1
   11| new FooClassStringExported() as FooClassExported<number>; // error: string ~> number
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   with-targs-exported.js:2:70
    2| declare export const FooClassStringExported: typeof FooClassExported<string>;
                                                                            ^^^^^^ [1]
   with-targs.js:11:50
   11| new FooClassStringExported() as FooClassExported<number>; // error: string ~> number
                                                        ^^^^^^ [2]
   with-targs-exported.js:1:31
    1| export class FooClassExported<T> {}
                                     ^ [3]


Error ----------------------------------------------------------------------------------------------- with-targs.js:12:1

Cannot cast `barFExported()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   with-targs.js:12:1
   12| barFExported() as number; // error: string ~> number
       ^^^^^^^^^^^^^^

References:
   with-targs-exported.js:5:47
    5| declare export const barFExported: typeof bar<string>;
                                                     ^^^^^^ [1]
   with-targs.js:12:19
   12| barFExported() as number; // error: string ~> number
                         ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- with-targs.js:14:17

Cannot instantiate `typeof barF` because function type [1] is not a polymorphic type. [incompatible-use]

   with-targs.js:14:17
   14| type Invalid1 = typeof barF<string>; // error
                       ^^^^^^^^^^^^^^^^^^^

References:
   with-targs.js:6:21
    6| declare function bar<T>(): T;
                           ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:15:17

Cannot instantiate `typeof FooClass` because class `Foo` [1] is not a polymorphic type. [incompatible-use]

   with-targs.js:15:17
   15| type Invalid2 = typeof FooClass<string>; // error
                       ^^^^^^^^^^^^^^^^^^^^^^^

References:
   with-targs.js:3:7
    3| class Foo<T> {}
             ^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:16:17

Cannot instantiate `typeof barFExported` because function type [1] is not a polymorphic type. [incompatible-use]

   with-targs.js:16:17
   16| type Invalid3 = typeof barFExported<string>; // error
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   with-targs-exported.js:4:21
    4| declare function bar<T>(): T;
                           ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:17:17

Cannot instantiate `typeof FooClassStringExported` because class `FooClassExported` [1] is not a polymorphic type.
[incompatible-use]

   with-targs.js:17:17
   17| type Invalid4 = typeof FooClassStringExported<string>; // error
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   with-targs-exported.js:1:14
    1| export class FooClassExported<T> {}
                    ^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:26:15

Cannot use `Invalid5` [1] with more than 1 type argument. [extra-type-arg]

   with-targs.js:26:15
   26| emptyValue as Invalid5; // error
                     ^^^^^^^^

References:
   with-targs.js:6:21
    6| declare function bar<T>(): T;
                           ^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:27:15

Cannot use `Invalid6` [1] with more than 1 type argument. [extra-type-arg]

   with-targs.js:27:15
   27| emptyValue as Invalid6; // error
                     ^^^^^^^^

References:
   with-targs.js:3:10
    3| class Foo<T> {}
                ^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:32:26

Cannot call `barGeneric` with function bound to `cb` because number [1] is incompatible with string [2] in the return
value. [incompatible-call]

   with-targs.js:32:26
   32| barGeneric<string>(() => 1); // error: number ~> string
                                ^ [1]

References:
   with-targs.js:32:12
   32| barGeneric<string>(() => 1); // error: number ~> string
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- with-targs.js:34:1

Cannot cast `barGeneric(...)` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   with-targs.js:34:1
   34| barGeneric(() => 1) as string; // error: number ~> string
       ^^^^^^^^^^^^^^^^^^^

References:
   with-targs.js:34:18
   34| barGeneric(() => 1) as string; // error: number ~> string
                        ^ [1]
   with-targs.js:34:24
   34| barGeneric(() => 1) as string; // error: number ~> string
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- with-targs.js:36:34

Cannot call `barGenericExported` with function bound to `cb` because number [1] is incompatible with string [2] in the
return value. [incompatible-call]

   with-targs.js:36:34
   36| barGenericExported<string>(() => 1); // error: number ~> string
                                        ^ [1]

References:
   with-targs.js:36:20
   36| barGenericExported<string>(() => 1); // error: number ~> string
                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- with-targs.js:38:1

Cannot cast `barGenericExported(...)` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   with-targs.js:38:1
   38| barGenericExported(() => 1) as string; // error: number ~> string
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   with-targs.js:38:26
   38| barGenericExported(() => 1) as string; // error: number ~> string
                                ^ [1]
   with-targs.js:38:32
   38| barGenericExported(() => 1) as string; // error: number ~> string
                                      ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- with-targs.js:43:15

Cannot instantiate `typeof EscapedGeneric.x` because empty [1] is not a polymorphic type. [incompatible-use]

   43| emptyValue as typeof EscapedGeneric.x<number, boolean>; // error: empty not polymorphic
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- with-targs.js:44:15

Cannot instantiate `typeof EscapedGenericExported.x` because empty [1] is not a polymorphic type. [incompatible-use]

   44| emptyValue as typeof EscapedGenericExported.x<number, boolean>; // error: empty not polymorphic
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]



Found 26 errors
