Error ----------------------------------------------------------------------------------------------------- maybe.js:9:2

Cannot cast `'foo'` to `typeof x` because string [1] is incompatible with number [2].

   maybe.js:9:2
   9| ('foo': typeof x); // error: string ~> number
       ^^^^^ [1]

References:
   maybe.js:8:11
   8| var x = f(42);
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:9:2

Cannot cast `null` to `typeof x` because null [1] is incompatible with number [2].

   optional.js:9:2
   9| (null: typeof x); // error: null ~> $Optional<number> (i.e., void|number)
       ^^^^ [1]

References:
   optional.js:8:11
   8| var x = f(42).p;
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:43:19

Cannot assign `MyClass1` to `b` because class `MyClass1` [1] is incompatible with `MyClass1` [2].

   typeof.js:43:19
   43| var b: MyClass1 = MyClass1;
                         ^^^^^^^^

References:
   typeof.js:11:7
   11| class MyClass1 {
             ^^^^^^^^ [1]
   typeof.js:43:8
   43| var b: MyClass1 = MyClass1;
              ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:53:26

Cannot assign `new MyClass2()` to `c` because `MyClass2` [1] is incompatible with class `MyClass2` [2].

   typeof.js:53:26
   53| var c: typeof MyClass2 = new MyClass2();
                                ^^^^^^^^^^^^^^ [1]

References:
   typeof.js:53:8
   53| var c: typeof MyClass2 = new MyClass2();
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:61:26

Cannot assign `'asdf'` to `e` because string [1] is incompatible with number [2].

   typeof.js:61:26
   61| var e: typeof numValue = 'asdf'; // Error: string ~> number
                                ^^^^^^ [1]

References:
   typeof.js:61:8
   61| var e: typeof numValue = 'asdf'; // Error: string ~> number
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:73:15

Cannot reference type `numberAlias` [1] from a value position.

   typeof.js:73:15
   73| var f: typeof numberAlias = 42; // Error: 'typeof <<type-alias>>' makes no sense...
                     ^^^^^^^^^^^

References:
   typeof.js:67:6
   67| type numberAlias = number;
            ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- typeof.js:82:18

Cannot use `Map` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`.

   82|  var keys: $Keys<Map> = "A";  // Error: ineligible value used in type anno
                        ^^^


Error ----------------------------------------------------------------------------------------------------- union.js:9:2

Cannot cast `null` to `typeof x` because:
 - Either cannot call `f` with `42` bound to `a` because null [1] is incompatible with number [2].
 - Or cannot call `f` with `'foo'` bound to `b` because null [1] is incompatible with string [3].

   union.js:9:2
   9| (null: typeof x); // error: null ~> number|string
       ^^^^ [1]

References:
   union.js:8:13
   8| const x = f(42, 'foo');
                  ^^ [2]
   union.js:8:17
   8| const x = f(42, 'foo');
                      ^^^^^ [3]



Found 8 errors
