Error ------------------------------------------------------------------------------------------------- collator.js:5:29

Cannot assign `new Intl.Collator()` to `c` because `Intl$Collator` [1] is incompatible with `Intl$PluralRules` [2].

   collator.js:5:29
   5| const c: Intl$PluralRules = new Intl.Collator() // incorrect
                                  ^^^^^^^^^^^^^^^^^^^ [1]

References:
   collator.js:5:10
   5| const c: Intl$PluralRules = new Intl.Collator() // incorrect
               ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- collator.js:6:15

Cannot call `Intl.Collator` with `1` bound to `locales` because number [1] is incompatible with string [2].

   collator.js:6:15
    6| Intl.Collator(1, {
                     ^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- collator.js:6:18

Cannot call `Intl.Collator` with object literal bound to `options` because:
 - string [1] is incompatible with enum [2] in property `localeMatcher`.
 - string [3] is incompatible with enum [4] in property `usage`.
 - string [5] is incompatible with enum [6] in property `sensitivity`.
 - null [7] is incompatible with boolean [8] in property `ignorePunctuation`.
 - number [9] is incompatible with boolean [10] in property `numeric`.
 - string [11] is incompatible with enum [12] in property `caseFirst`.

   collator.js:6:18
                        v
    6| Intl.Collator(1, {
    7|   localeMatcher: 'look fit',
    8|   usage: 'find',
    9|   sensitivity: '',
   10|   ignorePunctuation: null,
   11|   numeric: 1,
   12|   caseFirst: 'true'
   13| }) // incorrect
       ^

References:
   collator.js:7:18
    7|   localeMatcher: 'look fit',
                        ^^^^^^^^^^ [1]
   <BUILTINS>/intl.js:48:19
   48|   localeMatcher?: 'lookup' | 'best fit',
                         ^^^^^^^^^^^^^^^^^^^^^ [2]
   collator.js:8:10
    8|   usage: 'find',
                ^^^^^^ [3]
   <BUILTINS>/intl.js:49:11
   49|   usage?: 'sort' | 'search',
                 ^^^^^^^^^^^^^^^^^ [4]
   collator.js:9:16
    9|   sensitivity: '',
                      ^^ [5]
   <BUILTINS>/intl.js:50:17
   50|   sensitivity?: 'base' | 'accent' | 'case' | 'variant',
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [6]
   collator.js:10:22
   10|   ignorePunctuation: null,
                            ^^^^ [7]
   <BUILTINS>/intl.js:51:23
   51|   ignorePunctuation?: boolean,
                             ^^^^^^^ [8]
   collator.js:11:12
   11|   numeric: 1,
                  ^ [9]
   <BUILTINS>/intl.js:52:13
   52|   numeric?: boolean,
                   ^^^^^^^ [10]
   collator.js:12:14
   12|   caseFirst: 'true'
                    ^^^^^^ [11]
   <BUILTINS>/intl.js:53:15
   53|   caseFirst?: 'upper' | 'lower' | 'false',
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [12]


Error ------------------------------------------------------------------------------------------------- collator.js:24:5

Cannot resolve name `Collator`.

   24| new Collator().format() // incorrect
           ^^^^^^^^


Error ----------------------------------------------------------------------------------------- date_time_format.js:5:30

Cannot assign `new Intl.DateTimeFormat()` to `c` because `Intl$DateTimeFormat` [1] is incompatible with
`Intl$NumberFormat` [2].

   date_time_format.js:5:30
   5| const c: Intl$NumberFormat = new Intl.DateTimeFormat() // incorrect
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   date_time_format.js:5:10
   5| const c: Intl$NumberFormat = new Intl.DateTimeFormat() // incorrect
               ^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- date_time_format.js:6:21

Cannot call `Intl.DateTimeFormat` with `1` bound to `locales` because number [1] is incompatible with string [2].

   date_time_format.js:6:21
    6| Intl.DateTimeFormat(1, {
                           ^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- date_time_format.js:6:24

Cannot call `Intl.DateTimeFormat` with object literal bound to `options` because:
 - string [1] is incompatible with enum [2] in property `localeMatcher`.
 - number [3] is incompatible with string [4] in property `timeZone`.
 - string [5] is incompatible with boolean [6] in property `hour12`.
 - string [7] is incompatible with enum [8] in property `formatMatcher`.
 - string [9] is incompatible with enum [10] in property `weekday`.
 - string [11] is incompatible with enum [12] in property `era`.
 - string [13] is incompatible with enum [14] in property `year`.
 - string [15] is incompatible with enum [16] in property `month`.
 - string [17] is incompatible with enum [18] in property `day`.
 - string [19] is incompatible with enum [20] in property `hour`.
 - string [21] is incompatible with enum [22] in property `minute`.
 - string [23] is incompatible with enum [24] in property `second`.
 - string [25] is incompatible with enum [26] in property `timeZoneName`.

   date_time_format.js:6:24
                               v
     6| Intl.DateTimeFormat(1, {
     7|   localeMatcher: 'look',
     8|   timeZone: 1,
     9|   hour12: '',
    10|   formatMatcher: 'basic fit',
    11|   weekday: '2-digit',
    12|   era: '',
    13|   year: '',
    14|   month: '',
    15|   day: '',
    16|   hour: '',
    17|   minute: 'long',
    18|   second: 'short',
    19|   timeZoneName: 'narrow'
    20| }) // incorrect
        ^

References:
   date_time_format.js:7:18
     7|   localeMatcher: 'look',
                         ^^^^^^ [1]
   <BUILTINS>/intl.js:101:19
   101|   localeMatcher?: 'lookup' | 'best fit',
                          ^^^^^^^^^^^^^^^^^^^^^ [2]
   date_time_format.js:8:13
     8|   timeZone: 1,
                    ^ [3]
   <BUILTINS>/intl.js:102:14
   102|   timeZone?: string,
                     ^^^^^^ [4]
   date_time_format.js:9:11
     9|   hour12: '',
                  ^^ [5]
   <BUILTINS>/intl.js:103:12
   103|   hour12?: boolean,
                   ^^^^^^^ [6]
   date_time_format.js:10:18
    10|   formatMatcher: 'basic fit',
                         ^^^^^^^^^^^ [7]
   <BUILTINS>/intl.js:104:19
   104|   formatMatcher?: 'basic' | 'best fit',
                          ^^^^^^^^^^^^^^^^^^^^ [8]
   date_time_format.js:11:12
    11|   weekday: '2-digit',
                   ^^^^^^^^^ [9]
   <BUILTINS>/intl.js:105:13
   105|   weekday?: 'narrow' | 'short' | 'long',
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [10]
   date_time_format.js:12:8
    12|   era: '',
               ^^ [11]
   <BUILTINS>/intl.js:106:9
   106|   era?: 'narrow' | 'short' | 'long',
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [12]
   date_time_format.js:13:9
    13|   year: '',
                ^^ [13]
   <BUILTINS>/intl.js:107:10
   107|   year?: 'numeric' | '2-digit',
                 ^^^^^^^^^^^^^^^^^^^^^ [14]
   date_time_format.js:14:10
    14|   month: '',
                 ^^ [15]
   <BUILTINS>/intl.js:108:11
   108|   month?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [16]
   date_time_format.js:15:8
    15|   day: '',
               ^^ [17]
   <BUILTINS>/intl.js:109:9
   109|   day?: 'numeric' | '2-digit',
                ^^^^^^^^^^^^^^^^^^^^^ [18]
   date_time_format.js:16:9
    16|   hour: '',
                ^^ [19]
   <BUILTINS>/intl.js:110:10
   110|   hour?: 'numeric' | '2-digit',
                 ^^^^^^^^^^^^^^^^^^^^^ [20]
   date_time_format.js:17:11
    17|   minute: 'long',
                  ^^^^^^ [21]
   <BUILTINS>/intl.js:111:12
   111|   minute?: 'numeric' | '2-digit',
                   ^^^^^^^^^^^^^^^^^^^^^ [22]
   date_time_format.js:18:11
    18|   second: 'short',
                  ^^^^^^^ [23]
   <BUILTINS>/intl.js:112:12
   112|   second?: 'numeric' | '2-digit',
                   ^^^^^^^^^^^^^^^^^^^^^ [24]
   date_time_format.js:19:17
    19|   timeZoneName: 'narrow'
                        ^^^^^^^^ [25]
   <BUILTINS>/intl.js:113:18
   113|   timeZoneName?: 'short' | 'long',
                         ^^^^^^^^^^^^^^^^ [26]


Error ----------------------------------------------------------------------------------------- date_time_format.js:38:5

Cannot resolve name `DateTimeFormat`.

   38| new DateTimeFormat().select() // incorrect
           ^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- intl.js:2:19

Cannot assign `Intl.getCanonicalLocales()` to `a` because array type [1] is incompatible with string [2].

   intl.js:2:19
    2| const a: string = Intl.getCanonicalLocales(); // incorrect
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:13:53
   13|   getCanonicalLocales?: (locales?: Intl$Locales) => Intl$Locale[],
                                                           ^^^^^^^^^^^^^ [1]
   intl.js:2:10
    2| const a: string = Intl.getCanonicalLocales(); // incorrect
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- intl.js:2:19

Cannot call `Intl.getCanonicalLocales` because undefined [1] is not a function.

   intl.js:2:19
    2| const a: string = Intl.getCanonicalLocales(); // incorrect
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:13:25
   13|   getCanonicalLocales?: (locales?: Intl$Locales) => Intl$Locale[],
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- intl.js:5:21

Cannot assign `getCanonicalLocales()` to `b` because array type [1] is incompatible with string [2].

   intl.js:5:21
    5|   const b: string = getCanonicalLocales(); // incorrect
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:13:53
   13|   getCanonicalLocales?: (locales?: Intl$Locales) => Intl$Locale[],
                                                           ^^^^^^^^^^^^^ [1]
   intl.js:5:12
    5|   const b: string = getCanonicalLocales(); // incorrect
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- intl.js:6:43

Cannot call `getCanonicalLocales` with `null` bound to `locales` because:
 - Either null [1] is incompatible with string [2].
 - Or null [1] is incompatible with array type [3].

   intl.js:6:43
    6|   const c: string[] = getCanonicalLocales(null); // incorrect
                                                 ^^^^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]
   <BUILTINS>/intl.js:18:35
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                                         ^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- intl.js:7:43

Cannot call `getCanonicalLocales` with array literal bound to `locales` because:
 - number [1] is incompatible with string [2] in array element.
 - number [3] is incompatible with string [2] in array element.

   intl.js:7:43
    7|   const d: string[] = getCanonicalLocales([ 1, 2 ]); // incorrect
                                                 ^^^^^^^^

References:
   intl.js:7:45
    7|   const d: string[] = getCanonicalLocales([ 1, 2 ]); // incorrect
                                                   ^ [1]
   <BUILTINS>/intl.js:18:35
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                                         ^^^^^^^^^^^ [2]
   intl.js:7:48
    7|   const d: string[] = getCanonicalLocales([ 1, 2 ]); // incorrect
                                                      ^ [3]


Error ---------------------------------------------------------------------------------------------------- intl.js:13:11

Cannot get `Intl.Unknown` because property `Unknown` is missing in object type [1].

   intl.js:13:11
   13| const h = Intl.Unknown; // incorrect
                 ^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:8:19
                         v
    8| declare var Intl: {
    9|   Collator: Class<Intl$Collator>,
   10|   DateTimeFormat: Class<Intl$DateTimeFormat>,
   11|   NumberFormat: Class<Intl$NumberFormat>,
   12|   PluralRules: ?Class<Intl$PluralRules>,
   13|   getCanonicalLocales?: (locales?: Intl$Locales) => Intl$Locale[],
   14|   ...
   15| }
       ^ [1]


Error -------------------------------------------------------------------------------------------- number_format.js:5:32

Cannot assign `new Intl.NumberFormat()` to `c` because `Intl$NumberFormat` [1] is incompatible with
`Intl$DateTimeFormat` [2].

   number_format.js:5:32
   5| const c: Intl$DateTimeFormat = new Intl.NumberFormat() // incorrect
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   number_format.js:5:10
   5| const c: Intl$DateTimeFormat = new Intl.NumberFormat() // incorrect
               ^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- number_format.js:6:19

Cannot call `Intl.NumberFormat` with `1` bound to `locales` because number [1] is incompatible with string [2].

   number_format.js:6:19
    6| Intl.NumberFormat(1, {
                         ^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- number_format.js:6:22

Cannot call `Intl.NumberFormat` with object literal bound to `options` because:
 - string [1] is incompatible with enum [2] in property `localeMatcher`.
 - string [3] is incompatible with enum [4] in property `style`.
 - number [5] is incompatible with string [6] in property `currency`.
 - string [7] is incompatible with enum [8] in property `currencyDisplay`.
 - number [9] is incompatible with boolean [10] in property `useGrouping`.
 - object literal [11] is incompatible with number [12] in property `minimumIntegerDigits`.
 - string [13] is incompatible with number [14] in property `minimumFractionDigits`.
 - null [15] is incompatible with number [16] in property `maximumFractionDigits`.
 - string [17] is incompatible with number [18] in property `minimumSignificantDigits`.
 - null [19] is incompatible with number [20] in property `maximumSignificantDigits`.

   number_format.js:6:22
                             v
     6| Intl.NumberFormat(1, {
     7|   localeMatcher: 'best',
     8|   style: 'octal',
     9|   currency: 123,
    10|   currencyDisplay: 'sym',
    11|   useGrouping: 5,
    12|   minimumIntegerDigits: {},
    13|   minimumFractionDigits: '',
    14|   maximumFractionDigits: null,
    15|   minimumSignificantDigits: '',
    16|   maximumSignificantDigits: null
    17| }) // incorrect
        ^

References:
   number_format.js:7:18
     7|   localeMatcher: 'best',
                         ^^^^^^ [1]
   <BUILTINS>/intl.js:149:19
   149|   localeMatcher?: 'lookup' | 'best fit',
                          ^^^^^^^^^^^^^^^^^^^^^ [2]
   number_format.js:8:10
     8|   style: 'octal',
                 ^^^^^^^ [3]
   <BUILTINS>/intl.js:150:11
   150|   style?: 'decimal' | 'currency' | 'percent',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   number_format.js:9:13
     9|   currency: 123,
                    ^^^ [5]
   <BUILTINS>/intl.js:151:14
   151|   currency?: string,
                     ^^^^^^ [6]
   number_format.js:10:20
    10|   currencyDisplay: 'sym',
                           ^^^^^ [7]
   <BUILTINS>/intl.js:152:21
   152|   currencyDisplay?: 'symbol' | 'code' | 'name',
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ [8]
   number_format.js:11:16
    11|   useGrouping: 5,
                       ^ [9]
   <BUILTINS>/intl.js:153:17
   153|   useGrouping?: boolean,
                        ^^^^^^^ [10]
   number_format.js:12:25
    12|   minimumIntegerDigits: {},
                                ^^ [11]
   <BUILTINS>/intl.js:154:26
   154|   minimumIntegerDigits?: number,
                                 ^^^^^^ [12]
   number_format.js:13:26
    13|   minimumFractionDigits: '',
                                 ^^ [13]
   <BUILTINS>/intl.js:155:27
   155|   minimumFractionDigits?: number,
                                  ^^^^^^ [14]
   number_format.js:14:26
    14|   maximumFractionDigits: null,
                                 ^^^^ [15]
   <BUILTINS>/intl.js:156:27
   156|   maximumFractionDigits?: number,
                                  ^^^^^^ [16]
   number_format.js:15:29
    15|   minimumSignificantDigits: '',
                                    ^^ [17]
   <BUILTINS>/intl.js:157:30
   157|   minimumSignificantDigits?: number,
                                     ^^^^^^ [18]
   number_format.js:16:29
    16|   maximumSignificantDigits: null
                                    ^^^^ [19]
   <BUILTINS>/intl.js:158:30
   158|   maximumSignificantDigits?: number,
                                     ^^^^^^ [20]


Error -------------------------------------------------------------------------------------------- number_format.js:32:5

Cannot resolve name `NumberFormat`.

   32| new NumberFormat().select() // incorrect
           ^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- plural_rules.js:3:11

Cannot call `Intl.PluralRules` because:
 - null or undefined [1] is not a function.
 - a call signature declaring the expected parameter / return type is missing in statics of `Intl$PluralRules` [2].

   plural_rules.js:3:11
     3| const a = Intl.PluralRules(); // incorrect
                  ^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:12:16
    12|   PluralRules: ?Class<Intl$PluralRules>,
                       ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/intl.js:162:15
   162| declare class Intl$PluralRules {
                      ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- plural_rules.js:6:13

Cannot call `PluralRules` because a call signature declaring the expected parameter / return type is missing in statics
of `Intl$PluralRules` [1].

   plural_rules.js:6:13
     6|   const b = PluralRules(); // incorrect
                    ^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:162:15
   162| declare class Intl$PluralRules {
                      ^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- plural_rules.js:8:19

Cannot call `PluralRules` with `1` bound to `locales` because number [1] is incompatible with string [2].

   plural_rules.js:8:19
    8|   new PluralRules(1); // incorrect
                         ^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- plural_rules.js:11:25

Cannot call `PluralRules` with object literal bound to `options` because:
 - string [1] is incompatible with enum [2] in property `localeMatcher`.
 - string [3] is incompatible with enum [4] in property `type`.
 - string [5] is incompatible with number [6] in property `minimumIntegerDigits`.
 - `Intl$PluralRules` [7] is incompatible with number [8] in property `minimumSignificantDigits`.
 - string [9] is incompatible with number [10] in property `maximumSignificantDigits`.

   plural_rules.js:11:25
                                v
    11|   new PluralRules('en', {
    12|     localeMatcher: 'best one',
    13|     type: 'count',
    14|     minimumIntegerDigits: '',
    15|     minimumFractionDigits: a,
    16|     maximumFractionDigits: b,
    17|     minimumSignificantDigits: c,
    18|     maximumSignificantDigits: ''
    19|   }); // all kinds of incorrect
          ^

References:
   plural_rules.js:12:20
    12|     localeMatcher: 'best one',
                           ^^^^^^^^^^ [1]
   <BUILTINS>/intl.js:188:19
   188|   localeMatcher?: 'lookup' | 'best fit',
                          ^^^^^^^^^^^^^^^^^^^^^ [2]
   plural_rules.js:13:11
    13|     type: 'count',
                  ^^^^^^^ [3]
   <BUILTINS>/intl.js:189:10
   189|   type?: 'cardinal' | 'ordinal',
                 ^^^^^^^^^^^^^^^^^^^^^^ [4]
   plural_rules.js:14:27
    14|     minimumIntegerDigits: '',
                                  ^^ [5]
   <BUILTINS>/intl.js:190:26
   190|   minimumIntegerDigits?: number,
                                 ^^^^^^ [6]
   plural_rules.js:7:13
     7|   const c = new PluralRules(); // correct
                    ^^^^^^^^^^^^^^^^^ [7]
   <BUILTINS>/intl.js:193:30
   193|   minimumSignificantDigits?: number,
                                     ^^^^^^ [8]
   plural_rules.js:18:31
    18|     maximumSignificantDigits: ''
                                      ^^ [9]
   <BUILTINS>/intl.js:194:30
   194|   maximumSignificantDigits?: number,
                                     ^^^^^^ [10]


Error --------------------------------------------------------------------------------------------- plural_rules.js:30:3

Cannot call `new PluralRules().format` because property `format` is missing in `Intl$PluralRules` [1].

   plural_rules.js:30:3
   30|   new PluralRules().format() // incorrect
         ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   plural_rules.js:30:3
   30|   new PluralRules().format() // incorrect
         ^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- plural_rules.js:31:3

Cannot call `new PluralRules().select` because function [1] requires another argument.

   plural_rules.js:31:3
    31|   new PluralRules().select() // incorrect
          ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:168:3
   168|   select (number): Intl$PluralRule;
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- plural_rules.js:37:3

Cannot call `PluralRules.getCanonicalLocales` because property `getCanonicalLocales` is missing in statics of
`Intl$PluralRules` [1].

   plural_rules.js:37:3
    37|   PluralRules.getCanonicalLocales() // incorrect
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/intl.js:162:15
   162| declare class Intl$PluralRules {
                      ^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- plural_rules.js:39:34

Cannot call `PluralRules.supportedLocalesOf` with `1` bound to `locales` because number [1] is incompatible with
string [2].

   plural_rules.js:39:34
   39|   PluralRules.supportedLocalesOf(1) // incorrect
                                        ^ [1]

References:
   <BUILTINS>/intl.js:18:21
   18| type Intl$Locales = Intl$Locale | Intl$Locale[]
                           ^^^^^^^^^^^ [2]



Found 58 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
