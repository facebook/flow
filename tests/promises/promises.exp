all.js:13
 13:   (a: number);  // Error: string ~> number
        ^ string. This type is incompatible with
 13:   (a: number);  // Error: string ~> number
           ^^^^^^ number

all.js:14
 14:   (b: boolean); // Error: number ~> boolean
        ^ number. This type is incompatible with
 14:   (b: boolean); // Error: number ~> boolean
           ^^^^^^^ boolean

all.js:15
 15:   (c: string);  // Error: boolean ~> string
        ^ boolean. This type is incompatible with
 15:   (c: string);  // Error: boolean ~> string
           ^^^^^^ string

all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ boolean. This type is incompatible with
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
             ^^^^ undefined

all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ number. This type is incompatible with
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
             ^^^^ undefined

all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ string. This type is incompatible with
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
             ^^^^ undefined

all.js:24
 24: Promise.all(); // Error: expected array instead of undefined (too few arguments)
     ^^^^^^^^^^^^^ call of method `all`. Expected array instead of possibly undefined value
 24: Promise.all(); // Error: expected array instead of undefined (too few arguments)
     ^^^^^^^^^^^^^ undefined (too few arguments)

all.js:27
 27: Promise.all(0); // Error: expected array instead of number
     ^^^^^^^^^^^^^^ call of method `all`. Expected array instead of
 27: Promise.all(0); // Error: expected array instead of number
                 ^ number

promise.js:10
 10: new Promise(function(resolve, reject) {
     ^ call of method `then`
 11:   resolve(0);
               ^ number. This type is incompatible with
union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
  Member 1:
  type application of identifier `Promise`. See lib: core.js:478
  Error:
   11:   resolve(0);
                 ^ number. This type is incompatible with
  Promise. See lib: core.js:478
  Member 2:
   10: new Promise(function(resolve, reject) {
       ^ type parameter `R` of constructor call
  Error:
   16:   var b: string = num; // Error: number ~> string
                         ^^^ number. This type is incompatible with
   16:   var b: string = num; // Error: number ~> string
                ^^^^^^ string

promise.js:20
 20: new Promise((resolve, reject) => resolve(0))
     ^ call of method `then`
 20: new Promise((resolve, reject) => resolve(0))
                                              ^ number. This type is incompatible with
union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
  Member 1:
  type application of identifier `Promise`. See lib: core.js:478
  Error:
   20: new Promise((resolve, reject) => resolve(0))
                                                ^ number. This type is incompatible with
  Promise. See lib: core.js:478
  Member 2:
   20: new Promise((resolve, reject) => resolve(0))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `R` of constructor call
  Error:
   25:     var b: string = num; // Error: number ~> string
                           ^^^ number. This type is incompatible with
   25:     var b: string = num; // Error: number ~> string
                  ^^^^^^ string

promise.js:30
 30:   resolve(new Promise(function(resolve, reject) {
               ^ constructor call
 30:   resolve(new Promise(function(resolve, reject) {
               ^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
  Member 1:
  type application of identifier `Promise`. See lib: core.js:478
  Error:
   31:     resolve(0);
                   ^ number. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
    Member 1:
    type application of identifier `Promise`. See lib: core.js:478
    Error:
     31:     resolve(0);
                     ^ number. This type is incompatible with
    Promise. See lib: core.js:478
    Member 2:
     30:   resolve(new Promise(function(resolve, reject) {
                   ^ type parameter `R` of constructor call
    Error:
     35:   var b: string = num; // Error: number ~> string
                           ^^^ number. This type is incompatible with
     35:   var b: string = num; // Error: number ~> string
                  ^^^^^^ string
  Member 2:
   29: new Promise(function(resolve, reject) {
       ^ type parameter `R` of constructor call
  Error:
   34:   var a: number = num;
                         ^^^ Promise. This type is incompatible with
   34:   var a: number = num;
                ^^^^^^ number

promise.js:41
 41:     resolve(new Promise(function(resolve, reject) {
                 ^ constructor call
 41:     resolve(new Promise(function(resolve, reject) {
                 ^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
  Member 1:
  type application of identifier `Promise`. See lib: core.js:478
  Error:
   42:       resolve(0);
                     ^ number. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
    Member 1:
    type application of identifier `Promise`. See lib: core.js:478
    Error:
     42:       resolve(0);
                       ^ number. This type is incompatible with
    Promise. See lib: core.js:478
    Member 2:
     41:     resolve(new Promise(function(resolve, reject) {
                     ^ type parameter `R` of constructor call
    Error:
     47:   var b: string = num; // Error: number ~> string
                           ^^^ number. This type is incompatible with
     47:   var b: string = num; // Error: number ~> string
                  ^^^^^^ string
  Member 2:
   40:   resolve(new Promise(function(resolve, reject) {
                 ^ type parameter `R` of constructor call
  Error:
   46:   var a: number = num;
                         ^^^ Promise. This type is incompatible with
   46:   var a: number = num;
                ^^^^^^ number

promise.js:51
 51: new Promise(function(resolve, reject) {
     ^ call of method `then`
 53:     resolve(42);
                 ^^ number. This type is incompatible with
union: type application of identifier `Promise` | type parameter `R` of constructor call. See lib: core.js:478
  Member 1:
  type application of identifier `Promise`. See lib: core.js:478
  Error:
   53:     resolve(42);
                   ^^ number. This type is incompatible with
  Promise. See lib: core.js:478
  Member 2:
   51: new Promise(function(resolve, reject) {
       ^ type parameter `R` of constructor call
  Error:
   63:   var c: string = numOrStr; // Error: number|string -> string
                         ^^^^^^^^ number. This type is incompatible with
   63:   var c: string = numOrStr; // Error: number|string -> string
                ^^^^^^ string

promise.js:115
115: Promise.resolve(0).then(function(num) {
     ^ call of method `then`
115: Promise.resolve(0).then(function(num) {
                     ^ number. This type is incompatible with
union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
  Member 1:
  type application of identifier `Promise`. See lib: core.js:491
  Error:
  115: Promise.resolve(0).then(function(num) {
                       ^ number. This type is incompatible with
  Promise. See lib: core.js:491
  Member 2:
  115: Promise.resolve(0).then(function(num) {
       ^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
  Error:
  117:   var b: string = num; // Error: number ~> string
                         ^^^ number. This type is incompatible with
  117:   var b: string = num; // Error: number ~> string
                ^^^^^^ string

promise.js:121
121: Promise.resolve(Promise.resolve(0)).then(function(num) {
                     ^^^^^^^^^^^^^^^^^^ call of method `resolve`
121: Promise.resolve(Promise.resolve(0)).then(function(num) {
                     ^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
  Member 1:
  type application of identifier `Promise`. See lib: core.js:491
  Error:
  121: Promise.resolve(Promise.resolve(0)).then(function(num) {
                                       ^ number. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    121: Promise.resolve(Promise.resolve(0)).then(function(num) {
                                         ^ number. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    121: Promise.resolve(Promise.resolve(0)).then(function(num) {
                         ^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    123:   var b: string = num; // Error: number ~> string
                           ^^^ number. This type is incompatible with
    123:   var b: string = num; // Error: number ~> string
                  ^^^^^^ string
  Member 2:
  121: Promise.resolve(Promise.resolve(0)).then(function(num) {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
  Error:
  122:   var a: number = num;
                         ^^^ Promise. This type is incompatible with
  122:   var a: number = num;
                ^^^^^^ number

promise.js:127
127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                                     ^^^^^^^^^^^^^^^^^^ call of method `resolve`
127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                                     ^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
  Member 1:
  type application of identifier `Promise`. See lib: core.js:491
  Error:
  127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                                                       ^ number. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                                                         ^ number. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                                         ^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    129:   var b: string = num; // Error: number ~> string
                           ^^^ number. This type is incompatible with
    129:   var b: string = num; // Error: number ~> string
                  ^^^^^^ string
  Member 2:
  127: Promise.resolve(Promise.resolve(Promise.resolve(0))).then(function(num) {
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
  Error:
  128:   var a: number = num;
                         ^^^ Promise. This type is incompatible with
  128:   var a: number = num;
                ^^^^^^ number

promise.js:157
157: Promise.resolve(0)
     ^ call of method `then`
158:   .then(function(num) { return 'asdf'; })
                                    ^^^^^^ string. This type is incompatible with
union: type application of identifier `Promise` | type parameter `U` of call of method `then`. See lib: core.js:483
  Member 1:
  type application of identifier `Promise`. See lib: core.js:483
  Error:
  158:   .then(function(num) { return 'asdf'; })
                                      ^^^^^^ string. This type is incompatible with
  Promise. See lib: core.js:483
  Member 2:
  157: Promise.resolve(0)
       ^ type parameter `U` of call of method `then`
  Error:
  161:     var b: number = str; // Error: string ~> number
                           ^^^ string. This type is incompatible with
  161:     var b: number = str; // Error: string ~> number
                  ^^^^^^ number

promise.js:166
166:   .then(function(num) { return Promise.resolve('asdf'); })
                                    ^^^^^^^^^^^^^^^^^^^^^^^ call of method `resolve`
166:   .then(function(num) { return Promise.resolve('asdf'); })
                                    ^^^^^^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `U` of call of method `then`. See lib: core.js:483
  Member 1:
  type application of identifier `Promise`. See lib: core.js:483
  Error:
  166:   .then(function(num) { return Promise.resolve('asdf'); })
                                                      ^^^^^^ string. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    166:   .then(function(num) { return Promise.resolve('asdf'); })
                                                        ^^^^^^ string. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    166:   .then(function(num) { return Promise.resolve('asdf'); })
                                        ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    169:     var b: number = str; // Error: string ~> number
                             ^^^ string. This type is incompatible with
    169:     var b: number = str; // Error: string ~> number
                    ^^^^^^ number
  Member 2:
  165: Promise.resolve(0)
       ^ type parameter `U` of call of method `then`
  Error:
  168:     var a: string = str;
                           ^^^ Promise. This type is incompatible with
  168:     var a: string = str;
                  ^^^^^^ string

promise.js:174
174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                    ^^^^^^^^^^^^^^^^^^^^^^^ call of method `resolve`
174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                    ^^^^^^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
  Member 1:
  type application of identifier `Promise`. See lib: core.js:491
  Error:
  174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                                      ^^^^^^ string. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                                        ^^^^^^ string. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                        ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    177:     var b: number = str; // Error: string ~> number
                             ^^^ string. This type is incompatible with
    177:     var b: number = str; // Error: string ~> number
                    ^^^^^^ number
  Member 2:
  174:   .then(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
  Error:
  176:     var a: string = str;
                           ^^^ Promise. This type is incompatible with
  176:     var a: string = str;
                  ^^^^^^ string

promise.js:197
197: Promise.reject(0)
     ^ call of method `then`
198:   .catch(function(num) { return 'asdf'; })
                                     ^^^^^^ string. This type is incompatible with
union: ?type application of identifier `Promise` | type parameter `U` of call of method `catch`. See lib: core.js:488
  Member 1:
  ?type application of identifier `Promise`. See lib: core.js:488
  Error:
  198:   .catch(function(num) { return 'asdf'; })
                                       ^^^^^^ string. This type is incompatible with
  Promise. See lib: core.js:488
  Member 2:
  197: Promise.reject(0)
       ^ type parameter `U` of call of method `catch`
  Error:
  201:     var b: number = str; // Error: string ~> number
                           ^^^ string. This type is incompatible with
  201:     var b: number = str; // Error: string ~> number
                  ^^^^^^ number

promise.js:206
206:   .catch(function(num) { return Promise.resolve('asdf'); })
                                     ^^^^^^^^^^^^^^^^^^^^^^^ call of method `resolve`
206:   .catch(function(num) { return Promise.resolve('asdf'); })
                                     ^^^^^^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: ?type application of identifier `Promise` | type parameter `U` of call of method `catch`. See lib: core.js:488
  Member 1:
  ?type application of identifier `Promise`. See lib: core.js:488
  Error:
  206:   .catch(function(num) { return Promise.resolve('asdf'); })
                                                       ^^^^^^ string. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    206:   .catch(function(num) { return Promise.resolve('asdf'); })
                                                         ^^^^^^ string. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    206:   .catch(function(num) { return Promise.resolve('asdf'); })
                                         ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    209:     var b: number = str; // Error: string ~> number
                             ^^^ string. This type is incompatible with
    209:     var b: number = str; // Error: string ~> number
                    ^^^^^^ number
  Member 2:
  205: Promise.reject(0)
       ^ type parameter `U` of call of method `catch`
  Error:
  208:     var a: string = str;
                           ^^^ Promise. This type is incompatible with
  208:     var a: string = str;
                  ^^^^^^ string

promise.js:214
214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                     ^^^^^^^^^^^^^^^^^^^^^^^ call of method `resolve`
214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                     ^^^^^^^^^^^^^^^^^^^^^^^ Promise. This type is incompatible with
union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
  Member 1:
  type application of identifier `Promise`. See lib: core.js:491
  Error:
  214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                                       ^^^^^^ string. This type is incompatible with
  union: type application of identifier `Promise` | type parameter `T` of call of method `resolve`. See lib: core.js:491
    Member 1:
    type application of identifier `Promise`. See lib: core.js:491
    Error:
    214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                                         ^^^^^^ string. This type is incompatible with
    Promise. See lib: core.js:491
    Member 2:
    214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                                         ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
    Error:
    217:     var b: number = str; // Error: string ~> number
                             ^^^ string. This type is incompatible with
    217:     var b: number = str; // Error: string ~> number
                    ^^^^^^ number
  Member 2:
  214:   .catch(function(num) { return Promise.resolve(Promise.resolve('asdf')); })
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `resolve`
  Error:
  216:     var a: string = str;
                           ^^^ Promise. This type is incompatible with
  216:     var a: string = str;
                  ^^^^^^ string

resolve_global.js:35
 35:   return Promise.resolve(0);
                      ^^^^^^^ property `resolve`. Property not found in
 35:   return Promise.resolve(0);
              ^^^^^^^ statics of Promise

resolve_global.js:40
 40:   return 0;
       ^^^^^^^^^ async return
 40:   return 0;
       ^^^^^^^^^ Promise. Expected polymorphic type instead of
 39: async function baz(): Promise<number> {
                           ^^^^^^^^^^^^^^^ class type: Promise


Found 24 errors
