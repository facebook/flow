Error ------------------------------------------------------------------------------------------------ array_rest.js:7:2

Cannot cast `a` to undefined because number [1] is incompatible with undefined [2].

   array_rest.js:7:2
   7| (a: void); // error: number ~> void
       ^

References:
   array_rest.js:1:11
   1| let xs = [0, "", true];
                ^ [1]
   array_rest.js:7:5
   7| (a: void); // error: number ~> void
          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ array_rest.js:8:2

Cannot cast `b` to undefined because string [1] is incompatible with undefined [2].

   array_rest.js:8:2
   8| (b: void); // error: string ~> void
       ^

References:
   array_rest.js:1:14
   1| let xs = [0, "", true];
                   ^^ [1]
   array_rest.js:8:5
   8| (b: void); // error: string ~> void
          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ array_rest.js:9:2

Cannot cast `c` to undefined because boolean [1] is incompatible with undefined [2].

   array_rest.js:9:2
   9| (c: void); // error: boolean ~> void
       ^

References:
   array_rest.js:1:18
   1| let xs = [0, "", true];
                       ^^^^ [1]
   array_rest.js:9:5
   9| (c: void); // error: boolean ~> void
          ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_rest.js:10:2

Cannot cast `d` to undefined because:
 - number [1] is incompatible with undefined [2].
 - string [3] is incompatible with undefined [2].
 - boolean [4] is incompatible with undefined [2].

   array_rest.js:10:2
   10| (d: void); // error: number|string|boolean ~> void
        ^

References:
   array_rest.js:1:11
    1| let xs = [0, "", true];
                 ^ [1]
   array_rest.js:10:5
   10| (d: void); // error: number|string|boolean ~> void
           ^^^^ [2]
   array_rest.js:1:14
    1| let xs = [0, "", true];
                    ^^ [3]
   array_rest.js:1:18
    1| let xs = [0, "", true];
                        ^^^^ [4]


Error ----------------------------------------------------------------------------------------------- array_rest.js:12:6

number [1] is not an array.

   array_rest.js:12:6
   12| let [...e] = 0;
            ^^^^

References:
   array_rest.js:12:14
   12| let [...e] = 0;
                    ^ [1]


Error -------------------------------------------------------------------------------------------------- computed.js:2:2

Cannot cast `val1` to undefined because string [1] is incompatible with undefined [2].

   computed.js:2:2
   2| (val1: void); // error: string ~> void
       ^^^^

References:
   computed.js:1:32
   1| var { ["key"]: val1 } = { key: "val" };
                                     ^^^^^ [1]
   computed.js:2:8
   2| (val1: void); // error: string ~> void
             ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- computed.js:9:2

Cannot cast `spread.key` to undefined because string [1] is incompatible with undefined [2].

   computed.js:9:2
   9| (spread.key: void); // error (gasp!) in general we don't know if a computed prop should be excluded from spread
       ^^^^^^^^^^

References:
   computed.js:8:43
   8| var { ["key"]: val3, ...spread } = { key: "val" };
                                                ^^^^^ [1]
   computed.js:9:14
   9| (spread.key: void); // error (gasp!) in general we don't know if a computed prop should be excluded from spread
                   ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- defaults.js:9:4

Cannot cast `q` to undefined because:
 - number [1] is incompatible with undefined [2].
 - boolean [3] is incompatible with undefined [2].
 - string [4] is incompatible with undefined [2].
 - null [5] is incompatible with undefined [2].
 - null [6] is incompatible with undefined [2].

   defaults.js:9:4
    9|   (q:void);
          ^

References:
   defaults.js:3:29
    3| function obj_prop_fun({p:{q=0}={q:true}}={p:{q:""}}) {
                                   ^ [1]
   defaults.js:9:6
    9|   (q:void);
            ^^^^ [2]
   defaults.js:3:35
    3| function obj_prop_fun({p:{q=0}={q:true}}={p:{q:""}}) {
                                         ^^^^ [3]
   defaults.js:3:48
    3| function obj_prop_fun({p:{q=0}={q:true}}={p:{q:""}}) {
                                                      ^^ [4]
   defaults.js:14:20
   14| obj_prop_fun({p:{q:null}}); // ok, provides add'l lower bound
                          ^^^^ [5]
   defaults.js:71:28
   71| obj_prop_fun(({} : {p?:{q?:null}})); // ok
                                  ^^^^ [6]


Error ------------------------------------------------------------------------------------------------- defaults.js:23:4

Cannot cast `q` to undefined because:
 - string [1] is incompatible with undefined [2].
 - number [3] is incompatible with undefined [2].
 - boolean [4] is incompatible with undefined [2].
 - null [5] is incompatible with undefined [2].
 - null [6] is incompatible with undefined [2].

   defaults.js:23:4
   23|   (q:void);
          ^

References:
   defaults.js:16:31
   16| function obj_prop_var(o={p:{q:""}}) {
                                     ^^ [1]
   defaults.js:23:6
   23|   (q:void);
            ^^^^ [2]
   defaults.js:17:13
   17|   var {p:{q=0}={q:true}} = o;
                   ^ [3]
   defaults.js:17:19
   17|   var {p:{q=0}={q:true}} = o;
                         ^^^^ [4]
   defaults.js:28:20
   28| obj_prop_var({p:{q:null}}); // ok, provides add'l lower bound
                          ^^^^ [5]
   defaults.js:72:28
   72| obj_prop_var(({} : {p?:{q?:null}})); // ok
                                  ^^^^ [6]


Error ------------------------------------------------------------------------------------------------- defaults.js:35:4

Cannot cast `o.r` to undefined because:
 - number [1] is incompatible with undefined [2].
 - string [3] is incompatible with undefined [2].
 - null [4] is incompatible with undefined [2].

   defaults.js:35:4
   35|   (o.r:void);
          ^^^

References:
   defaults.js:30:38
   30| function obj_rest({p:{q,...o}={q:0,r:0}}={p:{q:0,r:""}}) {
                                            ^ [1]
   defaults.js:35:8
   35|   (o.r:void);
              ^^^^ [2]
   defaults.js:30:52
   30| function obj_rest({p:{q,...o}={q:0,r:0}}={p:{q:0,r:""}}) {
                                                          ^^ [3]
   defaults.js:40:20
   40| obj_rest({p:{q:0,r:null}});
                          ^^^^ [4]


Error ------------------------------------------------------------------------------------------------- defaults.js:43:3

number [1] is incompatible with string [2].

   defaults.js:43:3
   43|   p = true // error: boolean ~> string
         ^

References:
   defaults.js:47:6
   47|   p: 0 // error: number ~> string
            ^ [1]
   defaults.js:45:6
   45|   p: string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:43:7

boolean [1] is incompatible with string [2].

   defaults.js:43:7
   43|   p = true // error: boolean ~> string
             ^^^^ [1]

References:
   defaults.js:45:6
   45|   p: string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:49:4

Cannot cast `p` to undefined because string [1] is incompatible with undefined [2].

   defaults.js:49:4
   49|   (p:void); // error: string ~> void
          ^

References:
   defaults.js:45:6
   45|   p: string
            ^^^^^^ [1]
   defaults.js:49:6
   49|   (p:void); // error: string ~> void
            ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:53:3

Cannot assign `{...}.p` to `p` because boolean [1] is incompatible with string [2].

   defaults.js:53:3
   53|   p = true // error: boolean ~> string
         ^

References:
   defaults.js:53:7
   53|   p = true // error: boolean ~> string
             ^^^^ [1]
   defaults.js:55:6
   55|   p: string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:56:5

Cannot assign object literal to variable because number [1] is incompatible with string [2] in property `p`.

   defaults.js:56:5
           v
   56| } = {
   57|   p: 0 // error: number ~> string
   58| };
       ^

References:
   defaults.js:57:6
   57|   p: 0 // error: number ~> string
            ^ [1]
   defaults.js:55:6
   55|   p: string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:59:2

Cannot cast `p` to undefined because string [1] is incompatible with undefined [2].

   defaults.js:59:2
   59| (p:void); // error: string ~> void
        ^

References:
   defaults.js:55:6
   55|   p: string
            ^^^^^^ [1]
   defaults.js:59:4
   59| (p:void); // error: string ~> void
          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:61:24

Property `x` is missing in null [1].

   defaults.js:61:24
   61| function obj_prop_err({x:{y}}=null) {} // error: property `x` cannot be accessed on null
                              ^

References:
   defaults.js:61:31
   61| function obj_prop_err({x:{y}}=null) {} // error: property `x` cannot be accessed on null
                                     ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:62:24

number [1] is not an object.

   defaults.js:62:24
   62| function obj_rest_err({...o}=0) {} // error: expected object instead of number
                              ^^^^

References:
   defaults.js:62:30
   62| function obj_rest_err({...o}=0) {} // error: expected object instead of number
                                    ^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:63:24

An indexer property is missing in null [1].

   defaults.js:63:24
   63| function arr_elem_err([x]=null) {} // error: element 0 cannot be accessed on null
                              ^

References:
   defaults.js:63:27
   63| function arr_elem_err([x]=null) {} // error: element 0 cannot be accessed on null
                                 ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:64:24

null [1] is not an array.

   defaults.js:64:24
   64| function arr_rest_err([...a]=null) {} // error: expected array instead of null
                              ^^^^

References:
   defaults.js:64:30
   64| function arr_rest_err([...a]=null) {} // error: expected array instead of null
                                    ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:75:24

number [1] is incompatible with string [2].

   defaults.js:75:24
   75| function obj_prop_opt({p}:{p?:string}={p:0}) {}
                              ^

References:
   defaults.js:75:42
   75| function obj_prop_opt({p}:{p?:string}={p:0}) {}
                                                ^ [1]
   defaults.js:75:31
   75| function obj_prop_opt({p}:{p?:string}={p:0}) {}
                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:76:26

number [1] is incompatible with string [2].

   defaults.js:76:26
   76| function obj_prop_maybe({p}:{p:?string}={p:0}) {}
                                ^

References:
   defaults.js:76:44
   76| function obj_prop_maybe({p}:{p:?string}={p:0}) {}
                                                  ^ [1]
   defaults.js:76:33
   76| function obj_prop_maybe({p}:{p:?string}={p:0}) {}
                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:77:26

All branches are incompatible:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   defaults.js:77:26
   77| function obj_prop_union({p}:{p:number|string}={p:true}) {}
                                ^

References:
   defaults.js:77:50
   77| function obj_prop_union({p}:{p:number|string}={p:true}) {}
                                                        ^^^^ [1]
   defaults.js:77:32
   77| function obj_prop_union({p}:{p:number|string}={p:true}) {}
                                      ^^^^^^ [2]
   defaults.js:77:39
   77| function obj_prop_union({p}:{p:number|string}={p:true}) {}
                                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ defaults.js:80:27

string [1] is incompatible with number [2].

   defaults.js:80:27
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                 ^

References:
   defaults.js:80:44
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                                  ^^^^^^ [1]
   defaults.js:80:33
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:80:27

boolean [1] is incompatible with number [2].

   defaults.js:80:27
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                 ^

References:
   defaults.js:80:55
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                                             ^^^^ [1]
   defaults.js:80:33
   80| function obj_prop_union2({p}:{p:number}|{p:string}={p:true}) {}
                                       ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- destructuring.js:4:3

Cannot assign `[...][0].a1` to `a` because number [1] is incompatible with string [2].

   destructuring.js:4:3
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
        ^^

References:
   destructuring.js:4:22
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                           ^ [1]
   destructuring.js:1:15
   1| declare var a:string;
                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- destructuring.js:4:9

Cannot assign `[...][0].b` to `b` because number [1] is incompatible with string [2].

   destructuring.js:4:9
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
              ^

References:
   destructuring.js:4:27
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                                ^ [1]
   destructuring.js:2:15
   2| declare var b:string;
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:4:12

Cannot assign `[...][1]` to `c` because number [1] is incompatible with string [2].

   destructuring.js:4:12
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                 ^

References:
   destructuring.js:4:30
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                                   ^ [1]
   destructuring.js:3:15
   3| declare var c:string;
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:10:6

Unsupported expression pattern in destructuring.

   10| ({n: obj.x} = {n:3});
            ^^^^^


Error -------------------------------------------------------------------------------------------- destructuring.js:11:2

Unsupported expression pattern in destructuring.

   11| [obj.x] = ['foo'];
        ^^^^^


Error -------------------------------------------------------------------------------------------- destructuring.js:14:9

Cannot assign `p` to `a` because number [1] is incompatible with string [2].

   destructuring.js:14:9
   14|     a = p;
               ^

References:
   destructuring.js:18:8
   18| foo({p:0, z:[1,2]});
              ^ [1]
   destructuring.js:1:15
    1| declare var a:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:15:9

Cannot resolve name `z`.

   15|     b = z;
               ^


Error -------------------------------------------------------------------------------------------- destructuring.js:16:9

Cannot assign `r` to `c` because number [1] is incompatible with string [2].

   destructuring.js:16:9
   16|     c = r;
               ^

References:
   destructuring.js:18:14
   18| foo({p:0, z:[1,2]});
                    ^ [1]
   destructuring.js:3:15
    3| declare var c:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:20:2

Cannot assign `[...][0]` to `a` because number [1] is incompatible with string [2].

   destructuring.js:20:2
   20| [a,,b,...c] = [0,1,true,3];
        ^

References:
   destructuring.js:20:16
   20| [a,,b,...c] = [0,1,true,3];
                      ^ [1]
   destructuring.js:1:15
    1| declare var a:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:20:5

Cannot assign `[...][2]` to `b` because boolean [1] is incompatible with string [2].

   destructuring.js:20:5
   20| [a,,b,...c] = [0,1,true,3];
           ^

References:
   destructuring.js:20:20
   20| [a,,b,...c] = [0,1,true,3];
                          ^^^^ [1]
   destructuring.js:2:15
    2| declare var b:string;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:20:15

Cannot assign array literal to `c` because `c` [1] is incompatible with string [2].

   destructuring.js:20:15
   20| [a,,b,...c] = [0,1,true,3];
                     ^^^^^^^^^^^^

References:
   destructuring.js:20:7
   20| [a,,b,...c] = [0,1,true,3];
             ^^^^ [1]
   destructuring.js:3:15
    3| declare var c:string;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:23:37

Cannot assign `z` to `o` because property `x` is missing in `z` [1] but exists in object type [2].

   destructuring.js:23:37
   23|     var o:{x: string; y: number;} = z;
                                           ^

References:
   destructuring.js:22:18
   22| function bar({x, ...z}) {
                        ^^^^ [1]
   destructuring.js:23:11
   23|     var o:{x: string; y: number;} = z;
                 ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:28:48

Cannot assign object literal to `extend` because property `z` is missing in object literal [1] but exists in object
type [2].

   destructuring.js:28:48
   28| var extend: {x:number; y:string; z: boolean} = {x:0, ...spread};
                                                      ^^^^^^^^^^^^^^^^ [1]

References:
   destructuring.js:28:13
   28| var extend: {x:number; y:string; z: boolean} = {x:0, ...spread};
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:31:5

Cannot call `qux` with object literal bound to `_` because string [1] is incompatible with number [2] in property `a`.

   destructuring.js:31:5
   31| qux({a:""});
           ^^^^^^

References:
   destructuring.js:31:8
   31| qux({a:""});
              ^^ [1]
   destructuring.js:30:20
   30| function qux(_: {a:number}) { }
                          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:33:7

Cannot call `corge` with object literal bound to the first parameter because number [1] is incompatible with string [2]
in property `b`.

   destructuring.js:33:7
   33| corge({b:0});
             ^^^^^

References:
   destructuring.js:33:10
   33| corge({b:0});
                ^ [1]
   destructuring.js:32:24
   32| function corge({b}: {b:string}) { }
                              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:35:23

Cannot assign object literal to variable because string [1] is incompatible with number [2] in property `n`.

   destructuring.js:35:23
   35| var {n}:{n: number} = {n: ""}
                             ^^^^^^^

References:
   destructuring.js:35:27
   35| var {n}:{n: number} = {n: ""}
                                 ^^ [1]
   destructuring.js:35:13
   35| var {n}:{n: number} = {n: ""}
                   ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:38:8

Property `foo` is missing in object literal [1].

   destructuring.js:38:8
   38|   var {foo} = {bar: 123}; // error on foo
              ^^^

References:
   destructuring.js:38:15
   38|   var {foo} = {bar: 123}; // error on foo
                     ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- destructuring.js:39:13

Property `baz` is missing in object literal [1].

   destructuring.js:39:13
   39|   var {bar, baz} = {bar: 123} // error on baz
                   ^^^

References:
   destructuring.js:39:20
   39|   var {bar, baz} = {bar: 123} // error on baz
                          ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- destructuring.js:45:4

Cannot get `x.baz` because property `baz` is missing in object literal [1].

   destructuring.js:45:4
   45|   (x.baz: string); // error, baz doesn't exist
          ^^^^^

References:
   destructuring.js:43:11
   43|   var x = {foo: 'abc', bar: 123};
                 ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- destructuring.js:46:4

Cannot get `rest.baz` because property `baz` is missing in `rest` [1].

   destructuring.js:46:4
   46|   (rest.baz: string); // error, rest is sealed
          ^^^^^^^^

References:
   destructuring.js:44:13
   44|   var {foo, ...rest} = x;
                   ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- destructuring.js:64:23

Cannot assign `baseprop1` to `bp1_err` because number [1] is incompatible with string [2].

   destructuring.js:64:23
   64| var bp1_err: string = baseprop1; // Error: number ~> string
                             ^^^^^^^^^

References:
   destructuring.js:52:14
   52|   baseprop1: number;
                    ^^^^^^ [1]
   destructuring.js:64:14
   64| var bp1_err: string = baseprop1; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:66:23

Cannot assign `others.baseprop2` to `bp2_err` because number [1] is incompatible with string [2].

   destructuring.js:66:23
   66| var bp2_err: string = others.baseprop2; // Error: number ~> string
                             ^^^^^^^^^^^^^^^^

References:
   destructuring.js:53:14
   53|   baseprop2: number;
                    ^^^^^^ [1]
   destructuring.js:66:14
   66| var bp2_err: string = others.baseprop2; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:69:23

Cannot assign `childprop1` to `cp1_err` because number [1] is incompatible with string [2].

   destructuring.js:69:23
   69| var cp1_err: string = childprop1; // Error: number ~> string
                             ^^^^^^^^^^

References:
   destructuring.js:57:15
   57|   childprop1: number;
                     ^^^^^^ [1]
   destructuring.js:69:14
   69| var cp1_err: string = childprop1; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:71:23

Cannot assign `others.childprop2` to `cp2_err` because number [1] is incompatible with string [2].

   destructuring.js:71:23
   71| var cp2_err: string = others.childprop2; // Error: number ~> string
                             ^^^^^^^^^^^^^^^^^

References:
   destructuring.js:58:15
   58|   childprop2: number;
                     ^^^^^^ [1]
   destructuring.js:71:14
   71| var cp2_err: string = others.childprop2; // Error: number ~> string
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- destructuring_init.js:1:5

Destructuring assignment must be initialized

   1| var {foo};
          ^^^^^


Error -------------------------------------------------------------------------------------- destructuring_param.js:5:17

Strict mode function may not have duplicate parameter names

   5| function g(a, { a }) {
                      ^


Error ----------------------------------------------------------------------------------------------------- eager.js:2:3

Property `x` is missing in null [1].

   eager.js:2:3
   2| ({x} = null); // error, property `x` can not be accessed on `null`
        ^

References:
   eager.js:2:8
   2| ({x} = null); // error, property `x` can not be accessed on `null`
             ^^^^ [1]


Error ----------------------------------------------------------------------------------------------- object_rest.js:5:1

Cannot assign `0` to `o1_rest.x` because property `x` is missing in `o1_rest` [1].

   object_rest.js:5:1
   5| o1_rest.x = 0; // error: rest result is sealed
      ^^^^^^^^^

References:
   object_rest.js:3:9
   3| var {p, ...o1_rest} = o1;
              ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_rest.js:11:1

Cannot assign `0` to `o2_rest.x` because property `x` is missing in `o2_rest` [1].

   object_rest.js:11:1
   11| o2_rest.x = 0; // error: rest result is sealed
       ^^^^^^^^^

References:
   object_rest.js:9:9
    9| var {p, ...o2_rest} = o2;
               ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_rest.js:16:1

Cannot assign `0` to `o3_rest.x` because property `x` is missing in `o3_rest` [1].

   object_rest.js:16:1
   16| o3_rest.x = 0; // error: rest result is sealed
       ^^^^^^^^^

References:
   object_rest.js:14:9
   14| var {p, ...o3_rest} = o3;
               ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ string_lit.js:2:2

Cannot cast `val` to undefined because string [1] is incompatible with undefined [2].

   string_lit.js:2:2
   2| (val: void); // error: string ~> void
       ^^^

References:
   string_lit.js:1:29
   1| var { "key": val } = { key: "val" };
                                  ^^^^^ [1]
   string_lit.js:2:7
   2| (val: void); // error: string ~> void
            ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- unannotated.js:8:3

Cannot get `x.bar` because property `bar` is missing in object literal [1].

   unannotated.js:8:3
   8|   x.bar
        ^^^^^

References:
   unannotated.js:4:6
   4|   x: { foo: "foo" }
           ^^^^^^^^^^^^^^ [1]



Found 69 errors
