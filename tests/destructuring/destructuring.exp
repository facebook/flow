Error ----------------------------------------------------------------------------------------------------- annot.js:2:5

Cannot assign `42` to `p` because number [1] is incompatible with string [2]. [incompatible-type]

   annot.js:2:5
   2| p = 42; // error: number ~> string
          ^^ [1]

References:
   annot.js:3:14
   3| type T = {p: string};
                   ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- annot_loop.js:3:10

Invalid trivially recursive definition of `T`.  [recursive-definition]

   3| type T = T;
               ^


Error ---------------------------------------------------------------------------------------------- annot_loop.js:12:10

Invalid trivially recursive definition of `A`.  [recursive-definition]

   12| type B = A;
                ^


Error ------------------------------------------------------------------------- annotations_inside_destructuring.js:4:11

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   4|   const [a: boolean, b: boolean] = x; // ERROR
                ^^^^^^^^^


Error ------------------------------------------------------------------------- annotations_inside_destructuring.js:4:23

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   4|   const [a: boolean, b: boolean] = x; // ERROR
                            ^^^^^^^^^


Error ------------------------------------------------------------------------- annotations_inside_destructuring.js:8:14

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   8|   const {a: a: boolean, b: b: boolean} = x; // ERROR
                   ^^^^^^^^^


Error ------------------------------------------------------------------------- annotations_inside_destructuring.js:8:29

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   8|   const {a: a: boolean, b: b: boolean} = x; // ERROR
                                  ^^^^^^^^^


Error ------------------------------------------------------------------------ annotations_inside_destructuring.js:14:16

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   14|   const [{a, b}: {a: boolean, b: boolean}] = x; // ERROR
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------ annotations_inside_destructuring.js:20:19

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   20|   const {k: [a, b]: [boolean, boolean]} = x; // ERROR
                         ^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------ annotations_inside_destructuring.js:26:15

Annotations inside of destructuring are not supported. Annotate the top-level pattern instead. For example, instead of
the invalid `const [a: number, b: string] = ...` do `const [a, b]: [number, string] = ...`. [unsupported-syntax]

   26|   const [...xs: Array<number>] = x;
                     ^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ array_rest.js:7:2

Cannot cast `a` to undefined because number [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:7:2
   7| (a: void); // error: number ~> void
       ^

References:
   array_rest.js:1:11
   1| let xs = [0, "", true];
                ^ [1]
   array_rest.js:7:5
   7| (a: void); // error: number ~> void
          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ array_rest.js:8:2

Cannot cast `b` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:8:2
   8| (b: void); // error: string ~> void
       ^

References:
   array_rest.js:1:14
   1| let xs = [0, "", true];
                   ^^ [1]
   array_rest.js:8:5
   8| (b: void); // error: string ~> void
          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ array_rest.js:9:2

Cannot cast `c` to undefined because boolean [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:9:2
   9| (c: void); // error: boolean ~> void
       ^

References:
   array_rest.js:1:18
   1| let xs = [0, "", true];
                       ^^^^ [1]
   array_rest.js:9:5
   9| (c: void); // error: boolean ~> void
          ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_rest.js:10:2

Cannot cast `d` to undefined because number [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:10:2
   10| (d: void); // error: number|string|boolean ~> void
        ^

References:
   array_rest.js:1:11
    1| let xs = [0, "", true];
                 ^ [1]
   array_rest.js:10:5
   10| (d: void); // error: number|string|boolean ~> void
           ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_rest.js:10:2

Cannot cast `d` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:10:2
   10| (d: void); // error: number|string|boolean ~> void
        ^

References:
   array_rest.js:1:14
    1| let xs = [0, "", true];
                    ^^ [1]
   array_rest.js:10:5
   10| (d: void); // error: number|string|boolean ~> void
           ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_rest.js:10:2

Cannot cast `d` to undefined because boolean [1] is incompatible with undefined [2]. [incompatible-cast]

   array_rest.js:10:2
   10| (d: void); // error: number|string|boolean ~> void
        ^

References:
   array_rest.js:1:18
    1| let xs = [0, "", true];
                        ^^^^ [1]
   array_rest.js:10:5
   10| (d: void); // error: number|string|boolean ~> void
           ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- array_rest.js:12:9

number [1] is not an array. [not-an-array]

   array_rest.js:12:9
   12| let [...e] = 0;
               ^

References:
   array_rest.js:12:14
   12| let [...e] = 0;
                    ^ [1]


Error ---------------------------------------------------------------------------------------------- array_rest.js:16:12

Cannot assign array literal to `arr` because in index 0: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   array_rest.js:16:12
   16| [...arr] = [true]; // error boolean ~> number|string
                  ^^^^^^

References:
   array_rest.js:16:13
   16| [...arr] = [true]; // error boolean ~> number|string
                   ^^^^ [1]
   array_rest.js:14:21
   14| declare var arr :  [number|string];
                           ^^^^^^ [2]
   array_rest.js:14:28
   14| declare var arr :  [number|string];
                                  ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- computed.js:2:2

Cannot cast `val1` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   computed.js:2:2
   2| (val1: void); // error: string ~> void
       ^^^^

References:
   computed.js:1:32
   1| var { ["key"]: val1 } = { key: "val" };
                                     ^^^^^ [1]
   computed.js:2:8
   2| (val1: void); // error: string ~> void
             ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- computed.js:5:8

Cannot access object with computed property using string [1]. [invalid-computed-prop]

   computed.js:5:8
   5| var { [key]: val2 } = { key: "val" }; // error: unsafe string key access
             ^^^

References:
   computed.js:4:10
   4| var key: string = "key";
               ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- computed.js:9:2

Cannot cast `spread.key` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   computed.js:9:2
   9| (spread.key: void); // error (gasp!) in general we don't know if a computed prop should be excluded from spread
       ^^^^^^^^^^

References:
   computed.js:8:43
   8| var { ["key"]: val3, ...spread } = { key: "val" };
                                                ^^^^^ [1]
   computed.js:9:14
   9| (spread.key: void); // error (gasp!) in general we don't know if a computed prop should be excluded from spread
                   ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- computed.js:14:2

Cannot cast `foo` to number literal `42` because number [1] is incompatible with number literal `42` [2].
[incompatible-cast]

   computed.js:14:2
   14| (foo: 42); // error 17 ~> 42
        ^^^

References:
   computed.js:11:31
   11| const arr = [{foo: 42}, {foo: 17}];
                                     ^^ [1]
   computed.js:14:7
   14| (foo: 42); // error 17 ~> 42
             ^^ [2]


Error ------------------------------------------------------------------------------------------------- computed.js:16:2

Cannot cast `foo` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   computed.js:16:2
   16| (foo: string); // error 17 ~> string
        ^^^

References:
   computed.js:11:31
   11| const arr = [{foo: 42}, {foo: 17}];
                                     ^^ [1]
   computed.js:16:7
   16| (foo: string); // error 17 ~> string
             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- defaults.js:4:8

Cannot assign `q` to `q` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   defaults.js:4:8
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
             ^

References:
   defaults.js:4:21
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
                          ^^^^ [1]
   defaults.js:4:39
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
                                            ^^^^^^ [2]
   defaults.js:4:48
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
                                                     ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- defaults.js:9:3

Cannot cast `q` to undefined because number [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:9:3
   9|   q as void;
        ^

References:
   defaults.js:4:39
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
                                            ^^^^^^ [1]
   defaults.js:9:8
   9|   q as void;
             ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- defaults.js:9:3

Cannot cast `q` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:9:3
   9|   q as void;
        ^

References:
   defaults.js:4:48
   4|   {p: {q = 0} = {q: true}}: {p?: {q?: number | string}} = {p: {q: ''}},
                                                     ^^^^^^ [1]
   defaults.js:9:8
   9|   q as void;
             ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:16:12

Cannot assign `o.p.q` to `q` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   defaults.js:16:12
   16|   var {p: {q = 0} = {q: true}} = o;
                  ^

References:
   defaults.js:16:25
   16|   var {p: {q = 0} = {q: true}} = o;
                               ^^^^ [1]
   defaults.js:15:36
   15| function obj_prop_var(o: {p?: {q?: number | string}} = {p: {q: ''}}) {
                                          ^^^^^^ [2]
   defaults.js:15:45
   15| function obj_prop_var(o: {p?: {q?: number | string}} = {p: {q: ''}}) {
                                                   ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- defaults.js:20:3

Cannot cast `q` to undefined because number [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:20:3
   20|   q as void;
         ^

References:
   defaults.js:15:36
   15| function obj_prop_var(o: {p?: {q?: number | string}} = {p: {q: ''}}) {
                                          ^^^^^^ [1]
   defaults.js:20:8
   20|   q as void;
              ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:20:3

Cannot cast `q` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:20:3
   20|   q as void;
         ^

References:
   defaults.js:15:45
   15| function obj_prop_var(o: {p?: {q?: number | string}} = {p: {q: ''}}) {
                                                   ^^^^^^ [1]
   defaults.js:20:8
   20|   q as void;
              ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:27:8

Property `q` is missing in object type [1]. [prop-missing]

   defaults.js:27:8
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
              ^

References:
   defaults.js:27:39
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
                                             ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:27:14

Cannot assign `o` to `o` because number [1] is incompatible with string [2] in property `r`. [incompatible-type]

   defaults.js:27:14
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
                    ^

References:
   defaults.js:27:29
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
                                   ^ [1]
   defaults.js:27:44
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
                                                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:32:3

Cannot cast `o.r` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:32:3
   32|   o.r as void;
         ^^^

References:
   defaults.js:27:44
   27|   {p: {q, ...o} = {q: 0, r: 0}}: {p?: {r?: string}} = {p: {q: 0, r: ''}},
                                                  ^^^^^^ [1]
   defaults.js:32:10
   32|   o.r as void;
                ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:40:9

Cannot assign boolean to `p` because boolean [1] is incompatible with string [2]. [incompatible-type]

   defaults.js:40:9
   40|     p = true, // error: boolean ~> string
               ^^^^ [1]

References:
   defaults.js:42:8
   42|     p: string,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:44:8

Cannot assign object literal to object type because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   defaults.js:44:8
   44|     p: 0, // error: number ~> string
              ^ [1]

References:
   defaults.js:42:8
   42|     p: string,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:47:3

Cannot cast `p` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:47:3
   47|   p as void; // error: string ~> void
         ^

References:
   defaults.js:42:8
   42|     p: string,
              ^^^^^^ [1]
   defaults.js:47:8
   47|   p as void; // error: string ~> void
              ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:51:7

Cannot assign boolean to `p` because boolean [1] is incompatible with string [2]. [incompatible-type]

   defaults.js:51:7
   51|   p = true, // error: boolean ~> string
             ^^^^ [1]

References:
   defaults.js:53:6
   53|   p: string,
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:55:6

Cannot assign object literal to destructuring because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   defaults.js:55:6
   55|   p: 0, // error: number ~> string
            ^ [1]

References:
   defaults.js:53:6
   53|   p: string,
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- defaults.js:57:1

Cannot cast `p` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   defaults.js:57:1
   57| p as void; // error: string ~> void
       ^

References:
   defaults.js:53:6
   53|   p: string,
            ^^^^^^ [1]
   defaults.js:57:6
   57| p as void; // error: string ~> void
            ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:59:24

Property `x` is missing in null [1]. [incompatible-use]

   defaults.js:59:24
   59| function obj_prop_err({x: {y}}: null = null) {} // error: property `x` cannot be accessed on null
                              ^

References:
   defaults.js:59:33
   59| function obj_prop_err({x: {y}}: null = null) {} // error: property `x` cannot be accessed on null
                                       ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:60:27

number [1] is not an object. [not-an-object]

   defaults.js:60:27
   60| function obj_rest_err({...o}: number = 0) {} // error: expected object instead of number
                                 ^

References:
   defaults.js:60:31
   60| function obj_rest_err({...o}: number = 0) {} // error: expected object instead of number
                                     ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:61:24

null [1] does not have properties. [incompatible-use]

   defaults.js:61:24
   61| function arr_elem_err([x]: null = null) {} // error: element 0 cannot be accessed on null
                              ^

References:
   defaults.js:61:28
   61| function arr_elem_err([x]: null = null) {} // error: element 0 cannot be accessed on null
                                  ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:62:27

null [1] is not an array. [not-an-array]

   defaults.js:62:27
   62| function arr_rest_err([...a]: null = null) {} // error: expected array instead of null
                                 ^

References:
   defaults.js:62:31
   62| function arr_rest_err([...a]: null = null) {} // error: expected array instead of null
                                     ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ defaults.js:73:47

Cannot assign object literal to object type because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   defaults.js:73:47
   73| function obj_prop_opt({p}: {p?: string} = {p: 0}) {}
                                                     ^ [1]

References:
   defaults.js:73:33
   73| function obj_prop_opt({p}: {p?: string} = {p: 0}) {}
                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:74:49

Cannot assign object literal to object type because number [1] is incompatible with string [2] in property `p`.
[incompatible-type]

   defaults.js:74:49
   74| function obj_prop_maybe({p}: {p: ?string} = {p: 0}) {}
                                                       ^ [1]

References:
   defaults.js:74:35
   74| function obj_prop_maybe({p}: {p: ?string} = {p: 0}) {}
                                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ defaults.js:75:57

Cannot assign object literal to object type because in property `p`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   defaults.js:75:57
   75| function obj_prop_union({p}: {p: number | string} = {p: true}) {}
                                                               ^^^^ [1]

References:
   defaults.js:75:34
   75| function obj_prop_union({p}: {p: number | string} = {p: true}) {}
                                        ^^^^^^ [2]
   defaults.js:75:43
   75| function obj_prop_union({p}: {p: number | string} = {p: true}) {}
                                                 ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ defaults.js:78:59

Cannot assign object literal to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2] in property `p`.
 - Or boolean [1] is incompatible with string [3] in property `p`.

   defaults.js:78:59
   78| function obj_prop_union2({p}: {p: number} | {p: string} = {p: true}) {}
                                                                 ^^^^^^^^^

References:
   defaults.js:78:63
   78| function obj_prop_union2({p}: {p: number} | {p: string} = {p: true}) {}
                                                                     ^^^^ [1]
   defaults.js:78:35
   78| function obj_prop_union2({p}: {p: number} | {p: string} = {p: true}) {}
                                         ^^^^^^ [2]
   defaults.js:78:49
   78| function obj_prop_union2({p}: {p: number} | {p: string} = {p: true}) {}
                                                       ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ defaults.js:83:10

Cannot assign number to `name` because number [1] is incompatible with string [2]. [incompatible-type]

   defaults.js:83:10
   83|   name = 123456, // Not string type, error!
                ^^^^^^ [1]

References:
   defaults.js:85:10
   85|   name?: string,
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- destructuring.js:4:3

Cannot assign `[...][0].a1` to `a` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:4:3
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
        ^^

References:
   destructuring.js:4:22
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                           ^ [1]
   destructuring.js:1:15
   1| declare var a:string;
                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- destructuring.js:4:9

Cannot assign `[...][0].b` to `b` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:4:9
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
              ^

References:
   destructuring.js:4:27
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                                ^ [1]
   destructuring.js:2:15
   2| declare var b:string;
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:4:12

Cannot assign `[...][1]` to `c` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:4:12
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                 ^

References:
   destructuring.js:4:30
   4| [{a1:a, b},c] = [{a1:0, b:1},2];
                                   ^ [1]
   destructuring.js:3:15
   3| declare var c:string;
                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- destructuring.js:9:5

Variable `obj` [1] is never initialized, annotated, or assigned to. [invalid-declaration]

   9| var obj;
          ^^^ [1]


Error -------------------------------------------------------------------------------------------- destructuring.js:10:6

Unsupported expression pattern in destructuring. [unsupported-syntax]

   10| ({n: obj.x} = {n:3});
            ^^^^^


Error -------------------------------------------------------------------------------------------- destructuring.js:11:2

Unsupported expression pattern in destructuring. [unsupported-syntax]

   11| [obj.x] = ['foo'];
        ^^^^^


Error -------------------------------------------------------------------------------------------- destructuring.js:14:9

Cannot assign `p` to `a` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:14:9
   14|     a = p;
               ^

References:
   destructuring.js:13:31
   13| function foo({p, z:[r]}: {|p: number, z: Array<number>|}) {
                                     ^^^^^^ [1]
   destructuring.js:1:15
    1| declare var a:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:15:9

Cannot resolve name `z`. [cannot-resolve-name]

   15|     b = z;
               ^


Error -------------------------------------------------------------------------------------------- destructuring.js:16:9

Cannot assign `r` to `c` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:16:9
   16|     c = r;
               ^

References:
   destructuring.js:13:48
   13| function foo({p, z:[r]}: {|p: number, z: Array<number>|}) {
                                                      ^^^^^^ [1]
   destructuring.js:3:15
    3| declare var c:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:20:2

Cannot assign `[...][0]` to `a` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:20:2
   20| [a,,b,...c] = [0,1,true,3];
        ^

References:
   destructuring.js:20:16
   20| [a,,b,...c] = [0,1,true,3];
                      ^ [1]
   destructuring.js:1:15
    1| declare var a:string;
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:20:5

Cannot assign `[...][2]` to `b` because boolean [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:20:5
   20| [a,,b,...c] = [0,1,true,3];
           ^

References:
   destructuring.js:20:20
   20| [a,,b,...c] = [0,1,true,3];
                          ^^^^ [1]
   destructuring.js:2:15
    2| declare var b:string;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:20:15

Cannot assign array literal to `c` because rest of array pattern [1] is incompatible with string [2].
[incompatible-type]

   destructuring.js:20:15
   20| [a,,b,...c] = [0,1,true,3];
                     ^^^^^^^^^^^^

References:
   destructuring.js:20:10
   20| [a,,b,...c] = [0,1,true,3];
                ^ [1]
   destructuring.js:3:15
    3| declare var c:string;
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:23:37

Cannot assign `z` to `o` because property `x` is missing in rest of object pattern [1] but exists in object type [2].
[prop-missing]

   destructuring.js:23:37
   23|     var o:{x: string; y: number;} = z;
                                           ^

References:
   destructuring.js:22:21
   22| function bar({x, ...z}: {|x: string, y: number|}) {
                           ^ [1]
   destructuring.js:23:11
   23|     var o:{x: string; y: number;} = z;
                 ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:28:48

Cannot assign object literal to `extend` because property `z` is missing in object literal [1] but exists in object
type [2]. [prop-missing]

   destructuring.js:28:48
   28| var extend: {x:number; y:string; z: boolean} = {x:0, ...spread};
                                                      ^^^^^^^^^^^^^^^^ [1]

References:
   destructuring.js:28:13
   28| var extend: {x:number; y:string; z: boolean} = {x:0, ...spread};
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:31:8

Cannot call `qux` with object literal bound to `_` because string [1] is incompatible with number [2] in property `a`.
[incompatible-call]

   destructuring.js:31:8
   31| qux({a:""});
              ^^ [1]

References:
   destructuring.js:30:20
   30| function qux(_: {a:number}) { }
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:33:10

Cannot call `corge` with object literal bound to the first parameter because number [1] is incompatible with string [2]
in property `b`. [incompatible-call]

   destructuring.js:33:10
   33| corge({b:0});
                ^ [1]

References:
   destructuring.js:32:24
   32| function corge({b}: {b:string}) { }
                              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:35:27

Cannot assign object literal to destructuring because string [1] is incompatible with number [2] in property `n`.
[incompatible-type]

   destructuring.js:35:27
   35| var {n}:{n: number} = {n: ""}
                                 ^^ [1]

References:
   destructuring.js:35:13
   35| var {n}:{n: number} = {n: ""}
                   ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:38:8

Property `foo` is missing in object literal [1]. [prop-missing]

   destructuring.js:38:8
   38|   var {foo} = {bar: 123}; // error on foo
              ^^^

References:
   destructuring.js:38:15
   38|   var {foo} = {bar: 123}; // error on foo
                     ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- destructuring.js:39:13

Property `baz` (did you mean `bar`?) is missing in object literal [1]. [prop-missing]

   destructuring.js:39:13
   39|   var {bar, baz} = {bar: 123} // error on baz
                   ^^^

References:
   destructuring.js:39:20
   39|   var {bar, baz} = {bar: 123} // error on baz
                          ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- destructuring.js:45:4

Cannot cast `x.baz` to string because `void` (due to access of non-existent property `baz`) [1] is incompatible with
string [2]. [incompatible-cast]

   destructuring.js:45:4
   45|   (x.baz: string); // error, baz doesn't exist
          ^^^^^ [1]

References:
   destructuring.js:45:11
   45|   (x.baz: string); // error, baz doesn't exist
                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:45:6

Cannot get `x.baz` because property `baz` (did you mean `bar`?) is missing in object literal [1]. [prop-missing]

   destructuring.js:45:6
   45|   (x.baz: string); // error, baz doesn't exist
            ^^^

References:
   destructuring.js:43:11
   43|   var x = {foo: 'abc', bar: 123};
                 ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- destructuring.js:46:4

Cannot cast `rest.baz` to string because `void` (due to access of non-existent property `baz`) [1] is incompatible with
string [2]. [incompatible-cast]

   destructuring.js:46:4
   46|   (rest.baz: string); // error, rest is sealed
          ^^^^^^^^ [1]

References:
   destructuring.js:46:14
   46|   (rest.baz: string); // error, rest is sealed
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- destructuring.js:46:9

Cannot get `rest.baz` because property `baz` (did you mean `bar`?) is missing in rest of object pattern [1].
[prop-missing]

   destructuring.js:46:9
   46|   (rest.baz: string); // error, rest is sealed
               ^^^

References:
   destructuring.js:44:16
   44|   var {foo, ...rest} = x;
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------- destructuring.js:64:23

Cannot assign `baseprop1` to `bp1_err` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:64:23
   64| var bp1_err: string = baseprop1; // Error: number ~> string
                             ^^^^^^^^^

References:
   destructuring.js:52:14
   52|   baseprop1: number;
                    ^^^^^^ [1]
   destructuring.js:64:14
   64| var bp1_err: string = baseprop1; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:66:23

Cannot assign `others.baseprop2` to `bp2_err` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:66:23
   66| var bp2_err: string = others.baseprop2; // Error: number ~> string
                             ^^^^^^^^^^^^^^^^

References:
   destructuring.js:53:14
   53|   baseprop2: number;
                    ^^^^^^ [1]
   destructuring.js:66:14
   66| var bp2_err: string = others.baseprop2; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:69:23

Cannot assign `childprop1` to `cp1_err` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:69:23
   69| var cp1_err: string = childprop1; // Error: number ~> string
                             ^^^^^^^^^^

References:
   destructuring.js:57:15
   57|   childprop1: number;
                     ^^^^^^ [1]
   destructuring.js:69:14
   69| var cp1_err: string = childprop1; // Error: number ~> string
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:70:19

Cannot assign `others.childprop1` to `cp2` because `void` (due to access of non-existent property `childprop1`) [1] is
incompatible with number [2]. [incompatible-type]

   destructuring.js:70:19
   70| var cp2: number = others.childprop1; // Error: `childprop1` is not in `others` as it was separately destructured
                         ^^^^^^^^^^^^^^^^^ [1]

References:
   destructuring.js:70:10
   70| var cp2: number = others.childprop1; // Error: `childprop1` is not in `others` as it was separately destructured
                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- destructuring.js:70:26

Cannot get `others.childprop1` because property `childprop1` (did you mean `childprop2`?) is missing in rest of object
pattern [1]. [prop-missing]

   destructuring.js:70:26
   70| var cp2: number = others.childprop1; // Error: `childprop1` is not in `others` as it was separately destructured
                                ^^^^^^^^^^

References:
   destructuring.js:61:32
   61| var {baseprop1, childprop1, ...others} = new Child();
                                      ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- destructuring.js:71:23

Cannot assign `others.childprop2` to `cp2_err` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring.js:71:23
   71| var cp2_err: string = others.childprop2; // Error: number ~> string
                             ^^^^^^^^^^^^^^^^^

References:
   destructuring.js:58:15
   58|   childprop2: number;
                     ^^^^^^ [1]
   destructuring.js:71:14
   71| var cp2_err: string = others.childprop2; // Error: number ~> string
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- destructuring_init.js:1:5

Destructuring assignment must be initialized

   1| var {foo};
          ^^^^^


Error ------------------------------------------------------------------------------- destructuring_missing_props.js:3:6

Property `nonExistent` is missing in object type [1]. [prop-missing]

   destructuring_missing_props.js:3:6
   3| var {nonExistent, defaults = 'hi', foo = 3} = x; // Error, missing nonExistent
           ^^^^^^^^^^^

References:
   destructuring_missing_props.js:2:16
   2| declare var x: {|foo: string|};
                     ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:3:30

Cannot assign string to `defaults` because string [1] is incompatible with empty [2]. [incompatible-type]

   destructuring_missing_props.js:3:30
   3| var {nonExistent, defaults = 'hi', foo = 3} = x; // Error, missing nonExistent
                                   ^^^^ [1]

References:
   destructuring_missing_props.js:3:19
   3| var {nonExistent, defaults = 'hi', foo = 3} = x; // Error, missing nonExistent
                        ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:3:42

Cannot assign number to `foo` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring_missing_props.js:3:42
   3| var {nonExistent, defaults = 'hi', foo = 3} = x; // Error, missing nonExistent
                                               ^ [1]

References:
   destructuring_missing_props.js:2:23
   2| declare var x: {|foo: string|};
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------- destructuring_missing_props.js:5:1

Cannot cast `foo` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   destructuring_missing_props.js:5:1
   5| foo as number; // Error, number | string
      ^^^

References:
   destructuring_missing_props.js:2:23
   2| declare var x: {|foo: string|};
                            ^^^^^^ [1]
   destructuring_missing_props.js:5:8
   5| foo as number; // Error, number | string
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------- destructuring_missing_props.js:9:6

Property `nonExistent2` is missing in object type [1]. [prop-missing]

   destructuring_missing_props.js:9:6
   9| var {nonExistent2, defaults2 = 'hi', bar = 3} = y; // Error, missing nonExistent2
           ^^^^^^^^^^^^

References:
   destructuring_missing_props.js:8:16
   8| declare var y: {|bar: string|};
                     ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:9:32

Cannot assign string to `defaults2` because string [1] is incompatible with empty [2]. [incompatible-type]

   destructuring_missing_props.js:9:32
   9| var {nonExistent2, defaults2 = 'hi', bar = 3} = y; // Error, missing nonExistent2
                                     ^^^^ [1]

References:
   destructuring_missing_props.js:9:20
   9| var {nonExistent2, defaults2 = 'hi', bar = 3} = y; // Error, missing nonExistent2
                         ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:9:44

Cannot assign number to `bar` because number [1] is incompatible with string [2]. [incompatible-type]

   destructuring_missing_props.js:9:44
   9| var {nonExistent2, defaults2 = 'hi', bar = 3} = y; // Error, missing nonExistent2
                                                 ^ [1]

References:
   destructuring_missing_props.js:8:23
   8| declare var y: {|bar: string|};
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:14:6

Property `baz` is missing in null [1]. [incompatible-use]

   destructuring_missing_props.js:14:6
   14| var {baz = 15150} = null; // Error, baz is missing in null (you can't destructure null)
            ^^^

References:
   destructuring_missing_props.js:14:21
   14| var {baz = 15150} = null; // Error, baz is missing in null (you can't destructure null)
                           ^^^^ [1]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:17:6

Property `grunt` is missing in object type [1]. [prop-missing]

   destructuring_missing_props.js:17:6
   17| var {grunt = 15210} = z; // Error, grunt missing in inexact object type
            ^^^^^

References:
   destructuring_missing_props.js:16:16
   16| declare var z: {thud: string};
                      ^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:21:6

Property `qux` is missing in object literal [1]. [prop-missing]

   destructuring_missing_props.js:21:6
   21| var {qux = 'string'} = obj; // Error, qux missing
            ^^^

References:
   destructuring_missing_props.js:20:13
   20| const obj = {__proto__: proto, baz: 'string'};
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------- destructuring_missing_props.js:21:12

Cannot assign string to `qux` because string [1] is incompatible with empty [2]. [incompatible-type]

   destructuring_missing_props.js:21:12
   21| var {qux = 'string'} = obj; // Error, qux missing
                  ^^^^^^^^ [1]

References:
   destructuring_missing_props.js:21:6
   21| var {qux = 'string'} = obj; // Error, qux missing
            ^^^ [2]


Error ----------------------------------------------------------------------------- destructuring_missing_props.js:27:18

Cannot assign string to `defaultProps` because string [1] is incompatible with empty [2]. [incompatible-type]

   destructuring_missing_props.js:27:18
   27|   defaultProps = 'default',
                        ^^^^^^^^^ [1]

References:
   destructuring_missing_props.js:27:3
   27|   defaultProps = 'default',
         ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------ destructuring_missing_props.js:34:3

Cannot cast `regularProp` to number because undefined [1] is incompatible with number [2]. [incompatible-cast]

   destructuring_missing_props.js:34:3
   34|   regularProp as number;
         ^^^^^^^^^^^

References:
   destructuring_missing_props.js:30:17
   30|   regularProp?: number,
                       ^^^^^^ [1]
   destructuring_missing_props.js:34:18
   34|   regularProp as number;
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------- destructuring_param.js:5:17

Strict mode function may not have duplicate parameter names

   5| function g(a, { a }) {
                      ^


Error ----------------------------------------------------------------------------------------------------- eager.js:2:3

Property `x` is missing in null [1]. [incompatible-use]

   eager.js:2:3
   2| ({x} = null); // error, property `x` can not be accessed on `null`
        ^

References:
   eager.js:2:8
   2| ({x} = null); // error, property `x` can not be accessed on `null`
             ^^^^ [1]


Error -------------------------------------------------------------------------------------------- empty_patterns.js:5:4

Unsupported expression pattern in destructuring. [unsupported-syntax]

   5|   [m.foo] = (1: any); // only unsupported syntax error
         ^^^^^


Error -------------------------------------------------------------------------------------------- empty_patterns.js:6:4

Unsupported expression pattern in destructuring. [unsupported-syntax]

   6|   [m.foo, {bar: [m.baz]}] = (1: any); // only unsupported syntax error
         ^^^^^


Error ------------------------------------------------------------------------------------------- empty_patterns.js:6:18

Unsupported expression pattern in destructuring. [unsupported-syntax]

   6|   [m.foo, {bar: [m.baz]}] = (1: any); // only unsupported syntax error
                       ^^^^^


Error ------------------------------------------------------------------------------------------ empty_patterns.js:11:15

Missing an annotation on destructuring. [missing-local-annot]

   11|   function f1({}): void {} // error: missing-local-annot
                     ^^


Error ------------------------------------------------------------------------------------------ empty_patterns.js:12:15

Missing an annotation on destructuring. [missing-local-annot]

   12|   function g1([]): void {} // error: missing-local-annot
                     ^^


Error ------------------------------------------------------------------------------------------ empty_patterns.js:13:15

Missing an annotation on destructuring. [missing-local-annot]

   13|   function f2({}) { return 1 } // error: missing-local-annot
                     ^^


Error ------------------------------------------------------------------------------------------ empty_patterns.js:14:15

Missing an annotation on destructuring. [missing-local-annot]

   14|   function g2([]) { return 1 } // error: missing-local-annot
                     ^^


Error ----------------------------------------------------------------------------------------- literal_defaults.js:9:14

Cannot assign string to `s` because string [1] is incompatible with string literal `s` [2]. [incompatible-type]

   literal_defaults.js:9:14
   9|   const {s = 'xxx'} = o; // ERROR
                   ^^^^^ [1]

References:
   literal_defaults.js:2:6
   2|   s: 's',
           ^^^ [2]


Error ---------------------------------------------------------------------------------------- literal_defaults.js:14:14

Cannot assign number to `n` because number [1] is incompatible with number literal `1` [2]. [incompatible-type]

   literal_defaults.js:14:14
   14|   const {n = 999999} = o; // ERROR
                    ^^^^^^ [1]

References:
   literal_defaults.js:3:6
    3|   n: 1,
            ^ [2]


Error ---------------------------------------------------------------------------------------- literal_defaults.js:19:14

Cannot assign boolean to `b` because boolean [1] is incompatible with boolean literal `true` [2]. [incompatible-type]

   literal_defaults.js:19:14
   19|   const {b = false} = o; // ERROR
                    ^^^^^ [1]

References:
   literal_defaults.js:4:6
    4|   b: true,
            ^^^^ [2]


Error ---------------------------------------------------------------------------------------- literal_defaults.js:24:14

Cannot assign bigint to `i` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-type]

   literal_defaults.js:24:14
   24|   const {i = 999999n} = o; // ERROR
                    ^^^^^^^ [1]

References:
   literal_defaults.js:5:6
    5|   i: 1n,
            ^^ [2]


Error ------------------------------------------------------------------------------------------------ number_lit.js:8:3

Cannot cast `x` to empty because string literal `a` [1] is incompatible with empty [2]. [incompatible-cast]

   number_lit.js:8:3
   8|   x as empty; // ERROR
        ^

References:
   number_lit.js:2:6
   2|   0: 'a',
           ^^^ [1]
   number_lit.js:8:8
   8|   x as empty; // ERROR
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- object_rest.js:5:9

Cannot assign `0` to `o1_rest.x` because property `x` is missing in rest of object pattern [1]. [prop-missing]

   object_rest.js:5:9
   5| o1_rest.x = 0; // error: rest result is sealed
              ^

References:
   object_rest.js:3:15
   3| var {p:p1, ...o1_rest} = o1;
                    ^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_rest.js:11:9

Cannot assign `0` to `o2_rest.x` because property `x` is missing in rest of object pattern [1]. [prop-missing]

   object_rest.js:11:9
   11| o2_rest.x = 0; // error: rest result is sealed
               ^

References:
   object_rest.js:9:15
    9| var {p:p2, ...o2_rest} = o2;
                     ^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_rest.js:16:9

Cannot assign `0` to `o3_rest.x` because property `x` is missing in rest of object pattern [1]. [prop-missing]

   object_rest.js:16:9
   16| o3_rest.x = 0; // error: rest result is sealed
               ^

References:
   object_rest.js:14:15
   14| var {p:p3, ...o3_rest} = o3;
                     ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ string_lit.js:2:2

Cannot cast `val` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   string_lit.js:2:2
   2| (val: void); // error: string ~> void
       ^^^

References:
   string_lit.js:1:29
   1| var { "key": val } = { key: "val" };
                                  ^^^^^ [1]
   string_lit.js:2:7
   2| (val: void); // error: string ~> void
            ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- tuple.js:5:4

Cannot cast `a` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   tuple.js:5:4
   5|   (a: empty); // ERROR
         ^

References:
   tuple.js:2:21
   2|   declare const x: [string];
                          ^^^^^^ [1]
   tuple.js:5:7
   5|   (a: empty); // ERROR
            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuple.js:11:10

Property `0` is missing in object type [1]. [prop-missing]

   tuple.js:11:10
   11|   const [x] = o; // ERROR
                ^

References:
   tuple.js:10:20
   10|   declare const o: {foo: 1};
                          ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuple.js:16:10

Property `0` is missing in statics of function type [1]. [prop-missing]

   tuple.js:16:10
   16|   const [x] = f; // ERROR
                ^

References:
   tuple.js:15:20
   15|   declare const f: number => boolean;
                          ^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- unannotated.js:6:5

Cannot get `x.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   unannotated.js:6:5
   6|   x.bar
          ^^^

References:
   unannotated.js:2:6
   2|   x: { foo: "foo" }
           ^^^^^^^^^^^^^^ [1]



Found 112 errors
