
Test a:
a1.js:3
  3: function foo(x: number): string { return 5; }
                                              ^ number. This type is incompatible with the expected return type of
  3: function foo(x: number): string { return 5; }
                              ^^^^^^ string

a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): string { return 5; }
                     ^^^^^^ number. See: a1.js:3


Found 2 errors
a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number. See: a1.js:3

a3.js:5
  5: (five + five: string);
      ^^^^^^^^^^^ number. This type is incompatible with
  5: (five + five: string);
                   ^^^^^^ string


Found 2 errors
a1.js:5
  5: foo("");
         ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number

a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number. See: a1.js:3

a3.js:5
  5: (five + five: string);
      ^^^^^^^^^^^ number. This type is incompatible with
  5: (five + five: string);
                   ^^^^^^ string


Found 3 errors

Test b:
b3.js:5
  5: (new D: C);
      ^^^^^ D. This type is incompatible with
  5: (new D: C);
             ^ C


Found 1 error
No errors!

Test c:
c2.js:6
  6:   foo({ y: 0 });
       ^^^^^^^^^^^^^ function call
  3: export function foo(props: { x: number }) { }
                                ^^^^^^^^^^^^^ property `x`. Property not found in. See: c1.js:3
  6:   foo({ y: 0 });
           ^^^^^^^^ object literal

c3.js:5
  5: bar({ x: 0 });
     ^^^^^^^^^^^^^ function call
  5: export function bar(props: { y: number }) {
                                ^^^^^^^^^^^^^ property `y`. Property not found in. See: c2.js:5
  5: bar({ x: 0 });
         ^^^^^^^^ object literal


Found 2 errors
c3.js:5
  5: bar({ x: 0 });
     ^^^^^^^^^^^^^ function call
  5: export function bar(props: { y: number }) {
                                ^^^^^^^^^^^^^ property `y`. Property not found in. See: c2.js:5
  5: bar({ x: 0 });
         ^^^^^^^^ object literal


Found 1 error

Test d:
d2.js:4
  4: export var y: A = x;
                       ^ B. This type is incompatible with
  4: export var y: A = x;
                   ^ A


Found 1 error

Test e:
e2.js:6
  6:   return { type: 'QUX' };
              ^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  5: const f = (): Action => {
                   ^^^^^^ union: object type(s)
  Member 1:
    4:   | { type: 'FOO' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:4
  Error:
    6:   return { type: 'QUX' };
                        ^^^^^ string. Expected string literal `FOO`, got `QUX` instead
    4:   | { type: 'FOO' }
                   ^^^^^ string literal `FOO`. See: e1.js:4
  Member 2:
    5:   | { type: 'BAR' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:5
  Error:
    6:   return { type: 'QUX' };
                        ^^^^^ string. Expected string literal `BAR`, got `QUX` instead
    5:   | { type: 'BAR' }
                   ^^^^^ string literal `BAR`. See: e1.js:5


Found 1 error
No errors!
No errors!

Test f:
f2.js:4
  4: (c: { x: number });
      ^ object type. This type is incompatible with
  4: (c: { x: number });
         ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      4: type S = { x: string };
                       ^^^^^^ string. This type is incompatible with. See: f1.js:4
      4: (c: { x: number });
                  ^^^^^^ number

f2.js:4
  4: (c: { x: number });
      ^ object type. This type is incompatible with
  4: (c: { x: number });
         ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      4: (c: { x: number });
                  ^^^^^^ number. This type is incompatible with
      4: type S = { x: string };
                       ^^^^^^ string. See: f1.js:4


Found 2 errors
No errors!
No errors!
f2.js:4
  4: (c: { x: number });
      ^ object type. This type is incompatible with
  4: (c: { x: number });
         ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      4: type S = { x: string };
                       ^^^^^^ string. This type is incompatible with. See: f1.js:4
      4: (c: { x: number });
                  ^^^^^^ number

f2.js:4
  4: (c: { x: number });
      ^ object type. This type is incompatible with
  4: (c: { x: number });
         ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      4: (c: { x: number });
                  ^^^^^^ number. This type is incompatible with
      4: type S = { x: string };
                       ^^^^^^ string. See: f1.js:4


Found 2 errors

Test g:
No errors!

Test h:
h2.js:3
  3: import type { Foo } from './h1';
                   ^^^ Named import from module `./h1`. This module has no named export called `Foo`.


Found 1 error

Test i:
i2.js:5
  5: foo.p = 0;
     ^^^ object type. Covariant property `p` incompatible with contravariant use in
  5: foo.p = 0;
     ^^^^^ assignment of property `p`


Found 1 error

Test j:
j2.js:5
  5: foo.p = 0;
     ^^^ object type. Covariant property `p` incompatible with contravariant use in
  5: foo.p = 0;
     ^^^^^ assignment of property `p`


Found 1 error

Test k:
k.js:4
  4: (x.p: string);
        ^ property `p`. Property not found in
  4: (x.p: string);
      ^ object type


Found 1 error
No errors!
k.js:4
  4: (x.p: string);
        ^ property `p`. Property not found in
  4: (x.p: string);
      ^ object type


Found 1 error
