Error --------------------------------------------------------------------------------------------------- fetch.js:12:28

Cannot assign `fetch(...)` to `b` because `Response` [1] is incompatible with string [2] in type argument `R` [3].

   fetch.js:12:28
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                                    ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1116:76
   1116| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [1]
   fetch.js:12:18
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                          ^^^^^^ [2]
   <BUILTINS>/core.js:625:24
    625| declare class Promise<+R> {
                                ^ [3]


Error --------------------------------------------------------------------------------------------------- fetch.js:25:26

Cannot assign `fetch(...)` to `d` because `Blob` [1] is incompatible with `Response` [2] in type argument `R` [3].

   fetch.js:25:26
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                                  ^^^^^^^^^^^^^^^^^^

References:
   fetch.js:25:18
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                          ^^^^ [1]
   <BUILTINS>/bom.js:1116:76
   1116| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [2]
   <BUILTINS>/core.js:625:24
    625| declare class Promise<+R> {
                                ^ [3]


Error -------------------------------------------------------------------------------------------------- headers.js:3:23

Cannot call `Headers` with `''Content-T...'` bound to `init` because:
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with object type [3].

   headers.js:3:23
     3| const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:981:20
   981| type HeadersInit = Headers | {[key: string]: string};
                           ^^^^^^^ [2]
   <BUILTINS>/bom.js:981:30
   981| type HeadersInit = Headers | {[key: string]: string};
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- headers.js:4:23

Cannot call `Headers` with array literal bound to `init` because:
 - Either array literal [1] is incompatible with `Headers` [2].
 - Or array literal [1] is incompatible with object type [3].

   headers.js:4:23
     4| const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:981:20
   981| type HeadersInit = Headers | {[key: string]: string};
                           ^^^^^^^ [2]
   <BUILTINS>/bom.js:981:30
   981| type HeadersInit = Headers | {[key: string]: string};
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- headers.js:9:1

Cannot call `e.append` because function [1] requires another argument.

   headers.js:9:1
     9| e.append('Content-Type'); // not correct
        ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:989:5
   989|     append(name: string, value: string): void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:10:1

Cannot call `e.append` because function [1] requires another argument.

   headers.js:10:1
    10| e.append({'Content-Type': 'image/jpeg'}); // not correct
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:989:5
   989|     append(name: string, value: string): void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- headers.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].

   headers.js:10:10
    10| e.append({'Content-Type': 'image/jpeg'}); // not correct
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:989:18
   989|     append(name: string, value: string): void;
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:12:1

Cannot call `e.set` because function [1] requires another argument.

   headers.js:12:1
    12| e.set('Content-Type'); // not correct
        ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:996:5
   996|     set(name: string, value: string): void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:1

Cannot call `e.set` because function [1] requires another argument.

   headers.js:13:1
    13| e.set({'Content-Type': 'image/jpeg'}); // not correct
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:996:5
   996|     set(name: string, value: string): void;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].

   headers.js:13:7
    13| e.set({'Content-Type': 'image/jpeg'}); // not correct
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:996:15
   996|     set(name: string, value: string): void;
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:15:20

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `Headers` [2].

   headers.js:15:20
    15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:989:42
   989|     append(name: string, value: string): void;
                                                 ^^^^ [1]
   headers.js:15:10
    15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                 ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2].

   headers.js:17:19
    17| const g: string = e.get('Content-Type'); // correct
                          ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:993:24
   993|     get(name: string): null | string;
                               ^^^^ [1]
   headers.js:17:10
    17| const g: string = e.get('Content-Type'); // correct
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:18:19

Cannot assign `e.get(...)` to `h` because:
 - null [1] is incompatible with number [2].
 - string [3] is incompatible with number [2].

   headers.js:18:19
    18| const h: number = e.get('Content-Type'); // not correct
                          ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:993:24
   993|     get(name: string): null | string;
                               ^^^^ [1]
   headers.js:18:10
    18| const h: number = e.get('Content-Type'); // not correct
                 ^^^^^^ [2]
   <BUILTINS>/bom.js:993:31
   993|     get(name: string): null | string;
                                      ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- headers.js:28:1

Cannot call `e.getAll` because property `getAll` is missing in `Headers` [1].

   headers.js:28:1
   28| e.getAll('content-type'); // incorrect
       ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   headers.js:7:10
    7| const e: Headers = new Headers(); // correct
                ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- request.js:2:20

Cannot call `Request` because:
 - Either undefined [1] is incompatible with `Request` [2].
 - Or undefined [1] is incompatible with `URL` [3].
 - Or undefined [1] is incompatible with string [4].

   request.js:2:20
      2| const a: Request = new Request(); // incorrect
                            ^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1028:20
   1028| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1028:30
   1028| type RequestInfo = Request | URL | string;
                                      ^^^ [3]
   <BUILTINS>/bom.js:1028:36
   1028| type RequestInfo = Request | URL | string;
                                            ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because:
 - enum [1] is incompatible with undefined [2] in property `cache`.
 - enum [3] is incompatible with undefined [4] in property `credentials`.
 - `Headers` [5] is incompatible with object type [6] in property `headers`.
 - `Headers` [5] is incompatible with undefined [6] in property `headers`.
 - string [7] is incompatible with undefined [8] in property `integrity`.
 - string [9] is incompatible with undefined [10] in property `method`.
 - enum [11] is incompatible with undefined [12] in property `mode`.
 - enum [13] is incompatible with undefined [14] in property `redirect`.
 - string [15] is incompatible with undefined [16] in property `referrer`.
 - enum [17] is incompatible with undefined [18] in property `referrerPolicy`.

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1085:12
   1085|     cache: CacheType;
                    ^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1033:13
   1033|     cache?: CacheType;
                     ^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1086:18
   1086|     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1034:19
   1034|     credentials?: CredentialsType;
                           ^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/bom.js:1087:14
   1087|     headers: Headers;
                      ^^^^^^^ [5]
   <BUILTINS>/bom.js:1035:15
   1035|     headers?: HeadersInit;
                       ^^^^^^^^^^^ [6]
   <BUILTINS>/bom.js:1088:16
   1088|     integrity: string;
                        ^^^^^^ [7]
   <BUILTINS>/bom.js:1036:17
   1036|     integrity?: string;
                         ^^^^^^ [8]
   <BUILTINS>/bom.js:1089:13
   1089|     method: string;
                     ^^^^^^ [9]
   <BUILTINS>/bom.js:1038:14
   1038|     method?: string;
                      ^^^^^^ [10]
   <BUILTINS>/bom.js:1090:11
   1090|     mode: ModeType;
                   ^^^^^^^^ [11]
   <BUILTINS>/bom.js:1039:12
   1039|     mode?: ModeType;
                    ^^^^^^^^ [12]
   <BUILTINS>/bom.js:1091:15
   1091|     redirect: RedirectType;
                       ^^^^^^^^^^^^ [13]
   <BUILTINS>/bom.js:1040:16
   1040|     redirect?: RedirectType;
                        ^^^^^^^^^^^^ [14]
   <BUILTINS>/bom.js:1092:15
   1092|     referrer: string;
                       ^^^^^^ [15]
   <BUILTINS>/bom.js:1041:16
   1041|     referrer?: string;
                        ^^^^^^ [16]
   <BUILTINS>/bom.js:1093:21
   1093|     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ [17]
   <BUILTINS>/bom.js:1042:22
   1042|     referrerPolicy?: ReferrerPolicyType;
                              ^^^^^^^^^^^^^^^^^^ [18]


Error -------------------------------------------------------------------------------------------------- request.js:8:32

Cannot call `Request` with object literal bound to `input` because:
 - Either object literal [1] is incompatible with `Request` [2].
 - Or object literal [1] is incompatible with `URL` [3].

   request.js:8:32
      8| const f: Request = new Request({}) // incorrect
                                        ^^ [1]

References:
   <BUILTINS>/bom.js:1028:20
   1028| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1028:30
   1028| type RequestInfo = Request | URL | string;
                                      ^^^ [3]


Error -------------------------------------------------------------------------------------------------- request.js:24:1

Cannot call `h.text().then` because `Buffer` [1] is incompatible with string [2] in the first argument.

   request.js:24:1
     24| h.text().then((t: Buffer) => t); // incorrect
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   request.js:24:19
     24| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1102:21
   1102|     text(): Promise<string>;
                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:26:1

Cannot call `h.arrayBuffer().then` because `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first argument.

   request.js:26:1
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1098:28
   1098|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   request.js:26:27
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- request.js:54:54

Cannot call `Request` with object literal bound to `init` because in property `headers`:
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with object type [3].

   request.js:54:54
                                                             v
    54| const l: Request = new Request('http://example.org', {
    55|   method: 'GET',
    56|   headers: 'Content-Type: image/jpeg',
    57|   mode: 'cors',
    58|   cache: 'default'
    59| }) // incorrect - headers is string
        ^

References:
   request.js:56:12
    56|   headers: 'Content-Type: image/jpeg',
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:981:20
   981| type HeadersInit = Headers | {[key: string]: string};
                           ^^^^^^^ [2]
   <BUILTINS>/bom.js:981:30
   981| type HeadersInit = Headers | {[key: string]: string};
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- request.js:63:18

Cannot call `Request` with object literal bound to `init` because null [1] is incompatible with string [2] in property
`method`.

   request.js:63:18
     63| new Request('/', { method: null }); // incorrect
                          ^^^^^^^^^^^^^^^^

References:
   request.js:63:28
     63| new Request('/', { method: null }); // incorrect
                                    ^^^^ [1]
   <BUILTINS>/bom.js:1038:14
   1038|     method?: string;
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:8:18

Cannot call `Response` with object literal bound to `init` because string [1] is incompatible with number [2] in
property `status`.

   response.js:8:18
      8| new Response("", { status: "404" }); // incorrect
                          ^^^^^^^^^^^^^^^^^

References:
   response.js:8:28
      8| new Response("", { status: "404" }); // incorrect
                                    ^^^^^ [1]
   <BUILTINS>/bom.js:1048:14
   1048|     status?: number;
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:9:18

Cannot call `Response` with object literal bound to `init` because null [1] is incompatible with number [2] in property
`status`.

   response.js:9:18
      9| new Response("", { status: null }); // incorrect
                          ^^^^^^^^^^^^^^^^

References:
   response.js:9:28
      9| new Response("", { status: null }); // incorrect
                                    ^^^^ [1]
   <BUILTINS>/bom.js:1048:14
   1048|     status?: number;
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ response.js:11:50

Cannot call `Response` with object literal bound to `init` because in property `headers`:
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with object type [3].

   response.js:11:50
                                                         v
    11| const f: Response = new Response("responsebody", {
    12|     status: 404,
    13|     headers: "'Content-Type': 'image/jpeg'"
    14| }); // incorrect
        ^

References:
   response.js:13:14
    13|     headers: "'Content-Type': 'image/jpeg'"
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:981:20
   981| type HeadersInit = Headers | {[key: string]: string};
                           ^^^^^^^ [2]
   <BUILTINS>/bom.js:981:30
   981| type HeadersInit = Headers | {[key: string]: string};
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ response.js:30:34

Cannot call `Response` with object literal bound to `input` because:
 - Either object literal [1] is incompatible with `URLSearchParams` [2].
 - Or object literal [1] is incompatible with `FormData` [3].
 - Or object literal [1] is incompatible with `Blob` [4].
 - Or object literal [1] is incompatible with `ArrayBuffer` [5].
 - Or object literal [1] is incompatible with `$TypedArray` [6].
 - Or object literal [1] is incompatible with `DataView` [7].
 - Or object literal [1] is incompatible with `ReadableStream` [8].

   response.js:30:34
                                          v
     30| const i: Response = new Response({
     31|     status: 404,
     32|     headers: new Headers({
     33|         'Content-Type': 'image/jpeg'
     34|     })
     35| }); // incorrect
         ^ [1]

References:
   <BUILTINS>/bom.js:1026:26
   1026| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                  ^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1026:44
   1026| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                    ^^^^^^^^ [3]
   <BUILTINS>/bom.js:1026:55
   1026| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                               ^^^^ [4]
   <BUILTINS>/bom.js:1026:62
   1026| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                      ^^^^^^^^^^^ [5]
   <BUILTINS>/core.js:670:25
    670| type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ [6]
   <BUILTINS>/core.js:670:39
    670| type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ [7]
   <BUILTINS>/bom.js:1026:95
   1026| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                                                       ^^^^^^^^^^^^^^ [8]


Error ------------------------------------------------------------------------------------------------- response.js:42:1

Cannot call `h.text().then` because `Buffer` [1] is incompatible with string [2] in the first argument.

   response.js:42:1
     42| h.text().then((t: Buffer) => t); // incorrect
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   response.js:42:19
     42| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1076:21
   1076|     text(): Promise<string>;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:44:1

Cannot call `h.arrayBuffer().then` because `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first argument.

   response.js:44:1
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1072:28
   1072|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   response.js:44:27
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:4:31

Cannot call `URLSearchParams` with array literal bound to `query` because:
 - string [1] is incompatible with tuple type [2] in array element.
 - string [3] is incompatible with tuple type [2] in array element.

   urlsearchparams.js:4:31
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                       ^^^^^^^^^^^^^^^^^^

References:
   urlsearchparams.js:4:32
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                        ^^^^^^ [1]
   <BUILTINS>/bom.js:1002:58
   1002|     constructor(query?: string | URLSearchParams | Array<[string, string]> | {[string]: string} ): void;
                                                                  ^^^^^^^^^^^^^^^^ [2]
   urlsearchparams.js:4:40
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                                ^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- urlsearchparams.js:9:1

Cannot call `e.append` because function [1] requires another argument.

   urlsearchparams.js:9:1
      9| e.append('key1'); // not correct
         ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1003:5
   1003|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:10:1

Cannot call `e.append` because function [1] requires another argument.

   urlsearchparams.js:10:1
     10| e.append({'key1': 'value1'}); // not correct
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1003:5
   1003|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].

   urlsearchparams.js:10:10
     10| e.append({'key1': 'value1'}); // not correct
                  ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1003:18
   1003|     append(name: string, value: string): void;
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:12:1

Cannot call `e.set` because function [1] requires another argument.

   urlsearchparams.js:12:1
     12| e.set('key1'); // not correct
         ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1011:5
   1011|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:1

Cannot call `e.set` because function [1] requires another argument.

   urlsearchparams.js:13:1
     13| e.set({'key1': 'value1'}); // not correct
         ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1011:5
   1011|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].

   urlsearchparams.js:13:7
     13| e.set({'key1': 'value1'}); // not correct
               ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1011:15
   1011|     set(name: string, value: string): void;
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:15:28

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `URLSearchParams` [2].

   urlsearchparams.js:15:28
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1003:42
   1003|     append(name: string, value: string): void;
                                                  ^^^^ [1]
   urlsearchparams.js:15:10
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                  ^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2].

   urlsearchparams.js:17:19
     17| const g: string = e.get('key1'); // correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1007:24
   1007|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:17:10
     17| const g: string = e.get('key1'); // correct
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:18:19

Cannot assign `e.get(...)` to `h` because:
 - null [1] is incompatible with number [2].
 - string [3] is incompatible with number [2].

   urlsearchparams.js:18:19
     18| const h: number = e.get('key1'); // not correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1007:24
   1007|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:18:10
     18| const h: number = e.get('key1'); // not correct
                  ^^^^^^ [2]
   <BUILTINS>/bom.js:1007:31
   1007|     get(name: string): null | string;
                                       ^^^^^^ [3]



Found 49 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
