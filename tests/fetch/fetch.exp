fetch.js:12
 12: const b: Promise<string> = fetch(myRequest); // incorrect
                      ^^^^^^ string. This type is incompatible with
924: declare function fetch(input: string | Request, init?: RequestOptions): Promise<Response>;
                                                                                     ^^^^^^^^ Response. See lib: <BUILTINS>/bom.js:924

fetch.js:25
 25: const d: Promise<Blob> = fetch('image.png'); // incorrect
                      ^^^^ Blob. This type is incompatible with
924: declare function fetch(input: string | Request, init?: RequestOptions): Promise<Response>;
                                                                                     ^^^^^^^^ Response. See lib: <BUILTINS>/bom.js:924

headers.js:3
  3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
811:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:811
  Member 1:
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Member 2:
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804

headers.js:4
  4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
811:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:811
  Member 1:
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Member 2:
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804

headers.js:9
  9: e.append('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
  9: e.append('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
812:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:812

headers.js:10
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
812:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:812

headers.js:10
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
812:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:812

headers.js:12
 12: e.set('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 12: e.set('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
819:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:819

headers.js:13
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
819:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:819

headers.js:13
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
819:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:819

headers.js:15
 15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
              ^^^^^^^ Headers

headers.js:18
 18: const h: number = e.get('Content-Type'); // not correct
                       ^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 18: const h: number = e.get('Content-Type'); // not correct
              ^^^^^^ number

request.js:2
  2: const a: Request = new Request(); // incorrect
                        ^^^^^^^^^^^^^ constructor call
  2: const a: Request = new Request(); // incorrect
                        ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
899:     constructor(input: string | Request, init?: RequestOptions): void;
                            ^^^^^^^^^^^^^^^^ union: string | Request. See lib: <BUILTINS>/bom.js:899
  Member 1:
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:899
  Error:
    2: const a: Request = new Request(); // incorrect
                          ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:899
  Member 2:
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:899
  Error:
    2: const a: Request = new Request(); // incorrect
                          ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:899

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `cache` is incompatible:
    853:     cache?: CacheType;
                     ^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:853
    904:     cache: CacheType;
                    ^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:904

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `credentials` is incompatible:
    854:     credentials?: CredentialsType;
                           ^^^^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:854
    905:     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:905

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `headers` is incompatible:
    855:     headers?: HeadersInit;
                       ^^^^^^^^^^^ object type. This type is incompatible with. See lib: <BUILTINS>/bom.js:855
    906:     headers: Headers;
                      ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:906

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `headers` is incompatible:
    855:     headers?: HeadersInit;
                       ^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:855
    906:     headers: Headers;
                      ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:906

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `integrity` is incompatible:
    856:     integrity?: string;
                         ^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:856
    907:     integrity: string;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:907

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `method` is incompatible:
    858:     method?: string;
                      ^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:858
    908:     method: string;
                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:908

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `mode` is incompatible:
    859:     mode?: ModeType;
                    ^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:859
    909:     mode: ModeType;
                   ^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:909

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `redirect` is incompatible:
    860:     redirect?: RedirectType;
                        ^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:860
    910:     redirect: RedirectType;
                       ^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:910

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `referrerPolicy` is incompatible:
    862:     referrerPolicy?: ReferrerPolicyType;
                              ^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:862
    912:     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:912

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `referrer` is incompatible:
    861:     referrer?: string;
                        ^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:861
    911:     referrer: string;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:911

request.js:8
  8: const f: Request = new Request({}) // incorrect
                        ^^^^^^^^^^^^^^^ constructor call
  8: const f: Request = new Request({}) // incorrect
                                    ^^ object literal. This type is incompatible with
899:     constructor(input: string | Request, init?: RequestOptions): void;
                            ^^^^^^^^^^^^^^^^ union: string | Request. See lib: <BUILTINS>/bom.js:899
  Member 1:
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:899
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:899
  Member 2:
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:899
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  899:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:899

request.js:23
 23: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Buffer. This type is incompatible with an argument type of
921:     text(): Promise<string>;
                         ^^^^^^ string. See lib: <BUILTINS>/bom.js:921

request.js:25
 25: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Buffer. This type is incompatible with the expected param type of
917:     arrayBuffer(): Promise<ArrayBuffer>;
                                ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:917

request.js:53
                        v----------------------------------
 53: const l: Request = new Request('http://example.org', {
 54:   method: 'GET',
 55:   headers: 'Content-Type: image/jpeg',
...:
 58: }) // incorrect - headers is string
     -^ constructor call
 55:   headers: 'Content-Type: image/jpeg',
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
855:     headers?: HeadersInit;
                   ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:855
  Member 1:
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Error:
   55:   headers: 'Content-Type: image/jpeg',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Member 2:
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804
  Error:
   55:   headers: 'Content-Type: image/jpeg',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804

request.js:62
 62: new Request('/', { method: null }); // incorrect
                      ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
899:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:899
  Property `method` is incompatible:
     62: new Request('/', { method: null }); // incorrect
                                    ^^^^ null. This type is incompatible with
    858:     method?: string;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:858

response.js:7
  7: new Response("", { status: "404" }); // incorrect
                      ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
873:     constructor(input?: BodyInit, init?: ResponseOptions): void;
                                              ^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:873
  Property `status` is incompatible:
      7: new Response("", { status: "404" }); // incorrect
                                    ^^^^^ string. This type is incompatible with
    867:     status?: number;
                      ^^^^^^ number. See lib: <BUILTINS>/bom.js:867

response.js:8
  8: new Response("", { status: null }); // incorrect
                      ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
873:     constructor(input?: BodyInit, init?: ResponseOptions): void;
                                              ^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:873
  Property `status` is incompatible:
      8: new Response("", { status: null }); // incorrect
                                    ^^^^ null. This type is incompatible with
    867:     status?: number;
                      ^^^^^^ number. See lib: <BUILTINS>/bom.js:867

response.js:10
                         v-----------------------------
 10: const f: Response = new Response("responsebody", {
 11:     status: 404,
 12:     headers: "'Content-Type': 'image/jpeg'"
 13: }); // incorrect
     -^ constructor call
 12:     headers: "'Content-Type': 'image/jpeg'"
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
869:     headers?: HeadersInit
                   ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:869
  Member 1:
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Error:
   12:     headers: "'Content-Type': 'image/jpeg'"
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:804
  Member 2:
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804
  Error:
   12:     headers: "'Content-Type': 'image/jpeg'"
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  804: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:804

response.js:29
                         v-------------
 29: const i: Response = new Response({
 30:     status: 404,
 31:     headers: new Headers({
...:
 34: }); // incorrect
     -^ constructor call
                                      v
 29: const i: Response = new Response({
 30:     status: 404,
 31:     headers: new Headers({
...:
 34: }); // incorrect
     ^ object literal. This type is incompatible with
873:     constructor(input?: BodyInit, init?: ResponseOptions): void;
                             ^^^^^^^^ union: string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView. See lib: <BUILTINS>/bom.js:873
  Member 1:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:848
  Member 2:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:848
  Member 3:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:848
  Member 4:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:848
  Member 5:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:848
  Member 6:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ $ArrayBufferView. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   29: const i: Response = new Response({
   30:     status: 404,
   31:     headers: new Headers({
  ...:
   34: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ union: $TypedArray | DataView. See lib: <BUILTINS>/bom.js:848
    Member 1:
    685: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:685
    Error:
                                          v
     29: const i: Response = new Response({
     30:     status: 404,
     31:     headers: new Headers({
    ...:
     34: }); // incorrect
         ^ object literal. This type is incompatible with
    685: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:685
    Member 2:
    685: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:685
    Error:
                                          v
     29: const i: Response = new Response({
     30:     status: 404,
     31:     headers: new Headers({
    ...:
     34: }); // incorrect
         ^ object literal. This type is incompatible with
    685: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:685

response.js:41
 41: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Buffer. This type is incompatible with an argument type of
895:     text(): Promise<string>;
                         ^^^^^^ string. See lib: <BUILTINS>/bom.js:895

response.js:43
 43: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Buffer. This type is incompatible with the expected param type of
891:     arrayBuffer(): Promise<ArrayBuffer>;
                                ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:891

urlsearchparams.js:4
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                   ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
825:     constructor(query?: string | URLSearchParams): void;
                             ^^^^^^^^^^^^^^^^^^^^^^^^ union: string | URLSearchParams. See lib: <BUILTINS>/bom.js:825
  Member 1:
  825:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:825
  Error:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                     ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  825:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:825
  Member 2:
  825:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:825
  Error:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                     ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  825:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:825

urlsearchparams.js:5
  5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                   ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
825:     constructor(query?: string | URLSearchParams): void;
                             ^^^^^^^^^^^^^^^^^^^^^^^^ union: string | URLSearchParams. See lib: <BUILTINS>/bom.js:825
  Member 1:
  825:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:825
  Error:
    5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                     ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  825:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:825
  Member 2:
  825:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:825
  Error:
    5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                     ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  825:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:825

urlsearchparams.js:9
  9: e.append('key1'); // not correct
     ^^^^^^^^^^^^^^^^ call of method `append`
  9: e.append('key1'); // not correct
     ^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
826:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:826

urlsearchparams.js:10
 10: e.append({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
 10: e.append({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
826:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:826

urlsearchparams.js:10
 10: e.append({'key1', 'value1'}); // not correct
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
826:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:826

urlsearchparams.js:12
 12: e.set('key1'); // not correct
     ^^^^^^^^^^^^^ call of method `set`
 12: e.set('key1'); // not correct
     ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
833:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:833

urlsearchparams.js:13
 13: e.set({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 13: e.set({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
833:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:833

urlsearchparams.js:13
 13: e.set({'key1', 'value1'}); // not correct
           ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
833:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:833

urlsearchparams.js:15
 15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
              ^^^^^^^^^^^^^^^ URLSearchParams

urlsearchparams.js:18
 18: const h: number = e.get('key1'); // not correct
                       ^^^^^^^^^^^^^ string. This type is incompatible with
 18: const h: number = e.get('key1'); // not correct
              ^^^^^^ number


Found 44 errors
