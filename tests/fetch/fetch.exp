fetch.js:12
 12: const b: Promise<string> = fetch(myRequest); // incorrect
                      ^^^^^^ string. This type is incompatible with
921: declare function fetch(input: string | Request, init?: RequestOptions): Promise<Response>;
                                                                                     ^^^^^^^^ Response. See lib: <BUILTINS>/bom.js:921

fetch.js:25
 25: const d: Promise<Blob> = fetch('image.png'); // incorrect
                      ^^^^ Blob. This type is incompatible with
921: declare function fetch(input: string | Request, init?: RequestOptions): Promise<Response>;
                                                                                     ^^^^^^^^ Response. See lib: <BUILTINS>/bom.js:921

headers.js:3
  3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
812:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:812
  Member 1:
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Member 2:
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805

headers.js:4
  4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
812:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:812
  Member 1:
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Member 2:
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805

headers.js:9
  9: e.append('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
  9: e.append('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
813:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:813

headers.js:10
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
813:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:813

headers.js:10
 10: e.append({'Content-Type', 'image/jpeg'}); // not correct
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
813:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:813

headers.js:12
 12: e.set('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 12: e.set('Content-Type'); // not correct
     ^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
820:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:820

headers.js:13
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
820:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:820

headers.js:13
 13: e.set({'Content-Type', 'image/jpeg'}); // not correct
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
820:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:820

headers.js:15
 15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
              ^^^^^^^ Headers

headers.js:18
 18: const h: number = e.get('Content-Type'); // not correct
                       ^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 18: const h: number = e.get('Content-Type'); // not correct
              ^^^^^^ number

request.js:2
  2: const a: Request = new Request(); // incorrect
                        ^^^^^^^^^^^^^ constructor call
  2: const a: Request = new Request(); // incorrect
                        ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
896:     constructor(input: string | Request, init?: RequestOptions): void;
                            ^^^^^^^^^^^^^^^^ union: string | Request. See lib: <BUILTINS>/bom.js:896
  Member 1:
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:896
  Error:
    2: const a: Request = new Request(); // incorrect
                          ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:896
  Member 2:
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:896
  Error:
    2: const a: Request = new Request(); // incorrect
                          ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:896

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `cache` is incompatible:
    853:     cache?: ?CacheType;
                     ^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:853
    901:     cache: CacheType;
                    ^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:901

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `cache` is incompatible:
    853:     cache?: ?CacheType;
                     ^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:853
    901:     cache: CacheType;
                    ^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:901

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `credentials` is incompatible:
    854:     credentials?: ?CredentialsType;
                           ^^^^^^^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:854
    902:     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:902

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `credentials` is incompatible:
    854:     credentials?: ?CredentialsType;
                           ^^^^^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:854
    902:     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:902

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `headers` is incompatible:
    855:     headers?: ?HeadersInit;
                       ^^^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:855
    903:     headers: Headers;
                      ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:903

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `headers` is incompatible:
    855:     headers?: ?HeadersInit;
                       ^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:855
    903:     headers: Headers;
                      ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:903

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `headers` is incompatible:
    855:     headers?: ?HeadersInit;
                        ^^^^^^^^^^^ object type. This type is incompatible with. See lib: <BUILTINS>/bom.js:855
    903:     headers: Headers;
                      ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:903

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `integrity` is incompatible:
    856:     integrity?: ?string;
                         ^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:856
    904:     integrity: string;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:904

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `integrity` is incompatible:
    856:     integrity?: ?string;
                         ^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:856
    904:     integrity: string;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:904

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `method` is incompatible:
    857:     method?: ?MethodType;
                      ^^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:857
    905:     method: MethodType;
                     ^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:905

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `method` is incompatible:
    857:     method?: ?MethodType;
                      ^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:857
    905:     method: MethodType;
                     ^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:905

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `mode` is incompatible:
    858:     mode?: ?ModeType;
                    ^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:858
    906:     mode: ModeType;
                   ^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:906

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `mode` is incompatible:
    858:     mode?: ?ModeType;
                    ^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:858
    906:     mode: ModeType;
                   ^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:906

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `redirect` is incompatible:
    859:     redirect?: ?RedirectType;
                        ^^^^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:859
    907:     redirect: RedirectType;
                       ^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:907

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `redirect` is incompatible:
    859:     redirect?: ?RedirectType;
                        ^^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:859
    907:     redirect: RedirectType;
                       ^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:907

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `referrerPolicy` is incompatible:
    861:     referrerPolicy?: ?ReferrerPolicyType;
                              ^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:861
    909:     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:909

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `referrerPolicy` is incompatible:
    861:     referrerPolicy?: ?ReferrerPolicyType;
                              ^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:861
    909:     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:909

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `referrer` is incompatible:
    860:     referrer?: ?string;
                        ^^^^^^^ null. This type is incompatible with. See lib: <BUILTINS>/bom.js:860
    908:     referrer: string;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:908

request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Request. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `referrer` is incompatible:
    860:     referrer?: ?string;
                        ^^^^^^^ undefined. This type is incompatible with. See lib: <BUILTINS>/bom.js:860
    908:     referrer: string;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:908

request.js:8
  8: const f: Request = new Request({}) // incorrect
                        ^^^^^^^^^^^^^^^ constructor call
  8: const f: Request = new Request({}) // incorrect
                                    ^^ object literal. This type is incompatible with
896:     constructor(input: string | Request, init?: RequestOptions): void;
                            ^^^^^^^^^^^^^^^^ union: string | Request. See lib: <BUILTINS>/bom.js:896
  Member 1:
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:896
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:896
  Member 2:
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:896
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  896:     constructor(input: string | Request, init?: RequestOptions): void;
                                       ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:896

request.js:23
 23: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Buffer. This type is incompatible with an argument type of
918:     text(): Promise<string>;
                         ^^^^^^ string. See lib: <BUILTINS>/bom.js:918

request.js:25
 25: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Buffer. This type is incompatible with the expected param type of
914:     arrayBuffer(): Promise<ArrayBuffer>;
                                ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:914

request.js:53
                        v----------------------------------
 53: const l: Request = new Request('http://example.org', {
 54:   method: 'GET',
 55:   headers: 'Content-Type: image/jpeg',
...:
 58: }) // incorrect - headers is string
     -^ constructor call
 55:   headers: 'Content-Type: image/jpeg',
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
855:     headers?: ?HeadersInit;
                    ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:855
  Member 1:
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Error:
   55:   headers: 'Content-Type: image/jpeg',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Member 2:
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805
  Error:
   55:   headers: 'Content-Type: image/jpeg',
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805

request.js:60
                                                          v
 60: const m: Request = new Request('http://example.org', {
 61:   method: 'CONNECT',
 62:   headers: {
...:
 67: }) // incorrect - CONNECT is forbidden
     ^ object literal. This type is incompatible with the expected param type of
896:     constructor(input: string | Request, init?: RequestOptions): void;
                                                     ^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:896
  Property `method` is incompatible:
     61:   method: 'CONNECT',
                   ^^^^^^^^^ string. This type is incompatible with
    857:     method?: ?MethodType;
                       ^^^^^^^^^^ string enum. See lib: <BUILTINS>/bom.js:857

response.js:10
                                                      v
 10: const e: Response = new Response("responsebody", {
 11:     status: "404"
 12: }); // incorrect
     ^ object literal. This type is incompatible with the expected param type of
871:     constructor(input?: BodyInit, init?: ResponseOptions): void;
                                              ^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:871
  Property `status` is incompatible:
     11:     status: "404"
                     ^^^^^ string. This type is incompatible with
    865:     status?: ?number;
                       ^^^^^^ number. See lib: <BUILTINS>/bom.js:865

response.js:14
                         v-----------------------------
 14: const f: Response = new Response("responsebody", {
 15:     status: 404,
 16:     headers: "'Content-Type': 'image/jpeg'"
 17: }); // incorrect
     -^ constructor call
 16:     headers: "'Content-Type': 'image/jpeg'"
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
867:     headers?: ?HeadersInit
                    ^^^^^^^^^^^ union: Headers | object type. See lib: <BUILTINS>/bom.js:867
  Member 1:
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Error:
   16:     headers: "'Content-Type': 'image/jpeg'"
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:805
  Member 2:
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805
  Error:
   16:     headers: "'Content-Type': 'image/jpeg'"
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  805: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:805

response.js:33
                         v-------------
 33: const i: Response = new Response({
 34:     status: 404,
 35:     headers: new Headers({
...:
 38: }); // incorrect
     -^ constructor call
                                      v
 33: const i: Response = new Response({
 34:     status: 404,
 35:     headers: new Headers({
...:
 38: }); // incorrect
     ^ object literal. This type is incompatible with
871:     constructor(input?: BodyInit, init?: ResponseOptions): void;
                             ^^^^^^^^ union: string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView. See lib: <BUILTINS>/bom.js:871
  Member 1:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:848
  Member 2:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:848
  Member 3:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:848
  Member 4:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:848
  Member 5:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:848
  Member 6:
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ $ArrayBufferView. See lib: <BUILTINS>/bom.js:848
  Error:
                                        v
   33: const i: Response = new Response({
   34:     status: 404,
   35:     headers: new Headers({
  ...:
   38: }); // incorrect
       ^ object literal. This type is incompatible with
  848: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ union: $TypedArray | DataView. See lib: <BUILTINS>/bom.js:848
    Member 1:
    682: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:682
    Error:
                                          v
     33: const i: Response = new Response({
     34:     status: 404,
     35:     headers: new Headers({
    ...:
     38: }); // incorrect
         ^ object literal. This type is incompatible with
    682: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:682
    Member 2:
    682: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:682
    Error:
                                          v
     33: const i: Response = new Response({
     34:     status: 404,
     35:     headers: new Headers({
    ...:
     38: }); // incorrect
         ^ object literal. This type is incompatible with
    682: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:682

response.js:44
 44: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Buffer. This type is incompatible with an argument type of
892:     text(): Promise<string>;
                         ^^^^^^ string. See lib: <BUILTINS>/bom.js:892

response.js:46
 46: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Buffer. This type is incompatible with the expected param type of
888:     arrayBuffer(): Promise<ArrayBuffer>;
                                ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:888

urlsearchparams.js:4
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                   ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
826:     constructor(query?: string | URLSearchParams): void;
                             ^^^^^^^^^^^^^^^^^^^^^^^^ union: string | URLSearchParams. See lib: <BUILTINS>/bom.js:826
  Member 1:
  826:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:826
  Error:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                     ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  826:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:826
  Member 2:
  826:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:826
  Error:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                     ^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  826:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:826

urlsearchparams.js:5
  5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructor call
  5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                   ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
826:     constructor(query?: string | URLSearchParams): void;
                             ^^^^^^^^^^^^^^^^^^^^^^^^ union: string | URLSearchParams. See lib: <BUILTINS>/bom.js:826
  Member 1:
  826:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:826
  Error:
    5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                     ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  826:     constructor(query?: string | URLSearchParams): void;
                               ^^^^^^ string. See lib: <BUILTINS>/bom.js:826
  Member 2:
  826:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:826
  Error:
    5: const c = new URLSearchParams({'key1', 'value1'}); // not correct
                                     ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  826:     constructor(query?: string | URLSearchParams): void;
                                        ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:826

urlsearchparams.js:9
  9: e.append('key1'); // not correct
     ^^^^^^^^^^^^^^^^ call of method `append`
  9: e.append('key1'); // not correct
     ^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
827:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:827

urlsearchparams.js:10
 10: e.append({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`
 10: e.append({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
827:     append(name: string, value: string): void;
                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:827

urlsearchparams.js:10
 10: e.append({'key1', 'value1'}); // not correct
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
827:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:827

urlsearchparams.js:12
 12: e.set('key1'); // not correct
     ^^^^^^^^^^^^^ call of method `set`
 12: e.set('key1'); // not correct
     ^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
834:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:834

urlsearchparams.js:13
 13: e.set({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`
 13: e.set({'key1', 'value1'}); // not correct
     ^^^^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
834:     set(name: string, value: string): void;
                                  ^^^^^^ string. See lib: <BUILTINS>/bom.js:834

urlsearchparams.js:13
 13: e.set({'key1', 'value1'}); // not correct
           ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
834:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:834

urlsearchparams.js:15
 15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
              ^^^^^^^^^^^^^^^ URLSearchParams

urlsearchparams.js:18
 18: const h: number = e.get('key1'); // not correct
                       ^^^^^^^^^^^^^ string. This type is incompatible with
 18: const h: number = e.get('key1'); // not correct
              ^^^^^^ number


Found 52 errors
