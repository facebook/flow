Error --------------------------------------------------------------------------------------------------- fetch.js:12:28

Cannot assign `fetch(...)` to `b` because `Response` [1] is incompatible with string [2] in type argument `R` [3].
[incompatible-type-arg]

   fetch.js:12:28
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                                    ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1503:76
   1503| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [1]
   fetch.js:12:18
     12| const b: Promise<string> = fetch(myRequest); // incorrect
                          ^^^^^^ [2]
   <BUILTINS>/core.js:682:24
    682| declare class Promise<+R> {
                                ^ [3]


Error --------------------------------------------------------------------------------------------------- fetch.js:25:26

Cannot assign `fetch(...)` to `d` because `Blob` [1] is incompatible with `Response` [2] in type argument `R` [3].
[incompatible-type-arg]

   fetch.js:25:26
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                                  ^^^^^^^^^^^^^^^^^^

References:
   fetch.js:25:18
     25| const d: Promise<Blob> = fetch('image.png'); // incorrect
                          ^^^^ [1]
   <BUILTINS>/bom.js:1503:76
   1503| declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                    ^^^^^^^^ [2]
   <BUILTINS>/core.js:682:24
    682| declare class Promise<+R> {
                                ^ [3]


Error -------------------------------------------------------------------------------------------------- headers.js:3:23

Cannot call `Headers` with `''Content-T...'` bound to `init` because: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   headers.js:3:23
      3| const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1366:20
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1366:30
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1366:56
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- headers.js:4:24

Cannot call `Headers` with array literal bound to `init` because string [1] is incompatible with tuple type [2] in array
element. [incompatible-call]

   headers.js:4:24
      4| const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                                ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1366:36
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                            ^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:4:40

Cannot call `Headers` with array literal bound to `init` because string [1] is incompatible with tuple type [2] in array
element. [incompatible-call]

   headers.js:4:40
      4| const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                                                ^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1366:36
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                            ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- headers.js:9:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   headers.js:9:3
      9| e.append('Content-Type'); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1374:5
   1374|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:10:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   headers.js:10:3
     10| e.append({'Content-Type': 'image/jpeg'}); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1374:5
   1374|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- headers.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   headers.js:10:10
     10| e.append({'Content-Type': 'image/jpeg'}); // not correct
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1374:18
   1374|     append(name: string, value: string): void;
                          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:12:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   headers.js:12:3
     12| e.set('Content-Type'); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1381:5
   1381|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   headers.js:13:3
     13| e.set({'Content-Type': 'image/jpeg'}); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1381:5
   1381|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- headers.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   headers.js:13:7
     13| e.set({'Content-Type': 'image/jpeg'}); // not correct
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1381:15
   1381|     set(name: string, value: string): void;
                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:15:20

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `Headers` [2]. [incompatible-type]

   headers.js:15:20
     15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1374:42
   1374|     append(name: string, value: string): void;
                                                  ^^^^ [1]
   headers.js:15:10
     15| const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                  ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2]. [incompatible-type]

   headers.js:17:19
     17| const g: string = e.get('Content-Type'); // correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1378:24
   1378|     get(name: string): null | string;
                                ^^^^ [1]
   headers.js:17:10
     17| const g: string = e.get('Content-Type'); // correct
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:18:19

Cannot assign `e.get(...)` to `h` because null [1] is incompatible with number [2]. [incompatible-type]

   headers.js:18:19
     18| const h: number = e.get('Content-Type'); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1378:24
   1378|     get(name: string): null | string;
                                ^^^^ [1]
   headers.js:18:10
     18| const h: number = e.get('Content-Type'); // not correct
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- headers.js:18:19

Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2]. [incompatible-type]

   headers.js:18:19
     18| const h: number = e.get('Content-Type'); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1378:31
   1378|     get(name: string): null | string;
                                       ^^^^^^ [1]
   headers.js:18:10
     18| const h: number = e.get('Content-Type'); // not correct
                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- headers.js:28:3

Cannot call `e.getAll` because property `getAll` is missing in `Headers` [1]. [prop-missing]

   headers.js:28:3
   28| e.getAll('content-type'); // incorrect
         ^^^^^^

References:
   headers.js:7:10
    7| const e: Headers = new Headers(); // correct
                ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- request.js:2:24

Cannot call `Request` because: [incompatible-call]
 - Either undefined [1] is incompatible with `Request` [2].
 - Or undefined [1] is incompatible with `URL` [3].
 - Or undefined [1] is incompatible with string [4].

   request.js:2:24
      2| const a: Request = new Request(); // incorrect
                                ^^^^^^^

References:
   request.js:2:20
      2| const a: Request = new Request(); // incorrect
                            ^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1413:20
   1413| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1413:30
   1413| type RequestInfo = Request | URL | string;
                                      ^^^ [3]
   <BUILTINS>/bom.js:1413:36
   1413| type RequestInfo = Request | URL | string;
                                            ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because property `signal` is read-only in `Request` [1] but writable in
`RequestOptions` [2]. [incompatible-variance]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   request.js:4:10
      4| const c: Request = new Request(b); // correct
                  ^^^^^^^ [1]
   <BUILTINS>/bom.js:1466:44
   1466|     constructor(input: RequestInfo, init?: RequestOptions): void;
                                                    ^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because literal union [1] is incompatible with undefined [2] in property
`cache`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1471:12
   1471|     cache: CacheType;
                    ^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1417:11
   1417|   cache?: CacheType,
                   ^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because literal union [1] is incompatible with undefined [2] in property
`credentials`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1472:18
   1472|     credentials: CredentialsType;
                          ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1418:17
   1418|   credentials?: CredentialsType,
                         ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because `Headers` [1] is incompatible with array type [2] in property
`headers`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1473:14
   1473|     headers: Headers;
                      ^^^^^^^ [1]
   <BUILTINS>/bom.js:1419:13
   1419|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because `Headers` [1] is incompatible with object type [2] in property
`headers`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1473:14
   1473|     headers: Headers;
                      ^^^^^^^ [1]
   <BUILTINS>/bom.js:1419:13
   1419|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because `Headers` [1] is incompatible with undefined [2] in property
`headers`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1473:14
   1473|     headers: Headers;
                      ^^^^^^^ [1]
   <BUILTINS>/bom.js:1419:13
   1419|   headers?: HeadersInit,
                     ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because string [1] is incompatible with undefined [2] in property
`integrity`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1474:16
   1474|     integrity: string;
                        ^^^^^^ [1]
   <BUILTINS>/bom.js:1420:15
   1420|   integrity?: string,
                       ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because string [1] is incompatible with undefined [2] in property
`method`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1475:13
   1475|     method: string;
                     ^^^^^^ [1]
   <BUILTINS>/bom.js:1422:12
   1422|   method?: string,
                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because literal union [1] is incompatible with undefined [2] in property
`mode`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1476:11
   1476|     mode: ModeType;
                   ^^^^^^^^ [1]
   <BUILTINS>/bom.js:1423:10
   1423|   mode?: ModeType,
                  ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because literal union [1] is incompatible with undefined [2] in property
`redirect`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1477:15
   1477|     redirect: RedirectType;
                       ^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1424:14
   1424|   redirect?: RedirectType,
                      ^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because string [1] is incompatible with undefined [2] in property
`referrer`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1478:15
   1478|     referrer: string;
                       ^^^^^^ [1]
   <BUILTINS>/bom.js:1425:14
   1425|   referrer?: string,
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:6:35

Cannot call `Request` with `c` bound to `init` because literal union [1] is incompatible with undefined [2] in property
`referrerPolicy`. [incompatible-call]

   request.js:6:35
      6| const e: Request = new Request(b, c); // incorrect
                                           ^

References:
   <BUILTINS>/bom.js:1479:21
   1479|     referrerPolicy: ReferrerPolicyType;
                             ^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/bom.js:1426:20
   1426|   referrerPolicy?: ReferrerPolicyType,
                            ^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- request.js:8:32

Cannot call `Request` with object literal bound to `input` because: [incompatible-call]
 - Either object literal [1] is incompatible with `Request` [2].
 - Or object literal [1] is incompatible with `URL` [3].

   request.js:8:32
      8| const f: Request = new Request({}) // incorrect
                                        ^^ [1]

References:
   <BUILTINS>/bom.js:1413:20
   1413| type RequestInfo = Request | URL | string;
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1413:30
   1413| type RequestInfo = Request | URL | string;
                                      ^^^ [3]


Error ------------------------------------------------------------------------------------------------- request.js:24:10

Cannot call `h.text().then` because `Buffer` [1] is incompatible with string [2] in the first argument.
[incompatible-call]

   request.js:24:10
     24| h.text().then((t: Buffer) => t); // incorrect
                  ^^^^

References:
   request.js:24:19
     24| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1489:21
   1489|     text(): Promise<string>;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- request.js:26:17

Cannot call `h.arrayBuffer().then` because `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first argument.
[incompatible-call]

   request.js:26:17
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                         ^^^^

References:
   <BUILTINS>/bom.js:1485:28
   1485|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   request.js:26:27
     26| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- request.js:56:12

Cannot call `Request` with object literal bound to `init` because in property `headers`: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   request.js:56:12
     56|   headers: 'Content-Type: image/jpeg',
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1366:20
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1366:30
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1366:56
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- request.js:63:28

Cannot call `Request` with object literal bound to `init` because null [1] is incompatible with string [2] in property
`method`. [incompatible-call]

   request.js:63:28
     63| new Request('/', { method: null }); // incorrect
                                    ^^^^ [1]

References:
   <BUILTINS>/bom.js:1422:12
   1422|   method?: string,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:8:28

Cannot call `Response` with object literal bound to `init` because string [1] is incompatible with number [2] in
property `status`. [incompatible-call]

   response.js:8:28
      8| new Response("", { status: "404" }); // incorrect
                                    ^^^^^ [1]

References:
   <BUILTINS>/bom.js:1433:12
   1433|   status?: number,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- response.js:9:28

Cannot call `Response` with object literal bound to `init` because null [1] is incompatible with number [2] in property
`status`. [incompatible-call]

   response.js:9:28
      9| new Response("", { status: null }); // incorrect
                                    ^^^^ [1]

References:
   <BUILTINS>/bom.js:1433:12
   1433|   status?: number,
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ response.js:13:14

Cannot call `Response` with object literal bound to `init` because in property `headers`: [incompatible-call]
 - Either string [1] is incompatible with `Headers` [2].
 - Or string [1] is incompatible with array type [3].
 - Or string [1] is incompatible with object type [4].

   response.js:13:14
     13|     headers: "'Content-Type': 'image/jpeg'"
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1366:20
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                            ^^^^^^^ [2]
   <BUILTINS>/bom.js:1366:30
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/bom.js:1366:56
   1366| type HeadersInit = Headers | Array<[string, string]> | { [key: string]: string, ... };
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ response.js:30:34

Cannot call `Response` with object literal bound to `input` because: [incompatible-call]
 - Either object literal [1] is incompatible with `URLSearchParams` [2].
 - Or object literal [1] is incompatible with `FormData` [3].
 - Or object literal [1] is incompatible with `Blob` [4].
 - Or object literal [1] is incompatible with `ArrayBuffer` [5].
 - Or object literal [1] is incompatible with `$TypedArray` [6].
 - Or object literal [1] is incompatible with `DataView` [7].
 - Or object literal [1] is incompatible with `ReadableStream` [8].

   response.js:30:34
                                          v
     30| const i: Response = new Response({
     31|     status: 404,
     32|     headers: new Headers({
     33|         'Content-Type': 'image/jpeg'
     34|     })
     35| }); // incorrect
         ^ [1]

References:
   <BUILTINS>/bom.js:1411:26
   1411| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                  ^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/bom.js:1411:44
   1411| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                    ^^^^^^^^ [3]
   <BUILTINS>/bom.js:1411:55
   1411| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                               ^^^^ [4]
   <BUILTINS>/bom.js:1411:62
   1411| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                      ^^^^^^^^^^^ [5]
   <BUILTINS>/core.js:736:25
    736| type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ [6]
   <BUILTINS>/core.js:736:39
    736| type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ [7]
   <BUILTINS>/bom.js:1411:95
   1411| type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView | ReadableStream;
                                                                                                       ^^^^^^^^^^^^^^ [8]


Error ------------------------------------------------------------------------------------------------ response.js:42:10

Cannot call `h.text().then` because `Buffer` [1] is incompatible with string [2] in the first argument.
[incompatible-call]

   response.js:42:10
     42| h.text().then((t: Buffer) => t); // incorrect
                  ^^^^

References:
   response.js:42:19
     42| h.text().then((t: Buffer) => t); // incorrect
                           ^^^^^^ [1]
   <BUILTINS>/bom.js:1462:21
   1462|     text(): Promise<string>;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ response.js:44:17

Cannot call `h.arrayBuffer().then` because `ArrayBuffer` [1] is incompatible with `Buffer` [2] in the first argument.
[incompatible-call]

   response.js:44:17
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                         ^^^^

References:
   <BUILTINS>/bom.js:1458:28
   1458|     arrayBuffer(): Promise<ArrayBuffer>;
                                    ^^^^^^^^^^^ [1]
   response.js:44:27
     44| h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:4:32

Cannot call `URLSearchParams` with array literal bound to `query` because string [1] is incompatible with tuple type [2]
in array element. [incompatible-call]

   urlsearchparams.js:4:32
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                        ^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1387:58
   1387|     constructor(query?: string | URLSearchParams | Array<[string, string]> | { [string]: string, ... } ): void;
                                                                  ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:4:40

Cannot call `URLSearchParams` with array literal bound to `query` because string [1] is incompatible with tuple type [2]
in array element. [incompatible-call]

   urlsearchparams.js:4:40
      4| const b = new URLSearchParams(['key1', 'value1']); // not correct
                                                ^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1387:58
   1387|     constructor(query?: string | URLSearchParams | Array<[string, string]> | { [string]: string, ... } ): void;
                                                                  ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- urlsearchparams.js:9:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:9:3
      9| e.append('key1'); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1388:5
   1388|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:10:3

Cannot call `e.append` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:10:3
     10| e.append({'key1': 'value1'}); // not correct
           ^^^^^^

References:
   <BUILTINS>/bom.js:1388:5
   1388|     append(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:10:10

Cannot call `e.append` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   urlsearchparams.js:10:10
     10| e.append({'key1': 'value1'}); // not correct
                  ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1388:18
   1388|     append(name: string, value: string): void;
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:12:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:12:3
     12| e.set('key1'); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1396:5
   1396|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:3

Cannot call `e.set` because function [1] requires another argument. [incompatible-call]

   urlsearchparams.js:13:3
     13| e.set({'key1': 'value1'}); // not correct
           ^^^

References:
   <BUILTINS>/bom.js:1396:5
   1396|     set(name: string, value: string): void;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ urlsearchparams.js:13:7

Cannot call `e.set` with object literal bound to `name` because object literal [1] is incompatible with string [2].
[incompatible-call]

   urlsearchparams.js:13:7
     13| e.set({'key1': 'value1'}); // not correct
               ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/bom.js:1396:15
   1396|     set(name: string, value: string): void;
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:15:28

Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `URLSearchParams` [2].
[incompatible-type]

   urlsearchparams.js:15:28
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1388:42
   1388|     append(name: string, value: string): void;
                                                  ^^^^ [1]
   urlsearchparams.js:15:10
     15| const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                  ^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:17:19

Cannot assign `e.get(...)` to `g` because null [1] is incompatible with string [2]. [incompatible-type]

   urlsearchparams.js:17:19
     17| const g: string = e.get('key1'); // correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1392:24
   1392|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:17:10
     17| const g: string = e.get('key1'); // correct
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:18:19

Cannot assign `e.get(...)` to `h` because null [1] is incompatible with number [2]. [incompatible-type]

   urlsearchparams.js:18:19
     18| const h: number = e.get('key1'); // not correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1392:24
   1392|     get(name: string): null | string;
                                ^^^^ [1]
   urlsearchparams.js:18:10
     18| const h: number = e.get('key1'); // not correct
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- urlsearchparams.js:18:19

Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2]. [incompatible-type]

   urlsearchparams.js:18:19
     18| const h: number = e.get('key1'); // not correct
                           ^^^^^^^^^^^^^

References:
   <BUILTINS>/bom.js:1392:31
   1392|     get(name: string): null | string;
                                       ^^^^^^ [1]
   urlsearchparams.js:18:10
     18| const h: number = e.get('key1'); // not correct
                  ^^^^^^ [2]



Found 52 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
