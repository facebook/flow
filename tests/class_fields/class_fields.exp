Error ----------------------------------------------------------------------------------------------- base_class.js:9:46

string [1] is incompatible with number [2].

   base_class.js:9:46
   9|   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                   ^^^^^^ [1]

References:
   base_class.js:9:37
   9|   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                          ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- base_class.js:16:53

string [1] is incompatible with number [2].

   base_class.js:16:53
   16|   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                           ^^^^^^ [1]

References:
   base_class.js:16:44
   16|   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:33:2

Cannot cast `o.annotatedField` to string because number [1] is incompatible with string [2].

   base_class.js:33:2
   33| (o.annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^

References:
   base_class.js:5:19
    5|   annotatedField: number;
                         ^^^^^^ [1]
   base_class.js:33:20
   33| (o.annotatedField: string); // Error: number ~> string
                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:35:2

Cannot cast `Base.annotatedField` to string because number [1] is incompatible with string [2].

   base_class.js:35:2
   35| (Base.annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:12:26
   12|   static annotatedField: number;
                                ^^^^^^ [1]
   base_class.js:35:23
   35| (Base.annotatedField: string); // Error: number ~> string
                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:41:2

Cannot cast `o.initializedField` to string because number [1] is incompatible with string [2].

   base_class.js:41:2
   41| (o.initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^

References:
   base_class.js:6:22
    6|   initializedField = 42;
                            ^^ [1]
   base_class.js:41:22
   41| (o.initializedField: string); // Error: number ~> string
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:43:2

Cannot cast `Base.initializedField` to number because string [1] is incompatible with number [2].

   base_class.js:43:2
   43| (Base.initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:13:29
   13|   static initializedField = 'asdf';
                                   ^^^^^^ [1]
   base_class.js:43:25
   43| (Base.initializedField: number); // Error: string ~> number
                               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:49:2

Cannot cast `o.initializedFieldWithThis` to string because number [1] is incompatible with string [2].

   base_class.js:49:2
   49| (o.initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:6:22
    6|   initializedField = 42;
                            ^^ [1]
   base_class.js:49:30
   49| (o.initializedFieldWithThis: string); // Error: number ~> string
                                    ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:51:2

Cannot cast `Base.initializedFieldWithThis` to number because string [1] is incompatible with number [2].

   base_class.js:51:2
   51| (Base.initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:13:29
   13|   static initializedField = 'asdf';
                                   ^^^^^^ [1]
   base_class.js:51:33
   51| (Base.initializedFieldWithThis: number); // Error: string ~> number
                                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:59:2

Cannot cast `o.annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].

   base_class.js:59:2
   59| (o.annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:8:35
    8|   annotatedInitializedFieldValid: ?number = 42;
                                         ^^^^^^^ [1]
   base_class.js:59:36
   59| (o.annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:61:2

Cannot cast `Base.annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with
number [2].

   base_class.js:61:2
   61| (Base.annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:15:42
   15|   static annotatedInitializedFieldValid: ?number = 42;
                                                ^^^^^^^ [1]
   base_class.js:61:39
   61| (Base.annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:70:2

Cannot cast `o.annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   base_class.js:70:2
   70| (o.annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:9:37
    9|   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                           ^^^^^^ [1]
   base_class.js:70:38
   70| (o.annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- base_class.js:72:2

Cannot cast `Base.annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   base_class.js:72:2
   72| (Base.annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   base_class.js:16:44
   16|   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                  ^^^^^^ [1]
   base_class.js:72:41
   72| (Base.annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:9:51

string [1] is incompatible with number [2].

   derived_class.js:9:51
   9|   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                        ^^^^^^ [1]

References:
   derived_class.js:9:42
   9|   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:16:58

string [1] is incompatible with number [2].

   derived_class.js:16:58
   16|   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                                ^^^^^^ [1]

References:
   derived_class.js:16:49
   16|   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:28:52

string [1] is incompatible with number [2].

   derived_class.js:28:52
   28|   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                          ^^^^^^ [1]

References:
   derived_class.js:28:43
   28|   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:35:59

string [1] is incompatible with number [2].

   derived_class.js:35:59
   35|   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                                 ^^^^^^ [1]

References:
   derived_class.js:35:50
   35|   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:61:2

Cannot cast `o.base_annotatedField` to string because number [1] is incompatible with string [2].

   derived_class.js:61:2
   61| (o.base_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:5:24
    5|   base_annotatedField: number;
                              ^^^^^^ [1]
   derived_class.js:61:25
   61| (o.base_annotatedField: string); // Error: number ~> string
                               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:63:2

Cannot cast `Child.base_annotatedField` to string because number [1] is incompatible with string [2].

   derived_class.js:63:2
   63| (Child.base_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:12:31
   12|   static base_annotatedField: number;
                                     ^^^^^^ [1]
   derived_class.js:63:29
   63| (Child.base_annotatedField: string); // Error: number ~> string
                                   ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:66:2

Cannot cast `o.child_annotatedField` to string because number [1] is incompatible with string [2].

   derived_class.js:66:2
   66| (o.child_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:24:25
   24|   child_annotatedField: number;
                               ^^^^^^ [1]
   derived_class.js:66:26
   66| (o.child_annotatedField: string); // Error: number ~> string
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:68:2

Cannot cast `Child.child_annotatedField` to string because number [1] is incompatible with string [2].

   derived_class.js:68:2
   68| (Child.child_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:31:32
   31|   static child_annotatedField: number;
                                      ^^^^^^ [1]
   derived_class.js:68:30
   68| (Child.child_annotatedField: string); // Error: number ~> string
                                    ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:74:2

Cannot cast `o.base_initializedField` to string because number [1] is incompatible with string [2].

   derived_class.js:74:2
   74| (o.base_initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:6:27
    6|   base_initializedField = 42;
                                 ^^ [1]
   derived_class.js:74:27
   74| (o.base_initializedField: string); // Error: number ~> string
                                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:76:2

Cannot cast `Child.base_initializedField` to number because string [1] is incompatible with number [2].

   derived_class.js:76:2
   76| (Child.base_initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:13:34
   13|   static base_initializedField = 'asdf';
                                        ^^^^^^ [1]
   derived_class.js:76:31
   76| (Child.base_initializedField: number); // Error: string ~> number
                                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:79:2

Cannot cast `o.child_initializedField` to string because number [1] is incompatible with string [2].

   derived_class.js:79:2
   79| (o.child_initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:25:28
   25|   child_initializedField = 42;
                                  ^^ [1]
   derived_class.js:79:28
   79| (o.child_initializedField: string); // Error: number ~> string
                                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:81:2

Cannot cast `Child.child_initializedField` to number because string [1] is incompatible with number [2].

   derived_class.js:81:2
   81| (Child.child_initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:32:35
   32|   static child_initializedField = 'asdf';
                                         ^^^^^^ [1]
   derived_class.js:81:32
   81| (Child.child_initializedField: number); // Error: string ~> number
                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:87:2

Cannot cast `o.base_initializedFieldWithThis` to string because number [1] is incompatible with string [2].

   derived_class.js:87:2
   87| (o.base_initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:6:27
    6|   base_initializedField = 42;
                                 ^^ [1]
   derived_class.js:87:35
   87| (o.base_initializedFieldWithThis: string); // Error: number ~> string
                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:89:2

Cannot cast `Child.base_initializedFieldWithThis` to number because string [1] is incompatible with number [2].

   derived_class.js:89:2
   89| (Child.base_initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:13:34
   13|   static base_initializedField = 'asdf';
                                        ^^^^^^ [1]
   derived_class.js:89:39
   89| (Child.base_initializedFieldWithThis: number); // Error: string ~> number
                                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:92:2

Cannot cast `o.child_initializedFieldWithThis` to string because number [1] is incompatible with string [2].

   derived_class.js:92:2
   92| (o.child_initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:25:28
   25|   child_initializedField = 42;
                                  ^^ [1]
   derived_class.js:92:36
   92| (o.child_initializedFieldWithThis: string); // Error: number ~> string
                                          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- derived_class.js:94:2

Cannot cast `Child.child_initializedFieldWithThis` to number because string [1] is incompatible with number [2].

   derived_class.js:94:2
   94| (Child.child_initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:32:35
   32|   static child_initializedField = 'asdf';
                                         ^^^^^^ [1]
   derived_class.js:94:40
   94| (Child.child_initializedFieldWithThis: number); // Error: string ~> number
                                              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:102:2

Cannot cast `o.base_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with
number [2].

   derived_class.js:102:2
   102| (o.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:8:40
     8|   base_annotatedInitializedFieldValid: ?number = 42;
                                               ^^^^^^^ [1]
   derived_class.js:102:41
   102| (o.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:104:2

Cannot cast `Child.base_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with
number [2].

   derived_class.js:104:2
   104| (Child.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:15:47
    15|   static base_annotatedInitializedFieldValid: ?number = 42;
                                                      ^^^^^^^ [1]
   derived_class.js:104:45
   104| (Child.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:107:2

Cannot cast `o.child_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with
number [2].

   derived_class.js:107:2
   107| (o.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:27:41
    27|   child_annotatedInitializedFieldValid: ?number = 42;
                                                ^^^^^^^ [1]
   derived_class.js:107:42
   107| (o.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:109:2

Cannot cast `Child.child_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with
number [2].

   derived_class.js:109:2
   109| (Child.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:34:48
    34|   static child_annotatedInitializedFieldValid: ?number = 42;
                                                       ^^^^^^^ [1]
   derived_class.js:109:46
   109| (Child.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:118:2

Cannot cast `o.base_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   derived_class.js:118:2
   118| (o.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:9:42
     9|   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                 ^^^^^^ [1]
   derived_class.js:118:43
   118| (o.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:120:2

Cannot cast `Child.base_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   derived_class.js:120:2
   120| (Child.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:16:49
    16|   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                        ^^^^^^ [1]
   derived_class.js:120:47
   120| (Child.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:123:2

Cannot cast `o.child_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   derived_class.js:123:2
   123| (o.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:28:43
    28|   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                  ^^^^^^ [1]
   derived_class.js:123:44
   123| (o.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:125:2

Cannot cast `Child.child_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].

   derived_class.js:125:2
   125| (Child.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:35:50
    35|   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                         ^^^^^^ [1]
   derived_class.js:125:48
   125| (Child.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:132:2

Cannot cast `o.inherited_initializer` to string because number [1] is incompatible with string [2].

   derived_class.js:132:2
   132| (o.inherited_initializer: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:18:27
    18|   inherited_initializer = 42;
                                  ^^ [1]
   derived_class.js:132:27
   132| (o.inherited_initializer: string); // Error: number ~> string
                                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- derived_class.js:134:2

Cannot cast `Child.inherited_initializer` to string because number [1] is incompatible with string [2].

   derived_class.js:134:2
   134| (Child.inherited_initializer: string); // Error: number ~> string
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   derived_class.js:19:34
    19|   static inherited_initializer = 42;
                                         ^^ [1]
   derived_class.js:134:31
   134| (Child.inherited_initializer: string); // Error: number ~> string
                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- generic_class.js:15:2

Cannot cast `o1.p` to string because number [1] is incompatible with string [2].

   generic_class.js:15:2
   15| (o1.p: string); // Error: number ~> string
        ^^^^

References:
   generic_class.js:13:8
   13| o1.p = 42;
              ^^ [1]
   generic_class.js:15:8
   15| (o1.p: string); // Error: number ~> string
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- generic_class.js:18:2

Cannot cast `ClassAnnotated.p` to string because number [1] is incompatible with string [2].

   generic_class.js:18:2
   18| (ClassAnnotated.p: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^

References:
   generic_class.js:16:20
   16| ClassAnnotated.p = 42;
                          ^^ [1]
   generic_class.js:18:20
   18| (ClassAnnotated.p: string); // Error: number ~> string
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- generic_class.js:26:16

number [1] is incompatible with `T` [2].

   generic_class.js:26:16
   26|   invalid: T = 42; // Error: number ~> Generic<T>
                      ^^ [1]

References:
   generic_class.js:26:12
   26|   invalid: T = 42; // Error: number ~> Generic<T>
                  ^ [2]


Error ------------------------------------------------------------------------------------------- generic_class.js:29:23

number [1] is incompatible with `T` [2].

   generic_class.js:29:23
   29|   static invalid: T = 42; // Error: number ~> Generic<T>
                             ^^ [1]

References:
   generic_class.js:29:19
   29|   static invalid: T = 42; // Error: number ~> Generic<T>
                         ^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:24:2

Cannot cast `new Foo().outer` to string because number [1] is incompatible with string [2].

   scoping.js:24:2
   24| (new Foo().outer: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^

References:
   scoping.js:3:15
    3| var someVar = 42;
                     ^^ [1]
   scoping.js:24:19
   24| (new Foo().outer: string); // Error: number ~> string
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:26:2

Cannot cast `Foo.outer` to string because number [1] is incompatible with string [2].

   scoping.js:26:2
   26| (Foo.outer: string); // Error: number ~> string
        ^^^^^^^^^

References:
   scoping.js:3:15
    3| var someVar = 42;
                     ^^ [1]
   scoping.js:26:13
   26| (Foo.outer: string); // Error: number ~> string
                   ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:33:2

Cannot cast `new Foo().selfTyped` to number because `Foo` [1] is incompatible with number [2].

   scoping.js:33:2
   33| (new Foo().selfTyped: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^^^

References:
   scoping.js:7:14
    7|   selfTyped: Foo;
                    ^^^ [1]
   scoping.js:33:23
   33| (new Foo().selfTyped: number); // Error: Foo ~> number
                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:35:2

Cannot cast `Foo.selfTyped` to number because `Foo` [1] is incompatible with number [2].

   scoping.js:35:2
   35| (Foo.selfTyped: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^

References:
   scoping.js:11:21
   11|   static selfTyped: Foo;
                           ^^^ [1]
   scoping.js:35:17
   35| (Foo.selfTyped: number); // Error: Foo ~> number
                       ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:38:2

Cannot cast `new Foo().selfTypedInit` to number because `Foo` [1] is incompatible with number [2].

   scoping.js:38:2
   38| (new Foo().selfTypedInit: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^

References:
   scoping.js:8:19
    8|   selfTypedInit = new Foo();
                         ^^^^^^^^^ [1]
   scoping.js:38:27
   38| (new Foo().selfTypedInit: number); // Error: Foo ~> number
                                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- scoping.js:40:2

Cannot cast `Foo.selfTypedInit` to number because `Foo` [1] is incompatible with number [2].

   scoping.js:40:2
   40| (Foo.selfTypedInit: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^

References:
   scoping.js:12:26
   12|   static selfTypedInit = new Foo();
                                ^^^^^^^^^ [1]
   scoping.js:40:21
   40| (Foo.selfTypedInit: number); // Error: Foo ~> number
                           ^^^^^^ [2]



Found 48 errors
