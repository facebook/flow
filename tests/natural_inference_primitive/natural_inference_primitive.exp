Error ------------------------------------------------------------------------------------------------------ es6.js:31:1

Cannot cast `abc` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:31:1
   31| abc as "def" // error "abc" ~> "def"
       ^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:31:8
   31| abc as "def" // error "abc" ~> "def"
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:36:1

Cannot cast `one` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   es6.js:36:1
   36| one as 2 // error 1 ~> 2
       ^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   es6.js:36:8
   36| one as 2 // error 1 ~> 2
              ^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:41:1

Cannot cast `tru` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   es6.js:41:1
   41| tru as false // error true ~> false
       ^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   es6.js:41:8
   41| tru as false // error true ~> false
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:46:1

Cannot cast `bigOne` to bigint literal `2n` because bigint [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   es6.js:46:1
   46| bigOne as 2n // error 1n ~> 2n
       ^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   es6.js:46:11
   46| bigOne as 2n // error 1n ~> 2n
                 ^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:51:1

Cannot cast `abcRef` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:51:1
   51| abcRef as "def" // error "abc" ~> "def"
       ^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:51:11
   51| abcRef as "def" // error "abc" ~> "def"
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:56:1

Cannot cast `oneRef` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   es6.js:56:1
   56| oneRef as 2 // error 1 ~> 2
       ^^^^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   es6.js:56:11
   56| oneRef as 2 // error 1 ~> 2
                 ^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:61:1

Cannot cast `truRef` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   es6.js:61:1
   61| truRef as false // error true ~> false
       ^^^^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   es6.js:61:11
   61| truRef as false // error true ~> false
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:66:1

Cannot cast `bigOneRef` to bigint literal `2n` because bigint [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   es6.js:66:1
   66| bigOneRef as 2n // error 1n ~> 2n
       ^^^^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   es6.js:66:14
   66| bigOneRef as 2n // error 1n ~> 2n
                    ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:33:1

Cannot cast `abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-cast]

   main.js:33:1
   33| abc as "def" // error "abc" ~> "def"
       ^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:33:8
   33| abc as "def" // error "abc" ~> "def"
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:35:6

Cannot cast `_` to `typeof abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:35:6
   35| _ as "def" as typeof abc; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:35:15
   35| _ as "def" as typeof abc; // error "def" ~> "abc"
                     ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:38:1

Cannot cast `one` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   main.js:38:1
   38| one as 2 // error 1 ~> 2
       ^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   main.js:38:8
   38| one as 2 // error 1 ~> 2
              ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:40:6

Cannot cast `_` to `typeof one` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:40:6
   40| _ as 2 as typeof one; // error 2 ~> 1
            ^ [1]

References:
   main.js:40:11
   40| _ as 2 as typeof one; // error 2 ~> 1
                 ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:43:1

Cannot cast `tru` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   main.js:43:1
   43| tru as false // error true ~> false
       ^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   main.js:43:8
   43| tru as false // error true ~> false
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:45:6

Cannot cast `_` to `typeof tru` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:45:6
   45| _ as false as typeof tru; // error false ~> true
            ^^^^^ [1]

References:
   main.js:45:15
   45| _ as false as typeof tru; // error false ~> true
                     ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:48:1

Cannot cast `bigOne` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-cast]

   main.js:48:1
   48| bigOne as 2n // error 1n ~> 2n
       ^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   main.js:48:11
   48| bigOne as 2n // error 1n ~> 2n
                 ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:50:6

Cannot cast `_` to `typeof bigOne` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:50:6
   50| _ as 2n as typeof bigOne; // error 2n ~> 1n
            ^^ [1]

References:
   main.js:50:12
   50| _ as 2n as typeof bigOne; // error 2n ~> 1n
                  ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:53:1

Cannot cast `abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-cast]

   main.js:53:1
   53| abcRef as "def" // error "abc" ~> "def"
       ^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:53:11
   53| abcRef as "def" // error "abc" ~> "def"
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:55:6

Cannot cast `_` to `typeof abcRef` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:55:6
   55| _ as "def" as typeof abcRef; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:55:15
   55| _ as "def" as typeof abcRef; // error "def" ~> "abc"
                     ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:58:1

Cannot cast `oneRef` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   main.js:58:1
   58| oneRef as 2 // error 1 ~> 2
       ^^^^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   main.js:58:11
   58| oneRef as 2 // error 1 ~> 2
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:60:6

Cannot cast `_` to `typeof oneRef` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:60:6
   60| _ as 2 as typeof oneRef; // error 2 ~> 1
            ^ [1]

References:
   main.js:60:11
   60| _ as 2 as typeof oneRef; // error 2 ~> 1
                 ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:63:1

Cannot cast `truRef` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   main.js:63:1
   63| truRef as false // error true ~> false
       ^^^^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   main.js:63:11
   63| truRef as false // error true ~> false
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:65:6

Cannot cast `_` to `typeof truRef` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:65:6
   65| _ as false as typeof truRef; // error false ~> true
            ^^^^^ [1]

References:
   main.js:65:15
   65| _ as false as typeof truRef; // error false ~> true
                     ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:68:1

Cannot cast `bigOneRef` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-cast]

   main.js:68:1
   68| bigOneRef as 2n // error 1n ~> 2n
       ^^^^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   main.js:68:14
   68| bigOneRef as 2n // error 1n ~> 2n
                    ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:70:6

Cannot cast `_` to `typeof bigOneRef` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:70:6
   70| _ as 2n as typeof bigOneRef; // error 2n ~> 1n
            ^^ [1]

References:
   main.js:70:12
   70| _ as 2n as typeof bigOneRef; // error 2n ~> 1n
                  ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:72:1

Cannot cast `obj.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:72:1
   72| obj.abc as "abc"; // error string ~> "abc"
       ^^^^^^^

References:
   es6.js:13:27
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                 ^^^^^ [1]
   main.js:72:12
   72| obj.abc as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:73:1

Cannot cast `obj.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:73:1
   73| obj.one as 1; // error number ~> 1
       ^^^^^^^

References:
   es6.js:13:39
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                             ^ [1]
   main.js:73:12
   73| obj.one as 1; // error number ~> 1
                  ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:74:1

Cannot cast `obj.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:74:1
   74| obj.tru as true; // error boolean ~> true
       ^^^^^^^

References:
   es6.js:13:47
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                     ^^^^ [1]
   main.js:74:12
   74| obj.tru as true; // error boolean ~> true
                  ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:75:1

Cannot cast `obj.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:75:1
   75| obj.bigOne as 1n; // error bigint ~> 1n
       ^^^^^^^^^^

References:
   es6.js:13:61
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                   ^^ [1]
   main.js:75:15
   75| obj.bigOne as 1n; // error bigint ~> 1n
                     ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:77:1

Cannot cast `spread.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:77:1
   77| spread.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^

References:
   es6.js:13:27
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                 ^^^^^ [1]
   main.js:77:15
   77| spread.abc as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:78:1

Cannot cast `spread.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:78:1
   78| spread.one as 1; // error number ~> 1
       ^^^^^^^^^^

References:
   es6.js:13:39
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                             ^ [1]
   main.js:78:15
   78| spread.one as 1; // error number ~> 1
                     ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:79:1

Cannot cast `spread.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:79:1
   79| spread.tru as true; // error boolean ~> true
       ^^^^^^^^^^

References:
   es6.js:13:47
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                     ^^^^ [1]
   main.js:79:15
   79| spread.tru as true; // error boolean ~> true
                     ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:80:1

Cannot cast `spread.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:80:1
   80| spread.bigOne as 1n; // error bigint ~> 1n
       ^^^^^^^^^^^^^

References:
   es6.js:13:61
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                   ^^ [1]
   main.js:80:18
   80| spread.bigOne as 1n; // error bigint ~> 1n
                        ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:82:1

Cannot cast `objRefs.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:82:1
   82| objRefs.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:82:16
   82| objRefs.abc as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:83:1

Cannot cast `objRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:83:1
   83| objRefs.abcRef as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:83:19
   83| objRefs.abcRef as "abc"; // error string ~> "abc"
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:84:1

Cannot cast `spreadObjRefs.abc` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-cast]

   main.js:84:1
   84| spreadObjRefs.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:84:22
   84| spreadObjRefs.abc as "abc"; // error string ~> "abc"
                            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:85:1

Cannot cast `spreadObjRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-cast]

   main.js:85:1
   85| spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:85:25
   85| spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
                               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:93:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:93:3
   93|   x.abc as "abc"; // error string ~> "abc"
         ^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:93:12
   93|   x.abc as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:94:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:94:3
   94|   x.abcRef as "abc"; // error string ~> "abc"
         ^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:94:15
   94|   x.abcRef as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:98:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:98:3
   98|   x.abc as "abc"; // error string ~> "abc"
         ^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:98:12
   98|   x.abc as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:99:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:99:3
   99|   x.abcRef as "abc"; // error string ~> "abc"
         ^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:99:15
   99|   x.abcRef as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:107:3

Cannot cast `x` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:107:3
   107|   x as "abc"; // error string ~> "abc"
          ^

References:
   main.js:106:26
   106| function test_default(x: typeof default_) {
                                 ^^^^^^^^^^^^^^^ [1]
   main.js:107:8
   107|   x as "abc"; // error string ~> "abc"
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:112:3

Cannot cast `cjs1` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:112:3
   112|   cjs1 as "abc"; // error string ~> "abc"
          ^^^^

References:
   cjs-1.js:3:18
     3| module.exports = "abc";
                         ^^^^^ [1]
   main.js:112:11
   112|   cjs1 as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:116:3

Cannot cast `cjs2.foo` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:116:3
   116|   cjs2.foo as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   cjs-2.js:4:10
     4|     foo: "abc",
                 ^^^^^ [1]
   main.js:116:15
   116|   cjs2.foo as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:117:3

Cannot cast `cjs2.bar` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:117:3
   117|   cjs2.bar as 1; // error number ~> 1
          ^^^^^^^^

References:
   cjs-2.js:5:10
     5|     bar: 1,
                 ^ [1]
   main.js:117:15
   117|   cjs2.bar as 1; // error number ~> 1
                      ^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:118:3

Cannot cast `cjs2.baz` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:118:3
   118|   cjs2.baz as true; // error boolean ~> true
          ^^^^^^^^

References:
   cjs-2.js:6:10
     6|     baz: true,
                 ^^^^ [1]
   main.js:118:15
   118|   cjs2.baz as true; // error boolean ~> true
                      ^^^^ [2]



Found 45 errors
