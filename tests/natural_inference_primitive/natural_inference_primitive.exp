Error ---------------------------------------------------------------------------------------------- custom-jsx.js:16:13

Cannot create `Foo` element because in property `bar`: number literal `43` [1] is incompatible with number literal
`42` [2]. [incompatible-type]

   custom-jsx.js:16:13
   16|   <Foo bar={43 /* error 43 ~> 42 */} foo={'b' /* error 'b' ~> 'a' */}>
                   ^^ [1]

References:
   custom-jsx.js:4:59
    4| declare function customJsx(c: any, props: {foo: "a", bar: 42}, children: 42): void;
                                                                 ^^ [2]


Error ---------------------------------------------------------------------------------------------- custom-jsx.js:16:43

Cannot create `Foo` element because in property `foo`: string literal `b` [1] is incompatible with string literal
`a` [2]. [incompatible-type]

   custom-jsx.js:16:43
   16|   <Foo bar={43 /* error 43 ~> 42 */} foo={'b' /* error 'b' ~> 'a' */}>
                                                 ^^^ [1]

References:
   custom-jsx.js:4:49
    4| declare function customJsx(c: any, props: {foo: "a", bar: 42}, children: 42): void;
                                                       ^^^ [2]


Error ----------------------------------------------------------------------------------------------- custom-jsx.js:17:6

Cannot create `Foo` element because number literal `43` [1] is incompatible with number literal `42` [2].
[incompatible-type]

   custom-jsx.js:17:6
   17|     {43 /* error 43 ~> 42 */}
            ^^ [1]

References:
   custom-jsx.js:4:74
    4| declare function customJsx(c: any, props: {foo: "a", bar: 42}, children: 42): void;
                                                                                ^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:42:3

Cannot cast `abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   imported.js:42:3
   42|   abc as "def" // error "abc" ~> "def"
         ^^^

References:
   local.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   imported.js:42:10
   42|   abc as "def" // error "abc" ~> "def"
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:44:8

Cannot cast `_` to `typeof abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:44:8
   44|   _ as "def" as typeof abc; // error "def" ~> "abc"
              ^^^^^ [1]

References:
   imported.js:44:17
   44|   _ as "def" as typeof abc; // error "def" ~> "abc"
                       ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:49:3

Cannot cast `one` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-type]

   imported.js:49:3
   49|   one as 2 // error 1 ~> 2
         ^^^

References:
   local.js:5:20
    5| export const one = 1;
                          ^ [1]
   imported.js:49:10
   49|   one as 2 // error 1 ~> 2
                ^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:51:3

Cannot cast `minusOne` to number literal `0` because number literal `-1` [1] is incompatible with number literal
`0` [2]. [incompatible-type]

   imported.js:51:3
   51|   minusOne as 0; // error -1 ~> 0
         ^^^^^^^^

References:
   local.js:6:25
    6| export const minusOne = -1;
                               ^^ [1]
   imported.js:51:15
   51|   minusOne as 0; // error -1 ~> 0
                     ^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:53:8

Cannot cast `_` to `typeof one` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:53:8
   53|   _ as 2 as typeof one; // error 2 ~> 1
              ^ [1]

References:
   imported.js:53:13
   53|   _ as 2 as typeof one; // error 2 ~> 1
                   ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:55:8

Cannot cast `_` to `typeof minusOne` because number literal `0` [1] is incompatible with number literal `-1` [2].
[incompatible-type]

   imported.js:55:8
   55|   _ as 0 as typeof minusOne; // error 0 ~> -1
              ^ [1]

References:
   imported.js:55:13
   55|   _ as 0 as typeof minusOne; // error 0 ~> -1
                   ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:60:3

Cannot cast `tru` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-type]

   imported.js:60:3
   60|   tru as false // error true ~> false
         ^^^

References:
   local.js:7:20
    7| export const tru = true;
                          ^^^^ [1]
   imported.js:60:10
   60|   tru as false // error true ~> false
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:62:3

Cannot cast `notTru` to boolean literal `true` because boolean literal `false` [1] is incompatible with boolean literal
`true` [2]. [incompatible-type]

   imported.js:62:3
   62|   notTru as true // error false ~> true
         ^^^^^^

References:
   local.js:8:23
    8| export const notTru = !tru;
                             ^^^^ [1]
   imported.js:62:13
   62|   notTru as true // error false ~> true
                   ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:64:8

Cannot cast `_` to `typeof tru` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   imported.js:64:8
   64|   _ as false as typeof tru; // error false ~> true
              ^^^^^ [1]

References:
   imported.js:64:17
   64|   _ as false as typeof tru; // error false ~> true
                       ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:65:8

Cannot cast `_` to `typeof notTru` because boolean literal `true` [1] is incompatible with boolean literal `false` [2].
[incompatible-type]

   imported.js:65:8
   65|   _ as true as typeof notTru; // error true ~> false
              ^^^^ [1]

References:
   imported.js:65:16
   65|   _ as true as typeof notTru; // error true ~> false
                      ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:71:3

Cannot cast `bigOne` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-type]

   imported.js:71:3
   71|   bigOne as 2n // error 1n ~> 2n
         ^^^^^^

References:
   local.js:9:23
    9| export const bigOne = 1n;
                             ^^ [1]
   imported.js:71:13
   71|   bigOne as 2n // error 1n ~> 2n
                   ^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:73:8

Cannot cast `_` to `typeof bigOne` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   imported.js:73:8
   73|   _ as 2n as typeof bigOne; // error 2n ~> 1n
              ^^ [1]

References:
   imported.js:73:14
   73|   _ as 2n as typeof bigOne; // error 2n ~> 1n
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:78:3

Cannot cast `abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   imported.js:78:3
   78|   abcRef as "def" // error "abc" ~> "def"
         ^^^^^^

References:
   local.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   imported.js:78:13
   78|   abcRef as "def" // error "abc" ~> "def"
                   ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:80:8

Cannot cast `_` to `typeof abcRef` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:80:8
   80|   _ as "def" as typeof abcRef; // error "def" ~> "abc"
              ^^^^^ [1]

References:
   imported.js:80:17
   80|   _ as "def" as typeof abcRef; // error "def" ~> "abc"
                       ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:85:3

Cannot cast `oneRef` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-type]

   imported.js:85:3
   85|   oneRef as 2 // error 1 ~> 2
         ^^^^^^

References:
   local.js:5:20
    5| export const one = 1;
                          ^ [1]
   imported.js:85:13
   85|   oneRef as 2 // error 1 ~> 2
                   ^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:87:8

Cannot cast `_` to `typeof oneRef` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:87:8
   87|   _ as 2 as typeof oneRef; // error 2 ~> 1
              ^ [1]

References:
   imported.js:87:13
   87|   _ as 2 as typeof oneRef; // error 2 ~> 1
                   ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:92:3

Cannot cast `truRef` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-type]

   imported.js:92:3
   92|   truRef as false // error true ~> false
         ^^^^^^

References:
   local.js:7:20
    7| export const tru = true;
                          ^^^^ [1]
   imported.js:92:13
   92|   truRef as false // error true ~> false
                   ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:94:8

Cannot cast `_` to `typeof truRef` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   imported.js:94:8
   94|   _ as false as typeof truRef; // error false ~> true
              ^^^^^ [1]

References:
   imported.js:94:17
   94|   _ as false as typeof truRef; // error false ~> true
                       ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:99:3

Cannot cast `bigOneRef` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-type]

   imported.js:99:3
   99|   bigOneRef as 2n // error 1n ~> 2n
         ^^^^^^^^^

References:
   local.js:9:23
    9| export const bigOne = 1n;
                             ^^ [1]
   imported.js:99:16
   99|   bigOneRef as 2n // error 1n ~> 2n
                      ^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:101:8

Cannot cast `_` to `typeof bigOneRef` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   imported.js:101:8
   101|   _ as 2n as typeof bigOneRef; // error 2n ~> 1n
               ^^ [1]

References:
   imported.js:101:14
   101|   _ as 2n as typeof bigOneRef; // error 2n ~> 1n
                     ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:105:3

Cannot cast `obj.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:105:3
   105|   obj.abc as "abc"; // error string ~> "abc"
          ^^^^^^^

References:
   local.js:18:27
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                  ^^^^^ [1]
   imported.js:105:14
   105|   obj.abc as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:106:3

Cannot cast `obj.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:106:3
   106|   obj.one as 1; // error number ~> 1
          ^^^^^^^

References:
   local.js:18:39
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                              ^ [1]
   imported.js:106:14
   106|   obj.one as 1; // error number ~> 1
                     ^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:107:3

Cannot cast `obj.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   imported.js:107:3
   107|   obj.tru as true; // error boolean ~> true
          ^^^^^^^

References:
   local.js:18:47
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                      ^^^^ [1]
   imported.js:107:14
   107|   obj.tru as true; // error boolean ~> true
                     ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:108:3

Cannot cast `obj.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   imported.js:108:3
   108|   obj.bigOne as 1n; // error bigint ~> 1n
          ^^^^^^^^^^

References:
   local.js:18:61
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                    ^^ [1]
   imported.js:108:17
   108|   obj.bigOne as 1n; // error bigint ~> 1n
                        ^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:112:3

Cannot cast `spread.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:112:3
   112|   spread.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^

References:
   local.js:18:27
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                  ^^^^^ [1]
   imported.js:112:17
   112|   spread.abc as "abc"; // error string ~> "abc"
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:113:3

Cannot cast `spread.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:113:3
   113|   spread.one as 1; // error number ~> 1
          ^^^^^^^^^^

References:
   local.js:18:39
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                              ^ [1]
   imported.js:113:17
   113|   spread.one as 1; // error number ~> 1
                        ^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:114:3

Cannot cast `spread.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   imported.js:114:3
   114|   spread.tru as true; // error boolean ~> true
          ^^^^^^^^^^

References:
   local.js:18:47
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                      ^^^^ [1]
   imported.js:114:17
   114|   spread.tru as true; // error boolean ~> true
                        ^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:115:3

Cannot cast `spread.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   imported.js:115:3
   115|   spread.bigOne as 1n; // error bigint ~> 1n
          ^^^^^^^^^^^^^

References:
   local.js:18:61
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                    ^^ [1]
   imported.js:115:20
   115|   spread.bigOne as 1n; // error bigint ~> 1n
                           ^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:119:3

Cannot cast `objRefs.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:119:3
   119|   objRefs.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:119:18
   119|   objRefs.abc as "abc"; // error string ~> "abc"
                         ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:120:3

Cannot cast `objRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:120:3
   120|   objRefs.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:120:21
   120|   objRefs.abcRef as "abc"; // error string ~> "abc"
                            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:121:3

Cannot cast `spreadObjRefs.abc` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   imported.js:121:3
   121|   spreadObjRefs.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:121:24
   121|   spreadObjRefs.abc as "abc"; // error string ~> "abc"
                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:122:3

Cannot cast `spreadObjRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   imported.js:122:3
   122|   spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:122:27
   122|   spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
                                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:128:3

Cannot cast `asConst.abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   imported.js:128:3
   128|   asConst.abc as "def"; // error "abc" ~> "def"
          ^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:128:18
   128|   asConst.abc as "def"; // error "abc" ~> "def"
                         ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:129:3

Cannot cast `asConst.abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string
literal `def` [2]. [incompatible-type]

   imported.js:129:3
   129|   asConst.abcRef as "def"; // error "abc" ~> "def"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:129:21
   129|   asConst.abcRef as "def"; // error "abc" ~> "def"
                            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:130:8

Cannot cast `_` to `typeof asConst.abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:130:8
   130|   _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
               ^^^^^ [1]

References:
   imported.js:130:17
   130|   _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
                        ^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:131:8

Cannot cast `_` to `typeof asConst.abcRef` because string literal `def` [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   imported.js:131:8
   131|   _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
               ^^^^^ [1]

References:
   imported.js:131:17
   131|   _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
                        ^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:132:8

Cannot cast `_` to `typeof asConst.abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:132:8
   132|   _ as string as typeof asConst.abc; // error string ~> "abc"
               ^^^^^^ [1]

References:
   imported.js:132:18
   132|   _ as string as typeof asConst.abc; // error string ~> "abc"
                         ^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:133:8

Cannot cast `_` to `typeof asConst.abcRef` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:133:8
   133|   _ as string as typeof asConst.abcRef; // error string ~> "abc"
               ^^^^^^ [1]

References:
   imported.js:133:18
   133|   _ as string as typeof asConst.abcRef; // error string ~> "abc"
                         ^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:144:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:144:3
   144|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:144:12
   144|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:145:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:145:3
   145|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:145:15
   145|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:149:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:149:3
   149|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:149:12
   149|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:150:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:150:3
   150|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:150:15
   150|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:159:3

Cannot cast `obj` to object type because in property `f`: `number` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:159:3
   159|   obj as {f: 1}; // error number ~> 1
          ^^^

References:
   imported.js:158:20
   158|   const obj = { f: one };
                           ^^^ [1]
   imported.js:159:14
   159|   obj as {f: 1}; // error number ~> 1
                     ^ [2]
   imported.js:158:15
   158|   const obj = { f: one };
                      ^^^^^^^^^^ [3]
   imported.js:159:10
   159|   obj as {f: 1}; // error number ~> 1
                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ imported.js:172:3

Cannot cast `obj1` to object type because in property `f`: `number | 1` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:172:3
   172|   obj1 as {f: 1}; // error number ~> 1
          ^^^^

References:
   imported.js:171:21
   171|   const obj1 = { f: n0 ?? one };
                            ^^^^^^^^^ [1]
   imported.js:172:15
   172|   obj1 as {f: 1}; // error number ~> 1
                      ^ [2]
   imported.js:171:16
   171|   const obj1 = { f: n0 ?? one };
                       ^^^^^^^^^^^^^^^^ [3]
   imported.js:172:11
   172|   obj1 as {f: 1}; // error number ~> 1
                  ^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ imported.js:173:3

Cannot cast `obj1` to object type because in property `f`: `number | 1` [1] is not exactly the same as `2` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 2}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:173:3
   173|   obj1 as {f: 2}; // error number ~> 2
          ^^^^

References:
   imported.js:171:21
   171|   const obj1 = { f: n0 ?? one };
                            ^^^^^^^^^ [1]
   imported.js:173:15
   173|   obj1 as {f: 2}; // error number ~> 2
                      ^ [2]
   imported.js:171:16
   171|   const obj1 = { f: n0 ?? one };
                       ^^^^^^^^^^^^^^^^ [3]
   imported.js:173:11
   173|   obj1 as {f: 2}; // error number ~> 2
                  ^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ imported.js:178:3

Cannot cast `obj2` to object type because in property `f`: `number` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:178:3
   178|   obj2 as {f: 1}; // error number ~> 1
          ^^^^

References:
   imported.js:177:21
   177|   const obj2 = { f: one ?? n0 };
                            ^^^ [1]
   imported.js:178:15
   178|   obj2 as {f: 1}; // error number ~> 1
                      ^ [2]
   imported.js:177:16
   177|   const obj2 = { f: one ?? n0 };
                       ^^^^^^^^^^^^^^^^ [3]
   imported.js:178:11
   178|   obj2 as {f: 1}; // error number ~> 1
                  ^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ imported.js:179:3

Cannot cast `obj2` to object type because in property `f`: `number` [1] is not exactly the same as `2` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 2}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:179:3
   179|   obj2 as {f: 2}; // error number ~> 2
          ^^^^

References:
   imported.js:177:21
   177|   const obj2 = { f: one ?? n0 };
                            ^^^ [1]
   imported.js:179:15
   179|   obj2 as {f: 2}; // error number ~> 2
                      ^ [2]
   imported.js:177:16
   177|   const obj2 = { f: one ?? n0 };
                       ^^^^^^^^^^^^^^^^ [3]
   imported.js:179:11
   179|   obj2 as {f: 2}; // error number ~> 2
                  ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- imported.js:205:11

Cannot call `set` with object literal bound to `y` because in property `f`: number [1] is incompatible with union
type [2]. [incompatible-type]

   imported.js:205:11
   205|   set({f: 3}); // error 3 ~> 1|2
                  ^ [1]

References:
   imported.js:202:32
   202|   const [o, set] = useState<{f:1|2}>({f: one}); // okay
                                       ^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:210:3

Cannot cast `n_` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:210:3
   210|   n_ as 1; // error number ~> 1
          ^^

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [1]
   imported.js:210:9
   210|   n_ as 1; // error number ~> 1
                ^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:218:7

Cannot call `set` with `2` bound to `y` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:218:7
   218|   set(2); // error 2 ~> 1
              ^ [1]

References:
   imported.js:215:18
   215|   declare var x: typeof one;
                         ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:225:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `2` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   imported.js:225:11
   225|   set({f: 2}); // error
                  ^ [1]

References:
   imported.js:222:18
   222|   declare var x: typeof one;
                         ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:233:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   imported.js:233:11
   233|   set({f: "blah"}); // error "blah" ~> number
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:241:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   imported.js:241:11
   241|   set({f: "blah"}); // error "blah" ~> number
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:247:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   imported.js:247:11
   247|   set({f: "blah"}); // error "blah" ~> 1
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:249:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `2` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   imported.js:249:11
   249|   set({f: 2}); // error 2 ~> 1
                  ^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:250:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `3` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   imported.js:250:11
   250|   set({f: 3}); // error 3 ~> 1
                  ^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:269:5

Cannot cast `v` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   imported.js:269:5
   269|     v as 1; // error number ~> 1
            ^

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [1]
   imported.js:269:10
   269|     v as 1; // error number ~> 1
                 ^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:341:3

Cannot cast `foo(...)` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   imported.js:341:3
   341|   foo(() => abc) as 'def'; // error "abc" ~> "def"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:341:21
   341|   foo(() => abc) as 'def'; // error "abc" ~> "def"
                            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:347:3

Cannot cast `foo(...)` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   imported.js:347:3
   347|   foo([abc]) as 'def'; // error "abc" ~> "def"
          ^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:347:17
   347|   foo([abc]) as 'def'; // error "abc" ~> "def"
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:357:3

Cannot cast `m` to string literal `abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   imported.js:357:3
   357|   m as 'abc'; // error 'def' ~> 'abc'
          ^

References:
   local.js:4:20
     4| export const def = "def";
                           ^^^^^ [1]
   imported.js:357:8
   357|   m as 'abc'; // error 'def' ~> 'abc'
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:358:3

Cannot cast `m` to string literal `def` because string literal `abc` [1] is incompatible with string literal `def` [2].
[incompatible-type]

   imported.js:358:3
   358|   m as 'def'; // error 'abc' ~> 'def'
          ^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:358:8
   358|   m as 'def'; // error 'abc' ~> 'def'
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:364:3

Cannot cast `x` to string literal `def` because string literal `abc` [1] is incompatible with string literal `def` [2].
[incompatible-type]

   imported.js:364:3
   364|   x as 'def'; // error 'abc' ~> 'def'
          ^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   imported.js:364:8
   364|   x as 'def'; // error 'abc' ~> 'def'
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ imported.js:367:3

Cannot cast `o1` to object type because in property `f`: `string` [1] is not exactly the same as `"abc"` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: "abc"}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   imported.js:367:3
   367|   o1 as {f: 'abc'}; // error string ~> 'abc'
          ^^

References:
   imported.js:366:18
   366|   const o1 = {f: x};
                         ^ [1]
   imported.js:367:13
   367|   o1 as {f: 'abc'}; // error string ~> 'abc'
                    ^^^^^ [2]
   imported.js:366:14
   366|   const o1 = {f: x};
                     ^^^^^^ [3]
   imported.js:367:9
   367|   o1 as {f: 'abc'}; // error string ~> 'abc'
                ^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- imported.js:377:11

Cannot assign `"a"` to `x1[0]` because string [1] is incompatible with number [2]. [incompatible-type]

   imported.js:377:11
   377|   x1[0] = "a"; // error string ~> number
                  ^^^ [1]

References:
   imported.js:375:43
   375|   const x1 = arr.reduce((acc, _) => acc, [0]);
                                                  ^ [2]


Error ----------------------------------------------------------------------------------------------- imported.js:381:11

Cannot assign `"a"` to `x2[0]` because string [1] is incompatible with number [2]. [incompatible-type]

   imported.js:381:11
   381|   x2[0] = "a"; // error string ~> number
                  ^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error ---------------------------------------------------------------------------------------------- jsx_pragma.js:12:27

Cannot create `C` element because in property `foo` > array element > property `bar`: string literal `BAK` [1] is
incompatible with string literal `BAZ` [2]. [incompatible-type]

   jsx_pragma.js:12:27
   12| const c2 = <C foo={[{bar: 'BAK'}]} />; // error 'BAZ' != 'BAK'
                                 ^^^^^ [1]

References:
   jsx_pragma.js:10:52
   10| declare var C: (props: $ReadOnly<{foo: Array<{bar: 'BAZ'}>}>) => void;
                                                          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:37:3

Cannot cast `abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   local.js:37:3
   37|   abc as "def" // error "abc" ~> "def"
         ^^^

References:
   local.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   local.js:37:10
   37|   abc as "def" // error "abc" ~> "def"
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:39:8

Cannot cast `_` to `typeof abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:39:8
   39|   _ as "def" as typeof abc; // error "def" ~> "abc"
              ^^^^^ [1]

References:
   local.js:39:17
   39|   _ as "def" as typeof abc; // error "def" ~> "abc"
                       ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:44:3

Cannot cast `one` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-type]

   local.js:44:3
   44|   one as 2 // error 1 ~> 2
         ^^^

References:
   local.js:5:20
    5| export const one = 1;
                          ^ [1]
   local.js:44:10
   44|   one as 2 // error 1 ~> 2
                ^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:46:3

Cannot cast `minusOne` to number literal `0` because number literal `-1` [1] is incompatible with number literal
`0` [2]. [incompatible-type]

   local.js:46:3
   46|   minusOne as 0; // error -1 ~> 0
         ^^^^^^^^

References:
   local.js:6:25
    6| export const minusOne = -1;
                               ^^ [1]
   local.js:46:15
   46|   minusOne as 0; // error -1 ~> 0
                     ^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:48:8

Cannot cast `_` to `typeof one` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:48:8
   48|   _ as 2 as typeof one; // error 2 ~> 1
              ^ [1]

References:
   local.js:48:13
   48|   _ as 2 as typeof one; // error 2 ~> 1
                   ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:50:8

Cannot cast `_` to `typeof minusOne` because number literal `0` [1] is incompatible with number literal `-1` [2].
[incompatible-type]

   local.js:50:8
   50|   _ as 0 as typeof minusOne; // error 0 ~> -1
              ^ [1]

References:
   local.js:50:13
   50|   _ as 0 as typeof minusOne; // error 0 ~> -1
                   ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:55:3

Cannot cast `tru` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-type]

   local.js:55:3
   55|   tru as false // error true ~> false
         ^^^

References:
   local.js:7:20
    7| export const tru = true;
                          ^^^^ [1]
   local.js:55:10
   55|   tru as false // error true ~> false
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:57:3

Cannot cast `notTru` to boolean literal `true` because boolean literal `false` [1] is incompatible with boolean literal
`true` [2]. [incompatible-type]

   local.js:57:3
   57|   notTru as true // error false ~> true
         ^^^^^^

References:
   local.js:8:23
    8| export const notTru = !tru;
                             ^^^^ [1]
   local.js:57:13
   57|   notTru as true // error false ~> true
                   ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:59:8

Cannot cast `_` to `typeof tru` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   local.js:59:8
   59|   _ as false as typeof tru; // error false ~> true
              ^^^^^ [1]

References:
   local.js:59:17
   59|   _ as false as typeof tru; // error false ~> true
                       ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:60:8

Cannot cast `_` to `typeof notTru` because boolean literal `true` [1] is incompatible with boolean literal `false` [2].
[incompatible-type]

   local.js:60:8
   60|   _ as true as typeof notTru; // error true ~> false
              ^^^^ [1]

References:
   local.js:60:16
   60|   _ as true as typeof notTru; // error true ~> false
                      ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:66:3

Cannot cast `bigOne` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-type]

   local.js:66:3
   66|   bigOne as 2n // error 1n ~> 2n
         ^^^^^^

References:
   local.js:9:23
    9| export const bigOne = 1n;
                             ^^ [1]
   local.js:66:13
   66|   bigOne as 2n // error 1n ~> 2n
                   ^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:68:8

Cannot cast `_` to `typeof bigOne` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   local.js:68:8
   68|   _ as 2n as typeof bigOne; // error 2n ~> 1n
              ^^ [1]

References:
   local.js:68:14
   68|   _ as 2n as typeof bigOne; // error 2n ~> 1n
                    ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:73:3

Cannot cast `abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   local.js:73:3
   73|   abcRef as "def" // error "abc" ~> "def"
         ^^^^^^

References:
   local.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   local.js:73:13
   73|   abcRef as "def" // error "abc" ~> "def"
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:75:8

Cannot cast `_` to `typeof abcRef` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:75:8
   75|   _ as "def" as typeof abcRef; // error "def" ~> "abc"
              ^^^^^ [1]

References:
   local.js:75:17
   75|   _ as "def" as typeof abcRef; // error "def" ~> "abc"
                       ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:80:3

Cannot cast `oneRef` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-type]

   local.js:80:3
   80|   oneRef as 2 // error 1 ~> 2
         ^^^^^^

References:
   local.js:5:20
    5| export const one = 1;
                          ^ [1]
   local.js:80:13
   80|   oneRef as 2 // error 1 ~> 2
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:82:8

Cannot cast `_` to `typeof oneRef` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:82:8
   82|   _ as 2 as typeof oneRef; // error 2 ~> 1
              ^ [1]

References:
   local.js:82:13
   82|   _ as 2 as typeof oneRef; // error 2 ~> 1
                   ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:87:3

Cannot cast `truRef` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-type]

   local.js:87:3
   87|   truRef as false // error true ~> false
         ^^^^^^

References:
   local.js:7:20
    7| export const tru = true;
                          ^^^^ [1]
   local.js:87:13
   87|   truRef as false // error true ~> false
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:89:8

Cannot cast `_` to `typeof truRef` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   local.js:89:8
   89|   _ as false as typeof truRef; // error false ~> true
              ^^^^^ [1]

References:
   local.js:89:17
   89|   _ as false as typeof truRef; // error false ~> true
                       ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:94:3

Cannot cast `bigOneRef` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-type]

   local.js:94:3
   94|   bigOneRef as 2n // error 1n ~> 2n
         ^^^^^^^^^

References:
   local.js:9:23
    9| export const bigOne = 1n;
                             ^^ [1]
   local.js:94:16
   94|   bigOneRef as 2n // error 1n ~> 2n
                      ^^ [2]


Error ---------------------------------------------------------------------------------------------------- local.js:96:8

Cannot cast `_` to `typeof bigOneRef` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   local.js:96:8
   96|   _ as 2n as typeof bigOneRef; // error 2n ~> 1n
              ^^ [1]

References:
   local.js:96:14
   96|   _ as 2n as typeof bigOneRef; // error 2n ~> 1n
                    ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:100:3

Cannot cast `obj.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:100:3
   100|   obj.abc as "abc"; // error string ~> "abc"
          ^^^^^^^

References:
   local.js:18:27
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                  ^^^^^ [1]
   local.js:100:14
   100|   obj.abc as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:101:3

Cannot cast `obj.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:101:3
   101|   obj.one as 1; // error number ~> 1
          ^^^^^^^

References:
   local.js:18:39
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                              ^ [1]
   local.js:101:14
   101|   obj.one as 1; // error number ~> 1
                     ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:102:3

Cannot cast `obj.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   local.js:102:3
   102|   obj.tru as true; // error boolean ~> true
          ^^^^^^^

References:
   local.js:18:47
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                      ^^^^ [1]
   local.js:102:14
   102|   obj.tru as true; // error boolean ~> true
                     ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:103:3

Cannot cast `obj.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   local.js:103:3
   103|   obj.bigOne as 1n; // error bigint ~> 1n
          ^^^^^^^^^^

References:
   local.js:18:61
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                    ^^ [1]
   local.js:103:17
   103|   obj.bigOne as 1n; // error bigint ~> 1n
                        ^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:107:3

Cannot cast `spread.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:107:3
   107|   spread.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^

References:
   local.js:18:27
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                  ^^^^^ [1]
   local.js:107:17
   107|   spread.abc as "abc"; // error string ~> "abc"
                        ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:108:3

Cannot cast `spread.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:108:3
   108|   spread.one as 1; // error number ~> 1
          ^^^^^^^^^^

References:
   local.js:18:39
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                              ^ [1]
   local.js:108:17
   108|   spread.one as 1; // error number ~> 1
                        ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:109:3

Cannot cast `spread.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-type]

   local.js:109:3
   109|   spread.tru as true; // error boolean ~> true
          ^^^^^^^^^^

References:
   local.js:18:47
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                      ^^^^ [1]
   local.js:109:17
   109|   spread.tru as true; // error boolean ~> true
                        ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:110:3

Cannot cast `spread.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-type]

   local.js:110:3
   110|   spread.bigOne as 1n; // error bigint ~> 1n
          ^^^^^^^^^^^^^

References:
   local.js:18:61
    18| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                    ^^ [1]
   local.js:110:20
   110|   spread.bigOne as 1n; // error bigint ~> 1n
                           ^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:114:3

Cannot cast `objRefs.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:114:3
   114|   objRefs.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:114:18
   114|   objRefs.abc as "abc"; // error string ~> "abc"
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:115:3

Cannot cast `objRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:115:3
   115|   objRefs.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:115:21
   115|   objRefs.abcRef as "abc"; // error string ~> "abc"
                            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:116:3

Cannot cast `spreadObjRefs.abc` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   local.js:116:3
   116|   spreadObjRefs.abc as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:116:24
   116|   spreadObjRefs.abc as "abc"; // error string ~> "abc"
                               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:117:3

Cannot cast `spreadObjRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   local.js:117:3
   117|   spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:117:27
   117|   spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
                                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:123:3

Cannot cast `asConst.abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   local.js:123:3
   123|   asConst.abc as "def"; // error "abc" ~> "def"
          ^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:123:18
   123|   asConst.abc as "def"; // error "abc" ~> "def"
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:124:3

Cannot cast `asConst.abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string
literal `def` [2]. [incompatible-type]

   local.js:124:3
   124|   asConst.abcRef as "def"; // error "abc" ~> "def"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:124:21
   124|   asConst.abcRef as "def"; // error "abc" ~> "def"
                            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:125:8

Cannot cast `_` to `typeof asConst.abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:125:8
   125|   _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
               ^^^^^ [1]

References:
   local.js:125:17
   125|   _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
                        ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:126:8

Cannot cast `_` to `typeof asConst.abcRef` because string literal `def` [1] is incompatible with string literal
`abc` [2]. [incompatible-type]

   local.js:126:8
   126|   _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
               ^^^^^ [1]

References:
   local.js:126:17
   126|   _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
                        ^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:127:8

Cannot cast `_` to `typeof asConst.abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:127:8
   127|   _ as string as typeof asConst.abc; // error string ~> "abc"
               ^^^^^^ [1]

References:
   local.js:127:18
   127|   _ as string as typeof asConst.abc; // error string ~> "abc"
                         ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:128:8

Cannot cast `_` to `typeof asConst.abcRef` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:128:8
   128|   _ as string as typeof asConst.abcRef; // error string ~> "abc"
               ^^^^^^ [1]

References:
   local.js:128:18
   128|   _ as string as typeof asConst.abcRef; // error string ~> "abc"
                         ^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:139:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:139:3
   139|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:139:12
   139|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:140:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:140:3
   140|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:140:15
   140|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:144:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:144:3
   144|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:144:12
   144|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:145:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:145:3
   145|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:145:15
   145|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:154:3

Cannot cast `obj` to object type because in property `f`: `number` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:154:3
   154|   obj as {f: 1}; // error number ~> 1
          ^^^

References:
   local.js:153:20
   153|   const obj = { f: one };
                           ^^^ [1]
   local.js:154:14
   154|   obj as {f: 1}; // error number ~> 1
                     ^ [2]
   local.js:153:15
   153|   const obj = { f: one };
                      ^^^^^^^^^^ [3]
   local.js:154:10
   154|   obj as {f: 1}; // error number ~> 1
                 ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:167:3

Cannot cast `obj1` to object type because in property `f`: `number | 1` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:167:3
   167|   obj1 as {f: 1}; // error number ~> 1
          ^^^^

References:
   local.js:166:21
   166|   const obj1 = { f: n0 ?? one };
                            ^^^^^^^^^ [1]
   local.js:167:15
   167|   obj1 as {f: 1}; // error number ~> 1
                      ^ [2]
   local.js:166:16
   166|   const obj1 = { f: n0 ?? one };
                       ^^^^^^^^^^^^^^^^ [3]
   local.js:167:11
   167|   obj1 as {f: 1}; // error number ~> 1
                  ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:168:3

Cannot cast `obj1` to object type because in property `f`: `number | 1` [1] is not exactly the same as `2` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 2}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:168:3
   168|   obj1 as {f: 2}; // error number ~> 2
          ^^^^

References:
   local.js:166:21
   166|   const obj1 = { f: n0 ?? one };
                            ^^^^^^^^^ [1]
   local.js:168:15
   168|   obj1 as {f: 2}; // error number ~> 2
                      ^ [2]
   local.js:166:16
   166|   const obj1 = { f: n0 ?? one };
                       ^^^^^^^^^^^^^^^^ [3]
   local.js:168:11
   168|   obj1 as {f: 2}; // error number ~> 2
                  ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:173:3

Cannot cast `obj2` to object type because in property `f`: `number` [1] is not exactly the same as `1` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 1}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:173:3
   173|   obj2 as {f: 1}; // error number ~> 1
          ^^^^

References:
   local.js:172:21
   172|   const obj2 = { f: one ?? n0 };
                            ^^^ [1]
   local.js:173:15
   173|   obj2 as {f: 1}; // error number ~> 1
                      ^ [2]
   local.js:172:16
   172|   const obj2 = { f: one ?? n0 };
                       ^^^^^^^^^^^^^^^^ [3]
   local.js:173:11
   173|   obj2 as {f: 1}; // error number ~> 1
                  ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:174:3

Cannot cast `obj2` to object type because in property `f`: `number` [1] is not exactly the same as `2` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: 2}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:174:3
   174|   obj2 as {f: 2}; // error number ~> 2
          ^^^^

References:
   local.js:172:21
   172|   const obj2 = { f: one ?? n0 };
                            ^^^ [1]
   local.js:174:15
   174|   obj2 as {f: 2}; // error number ~> 2
                      ^ [2]
   local.js:172:16
   172|   const obj2 = { f: one ?? n0 };
                       ^^^^^^^^^^^^^^^^ [3]
   local.js:174:11
   174|   obj2 as {f: 2}; // error number ~> 2
                  ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:192:3

Cannot cast `o1.f` to union type because string [1] is incompatible with union type [2]. [incompatible-type]

   local.js:192:3
   192|   o1.f as "a" | "b"; // error string ~> "a" | "b"
          ^^^^

References:
   local.js:190:21
   190|   const x1 = cond ? "a" : "b";
                            ^^^ [1]
   local.js:192:11
   192|   o1.f as "a" | "b"; // error string ~> "a" | "b"
                  ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:192:3

Cannot cast `o1.f` to union type because string [1] is incompatible with union type [2]. [incompatible-type]

   local.js:192:3
   192|   o1.f as "a" | "b"; // error string ~> "a" | "b"
          ^^^^

References:
   local.js:190:27
   190|   const x1 = cond ? "a" : "b";
                                  ^^^ [1]
   local.js:192:11
   192|   o1.f as "a" | "b"; // error string ~> "a" | "b"
                  ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:196:3

Cannot cast `o2.f` to union type because string [1] is incompatible with union type [2]. [incompatible-type]

   local.js:196:3
   196|   o2.f as "foo" | "a"; // error string ~> "foo" | "a"
          ^^^^

References:
   local.js:194:29
   194|   const x2 = cond ? foo() : "a";
                                    ^^^ [1]
   local.js:196:11
   196|   o2.f as "foo" | "a"; // error string ~> "foo" | "a"
                  ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:200:3

Cannot cast `o3.f` to union type because: [incompatible-type]
 - Either in property `a`: string [1] is incompatible with string literal `a` [2].
 - Or object literal [3] is incompatible with string literal `foo` [4].

   local.js:200:3
   200|   o3.f as {a: 'a'} | "foo"; // error 'a's contribution is string
          ^^^^

References:
   local.js:198:25
   198|   const x3 = cond ? {a: 'a'} : foo();
                                ^^^ [1]
   local.js:200:15
   200|   o3.f as {a: 'a'} | "foo"; // error 'a's contribution is string
                      ^^^ [2]
   local.js:198:21
   198|   const x3 = cond ? {a: 'a'} : foo();
                            ^^^^^^^^ [3]
   local.js:200:22
   200|   o3.f as {a: 'a'} | "foo"; // error 'a's contribution is string
                             ^^^^^ [4]


Error -------------------------------------------------------------------------------------------------- local.js:217:11

Cannot call `set` with object literal bound to `y` because in property `f`: number [1] is incompatible with union
type [2]. [incompatible-type]

   local.js:217:11
   217|   set({f: 3}); // error 3 ~> 1|2
                  ^ [1]

References:
   local.js:214:32
   214|   const [o, set] = useState<{f:1|2}>({f: one}); // okay
                                       ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:222:3

Cannot cast `n_` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:222:3
   222|   n_ as 1; // error number ~> 1
          ^^

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [1]
   local.js:222:9
   222|   n_ as 1; // error number ~> 1
                ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:230:7

Cannot call `set` with `2` bound to `y` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:230:7
   230|   set(2); // error 2 ~> 1
              ^ [1]

References:
   local.js:227:18
   227|   declare var x: typeof one;
                         ^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:237:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `2` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   local.js:237:11
   237|   set({f: 2}); // error
                  ^ [1]

References:
   local.js:234:18
   234|   declare var x: typeof one;
                         ^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:245:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   local.js:245:11
   245|   set({f: "blah"}); // error
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:253:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   local.js:253:11
   253|   set({f: "blah"}); // error "blah" ~> number
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:259:11

Cannot call `set` with object literal bound to `y` because in property `f`: string [1] is incompatible with number [2].
[incompatible-type]

   local.js:259:11
   259|   set({f: "blah"}); // error "blah" ~> 1
                  ^^^^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:261:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `2` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   local.js:261:11
   261|   set({f: 2}); // error 2 ~> 1
                  ^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:262:11

Cannot call `set` with object literal bound to `y` because in property `f`: number literal `3` [1] is incompatible with
number literal `1` [2]. [incompatible-type]

   local.js:262:11
   262|   set({f: 3}); // error 3 ~> 1
                  ^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:281:5

Cannot cast `v` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:281:5
   281|     v as 1; // error number ~> 1
            ^

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [1]
   local.js:281:10
   281|     v as 1; // error number ~> 1
                 ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:363:14

This condition is truthy. [constant-condition]

   363|   const x1 = 42 || "hello";
                     ^^


Error -------------------------------------------------------------------------------------------------- local.js:369:31

This condition is truthy. [constant-condition]

   369|   function fn1(): 42 { return 42 || ""; } // okay
                                      ^^


Error -------------------------------------------------------------------------------------------------- local.js:372:27

This condition is truthy. [constant-condition]

   372|   function fn2() { return 42 || ""; }
                                  ^^


Error --------------------------------------------------------------------------------------------------- local.js:399:3

Cannot cast `foo(...)` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   local.js:399:3
   399|   foo(() => abc) as 'def'; // error "abc" ~> "def"
          ^^^^^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:399:21
   399|   foo(() => abc) as 'def'; // error "abc" ~> "def"
                            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:405:3

Cannot cast `foo(...)` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-type]

   local.js:405:3
   405|   foo([abc]) as 'def'; // error "abc" ~> "def"
          ^^^^^^^^^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:405:17
   405|   foo([abc]) as 'def'; // error "abc" ~> "def"
                        ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:415:3

Cannot cast `m1` to string literal `a` because string literal `b` [1] is incompatible with string literal `a` [2].
[incompatible-type]

   local.js:415:3
   415|   m1 as 'a'; // error 'b' ~> 'a'
          ^^

References:
   local.js:412:10
   412|     _ => 'b',
                 ^^^ [1]
   local.js:415:9
   415|   m1 as 'a'; // error 'b' ~> 'a'
                ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:416:3

Cannot cast `m1` to string literal `b` because string literal `a` [1] is incompatible with string literal `b` [2].
[incompatible-type]

   local.js:416:3
   416|   m1 as 'b'; // error 'a' ~> 'b'
          ^^

References:
   local.js:411:10
   411|     1 => 'a',
                 ^^^ [1]
   local.js:416:9
   416|   m1 as 'b'; // error 'a' ~> 'b'
                ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:423:3

Cannot cast `m2` to string literal `abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-type]

   local.js:423:3
   423|   m2 as 'abc'; // error 'def' ~> 'abc'
          ^^

References:
   local.js:4:20
     4| export const def = "def";
                           ^^^^^ [1]
   local.js:423:9
   423|   m2 as 'abc'; // error 'def' ~> 'abc'
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:424:3

Cannot cast `m2` to string literal `def` because string literal `abc` [1] is incompatible with string literal `def` [2].
[incompatible-type]

   local.js:424:3
   424|   m2 as 'def'; // error 'abc' ~> 'def'
          ^^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:424:9
   424|   m2 as 'def'; // error 'abc' ~> 'def'
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:430:3

Cannot cast `x` to string literal `def` because string literal `abc` [1] is incompatible with string literal `def` [2].
[incompatible-type]

   local.js:430:3
   430|   x as 'def'; // error 'abc' ~> 'def'
          ^

References:
   local.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   local.js:430:8
   430|   x as 'def'; // error 'abc' ~> 'def'
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:433:3

Cannot cast `o1` to object type because in property `f`: `string` [1] is not exactly the same as `"abc"` [2].
[incompatible-type]

The above-mentioned two types must be the same because property `f` is invariantly typed. To fix the error,
- Either annotate object literal [3] with `{f: "abc"}` [4]
- Or make property `f` in object type [4] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   local.js:433:3
   433|   o1 as {f: 'abc'}; // error string ~> 'abc'
          ^^

References:
   local.js:432:18
   432|   const o1 = {f: x};
                         ^ [1]
   local.js:433:13
   433|   o1 as {f: 'abc'}; // error string ~> 'abc'
                    ^^^^^ [2]
   local.js:432:14
   432|   const o1 = {f: x};
                     ^^^^^^ [3]
   local.js:433:9
   433|   o1 as {f: 'abc'}; // error string ~> 'abc'
                ^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- local.js:448:9

Cannot call `c.set` because in type argument `K`: string [1] is incompatible with string literal `a` [2].
[incompatible-type]

   local.js:448:9
   448|   c.set('b'); // error "b" ~> "a"
                ^^^ [1]

References:
   local.js:441:12
   441|     set<K: 'a'>(k: K) {}
                   ^^^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:455:11

Cannot assign `"a"` to `x1[0]` because string [1] is incompatible with number [2]. [incompatible-type]

   local.js:455:11
   455|   x1[0] = "a"; // error string ~> number
                  ^^^ [1]

References:
   local.js:453:43
   453|   const x1 = arr.reduce((acc, _) => acc, [0]);
                                                  ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:459:11

Cannot assign `"a"` to `x2[0]` because string [1] is incompatible with number [2]. [incompatible-type]

   local.js:459:11
   459|   x2[0] = "a"; // error string ~> number
                  ^^^ [1]

References:
   local.js:5:20
     5| export const one = 1;
                           ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:470:3

Cannot cast `arr[0]` to union type because number [1] is incompatible with union type [2]. [incompatible-type]

   local.js:470:3
   470|   arr[0] as 1|2; // error number ~> 1|2
          ^^^^^^

References:
   local.js:467:25
   467|   const x = zerOrOne || 2;
                                ^ [1]
   local.js:470:13
   470|   arr[0] as 1|2; // error number ~> 1|2
                    ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:476:3

Cannot cast `one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-type]

   local.js:476:3
   476|   one as 1; // error number ~> 1
          ^^^

References:
   local.js:475:33
   475|   const {[PROP]: one} =  {prop: 1};
                                        ^ [1]
   local.js:476:10
   476|   one as 1; // error number ~> 1
                 ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:477:3

Cannot cast `one` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-type]

   local.js:477:3
   477|   one as 2; // error number ~> 2
          ^^^

References:
   local.js:475:33
   475|   const {[PROP]: one} =  {prop: 1};
                                        ^ [1]
   local.js:477:10
   477|   one as 2; // error number ~> 2
                 ^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:484:16

Cannot cast object literal to `$ReadOnly` because in property `a`: string literal `a` [1] is incompatible with string
literal `b` [2]. [incompatible-type]

   local.js:484:16
   484|   ({[KeyName]: KeyName} as $ReadOnly<{[Name]: 'b'}>); // error 'a' ~> 'b'
                       ^^^^^^^

References:
   local.js:482:19
   482|   const KeyName = 'a';
                          ^^^ [1]
   local.js:484:47
   484|   ({[KeyName]: KeyName} as $ReadOnly<{[Name]: 'b'}>); // error 'a' ~> 'b'
                                                      ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:493:5

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-type]

   local.js:493:5
   493|     x as number; // error string ~> number
            ^

References:
   local.js:489:13
   489|   const k = "a";
                    ^^^ [1]
   local.js:493:10
   493|     x as number; // error string ~> number
                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- local.js:530:14

Cannot assign `"a"` to `obj.prop` because string [1] is incompatible with number [2]. [incompatible-type]

   local.js:530:14
   530|   obj.prop = "a"; // error string ~> number
                     ^^^ [1]

References:
   local.js:525:39
   525|   const memoized = memo(() => ({prop: 0})); // should generalize to `() => {prop: number}`
                                              ^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:572:3

Cannot cast `x2` to number literal `-3` because number literal `-2` [1] is incompatible with number literal `-3` [2].
[incompatible-type]

   local.js:572:3
   572|   x2 as -3; // error -2 ~> -3
          ^^

References:
   local.js:570:14
   570|   const x2 = -2;
                     ^^ [1]
   local.js:572:9
   572|   x2 as -3; // error -2 ~> -3
                ^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:575:3

Cannot cast `x3` to number literal `-2` because number literal `2` [1] is incompatible with number literal `-2` [2].
[incompatible-type]

   local.js:575:3
   575|   x3 as -2; // error 2 ~> -2
          ^^

References:
   local.js:573:14
   573|   const x3 = -x2;
                     ^^^ [1]
   local.js:575:9
   575|   x3 as -2; // error 2 ~> -2
                ^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:581:3

Cannot cast `objx2.x2` to number literal `-2` because number [1] is incompatible with number literal `-2` [2].
[incompatible-type]

   local.js:581:3
   581|   objx2.x2 as -2; // error number ~> -2
          ^^^^^^^^

References:
   local.js:570:14
   570|   const x2 = -2;
                     ^^ [1]
   local.js:581:15
   581|   objx2.x2 as -2; // error number ~> -2
                      ^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:587:3

Cannot cast `b2` to bigint literal `-3n` because bigint literal `-2n` [1] is incompatible with bigint literal `-3n` [2].
[incompatible-type]

   local.js:587:3
   587|   b2 as -3n; // error -2n ~> -3n
          ^^

References:
   local.js:585:14
   585|   const b2 = -2n;
                     ^^^ [1]
   local.js:587:9
   587|   b2 as -3n; // error -2n ~> -3n
                ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:590:3

Cannot cast `b3` to bigint literal `-2n` because bigint literal `2n` [1] is incompatible with bigint literal `-2n` [2].
[incompatible-type]

   local.js:590:3
   590|   b3 as -2n; // error 2n ~> -2n
          ^^

References:
   local.js:588:14
   588|   const b3 = -b2;
                     ^^^ [1]
   local.js:590:9
   590|   b3 as -2n; // error 2n ~> -2n
                ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:612:3

Cannot cast template string to string literal `b` because string literal `a` [1] is incompatible with string literal
`b` [2]. [incompatible-type]

   local.js:612:3
   612|   `a` as 'b'; // error
          ^^^ [1]

References:
   local.js:612:10
   612|   `a` as 'b'; // error
                 ^^^ [2]


Error --------------------------------------------------------------------------------------------------- local.js:630:7

Cannot call `foo` because property `prop3` (did you mean `prop1`?) is missing in `Obj` [1]. [prop-missing]

   local.js:630:7
   630|   foo('prop3', {}); // error: prop3 is not a key of Obj
              ^^^^^^^

References:
   local.js:627:49
   627|   declare function foo<K: string>(key: K, args: Obj[K]): void;
                                                        ^^^ [1]


Error -------------------------------------------------------------------------------------------------- local.js:658:20

Cannot call `Set` with array literal bound to `iterable` because: [incompatible-type]
 - array literal [1] is incompatible with `$Iterable` [2]
    - in property `@@iterator` > the return value > type argument `Yield` [3]: string literal `C` [4] is incompatible
      with union type [5]

   local.js:658:20
    658|   fn(() => new Set(['C'])); // error 'C' ~> 'A' | 'B'
                            ^^^^^ [1]

References:
   <BUILTINS>/core.js:2155:29
   2155|     constructor(iterable?: ?Iterable<T>): void;
                                     ^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1833:30
   1833| interface $IteratorProtocol<+Yield,+Return=void,-Next=void> {
                                      ^^^^^ [3]
   local.js:658:21
    658|   fn(() => new Set(['C'])); // error 'C' ~> 'A' | 'B'
                             ^^^ [4]
   local.js:653:77
    653|     fn: (...args: Parameters<() => Set<'A' | 'B'>>) => ReturnType<() => Set<'A' | 'B'>>,
                                                                                     ^^^^^^^^^ [5]


Error --------------------------------------------------------------------------------------------------- local.js:671:7

Cannot get `obj[getKey(...)]` because property `c` is missing in object type [1]. [prop-missing]

   local.js:671:7
   671|   obj[getKey('c')]; // error 'c' is missing in obj
              ^^^^^^^^^^^

References:
   local.js:668:20
   668|   declare var obj: {a: number, b: string};
                           ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- local.js:673:7

Cannot assign `1` to `obj[getKey(...)]` because property `c` is missing in object type [1]. [prop-missing]

   local.js:673:7
   673|   obj[getKey('c')] = 1; // error 'c' is missing in obj
              ^^^^^^^^^^^

References:
   local.js:668:20
   668|   declare var obj: {a: number, b: string};
                           ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ nested_generic_calls.js:15:24

Cannot call `f` with `'a'` bound to `literalValue` because string literal `a` [1] is incompatible with string literal
`b` [2]. [incompatible-type]

   nested_generic_calls.js:15:24
   15|   const y0: C<'b'> = f('a'); // error 'a' ~> 'b'
                              ^^^ [1]

References:
   nested_generic_calls.js:15:15
   15|   const y0: C<'b'> = f('a'); // error 'a' ~> 'b'
                     ^^^ [2]


Error ------------------------------------------------------------------------------------ nested_generic_calls.js:16:25

Cannot assign `g(...)` to `y1` because in type argument `T` [1] > type argument `T` [1]: string [2] is incompatible with
string literal `b` [3]. [incompatible-type]

   nested_generic_calls.js:16:25
   16|   const y1: C<C<'b'>> = g(f('a')); // error 'a' ~> 'b'
                               ^^^^^^^^^

References:
   nested_generic_calls.js:4:19
    4|   declare class C<T> {}
                         ^ [1]
   nested_generic_calls.js:16:29
   16|   const y1: C<C<'b'>> = g(f('a')); // error 'a' ~> 'b'
                                   ^^^ [2]
   nested_generic_calls.js:16:17
   16|   const y1: C<C<'b'>> = g(f('a')); // error 'a' ~> 'b'
                       ^^^ [3]


Error ------------------------------------------------------------------------------------ nested_generic_calls.js:27:47

Cannot call `f` with `42` bound to `literalValue` because number literal `42` [1] is incompatible with number literal
`43` [2]. [incompatible-type]

   nested_generic_calls.js:27:47
   27|   const x3: {f: {f: <V>(V) => {f: 43}}} = g(f(42)); // error
                                                     ^^ [1]

References:
   nested_generic_calls.js:27:35
   27|   const x3: {f: {f: <V>(V) => {f: 43}}} = g(f(42)); // error
                                         ^^ [2]


Error ------------------------------------------------------------------------------------ nested_generic_calls.js:33:58

Cannot call `f` with object literal bound to `literalValue` because in index `f[0]`: number literal `42` [1] is
incompatible with number literal `43` [2]. [incompatible-type]

   nested_generic_calls.js:33:58
   33|   const x6: {f: {f: <V>(V) => {f: {f: [43]}}}} = g(f({f:[42]})); // error
                                                                ^^ [1]

References:
   nested_generic_calls.js:33:40
   33|   const x6: {f: {f: <V>(V) => {f: {f: [43]}}}} = g(f({f:[42]})); // error
                                              ^^ [2]


Error ------------------------------------------------------------------------------------ nested_generic_calls.js:85:37

Cannot assign `object(...)` to `example3` because in type argument `V` [1] > property `format`: string literal `C` [2]
is incompatible with union type [3]. [incompatible-type]

   nested_generic_calls.js:85:37
                                           v---------------------------------
   85|   const example3: Wrapper<Params> = object({ // error 'C' ~> 'A' | 'B'
   86|     format: union(literal('A'), literal('B'), literal('C')),
   87|   });
         -^

References:
   nested_generic_calls.js:67:17
   67|   type Wrapper<+V> = (value: mixed) => $ReadOnly<{value: V}>;
                       ^ [1]
   nested_generic_calls.js:75:28
   75|     [K in keyof Wrappers]: MapWrapper<Wrappers[K]>,
                                  ^^^^^^^^^^^^^^^^^^^^^^^ [2]
   nested_generic_calls.js:81:36
   81|   type Params = $ReadOnly<{format: 'A' | 'B'}>;
                                          ^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- react.js:7:9

Cannot create `MyDiv` element because in property `id`: number [1] is incompatible with string [2]. [incompatible-type]

   react.js:7:9
   7|     id={1} // error on id number ~> string
              ^ [1]

References:
   jsx-intrinsics-mini.js:6:9
   6|   id?: ?string,
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- react.js:9:7

Cannot cast `e` to empty because `Event` [1] is incompatible with empty [2]. [incompatible-type]

   react.js:9:7
   9|       e as empty; // error empty ~> Event
            ^

References:
   jsx-intrinsics-mini.js:7:15
   7|   onClick?: ?(Event) => mixed,
                    ^^^^^ [1]
   react.js:9:12
   9|       e as empty; // error empty ~> Event
                 ^^^^^ [2]



Found 167 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
