Error: apply.js:2
  2:   return this.length; // expect []/"" this
                   ^^^^^^ property `length`. Property not found in
  2:   return this.length; // expect []/"" this
              ^^^^ Number

Error: apply.js:12
 12: test.apply("", [""]); // error: void ~> number
     ^^^^^^^^^^^^^^^^^^^^ call of method `apply`. Called with too few arguments
    1: function test(a: string, b: number): number {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function expects more arguments

Error: apply.js:15
 15: test.apply("", ["", ""]); // error: string ~> number (2nd arg)
                         ^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: apply.js:16
 16: test.apply("", [0, 0]); // error: number ~> string (1st arg)
                     ^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: apply.js:21
 21: f(["", ""]); // error: string ~> number (2nd arg)
            ^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: apply.js:22
 22: f([0, 0]); // error: number ~> string (1st arg)
        ^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: apply.js:25
 25: test.apply("", "not array"); // error: expect array of args
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `apply`
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number. This type is incompatible with
288:     @@iterator(): Iterator<string>;
                                ^^^^^^ string. See lib: <BUILTINS>/core.js:288

Error: apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                              ^^^^ undefined

Error: apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                ^^^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: apply.js:32
 32: (test.call.apply(test, [0, 123, 'foo']): void);
                                     ^^^^^ string. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: apply.js:37
 37: (test.bind.apply(test, [0, 123]): (b: number) => number);
                                ^^^ number. This type is incompatible with the expected param type of
  1: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: apply.js:47
 47:   x.apply(x, ['foo', 123]); // error, number !~> string
                          ^^^ number. This type is incompatible with the expected param type of
 45: function test3(x: { (a: string, b: string): void }) {
                                        ^^^^^^ string

Error: bind.js:7
  7:     y(123); // error, number !~> string
           ^^^ number. This type is incompatible with the expected param type of
  4:   function(x: (a: string, b: string) => void) {
                                  ^^^^^^ string

Error: bind.js:14
 14:     y(123); // error, number !~> string
           ^^^ number. This type is incompatible with the expected param type of
 11:   function(x: { (a: string, b: string): void }) {
                                    ^^^^^^ string

Error: bind.js:19
 19:     x.bind(x, 'foo'); // error
           ^^^^ property `bind`. Property not found in
 19:     x.bind(x, 'foo'); // error
         ^ object type

Error: bind.js:25
 25:     (x.bind(123): void); // error, number !~> string
                 ^^^ number. This type is incompatible with the expected param type of
 23:   function(x: {(a: string, b: string): void, bind(a: string): void}) {
                                                          ^^^^^^ string

Error: call.js:4
  4:   return this.length; // expect []/"" this
                   ^^^^^^ property `length`. Property not found in
  4:   return this.length; // expect []/"" this
              ^^^^ Number

Error: call.js:14
 14: test.call("", ""); // error: void ~> number
     ^^^^^^^^^^^^^^^^^ call of method `call`. Called with too few arguments
    3: function test(a: string, b: number): number {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function expects more arguments

Error: call.js:17
 17: test.call("", "", ""); // error: string ~> number (2nd arg)
                       ^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: call.js:18
 18: test.call("", 0, 0); // error: number ~> string (1st arg)
                   ^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: call.js:21
 21: function f(args) { test.call("", args[0], args[1]) }
                                      ^^^^^^^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: call.js:21
 21: function f(args) { test.call("", args[0], args[1]) }
                                               ^^^^^^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: call.js:30
 30: (test.apply.call(test, 0, [0, 'foo']): number);
                                ^ number. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                      ^^^^^^ string

Error: call.js:30
 30: (test.apply.call(test, 0, [0, 'foo']): number);
                                   ^^^^^ string. This type is incompatible with the expected param type of
  3: function test(a: string, b: number): number {
                                 ^^^^^^ number

Error: call.js:40
 40:   x.call(x, 'foo', 123); // error, number !~> string
                        ^^^ number. This type is incompatible with the expected param type of
 38: function test3(x: { (a: string, b: string): void }) {
                                        ^^^^^^ string

Error: call.js:47
 47:     f({x: "foo"}); // error, "foo" !~> "bar"
           ^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
 46:     function f(y: { x: "bar" }): void {}
                       ^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     47:     f({x: "foo"}); // error, "foo" !~> "bar"
                   ^^^^^ string. Expected string literal `bar`, got `foo` instead
     46:     function f(y: { x: "bar" }): void {}
                                ^^^^^ string literal `bar`

Error: call.js:53
 53:     f({x: 234}); // error, 234 !~> 123
           ^^^^^^^^ object literal. This type is incompatible with the expected param type of
 52:     function f(y: { x: 123 }): void {}
                       ^^^^^^^^^^ object type
  Property `x` is incompatible:
     53:     f({x: 234}); // error, 234 !~> 123
                   ^^^ number. Expected number literal `123`, got `234` instead
     52:     function f(y: { x: 123 }): void {}
                                ^^^ number literal `123`

Error: call.js:59
 59:     f({x: true}); // error, true !~> false
           ^^^^^^^^^ object literal. This type is incompatible with the expected param type of
 58:     function f(y: { x: false }): void {}
                       ^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     59:     f({x: true}); // error, true !~> false
                   ^^^^ boolean. Expected boolean literal `false`, got `true` instead
     58:     function f(y: { x: false }): void {}
                                ^^^^^ boolean literal `false`

Error: function.js:21
 21:   <MyThing />;
       ^^^^^^^^^^^ identifier `React`. Could not resolve name

Error: function.js:29
 29:   var a: number = x; // Error
                       ^ function type. This type is incompatible with
 29:   var a: number = x; // Error
              ^^^^^^ number

Error: function.js:30
 30:   var b: string = x; // Error
                       ^ function type. This type is incompatible with
 30:   var b: string = x; // Error
              ^^^^^^ string

Error: function.js:31
 31:   var c: Function = y; // Object is not a Function
                         ^ object type. This type is incompatible with
 31:   var c: Function = y; // Object is not a Function
              ^^^^^^^^ function type

Error: function.js:37
 37:     (x.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 37:     (x.length: void); // error, it's a number
                    ^^^^ undefined

Error: function.js:38
 38:     (y.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 38:     (y.length: void); // error, it's a number
                    ^^^^ undefined

Error: function.js:39
 39:     (z.length: void); // error, it's a number
          ^^^^^^^^ number. This type is incompatible with
 39:     (z.length: void); // error, it's a number
                    ^^^^ undefined

Error: function.js:41
 41:     (x.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 41:     (x.name: void); // error, it's a string
                  ^^^^ undefined

Error: function.js:42
 42:     (y.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 42:     (y.name: void); // error, it's a string
                  ^^^^ undefined

Error: function.js:43
 43:     (z.name: void); // error, it's a string
          ^^^^^^ string. This type is incompatible with
 43:     (z.name: void); // error, it's a string
                  ^^^^ undefined

Error: function.js:48
 48:     x.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
 48:     x.length = 'foo'; // error, it's a number
         ^^^^^^^^ number

Error: function.js:49
 49:     y.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
 49:     y.length = 'foo'; // error, it's a number
         ^^^^^^^^ number

Error: function.js:50
 50:     z.length = 'foo'; // error, it's a number
                    ^^^^^ string. This type is incompatible with
 50:     z.length = 'foo'; // error, it's a number
         ^^^^^^^^ number

Error: function.js:52
 52:     x.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
 52:     x.name = 123; // error, it's a string
         ^^^^^^ string

Error: function.js:53
 53:     y.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
 53:     y.name = 123; // error, it's a string
         ^^^^^^ string

Error: function.js:54
 54:     z.name = 123; // error, it's a string
                  ^^^ number. This type is incompatible with
 54:     z.name = 123; // error, it's a string
         ^^^^^^ string

Error: rest.js:36
 36:   return xs.pop(); // Error - no bound on T
              ^^^^^^^^ call of method `pop`. Method cannot be called on
 36:   return xs.pop(); // Error - no bound on T
              ^^ T

Error: rest.js:38
 38: function string_rest_t<T: string>(...xs: T): void {} // Error - rest param can't be a string
                                          ^^^^^ Rest params are always arrays. This type is incompatible with
 38: function string_rest_t<T: string>(...xs: T): void {} // Error - rest param can't be a string
                               ^^^^^^ string

Error: rest.js:53
 53: (empty_rest(): empty); // Error Array ~> empty
      ^^^^^^^^^^^^ rest parameter array of function call. This type is incompatible with
 53: (empty_rest(): empty); // Error Array ~> empty
                    ^^^^^ empty

Error: rest.js:58
 58:   return function(...args) {
              ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected return type of
 57: ): (...args: Args) => number {
        ^^^^^^^^^^^^^^^^^^^^^^^^^ function type
  This parameter is incompatible:
     59:     return args; // Error: Array ~> number
                    ^^^^ rest parameter array of function type. This type is incompatible with
     57: ): (...args: Args) => number {
                               ^^^^^^ number

Error: rest.js:64
 64: requires_first_param(); // Error: missing first arg
     ^^^^^^^^^^^^^^^^^^^^^^ function call. Called with too few arguments
   63: function requires_first_param(x: number, ...rest: Array<number>): void {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function expects more arguments

Error: rest_type.js:15
 15:   f(123); // Error - number ~> array - luckily this errors
       ^^^^^^ function call
 14: function test_unbound_rest(f: <T>(x: T, ...xs: T) => void) {
                                                    ^ type parameter `T` of function call. Expected array instead of
 15:   f(123); // Error - number ~> array - luckily this errors
         ^^^ number

Error: rest_type.js:20
 20:   f('hello'); // Error - string ~> array - luckily this errors
       ^^^^^^^^^^ function call
 18: type string_rest_t = (...xs: string) => void; // Should be error but no way to check yet :(
                                  ^^^^^^ string. Expected array instead of
 18: type string_rest_t = (...xs: string) => void; // Should be error but no way to check yet :(
                                  ^^^^^^ string

Error: rest_type.js:20
 20:   f('hello'); // Error - string ~> array - luckily this errors
       ^^^^^^^^^^ function call
 20:   f('hello'); // Error - string ~> array - luckily this errors
       ^^^^^^^^^^ rest parameter array of function call. This type is incompatible with
 18: type string_rest_t = (...xs: string) => void; // Should be error but no way to check yet :(
                                  ^^^^^^ string

Error: rest_type.js:31
 31: ((f: empty_rest) => (f(): empty)); // Error Array ~> empty
                          ^^^ rest parameter array of function call. This type is incompatible with
 31: ((f: empty_rest) => (f(): empty)); // Error Array ~> empty
                               ^^^^^ empty


Found 53 errors
