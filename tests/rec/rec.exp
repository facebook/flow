Error ---------------------------------------------------------------------------------------------- eval_values.js:3:18

Invalid trivially recursive definition of `$Values`.  [recursive-definition]

   3|   [key: string]: $Values<CyclicWith$Values>,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------- eval_values.js:8:2

Cannot cast object literal to `CyclicWith$Values` because property `comment` is missing in object literal [1] but exists
in `CyclicWith$Values` [2]. [prop-missing]

   eval_values.js:8:2
   8| ({ [s]: val }) as CyclicWith$Values; // error, but should not stackoverflow
       ^^^^^^^^^^^^ [1]

References:
   eval_values.js:8:19
   8| ({ [s]: val }) as CyclicWith$Values; // error, but should not stackoverflow
                        ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- eval_values.js:11:1

Cannot cast `options.foo` to empty because `Value` [1] is incompatible with empty [2]. [incompatible-cast]

   eval_values.js:11:1
   11| options.foo as empty; // error
       ^^^^^^^^^^^

References:
   exported_eval_values.js:2:42
    2| declare export const options: {[string]: Value};
                                                ^^^^^ [1]
   eval_values.js:11:16
   11| options.foo as empty; // error
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------- exported_eval_values.js:4:36

Invalid trivially recursive definition of `$Values`.  [recursive-definition]

                                         v------------------------
   4| export opaque type Value: number = $Values< // error: cyclic
   5|   typeof options,
   6| >;
      ^


Error ------------------------------------------------------------------------------------ exported_eval_values.js:14:22

Invalid trivially recursive definition of `$Values`.  [recursive-definition]

   14| export type Result = $Values<typeof Results>; // error: cyclic
                            ^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- id_alias.js:2:10

Invalid trivially recursive definition of `T`.  [recursive-definition]

   2| type T = T;
               ^


Error ------------------------------------------------------------------------------------------------ issue-598.js:8:10

Cannot return `y` because number [1] is incompatible with string [2] in type argument `A` [3]. [incompatible-return]

   issue-598.js:8:10
   8|   return y;
               ^

References:
   issue-598.js:7:19
   7| function bar(y: F<number>): F<string> {
                        ^^^^^^ [1]
   issue-598.js:7:31
   7| function bar(y: F<number>): F<string> {
                                    ^^^^^^ [2]
   issue-598.js:3:8
   3| type F<A> = {foo<B>(x: A): F<B>};
             ^ [3]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `e` is missing in `B` [1] but
exists in `A` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:9:9
    9|     a: (A) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `e` is missing in `C` [1] but
exists in `A` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:9:9
    9|     a: (A) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `k` is missing in `A` [1] but
exists in `B` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `k` is missing in `C` [1] but
exists in `B` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `v` is missing in `A` [1] but
exists in `B` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because property `v` is missing in `C` [1] but
exists in `B` [2]. [prop-missing]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because string literal `b` [1] is incompatible
with string literal `a` [2] in property `kind`. [incompatible-call]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:4:17
    4| type B = {kind: 'b', k: Type, v: Type};
                       ^^^ [1]
   issue6155.js:3:17
    3| type A = {kind: 'a', e: Type};
                       ^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because string literal `c` [1] is incompatible
with string literal `a` [2] in property `kind`. [incompatible-call]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:5:17
    5| type C = {kind: 'c'};
                       ^^^ [1]
   issue6155.js:3:17
    3| type A = {kind: 'a', e: Type};
                       ^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:39

Cannot call `cases[type.kind]` with `type` bound to the first parameter because string literal `c` [1] is incompatible
with string literal `b` [2] in property `kind`. [incompatible-call]

   issue6155.js:15:39
   15|     return (type) => cases[type.kind](type);
                                             ^^^^

References:
   issue6155.js:5:17
    5| type C = {kind: 'c'};
                       ^^^ [1]
   issue6155.js:4:17
    4| type B = {kind: 'b', k: Type, v: Type};
                       ^^^ [2]


Error ------------------------------------------------------------------------------- recursive_react_component.js:11:30

Cannot use variable `TimeoutFn` [1] because the declaration either comes later or was skipped.
[reference-before-declaration]

   recursive_react_component.js:11:30
   11|   theme?: ElementProp<typeof TimeoutFn, 'theme'>,
                                    ^^^^^^^^^

References:
   recursive_react_component.js:17:7
   17| const TimeoutFn = (props: Props) => {
             ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------- recursive_react_component.js:12:29

Cannot use variable `TimeoutFn` [1] because the declaration either comes later or was skipped.
[reference-before-declaration]

   recursive_react_component.js:12:29
   12|   size?: ElementProp<typeof TimeoutFn, 'size'>,
                                   ^^^^^^^^^

References:
   recursive_react_component.js:17:7
   17| const TimeoutFn = (props: Props) => {
             ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------- recursive_react_component.js:19:11

Cannot resolve name `DoesntMatter`. [cannot-resolve-name]

   19|   return <DoesntMatter
                 ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:6:2

Cannot cast `p.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:6:2
   6| (p.x: string); // error
       ^^^

References:
   test.js:5:10
   5| var p: P<number> = new P;
               ^^^^^^ [1]
   test.js:6:7
   6| (p.x: string); // error
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast `pstar` to number because `P` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:9:2
   9| (pstar: number); // error, but limit potentially unbounded number of errors!
       ^^^^^

References:
   test.js:8:12
   8| var pstar: Pstar<number> = 0; // OK
                 ^^^^^^^^^^^^^ [1]
   test.js:9:9
   9| (pstar: number); // error, but limit potentially unbounded number of errors!
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:13:2

Cannot cast `pstar.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:13:2
   13| (pstar.x: string); // error
        ^^^^^^^

References:
   test.js:5:10
    5| var p: P<number> = new P;
                ^^^^^^ [1]
   test.js:13:11
   13| (pstar.x: string); // error
                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:16:2

Cannot cast `pstar.x` to string because `P` [1] is incompatible with string [2]. [incompatible-cast]

   test.js:16:2
   16| (pstar.x: string); // error
        ^^^^^^^

References:
   test.js:15:19
   15| pstar = (new P: P<P<number>>); // OK
                         ^^^^^^^^^ [1]
   test.js:16:11
   16| (pstar.x: string); // error
                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test2.js:4:12

Cannot cast `new C` to `D` because number [1] is incompatible with string [2] in type argument `X` [3].
[incompatible-cast]

   test2.js:4:12
   4| ((new C: C<number>): D<string>) // error: number ~/~ string
                 ^^^^^^ [1]

References:
   test2.js:4:24
   4| ((new C: C<number>): D<string>) // error: number ~/~ string
                             ^^^^^^ [2]
   test2.js:1:9
   1| class D<X> { }
              ^ [3]


Error --------------------------------------------------------------------------------------------------- test3.js:13:10

Cannot return `x` because a call signature declaring the expected parameter / return type is missing in `Q` [1] but
exists in `P` [2] in the return value. [prop-missing]

   test3.js:13:10
   13|   return x; // terminate despite expanding types, error
                ^

References:
   test3.js:10:19
   10| type P<X> = () => Q<P<X>>;
                         ^^^^^^^ [1]
   test3.js:12:35
   12| function bar(x: P<number>): () => P<number> {
                                         ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test4.js:1:10

Invalid trivially recursive definition of `T`.  [recursive-definition]

   1| type T = T // cycle in type alias should not cause non-termination
               ^


Error ---------------------------------------------------------------------------------------------------- test5.js:8:27

Cannot get `Array.prototype.concat` because property `concat` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   test5.js:8:27
     8|     arr = Array.prototype.concat.apply([], arr);
                                  ^^^^^^ [1]

References:
   <BUILTINS>/core.js:716:5
   716|     concat<S, Item: $ReadOnlyArray<S> | S>(...items: Array<Item>): Array<T | S>;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- this_subst.js:1:53

Cannot extend `InstrumentedContainer` [1] with `container` because `container` [2] is not inheritable.
[incompatible-use]

   this_subst.js:1:53
   1| var container = class InstrumentedContainer extends container {
                                                          ^^^^^^^^^ [2]

References:
   this_subst.js:1:23
   1| var container = class InstrumentedContainer extends container {
                            ^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------- trivially_recursive_with_evalt.js:2:10

Invalid trivially recursive definition of indexed access.  [recursive-definition]

   2| type T = (typeof Ts)[number]; // error: cyclic
               ^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------- trivially_recursive_with_evalt.js:8:14

Invalid trivially recursive definition of object type.  [recursive-definition]

   8| type Props = { ...Props }; // error: cyclic
                   ^^^^^^^^^^^^


Error -------------------------------------------------------------------------- trivially_recursive_with_evalt.js:14:10

Invalid trivially recursive definition of conditional type.  [recursive-definition]

   14| type C = 0 extends number ? C : C; // error: cyclic
                ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------- trivially_recursive_with_union_intersections.js:1:12

Invalid trivially recursive definition of `T1`.  [recursive-definition]

   1| type T1 = ?T1; // error: cyclic
                 ^^


Error ------------------------------------------------------------- trivially_recursive_with_union_intersections.js:2:20

Invalid trivially recursive definition of `T2`.  [recursive-definition]

   2| type T2 = string | T2; // error: cyclic
                         ^^


Error ------------------------------------------------------------- trivially_recursive_with_union_intersections.js:3:11

Invalid trivially recursive definition of `T3`.  [recursive-definition]

   3| type T3 = T3 & string; // error: cyclic
                ^^



Found 34 errors
