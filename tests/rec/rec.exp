Error ----------------------------------------------------------------------------------------------- issue-4070.js:6:17

undefined [1] is incompatible with `$Iterable` [2]. [incompatible-type]

   issue-4070.js:6:17
      6| ys.set('a', [...y]);
                         ^

References:
   <BUILTINS>/core.js:1718:22
   1718|     get(key: K): V | void;
                              ^^^^ [1]
   <BUILTINS>/core.js:1650:11
   1650| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-4070.js:7:17

undefined [1] is incompatible with `$Iterable` [2]. [incompatible-type]

   issue-4070.js:7:17
      7| ys.set('a', [...y]);
                         ^

References:
   <BUILTINS>/core.js:1718:22
   1718|     get(key: K): V | void;
                              ^^^^ [1]
   <BUILTINS>/core.js:1650:11
   1650| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-4070.js:8:17

undefined [1] is incompatible with `$Iterable` [2]. [incompatible-type]

   issue-4070.js:8:17
      8| ys.set('a', [...y]);
                         ^

References:
   <BUILTINS>/core.js:1718:22
   1718|     get(key: K): V | void;
                              ^^^^ [1]
   <BUILTINS>/core.js:1650:11
   1650| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-4070.js:9:17

undefined [1] is incompatible with `$Iterable` [2]. [incompatible-type]

   issue-4070.js:9:17
      9| ys.set('a', [...y]);
                         ^

References:
   <BUILTINS>/core.js:1718:22
   1718|     get(key: K): V | void;
                              ^^^^ [1]
   <BUILTINS>/core.js:1650:11
   1650| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ issue-598.js:7:48

Cannot return `y` because number [1] is incompatible with string [2] in type argument `A` [3]. [incompatible-return]

   issue-598.js:7:48
   7| function bar(y: F<number>): F<string> { return y; }
                                                     ^

References:
   issue-598.js:7:19
   7| function bar(y: F<number>): F<string> { return y; }
                        ^^^^^^ [1]
   issue-598.js:7:31
   7| function bar(y: F<number>): F<string> { return y; }
                                    ^^^^^^ [2]
   issue-598.js:3:8
   3| type F<A> = { foo<B>(x: A): F<B> }
             ^ [3]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `e` is missing in `B` [1] but exists in `A` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:9:9
    9|     a: (A) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `e` is missing in `C` [1] but exists in `A` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:9:9
    9|     a: (A) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `k` is missing in `A` [1] but exists in `B` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `k` is missing in `C` [1] but exists in `B` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `v` is missing in `A` [1] but exists in `B` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:12

Cannot return function because property `v` is missing in `C` [1] but exists in `B` [2] in the first parameter.
[prop-missing]

   issue6155.js:15:12
   15|     return (type) => cases[type.kind](type);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   issue6155.js:14:44
   14| function matcher<R>(cases: TypeCases<R>): (Type) => R {
                                                  ^^^^ [1]
   issue6155.js:10:9
   10|     b: (B) => R,
               ^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:13

Cannot return function because string literal `a` [1] is incompatible with string literal `b` [2] in property `kind` of
the first parameter. [incompatible-return]

   issue6155.js:15:13
   15|     return (type) => cases[type.kind](type);
                   ^^^^

References:
   issue6155.js:3:17
    3| type A = {kind: 'a', e: Type};
                       ^^^ [1]
   issue6155.js:4:17
    4| type B = {kind: 'b', k: Type, v: Type};
                       ^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:13

Cannot return function because string literal `a` [1] is incompatible with string literal `c` [2] in property `kind` of
the first parameter. [incompatible-return]

   issue6155.js:15:13
   15|     return (type) => cases[type.kind](type);
                   ^^^^

References:
   issue6155.js:3:17
    3| type A = {kind: 'a', e: Type};
                       ^^^ [1]
   issue6155.js:5:17
    5| type C = {kind: 'c'};
                       ^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue6155.js:15:13

Cannot return function because string literal `b` [1] is incompatible with string literal `c` [2] in property `kind` of
the first parameter. [incompatible-return]

   issue6155.js:15:13
   15|     return (type) => cases[type.kind](type);
                   ^^^^

References:
   issue6155.js:4:17
    4| type B = {kind: 'b', k: Type, v: Type};
                       ^^^ [1]
   issue6155.js:5:17
    5| type C = {kind: 'c'};
                       ^^^ [2]


Error ------------------------------------------------------------------------------- recursive_react_component.js:21:11

Cannot resolve name `DoesntMatter`. [cannot-resolve-name]

   21|   return <DoesntMatter
                 ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------------ test.js:6:2

Cannot cast `p.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:6:2
   6| (p.x: string); // error
       ^^^

References:
   test.js:5:10
   5| var p: P<number> = new P;
               ^^^^^^ [1]
   test.js:6:7
   6| (p.x: string); // error
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast `pstar` to number because `P` [1] is incompatible with number [2]. [incompatible-cast]

   test.js:9:2
   9| (pstar: number); // error, but limit potentially unbounded number of errors!
       ^^^^^

References:
   test.js:8:12
   8| var pstar: Pstar<number> = 0; // OK
                 ^^^^^^^^^^^^^ [1]
   test.js:9:9
   9| (pstar: number); // error, but limit potentially unbounded number of errors!
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:13:2

Cannot cast `pstar.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:13:2
   13| (pstar.x: string); // error
        ^^^^^^^

References:
   test.js:5:10
    5| var p: P<number> = new P;
                ^^^^^^ [1]
   test.js:13:11
   13| (pstar.x: string); // error
                 ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:16:2

Cannot cast `pstar.x` to string because `P` [1] is incompatible with string [2]. [incompatible-cast]

   test.js:16:2
   16| (pstar.x: string); // error
        ^^^^^^^

References:
   test.js:15:19
   15| pstar = (new P: P<P<number>>); // OK
                         ^^^^^^^^^ [1]
   test.js:16:11
   16| (pstar.x: string); // error
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- test2.js:30:12

Cannot cast `new C` to `D` because number [1] is incompatible with string [2] in type argument `X` [3].
[incompatible-cast]

   test2.js:30:12
   30| ((new C: C<number>): D<string>) // error: number ~/~ string
                  ^^^^^^ [1]

References:
   test2.js:30:24
   30| ((new C: C<number>): D<string>) // error: number ~/~ string
                              ^^^^^^ [2]
   test2.js:27:9
   27| class D<X> { }
               ^ [3]


Error --------------------------------------------------------------------------------------------------- test3.js:13:10

Cannot return `x` because a call signature declaring the expected parameter / return type is missing in `Q` [1] but
exists in `P` [2] in the return value. [prop-missing]

   test3.js:13:10
   13|   return x; // terminate despite expanding types, error
                ^

References:
   test3.js:10:19
   10| type P<X> = () => Q<P<X>>;
                         ^^^^^^^ [1]
   test3.js:12:35
   12| function bar(x: P<number>): () => P<number> {
                                         ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test5.js:8:27

Cannot get `Array.prototype.concat` because property `concat` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   test5.js:8:27
     8|     arr = Array.prototype.concat.apply([], arr);
                                  ^^^^^^ [1]

References:
   <BUILTINS>/core.js:700:5
   700|     concat<S, Item: $ReadOnlyArray<S> | S>(...items: Array<Item>): Array<T | S>;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:13:2

Cannot cast `o` to `O` because number [1] is incompatible with string [2] in property `x`. [incompatible-cast]

   test9.js:13:2
   13| (o: O);
        ^

References:
   test9.js:4:6
    4|   x: number,
            ^^^^^^ [1]
   test9.js:9:6
    9|   x: string;
            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:14:2

Cannot cast `o.y` to `O` because number [1] is incompatible with string [2] in property `x`. [incompatible-cast]

   test9.js:14:2
   14| (o.y: O);
        ^^^

References:
   test9.js:4:6
    4|   x: number,
            ^^^^^^ [1]
   test9.js:9:6
    9|   x: string;
            ^^^^^^ [2]



Found 24 errors
