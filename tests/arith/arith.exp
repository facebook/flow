Error --------------------------------------------------------------------------------------------------- Arith.js:15:10

Cannot add `w` and `x` because number [1] is incompatible with bigint [2].

   Arith.js:15:10
   15|   bignum(w + x); // error
                ^^^^^

References:
   Arith.js:11:11
   11|   var x = 0;
                 ^ [1]
   Arith.js:10:11
   10|   var w = 0n;
                 ^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:16:10

Cannot call `bignum` with `w + y` bound to `x` because string [1] is incompatible with bigint [2].

   Arith.js:16:10
   16|   bignum(w + y); // error
                ^^^^^ [1]

References:
   Arith.js:7:20
    7| function bignum(x: bigint) {}
                          ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:18:7

Cannot call `num` with `x + y` bound to `x` because string [1] is incompatible with number [2].

   Arith.js:18:7
   18|   num(x + y); // error
             ^^^^^ [1]

References:
   Arith.js:3:17
    3| function num(x: number) {}
                       ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:20:7

Cannot call `str` with `x + x` bound to `x` because number [1] is incompatible with string [2].

   Arith.js:20:7
   20|   str(x + x); // error
             ^^^^^ [1]

References:
   Arith.js:5:17
    5| function str(x: string) {}
                       ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:21:7

Cannot add `z` and `y` because object literal [1] is incompatible with string [2].

   Arith.js:21:7
   21|   str(z + y); // error
             ^^^^^

References:
   Arith.js:13:11
   13|   var z = {};
                 ^^ [1]
   Arith.js:12:11
   12|   var y = "...";
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:34:10

Cannot add `x` and `y` because null or undefined [1] is incompatible with bigint [2].

   Arith.js:34:10
   34|   bignum(x + y);
                ^^^^^

References:
   Arith.js:33:25
   33| function bigint_bar0(x: ?bigint, y: bigint) {
                               ^^^^^^^ [1]
   Arith.js:33:37
   33| function bigint_bar0(x: ?bigint, y: bigint) {
                                           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:37:10

Cannot add `x` and `y` because null or undefined [1] is incompatible with bigint [2].

   Arith.js:37:10
   37|   bignum(x + y);
                ^^^^^

References:
   Arith.js:36:36
   36| function bigint_bar1(x: bigint, y: ?bigint) {
                                          ^^^^^^^ [1]
   Arith.js:36:25
   36| function bigint_bar1(x: bigint, y: ?bigint) {
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:50:10

Cannot add `x` and `y` because undefined [1] is incompatible with bigint [2].

   Arith.js:50:10
   50|   bignum(x + y);
                ^^^^^

References:
   Arith.js:49:26
   49| function bigint_bar2(x?: bigint, y: bigint) {
                                ^^^^^^ [1]
   Arith.js:49:37
   49| function bigint_bar2(x?: bigint, y: bigint) {
                                           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:53:10

Cannot add `x` and `y` because undefined [1] is incompatible with bigint [2].

   Arith.js:53:10
   53|   bignum(x + y);
                ^^^^^

References:
   Arith.js:52:37
   52| function bigint_bar3(x: bigint, y?: bigint) {
                                           ^^^^^^ [1]
   Arith.js:52:25
   52| function bigint_bar3(x: bigint, y?: bigint) {
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:66:10

Cannot add `x` and `y` because:
 - null or undefined [1] is incompatible with bigint [2].
 - undefined [1] is incompatible with bigint [2].

   Arith.js:66:10
   66|   bignum(x + y);
                ^^^^^

References:
   Arith.js:65:26
   65| function bigint_bar4(x?: ?bigint, y: bigint) {
                                ^^^^^^^ [1]
   Arith.js:65:38
   65| function bigint_bar4(x?: ?bigint, y: bigint) {
                                            ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:69:10

Cannot add `x` and `y` because:
 - null or undefined [1] is incompatible with bigint [2].
 - undefined [1] is incompatible with bigint [2].

   Arith.js:69:10
   69|   bignum(x + y);
                ^^^^^

References:
   Arith.js:68:37
   68| function bigint_bar5(x: bigint, y?: ?bigint) {
                                           ^^^^^^^ [1]
   Arith.js:68:25
   68| function bigint_bar5(x: bigint, y?: ?bigint) {
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:85:8

Cannot add `null` and `1n` because null [1] is incompatible with bigint [2].

   Arith.js:85:8
   85| bignum(null + 1n); // error
              ^^^^^^^^^

References:
   Arith.js:85:8
   85| bignum(null + 1n); // error
              ^^^^ [1]
   Arith.js:85:15
   85| bignum(null + 1n); // error
                     ^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:86:8

Cannot add `1n` and `null` because null [1] is incompatible with bigint [2].

   Arith.js:86:8
   86| bignum(1n + null); // error
              ^^^^^^^^^

References:
   Arith.js:86:13
   86| bignum(1n + null); // error
                   ^^^^ [1]
   Arith.js:86:8
   86| bignum(1n + null); // error
              ^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:87:8

Cannot add `undefined` and `1n` because undefined [1] is incompatible with bigint [2].

   Arith.js:87:8
   87| bignum(undefined + 1n); // error
              ^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]
   Arith.js:87:20
   87| bignum(undefined + 1n); // error
                          ^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:88:8

Cannot add `1n` and `undefined` because undefined [1] is incompatible with bigint [2].

   Arith.js:88:8
   88| bignum(1n + undefined); // error
              ^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]
   Arith.js:88:8
   88| bignum(1n + undefined); // error
              ^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:90:5

Cannot add `"foo"` and `true` because boolean [1] is incompatible with string [2].

   Arith.js:90:5
   90| str("foo" + true); // error
           ^^^^^^^^^^^^

References:
   Arith.js:90:13
   90| str("foo" + true); // error
                   ^^^^ [1]
   Arith.js:90:5
   90| str("foo" + true); // error
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:91:5

Cannot add `true` and `"foo"` because boolean [1] is incompatible with string [2].

   Arith.js:91:5
   91| str(true + "foo"); // error
           ^^^^^^^^^^^^

References:
   Arith.js:91:5
   91| str(true + "foo"); // error
           ^^^^ [1]
   Arith.js:91:12
   91| str(true + "foo"); // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:92:5

Cannot add `"foo"` and `null` because null [1] is incompatible with string [2].

   Arith.js:92:5
   92| str("foo" + null); // error
           ^^^^^^^^^^^^

References:
   Arith.js:92:13
   92| str("foo" + null); // error
                   ^^^^ [1]
   Arith.js:92:5
   92| str("foo" + null); // error
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:93:5

Cannot add `null` and `"foo"` because null [1] is incompatible with string [2].

   Arith.js:93:5
   93| str(null + "foo"); // error
           ^^^^^^^^^^^^

References:
   Arith.js:93:5
   93| str(null + "foo"); // error
           ^^^^ [1]
   Arith.js:93:12
   93| str(null + "foo"); // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:94:5

Cannot add `"foo"` and `undefined` because undefined [1] is incompatible with string [2].

   Arith.js:94:5
   94| str("foo" + undefined); // error
           ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]
   Arith.js:94:5
   94| str("foo" + undefined); // error
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:95:5

Cannot add `undefined` and `"foo"` because undefined [1] is incompatible with string [2].

   Arith.js:95:5
   95| str(undefined + "foo"); // error
           ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]
   Arith.js:95:17
   95| str(undefined + "foo"); // error
                       ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- Arith.js:99:5

Cannot add `x` and `y` because mixed [1] could either behave like a string or like a number.

   Arith.js:99:5
   99|     x + y; // error
           ^^^^^

References:
   Arith.js:98:15
   98|   function(x: mixed, y: mixed) {
                     ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:100:5

Cannot add `x` and `0` because mixed [1] could either behave like a string or like a number.

   Arith.js:100:5
   100|     x + 0; // error
            ^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:101:5

Cannot add `0` and `x` because mixed [1] could either behave like a string or like a number.

   Arith.js:101:5
   101|     0 + x; // error
            ^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:102:5

Cannot add `x` and `0n` because mixed [1] could either behave like a string or like a number.

   Arith.js:102:5
   102|     x + 0n; // error
            ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:103:5

Cannot add `0n` and `x` because mixed [1] could either behave like a string or like a number.

   Arith.js:103:5
   103|     0n + x; // error
            ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:104:5

Cannot add `x` and empty string because mixed [1] could either behave like a string or like a number.

   Arith.js:104:5
   104|     x + ""; // error
            ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:105:5

Cannot add empty string and `x` because mixed [1] could either behave like a string or like a number.

   Arith.js:105:5
   105|     "" + x; // error
            ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:106:5

Cannot add `x` and object literal because mixed [1] could either behave like a string or like a number.

   Arith.js:106:5
   106|     x + {}; // error
            ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:107:6

Cannot add object literal and `x` because mixed [1] could either behave like a string or like a number.

   Arith.js:107:6
   107|     ({} + x); // error
             ^^^^^^

References:
   Arith.js:98:15
    98|   function(x: mixed, y: mixed) {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:114:6

Cannot add `1` and object literal because object literal [1] is incompatible with number [2].

   Arith.js:114:6
   114|     (1 + {}: number); // error: object !~> number
             ^^^^^^

References:
   Arith.js:114:10
   114|     (1 + {}: number); // error: object !~> number
                 ^^ [1]
   Arith.js:114:6
   114|     (1 + {}: number); // error: object !~> number
             ^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:115:6

Cannot add object literal and `1` because object literal [1] is incompatible with number [2].

   Arith.js:115:6
   115|     ({} + 1: number); // error: object !~> number
             ^^^^^^

References:
   Arith.js:115:6
   115|     ({} + 1: number); // error: object !~> number
             ^^ [1]
   Arith.js:115:11
   115|     ({} + 1: number); // error: object !~> number
                  ^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:116:6

Cannot add `1n` and object literal because object literal [1] is incompatible with bigint [2].

   Arith.js:116:6
   116|     (1n + {}: bigint); // error: object !~> bigint
             ^^^^^^^

References:
   Arith.js:116:11
   116|     (1n + {}: bigint); // error: object !~> bigint
                  ^^ [1]
   Arith.js:116:6
   116|     (1n + {}: bigint); // error: object !~> bigint
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:117:6

Cannot add object literal and `1n` because object literal [1] is incompatible with bigint [2].

   Arith.js:117:6
   117|     ({} + 1n: bigint); // error: object !~> bigint
             ^^^^^^^

References:
   Arith.js:117:6
   117|     ({} + 1n: bigint); // error: object !~> bigint
             ^^ [1]
   Arith.js:117:11
   117|     ({} + 1n: bigint); // error: object !~> bigint
                  ^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:118:6

Cannot add `"1"` and object literal because object literal [1] is incompatible with string [2].

   Arith.js:118:6
   118|     ("1" + {}: string); // error: object !~> string
             ^^^^^^^^

References:
   Arith.js:118:12
   118|     ("1" + {}: string); // error: object !~> string
                   ^^ [1]
   Arith.js:118:6
   118|     ("1" + {}: string); // error: object !~> string
             ^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:119:6

Cannot add object literal and `"1"` because object literal [1] is incompatible with string [2].

   Arith.js:119:6
   119|     ({} + "1": string); // error: object !~> string
             ^^^^^^^^

References:
   Arith.js:119:6
   119|     ({} + "1": string); // error: object !~> string
             ^^ [1]
   Arith.js:119:11
   119|     ({} + "1": string); // error: object !~> string
                  ^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:126:6

Cannot cast `x + z` to empty because string [1] is incompatible with empty [2].

   Arith.js:126:6
   126|     (x + z: empty); // error, string ~> empty
             ^^^^^ [1]

References:
   Arith.js:126:13
   126|     (x + z: empty); // error, string ~> empty
                    ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:127:6

Cannot cast `z + x` to empty because string [1] is incompatible with empty [2].

   Arith.js:127:6
   127|     (z + x: empty); // error, string ~> empty
             ^^^^^ [1]

References:
   Arith.js:127:13
   127|     (z + x: empty); // error, string ~> empty
                    ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- Arith.js:131:5

Cannot get `(x + y).length` because property `length` is missing in `Number` [1].

   Arith.js:131:5
   131|     (x + y).length; // error
            ^^^^^^^^^^^^^^

References:
   Arith.js:131:6
   131|     (x + y).length; // error
             ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- Arith.js:132:5

Cannot get `(1 + 2).length` because property `length` is missing in `Number` [1].

   Arith.js:132:5
   132|     (1 + 2).length; // error
            ^^^^^^^^^^^^^^

References:
   Arith.js:132:6
   132|     (1 + 2).length; // error
             ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- bitwise.js:8:4

bigint [1] is incompatible with number [2].

   bitwise.js:8:4
   8|   +1n,
         ^^ [1]

References:
   bitwise.js:8:3
   8|   +1n,
        ^^^ [2]


Error -------------------------------------------------------------------------------------------------- bitwise.js:24:3

BigInts have no unsigned right shift, use >> instead.

   24|   50n >>> 30n, // error
         ^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- bitwise.js:25:3

BigInts have no unsigned right shift, use >> instead.

   25|   z >>> z,
         ^^^^^^^


Error -------------------------------------------------------------------------------------------------- bitwise.js:41:3

BigInts have no unsigned right shift, use >> instead.

   41|   x >>>= 30n,
         ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- bitwise.js:42:3

BigInts have no unsigned right shift, use >> instead.

   42|   x >>>= z,
         ^^^^^^^^


Error -------------------------------------------------------------------------------------------------- bitwise.js:50:4

string [1] is incompatible with number [2].

   bitwise.js:50:4
   50|   ~'', // error
          ^^ [1]

References:
   bitwise.js:50:3
   50|   ~'', // error
         ^^^ [2]


Error -------------------------------------------------------------------------------------------------- bitwise.js:73:1

Cannot perform arithmetic operation because number [1] is not a bigint.

   bitwise.js:73:1
   73| y >>= 2n;
       ^

References:
   bitwise.js:72:1
   72| y >>>= 30;
       ^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- bitwise.js:73:7

Cannot assign `2n` to `y` because bigint [1] is incompatible with number [2].

   bitwise.js:73:7
   73| y >>= 2n;
             ^^

References:
   bitwise.js:73:1
   73| y >>= 2n;
       ^^^^^^^^ [1]
   bitwise.js:65:8
   65| let y: number = 2;
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- exponent.js:5:1

Cannot perform arithmetic operation because number [1] is not a bigint.

   exponent.js:5:1
   5| x **= 4n; // error
      ^

References:
   exponent.js:4:1
   4| x **= 4;
      ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- exponent.js:5:7

Cannot assign `4n` to `x` because bigint [1] is incompatible with number [2].

   exponent.js:5:7
   5| x **= 4n; // error
            ^^

References:
   exponent.js:5:1
   5| x **= 4n; // error
      ^^^^^^^^ [1]
   exponent.js:3:8
   3| let x: number = 2 ** 3;
             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- exponent.js:8:1

Cannot perform arithmetic operation because string [1] is not a number.

   exponent.js:8:1
   8| y **= 2; // error
      ^

References:
   exponent.js:7:8
   7| let y: string = "123";
             ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- exponent.js:8:7

Cannot assign `2` to `y` because number [1] is incompatible with string [2].

   exponent.js:8:7
   8| y **= 2; // error
            ^

References:
   exponent.js:8:1
   8| y **= 2; // error
      ^^^^^^^ [1]
   exponent.js:7:8
   7| let y: string = "123";
             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- exponent.js:9:1

Cannot perform arithmetic operation because number [1] is not a bigint.

   exponent.js:9:1
   9| y **= 2n; // error
      ^

References:
   exponent.js:8:1
   8| y **= 2; // error
      ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- exponent.js:9:7

Cannot assign `2n` to `y` because bigint [1] is incompatible with string [2].

   exponent.js:9:7
   9| y **= 2n; // error
            ^^

References:
   exponent.js:9:1
   9| y **= 2n; // error
      ^^^^^^^^ [1]
   exponent.js:7:8
   7| let y: string = "123";
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exponent.js:13:7

Cannot perform arithmetic operation because number [1] is not a bigint.

   13| z **= 4; // error
             ^ [1]


Error -------------------------------------------------------------------------------------------------- generic.js:3:33

Cannot add `a` and `a` because `A` [1] could either behave like a string or like a number.

   generic.js:3:33
   3| function f<A>(a: A): A { return a + a; } // error
                                      ^^^^^

References:
   generic.js:3:18
   3| function f<A>(a: A): A { return a + a; } // error
                       ^ [1]


Error -------------------------------------------------------------------------------------------------- generic.js:4:40

Cannot add `a` and `b` because:
 - `A` [1] could either behave like a string or like a number.
 - `B` [2] could either behave like a string or like a number.

   generic.js:4:40
   4| function f<A,B>(a: A, b: B): A {return a + b; } // error
                                             ^^^^^

References:
   generic.js:4:20
   4| function f<A,B>(a: A, b: B): A {return a + b; } // error
                         ^ [1]
   generic.js:4:26
   4| function f<A,B>(a: A, b: B): A {return a + b; } // error
                               ^ [2]


Error -------------------------------------------------------------------------------------------------- generic.js:5:40

Cannot add `b` and `a` because:
 - `B` [1] could either behave like a string or like a number.
 - `A` [2] could either behave like a string or like a number.

   generic.js:5:40
   5| function f<A,B>(a: A, b: B): A {return b + a; } // error
                                             ^^^^^

References:
   generic.js:5:26
   5| function f<A,B>(a: A, b: B): A {return b + a; } // error
                               ^ [1]
   generic.js:5:20
   5| function f<A,B>(a: A, b: B): A {return b + a; } // error
                         ^ [2]


Error -------------------------------------------------------------------------------------------------- generic.js:6:40

Cannot add `a` and `b` because:
 - `A` [1] could either behave like a string or like a number.
 - `B` [2] could either behave like a string or like a number.

   generic.js:6:40
   6| function f<A,B>(a: A, b: B): B {return a + b; } // error
                                             ^^^^^

References:
   generic.js:6:20
   6| function f<A,B>(a: A, b: B): B {return a + b; } // error
                         ^ [1]
   generic.js:6:26
   6| function f<A,B>(a: A, b: B): B {return a + b; } // error
                               ^ [2]


Error -------------------------------------------------------------------------------------------------- generic.js:7:40

Cannot add `b` and `a` because:
 - `B` [1] could either behave like a string or like a number.
 - `A` [2] could either behave like a string or like a number.

   generic.js:7:40
   7| function f<A,B>(a: A, b: B): B {return b + a; } // error
                                             ^^^^^

References:
   generic.js:7:26
   7| function f<A,B>(a: A, b: B): B {return b + a; } // error
                               ^ [1]
   generic.js:7:20
   7| function f<A,B>(a: A, b: B): B {return b + a; } // error
                         ^ [2]


Error ------------------------------------------------------------------------------------------------------ mult.js:7:5

Cannot perform arithmetic operation because null [1] is not a number.

   7| num(null * 1);
          ^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ mult.js:8:9

Cannot perform arithmetic operation because null [1] is not a number.

   8| num(1 * null);
              ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- mult.js:10:8

Cannot perform arithmetic operation because null [1] is not a bigint.

   10| bignum(null * 1n);
              ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- mult.js:11:13

Cannot perform arithmetic operation because null [1] is not a bigint.

   11| bignum(1n * null);
                   ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- mult.js:15:1

Cannot perform arithmetic operation because number [1] is not a bigint.

   mult.js:15:1
   15| x *= 4n; // error
       ^

References:
   mult.js:14:1
   14| x *= 4;
       ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- mult.js:15:6

Cannot assign `4n` to `x` because bigint [1] is incompatible with number [2].

   mult.js:15:6
   15| x *= 4n; // error
            ^^

References:
   mult.js:15:1
   15| x *= 4n; // error
       ^^^^^^^ [1]
   mult.js:13:8
   13| let x: number = 2 * 3;
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- mult.js:18:1

Cannot perform arithmetic operation because string [1] is not a number.

   mult.js:18:1
   18| y *= 2; // error
       ^

References:
   mult.js:17:8
   17| let y: string = "123";
              ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- mult.js:18:6

Cannot assign `2` to `y` because number [1] is incompatible with string [2].

   mult.js:18:6
   18| y *= 2; // error
            ^

References:
   mult.js:18:1
   18| y *= 2; // error
       ^^^^^^ [1]
   mult.js:17:8
   17| let y: string = "123";
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- mult.js:19:1

Cannot perform arithmetic operation because number [1] is not a bigint.

   mult.js:19:1
   19| y *= 2n; // error
       ^

References:
   mult.js:18:1
   18| y *= 2; // error
       ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- mult.js:19:6

Cannot assign `2n` to `y` because bigint [1] is incompatible with string [2].

   mult.js:19:6
   19| y *= 2n; // error
            ^^

References:
   mult.js:19:1
   19| y *= 2n; // error
       ^^^^^^^ [1]
   mult.js:17:8
   17| let y: string = "123";
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- mult.js:23:6

Cannot perform arithmetic operation because number [1] is not a bigint.

   23| z *= 4; // error
            ^ [1]


Error ------------------------------------------------------------------------------------------------ relational.js:6:2

Cannot compare number [1] to string [2].

   relational.js:6:2
   6| (1 < "foo"); // error
       ^ [1]

References:
   relational.js:6:6
   6| (1 < "foo"); // error
           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ relational.js:7:2

Cannot compare string [1] to number [2].

   relational.js:7:2
   7| ("foo" < 1); // error
       ^^^^^ [1]

References:
   relational.js:7:10
   7| ("foo" < 1); // error
               ^ [2]


Error ------------------------------------------------------------------------------------------------ relational.js:9:2

Cannot compare number [1] to object literal [2].

   relational.js:9:2
   9| (1 < {foo: 1}); // error
       ^ [1]

References:
   relational.js:9:6
   9| (1 < {foo: 1}); // error
           ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:10:2

Cannot compare object literal [1] to number [2].

   relational.js:10:2
   10| ({foo: 1} < 1); // error
        ^^^^^^^^ [1]

References:
   relational.js:10:13
   10| ({foo: 1} < 1); // error
                   ^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:11:2

Cannot compare object literal [1] to object literal [2].

   relational.js:11:2
   11| ({foo: 1} < {foo: 1}); // error
        ^^^^^^^^ [1]

References:
   relational.js:11:13
   11| ({foo: 1} < {foo: 1}); // error
                   ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:12:2

Cannot compare string [1] to object literal [2].

   relational.js:12:2
   12| ("foo" < {foo: 1}); // error
        ^^^^^ [1]

References:
   relational.js:12:10
   12| ("foo" < {foo: 1}); // error
                ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:13:2

Cannot compare object literal [1] to string [2].

   relational.js:13:2
   13| ({foo: 1} < "foo"); // error
        ^^^^^^^^ [1]

References:
   relational.js:13:13
   13| ({foo: 1} < "foo"); // error
                   ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:16:2

Cannot compare number [1] to null or undefined [2].

   relational.js:16:2
   16| (1 < x); // 2 errors: null !~> number; undefined !~> number
        ^ [1]

References:
   relational.js:15:17
   15| var x = (null : ?number);
                       ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:17:2

Cannot compare null or undefined [1] to number [2].

   relational.js:17:2
   17| (x < 1); // 2 errors: null !~> number; undefined !~> number
        ^

References:
   relational.js:15:17
   15| var x = (null : ?number);
                       ^^^^^^^ [1]
   relational.js:17:6
   17| (x < 1); // 2 errors: null !~> number; undefined !~> number
            ^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:19:2

Cannot compare null [1] to null [2].

   relational.js:19:2
   19| (null < null); // error
        ^^^^ [1]

References:
   relational.js:19:9
   19| (null < null); // error
               ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:20:2

Cannot compare undefined [1] to null [2].

   relational.js:20:2
   20| (undefined < null); // error
        ^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]
   relational.js:20:14
   20| (undefined < null); // error
                    ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:21:2

Cannot compare null [1] to undefined [2].

   relational.js:21:2
   21| (null < undefined); // error
        ^^^^ [1]

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- relational.js:22:2

Cannot compare undefined [1] to undefined [1].

   relational.js:22:2
   22| (undefined < undefined); // error
        ^^^^^^^^^

References:
   <BUILTINS>/core.js:13:24
   13| declare var undefined: void;
                              ^^^^ [1]



Found 90 errors
