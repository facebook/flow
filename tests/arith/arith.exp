Arith.js:13
 13:   num(x+y); // error
           ^^^ string. This type is incompatible with the expected param type of
  4: function num(x:number) { }
                    ^^^^^^ number

Arith.js:15
 15:   str(x+x); // error
           ^^^ number. This type is incompatible with the expected param type of
  6: function str(x:string) { }
                    ^^^^^^ string

Arith.js:16
 16:   str(z+y); // error
           ^ object literal. This type cannot be added to
 16:   str(z+y); // error
             ^ string

Arith.js:56
 56: str("foo" + true); // error
                 ^^^^ boolean. This type cannot be added to
 56: str("foo" + true); // error
         ^^^^^ string

Arith.js:57
 57: str(true + "foo"); // error
         ^^^^ boolean. This type cannot be added to
 57: str(true + "foo"); // error
                ^^^^^ string

Arith.js:58
 58: str("foo" + null); // error
                 ^^^^ null. This type cannot be added to
 58: str("foo" + null); // error
         ^^^^^ string

Arith.js:59
 59: str(null + "foo"); // error
         ^^^^ null. This type cannot be added to
 59: str(null + "foo"); // error
                ^^^^^ string

Arith.js:60
 60: str("foo" + undefined); // error
                 ^^^^^^^^^ undefined. This type cannot be added to
 60: str("foo" + undefined); // error
         ^^^^^ string

Arith.js:61
 61: str(undefined + "foo"); // error
         ^^^^^^^^^ undefined. This type cannot be added to
 61: str(undefined + "foo"); // error
                     ^^^^^ string

Arith.js:65
 65:     (x + y); // error
          ^ mixed. This type cannot be added to
 65:     (x + y); // error
              ^ mixed

Arith.js:66
 66:     (x + 0); // error
          ^ mixed. This type cannot be added to
 66:     (x + 0); // error
              ^ number

Arith.js:67
 67:     (0 + x); // error
              ^ mixed. This type cannot be added to
 67:     (0 + x); // error
          ^ number

Arith.js:68
 68:     (x + ""); // error
          ^ mixed. This type cannot be added to
 68:     (x + ""); // error
              ^^ string

Arith.js:69
 69:     ("" + x); // error
               ^ mixed. This type cannot be added to
 69:     ("" + x); // error
          ^^ string

Arith.js:70
 70:     (x + {}); // error
          ^ mixed. This type cannot be added to
 70:     (x + {}); // error
              ^^ object literal

Arith.js:71
 71:     ({} + x); // error
               ^ mixed. This type cannot be added to
 71:     ({} + x); // error
          ^^ object literal

Arith.js:78
 78:     ((1 + {}): number); // error: object !~> number
               ^^ object literal. This type cannot be added to
 78:     ((1 + {}): number); // error: object !~> number
           ^ number

Arith.js:79
 79:     (({} + 1): number); // error: object !~> number
           ^^ object literal. This type cannot be added to
 79:     (({} + 1): number); // error: object !~> number
                ^ number

Arith.js:80
 80:     (("1" + {}): string); // error: object !~> string
                 ^^ object literal. This type cannot be added to
 80:     (("1" + {}): string); // error: object !~> string
           ^^^ string

Arith.js:81
 81:     (({} + "1"): string); // error: object !~> string
           ^^ object literal. This type cannot be added to
 81:     (({} + "1"): string); // error: object !~> string
                ^^^ string

Arith.js:88
 88:     (x + z: empty); // error, string ~> empty
          ^^^^^ string. This type is incompatible with
 88:     (x + z: empty); // error, string ~> empty
                 ^^^^^ empty

Arith.js:89
 89:     (z + x: empty); // error, string ~> empty
          ^^^^^ string. This type is incompatible with
 89:     (z + x: empty); // error, string ~> empty
                 ^^^^^ empty

exponent.js:7
  7: y **= 2; // error
     ^ string. The operand of an arithmetic operation must be a number.

exponent.js:7
  7: y **= 2; // error
     ^^^^^^^ number. This type is incompatible with
  6: let y: string = "123";
            ^^^^^^ string

generic.js:3
  3: function f<A>(a: A): A { return a + a; } // error
                                     ^ A. This type cannot be added to
  3: function f<A>(a: A): A { return a + a; } // error
                                         ^ A

generic.js:4
  4: function f<A,B>(a: A, b: B): A {return a + b; } // error
                                            ^ A. This type cannot be added to
  4: function f<A,B>(a: A, b: B): A {return a + b; } // error
                                                ^ B

generic.js:5
  5: function f<A,B>(a: A, b: B): A {return b + a; } // error
                                            ^ B. This type cannot be added to
  5: function f<A,B>(a: A, b: B): A {return b + a; } // error
                                                ^ A

generic.js:6
  6: function f<A,B>(a: A, b: B): B {return a + b; } // error
                                            ^ A. This type cannot be added to
  6: function f<A,B>(a: A, b: B): B {return a + b; } // error
                                                ^ B

generic.js:7
  7: function f<A,B>(a: A, b: B): B {return b + a; } // error
                                            ^ B. This type cannot be added to
  7: function f<A,B>(a: A, b: B): B {return b + a; } // error
                                                ^ A

mult.js:5
  5: num(null * 1);
         ^^^^ null. The operand of an arithmetic operation must be a number.

mult.js:6
  6: num(1 * null);
             ^^^^ null. The operand of an arithmetic operation must be a number.

mult.js:12
 12: y *= 2; // error
     ^ string. The operand of an arithmetic operation must be a number.

mult.js:12
 12: y *= 2; // error
     ^^^^^^ number. This type is incompatible with
 11: let y: string = "123";
            ^^^^^^ string

relational.js:4
  4: (1 < "foo"); // error
      ^ number. This type cannot be compared to
  4: (1 < "foo"); // error
          ^^^^^ string

relational.js:5
  5: ("foo" < 1); // error
      ^^^^^ string. This type cannot be compared to
  5: ("foo" < 1); // error
              ^ number

relational.js:7
  7: (1 < {foo: 1}); // error
      ^ number. This type cannot be compared to
  7: (1 < {foo: 1}); // error
          ^^^^^^^^ object literal

relational.js:8
  8: ({foo: 1} < 1); // error
      ^^^^^^^^ object literal. This type cannot be compared to
  8: ({foo: 1} < 1); // error
                 ^ number

relational.js:9
  9: ({foo: 1} < {foo: 1}); // error
      ^^^^^^^^ object literal. This type cannot be compared to
  9: ({foo: 1} < {foo: 1}); // error
                 ^^^^^^^^ object literal

relational.js:10
 10: ("foo" < {foo: 1}); // error
      ^^^^^ string. This type cannot be compared to
 10: ("foo" < {foo: 1}); // error
              ^^^^^^^^ object literal

relational.js:11
 11: ({foo: 1} < "foo"); // error
      ^^^^^^^^ object literal. This type cannot be compared to
 11: ({foo: 1} < "foo"); // error
                 ^^^^^ string

relational.js:14
 14: (1 < x); // 2 errors: null !~> number; undefined !~> number
          ^ null. This type cannot be compared to
 14: (1 < x); // 2 errors: null !~> number; undefined !~> number
      ^ number

relational.js:14
 14: (1 < x); // 2 errors: null !~> number; undefined !~> number
          ^ undefined. This type cannot be compared to
 14: (1 < x); // 2 errors: null !~> number; undefined !~> number
      ^ number

relational.js:15
 15: (x < 1); // 2 errors: null !~> number; undefined !~> number
      ^ null. This type cannot be compared to
 15: (x < 1); // 2 errors: null !~> number; undefined !~> number
          ^ number

relational.js:15
 15: (x < 1); // 2 errors: null !~> number; undefined !~> number
      ^ undefined. This type cannot be compared to
 15: (x < 1); // 2 errors: null !~> number; undefined !~> number
          ^ number

relational.js:17
 17: (null < null); // error
      ^^^^ null. This type cannot be compared to
 17: (null < null); // error
             ^^^^ null

relational.js:18
 18: (undefined < null); // error
      ^^^^^^^^^ undefined. This type cannot be compared to
 18: (undefined < null); // error
                  ^^^^ null

relational.js:19
 19: (null < undefined); // error
             ^^^^^^^^^ undefined. This type cannot be compared to
 19: (null < undefined); // error
      ^^^^ null

relational.js:20
 20: (undefined < undefined); // error
                  ^^^^^^^^^ undefined. This type cannot be compared to
 20: (undefined < undefined); // error
      ^^^^^^^^^ undefined


Found 48 errors
