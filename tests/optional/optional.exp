Error: generic.js:1
  1: function x<T>(x: T = 0) {}
                          ^ number. This type is incompatible with
  1: function x<T>(x: T = 0) {}
     ^^^^^^^^^^^^^^^^^^^^^^^ some incompatible instantiation of `T`

Error: generic.js:4
  4:   x<T>(x: T = 0) {}
                   ^ number. This type is incompatible with
  4:   x<T>(x: T = 0) {}
       ^^^^^^^^^^^^^^^^^ some incompatible instantiation of `T`

Error: loop.js:5
  5: function f<T:*>(x:T,y?:T) { x = y }
                                     ^ undefined. This type is incompatible with
  5: function f<T:*>(x:T,y?:T) { x = y }
     ^^^^^^^^^^^^^^^^^^^^^^^^^ some incompatible instantiation of `T`

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ null. The operand of an arithmetic operation must be a number.

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ null. The operand of an arithmetic operation must be a number.

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ null. The operand of an arithmetic operation must be a number.

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ null. The operand of an arithmetic operation must be a number.

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: optional.js:1
  1: function bar(x?,y?) { x * 0; }
                           ^ undefined. The operand of an arithmetic operation must be a number.

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                  ^ parameter `x`. Missing annotation

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                               ^ rest parameter `y`. Missing annotation

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                               ^ string. This type is incompatible with the expected param type of
  4: var foo:(x?:number)=>void = bar;
                 ^^^^^^ number

Error: optional.js:9
  9: qux(0,0); // Error, number ~> string
     ^^^^^^^^ function call
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                                          ^^^^ number. This type is incompatible with the expected return type of
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                  ^^^^^^ string

Error: optional.js:10
 10: qux(0,...[42, ""]); // Error, number ~> string
     ^^^^^^^^^^^^^^^^^^ function call
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                                          ^^^^ number. This type is incompatible with the expected return type of
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                  ^^^^^^ string

Error: optional_param2.js:7
  7: var j:I<number> = i.map(id => id);
                       ^^^^^^^^^^^^^^^ type application of class `I`. Has some incompatible type argument with
  7: var j:I<number> = i.map(id => id);
           ^^^^^^^^^ type application of polymorphic type: class type: I
  Type argument `V` is incompatible:
      7: var j:I<number> = i.map(id => id);
                                       ^^ undefined. This type is incompatible with
      7: var j:I<number> = i.map(id => id);
                 ^^^^^^ number

Error: optional_param4.js:12
 12: foo(true); // ERROR boolean ~> number
         ^^^^ boolean. This type is incompatible with the expected param type of
  3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                      ^^^^^^ number

Error: optional_param4.js:13
 13: foo(123, true); // ERROR boolean ~> string
     ^^^^^^^^^^^^^^ rest parameter array of function call. Has some incompatible type argument with
  3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                                    ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     13: foo(123, true); // ERROR boolean ~> string
                  ^^^^ boolean. This type is incompatible with
      3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                                              ^^^^^^ string

Error: undefined.js:8
  8:     return x.duck;
                  ^^^^ property `duck`. Property cannot be accessed on possibly undefined value
  8:     return x.duck;
                ^ undefined

Error: undefined2.js:8
  8:     return x.duck;
                  ^^^^ property `duck`. Property cannot be accessed on possibly undefined value
  8:     return x.duck;
                ^ undefined


Found 22 errors
