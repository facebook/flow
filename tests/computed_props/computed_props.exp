Error: test.js:19
 19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `ff0000` instead
 19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
                                    ^^^^^^^^ string literal `ffffff`

Error: test.js:21
 21: ColorIdToNumber.XXX; // oops
                     ^^^ property `XXX`. Property not found in
 21: ColorIdToNumber.XXX; // oops
     ^^^^^^^^^^^^^^^ object literal

Error: test2.js:8
  8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `00ff00` instead
  8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
                                      ^^^^^^^^ string literal `ffffff`

Error: test3.js:4
  4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `0000ff` instead
  4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
                                     ^^^^^^^^ string literal `ffffff`

Error: test6.js:2
  2: (o.hello: 'nothing'); // oops
      ^^^^^^^ string. Expected string literal `nothing`, got `world` instead
  2: (o.hello: 'nothing'); // oops
               ^^^^^^^^^ string literal `nothing`

Error: test7.js:2
  2: var x: string = obj['m'](); // error, number ~> string
                     ^^^^^^^^^^ number. This type is incompatible with
  2: var x: string = obj['m'](); // error, number ~> string
            ^^^^^^ string

Error: test7.js:5
  5: var y: string = arr[0](); // error: number ~> string
                     ^^^^^^^^ number. This type is incompatible with
  5: var y: string = arr[0](); // error: number ~> string
            ^^^^^^ string


Found 7 errors
