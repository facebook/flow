instance.js:8
  8:   [index: number]: () => string;
                              ^^^^^^ string. This type is incompatible with
 35: (sub[num]: () => bool);
                      ^^^^ boolean

instance.js:26
 26: (sub['x']: string); // string ~> number
      ^^^^^^^^ number. This type is incompatible with
 26: (sub['x']: string); // string ~> number
                ^^^^^^ string

instance.js:29
 29: (sub['meth'](): string); // string ~> number
      ^^^^^^^^^^^^^ number. This type is incompatible with
 29: (sub['meth'](): string); // string ~> number
                     ^^^^^^ string

instance.js:36
 36: (sub[num](): bool); // string ~> bool
      ^^^^^^^^^^ string. This type is incompatible with
 36: (sub[num](): bool); // string ~> bool
                  ^^^^ boolean

instance.js:39
 39: (sub.a: () => string); // key: string ~> number
      ^^^^^ property `a` is a string. This type is incompatible with
  8:   [index: number]: () => string;
               ^^^^^^ number

instance.js:40
 40: (sub['a']: () => string); // key: string ~> number
      ^^^^^^^^ property `a` is a string. This type is incompatible with
  8:   [index: number]: () => string;
               ^^^^^^ number

instance.js:41
 41: (sub[true](): () => bool); // key: bool ~> number, value: bool ~> string
      ^^^^^^^^^^^ string. This type is incompatible with
 41: (sub[true](): () => bool); // key: bool ~> number, value: bool ~> string
                   ^^^^^^^^^^ function type

instance.js:41
 41: (sub[true](): () => bool); // key: bool ~> number, value: bool ~> string
          ^^^^ boolean. This type is incompatible with
  8:   [index: number]: () => string;
               ^^^^^^ number

instance.js:46
 46: (map[num](): bool); // bool ~> string
      ^^^^^^^^^^ string. This type is incompatible with
 46: (map[num](): bool); // bool ~> string
                  ^^^^ boolean

instance.js:50
 50: map[0] = () => 1; // number ~> string
                    ^ number. This type is incompatible with
  8:   [index: number]: () => string;
                              ^^^^^^ string

test.js:19
 19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `ff0000` instead
 19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
                                    ^^^^^^^^ string literal `ffffff`

test.js:21
 21: ColorIdToNumber.XXX; // oops
                     ^^^ property `XXX`. Property not found in
 21: ColorIdToNumber.XXX; // oops
     ^^^^^^^^^^^^^^^ object literal

test2.js:8
  8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `00ff00` instead
  8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
                                      ^^^^^^^^ string literal `ffffff`

test3.js:4
  4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. Expected string literal `ffffff`, got `0000ff` instead
  4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
                                     ^^^^^^^^ string literal `ffffff`

test6.js:2
  2: (o.hello: 'nothing'); // oops
      ^^^^^^^ string. Expected string literal `nothing`, got `world` instead
  2: (o.hello: 'nothing'); // oops
               ^^^^^^^^^ string literal `nothing`

test7.js:2
  2: var x: string = obj['m'](); // error, number ~> string
                     ^^^^^^^^^^ number. This type is incompatible with
  2: var x: string = obj['m'](); // error, number ~> string
            ^^^^^^ string

test7.js:5
  5: var y: string = arr[0](); // error: number ~> string
                     ^^^^^^^^ number. This type is incompatible with
  5: var y: string = arr[0](); // error: number ~> string
            ^^^^^^ string


Found 17 errors
