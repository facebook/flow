Error ---------------------------------------------------------------------------------------------- boolean_key.js:9:23

Cannot use `true` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a boolean [1]. Can you add an appropriate type annotation to `true` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   9|   return {...params, [true]: true}; // error true is invalid-computed-prop
                            ^^^^ [1]


Error --------------------------------------------------------------------------------------------- boolean_key.js:15:23

Cannot use `key` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a boolean [2]. Can you add an appropriate type annotation to `key` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   boolean_key.js:15:23
   15|   return {...params, [key]: true}; // error boolean is invalid-computed-prop
                             ^^^ [1]

References:
   boolean_key.js:13:8
   13|   key: T,
              ^ [2]


Error --------------------------------------------------------------------------------------------- boolean_key.js:21:23

Cannot use `key` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a boolean literal `true` [2]. Can you add an appropriate type annotation to `key` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   boolean_key.js:21:23
   21|   return {...params, [key]: true}; // error true is invalid-computed-prop
                             ^^^ [1]

References:
   boolean_key.js:19:8
   19|   key: T,
              ^ [2]


Error --------------------------------------------------------------------------------------------- object_keys.js:14:36

Cannot use `k` [1] as a computed property. Computed properties may only be primitive literal values, but the type of
`k` [1] is a union. Can you add a literal type annotation to `k` [1]? See https://flow.org/en/docs/types/literals/ for
more information on literal types. [invalid-computed-prop]

   object_keys.js:14:36
   14| Object.keys(y).map(k => { return {[k]: k} }); // Error
                                          ^

References:
   object_keys.js:14:20
   14| Object.keys(y).map(k => { return {[k]: k} }); // Error
                          ^ [1]


Error ----------------------------------------------------------------------------------------------------- poly.js:3:29

Missing an annotation on return because generic functions must be fully annotated. [missing-local-annot]

   3| function f1<T: string>(x: T) { return {[x]: x} } // ok
                                  


Error ----------------------------------------------------------------------------------------------------- poly.js:4:21

Missing an annotation on return because generic functions must be fully annotated. [missing-local-annot]

   4| function f2<T>(x: T) { return {[x]: x} } // error. mixed can't be used as a computed prop
                          


Error ----------------------------------------------------------------------------------------------------- poly.js:4:33

Cannot use `x` [1] to assign a computed property. Computed properties may only be numeric or string literal values, but
this one is a mixed [2]. Can you add an appropriate type annotation to `x` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   poly.js:4:33
   4| function f2<T>(x: T) { return {[x]: x} } // error. mixed can't be used as a computed prop
                                      ^ [1]

References:
   poly.js:4:19
   4| function f2<T>(x: T) { return {[x]: x} } // error. mixed can't be used as a computed prop
                        ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:19:2

Cannot cast `ColorIdToNumber[ColorId.RED]` to string literal `ffffff` because string [1] is incompatible with string
literal `ffffff` [2]. [incompatible-cast]

   test.js:19:2
   19| (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:8:8
    8|   RED: 'ff0000',
              ^^^^^^^^ [1]
   test.js:19:32
   19| (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
                                      ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:21:17

Cannot get `ColorIdToNumber.XXX` because property `XXX` is missing in object literal [1]. [prop-missing]

   test.js:21:17
   21| ColorIdToNumber.XXX; // oops
                       ^^^

References:
   test.js:13:25
                               v
   13| const ColorIdToNumber = {
   14|   [ColorId.RED]: ColorNumber.RED,
   15|   [ColorId.GREEN]: ColorNumber.GREEN,
   16|   [ColorId.BLUE]: ColorNumber.BLUE,
   17| };
       ^ [1]


Error ---------------------------------------------------------------------------------------------------- test2.js:3:25

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Expected
simple key in object: [signature-verification-failure]

                              v
   3| const ColorIdToNumber = {
   4|   [ColorId.RED]: ColorNumber.RED,
   5|   [ColorId.GREEN]: ColorNumber.GREEN,
   6|   [ColorId.BLUE]: ColorNumber.BLUE,
   7| };
      ^


Error ----------------------------------------------------------------------------------------------------- test2.js:9:2

Cannot cast `ColorIdToNumber[ColorId.GREEN]` to string literal `ffffff` because string [1] is incompatible with string
literal `ffffff` [2]. [incompatible-cast]

   test2.js:9:2
   9| (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:9:10
   9|   GREEN: '00ff00',
               ^^^^^^^^ [1]
   test2.js:9:34
   9| (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
                                       ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test5.js:3:18

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Expected
simple key in object: [signature-verification-failure]

                       v
   3| module.exports = {
   4|   ...dummy,
   5|   // TODO allow computed prop (T64194787)
   6|   [hello]: 'world',
   7|   ...dummy,
   8| };
      ^


Error ---------------------------------------------------------------------------------------------------- test7.js:2:19

Cannot assign `obj['m']()` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   test7.js:2:19
   2| const x: string = obj['m'](); // error, number ~> string
                        ^^^^^^^^^^

References:
   test7.js:1:19
   1| const obj: {|m(): number, x: number|} = {x: 0, m() { return obj.x }}
                        ^^^^^^ [1]
   test7.js:2:10
   2| const x: string = obj['m'](); // error, number ~> string
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test7.js:5:19

Cannot assign `arr[0]()` to `y` because number [1] is incompatible with string [2]. [incompatible-type]

   test7.js:5:19
      5| const y: string = arr[0](); // error: number ~> string
                           ^^^^^^^^

References:
   <BUILTINS>/core.js:1090:13
   1090|     length: number;
                     ^^^^^^ [1]
   test7.js:5:10
      5| const y: string = arr[0](); // error: number ~> string
                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:5:13

Cannot use `k` [1] as a computed property. Computed properties may only be primitive literal values, but the type of
`k` [1] is a union. Can you add a literal type annotation to `k` [1]? See https://flow.org/en/docs/types/literals/ for
more information on literal types. [invalid-computed-prop]

   union.js:5:13
   5| const a = {[k]: 3}; // Error, k has multiple lower bounds
                  ^

References:
   union.js:4:13
   4| declare var k: key;
                  ^ [1]


Error --------------------------------------------------------------------------------------------------- union.js:17:13

Cannot use `x` [1] as a computed property. Computed properties may only be primitive literal values, but the type of
`x` [1] is a union. Can you add a literal type annotation to `x` [1]? See https://flow.org/en/docs/types/literals/ for
more information on literal types. [invalid-computed-prop]

   17| const b = {[x]: 3} // Error, x has multiple lower bounds
                   ^ [1]


Error --------------------------------------------------------------------------------------------------- union.js:20:13

Cannot use `maybe` [1] as a computed property. Computed properties may only be primitive literal values, but the type of
`maybe` [1] is a union. Can you add a literal type annotation to `maybe` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union.js:20:13
   20| const c = {[maybe]: 3}; // ERROR
                   ^^^^^

References:
   union.js:19:13
   19| declare var maybe: ?string;
                   ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- union.js:23:13

Cannot use `several` [1] as a computed property. Computed properties may only be primitive literal values, but the type
of `several` [1] is a union. Can you add a literal type annotation to `several` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union.js:23:13
   23| const d = {[several]: 3}; // ERROR
                   ^^^^^^^

References:
   union.js:22:13
   22| declare var several: ?string | key;
                   ^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- union.js:28:6

Cannot use `several` [1] as a computed property. Computed properties may only be primitive literal values, but the type
of `several` [1] is a union. Can you add a literal type annotation to `several` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union.js:28:6
   28|     [several]: 3, // ERROR
            ^^^^^^^

References:
   union.js:22:13
   22| declare var several: ?string | key;
                   ^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- union_key.js:11:23

Cannot use `key` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a key set [2]. Can you add an appropriate type annotation to `key` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union_key.js:11:23
   11|   return {...params, [key]: true}; // error key set is invalid-computed-prop
                             ^^^ [1]

References:
   union_key.js:9:8
    9|   key: T,
              ^ [2]


Error ----------------------------------------------------------------------------------------------- union_key.js:17:23

Cannot use `key` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a key set [2]. Can you add an appropriate type annotation to `key` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union_key.js:17:23
   17|   return {...params, [key]: true}; // error key set is invalid-computed-prop
                             ^^^ [1]

References:
   union_key.js:15:8
   15|   key: T,
              ^ [2]


Error ----------------------------------------------------------------------------------------------- union_key.js:23:23

Cannot use `key` [1] to assign a computed property. Computed properties may only be numeric or string literal values,
but this one is a union type [2]. Can you add an appropriate type annotation to `key` [1]? See
https://flow.org/en/docs/types/literals/ for more information on literal types. [invalid-computed-prop]

   union_key.js:23:23
   23|   return {...params, [key]: true}; // error union is invalid-computed-prop
                             ^^^ [1]

References:
   union_key.js:21:8
   21|   key: T,
              ^ [2]



Found 22 errors
