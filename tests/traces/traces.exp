Traces.js:3
  3: function f0(x) { g0(x) }
                         ^ number. This type is incompatible with the expected param type of
  2: function g0(y:string) { }
                   ^^^^^^ string
Trace:
* path 1:
  3: function f0(x) { g0(x) }
                         ^ NumT [number]
  2: function g0(y:string) { }
                   ^^^^^^ ~> UseT(FunCallParam, StrT) [string] (from path 2)
* path 2:
  3: function f0(x) { g0(x) }
                         ^ NumT [number]
  3: function f0(x) { g0(x) }
                         ^ ~> UseT(UnknownUse, OpenT) [identifier `x`] (from path 3)
  3: function f0(x) { g0(x) }
                         ^ ~> ReposLowerT [identifier `x`] (from [not shown])
* path 3:
  4: f0(0);
        ^ NumT [number]
  3: function f0(x) { g0(x) }
                 ^ ~> UseT(FunCallParam, OpenT) [parameter `x`] (from [not shown])
  3: function f0(x) { g0(x) }
                         ^ ~> ReposLowerT [identifier `x`]

Traces.js:8
  8: function f1(x, y) { g1(x, y) }
                               ^ number. This type is incompatible with the expected param type of
  7: function g1(a:string, b:string) { }
                             ^^^^^^ string
Trace:
* path 1:
  8: function f1(x, y) { g1(x, y) }
                               ^ NumT [number]
  7: function g1(a:string, b:string) { }
                             ^^^^^^ ~> UseT(FunCallParam, StrT) [string] (from path 2)
* path 2:
  8: function f1(x, y) { g1(x, y) }
                               ^ NumT [number]
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> UseT(UnknownUse, OpenT) [identifier `y`] (from path 3)
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> ReposLowerT [identifier `y`] (from [not shown])
* path 3:
  9: f1("hey", 0);
               ^ NumT [number]
  8: function f1(x, y) { g1(x, y) }
                    ^ ~> UseT(FunCallParam, OpenT) [parameter `y`] (from [not shown])
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> ReposLowerT [identifier `y`]

Traces.js:14
 14: f2(function(x) { return x * x });
                             ^ string. The operand of an arithmetic operation must be a number.

Traces.js:14
 14: f2(function(x) { return x * x });
                                 ^ string. The operand of an arithmetic operation must be a number.

Traces.js:19
 19: function double(n) { return n * 2 }
                                 ^ string. The operand of an arithmetic operation must be a number.

Traces2.js:17
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ React element `B`
 15:     return <A foo="hey"/>;
                ^^^^^^^^^^^^^^ property `foo`. Property not found in
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ props of React element `B`
Trace:
* path 1:
 15:     return <A foo="hey"/>;
                ^^^^^^^^^^^^^^ ObjT [props of React element `A`]
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ ~> UseT(UnknownUse, ObjT) [props of React element `B`] (from path 2)
* path 2:
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ ObjT [props of React element `B`]
 13: function f(b): React.Element<*> {
                                  ^ ~> UseT(UnknownUse, OpenT) [existential] (from path 3)
* path 3:
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ InstanceT [React$Element]
 13: function f(b): React.Element<*> {
                    ^^^^^^^^^^^^^^^^ ~> UseT(FunReturn, ExtendsT) [extends React$Element] (from [not shown])

Traces2.js:17
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ React element `B`
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ property `bar`. Property not found in
 15:     return <A foo="hey"/>;
                ^^^^^^^^^^^^^^ props of React element `A`
Trace:
* path 1:
 15:     return <A foo="hey"/>;
                ^^^^^^^^^^^^^^ ObjT [props of React element `A`]
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ ~> UseT(UnknownUse, ObjT) [props of React element `B`] (from path 2)
* path 2:
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ ObjT [props of React element `B`]
 13: function f(b): React.Element<*> {
                                  ^ ~> UseT(UnknownUse, OpenT) [existential] (from path 3)
* path 3:
 17:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ InstanceT [React$Element]
 13: function f(b): React.Element<*> {
                    ^^^^^^^^^^^^^^^^ ~> UseT(FunReturn, ExtendsT) [extends React$Element] (from [not shown])


Found 7 errors
