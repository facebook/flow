class.js:34
 34:   set [z](x: string) {}
       ^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

class.js:35
 35:   get [z](): string { return string; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

class.js:44
 44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

class.js:45
 45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

class.js:52
 52: foo.goodSetterNoAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `goodSetterNoAnnotation`
 11:   set goodSetterNoAnnotation(x) { z = x; }
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

class.js:53
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `goodSetterWithAnnotation`
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

class.js:55
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

class.js:55
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

class.js:57
 57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                      ^^^^^^ number

class.js:58
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `propOverriddenWithSetter`
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ number. This type is incompatible with
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

declare_class.js:37
 37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

declare_class.js:42
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `goodSetterWithAnnotation`
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

declare_class.js:44
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

declare_class.js:44
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

declare_class.js:46
 46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                      ^^^^^^ number

declare_class.js:47
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `propOverriddenWithSetter`
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ number. This type is incompatible with
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

object.js:15
 15:   set goodSetterNoAnnotation(x) { z = x; },
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

object.js:34
 34:   set [z](x: string) {},
       ^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

object.js:35
 35:   get [z](): string { return string; },
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

object.js:44
 44: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 44: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

object.js:45
 45: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 45: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

object.js:52
 52: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 16:   set goodSetterWithAnnotation(x: number) { z = x; },
                                       ^^^^^^ number

object.js:54
 54: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 54: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

object.js:54
 54: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 54: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

object.js:59
 59: obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                           ^^^^^^^ C. This type is incompatible with
 29:   set exampleOfOrderOfGetterAndSetter(x: B) {},
                                              ^ B

object.js:63
 63:   obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 62: var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                       ^^^^^^ number

object_type.js:36
 36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ string

object_type.js:41
 41:   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ string. This type is incompatible with
 13:   set goodSetterWithAnnotation(x: number): void,
                                       ^^^^^^ number

object_type.js:43
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ number

object_type.js:43
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ number

object_type.js:48
 48:   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                             ^^^^^^^ C. This type is incompatible with
 26:   set exampleOfOrderOfGetterAndSetter(x: B): void,
                                              ^ B

object_type.js:52
 52:     obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 51:   var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                         ^^^^^^ number

react.js:7
  7:     get a() { return 4; },
         ^^^^^^^^^^^^^^^^^^^^^ get/set properties not supported for React propTypes

react.js:8
  8:     set b(x: number) { this.c = x; },
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ get/set properties not supported for React propTypes

variance.js:21
 21: (class extends Base {
      ^ class expr `<<anonymous class>>`. Covariant property `x` incompatible with invariant use in
 21: (class extends Base {
                    ^^^^ Base

variance.js:26
 26: (class extends Base {
      ^ class expr `<<anonymous class>>`. Contravariant property `x` incompatible with invariant use in
 26: (class extends Base {
                    ^^^^ Base

variance.js:37
 37: (class extends Base {
      ^ class expr `<<anonymous class>>`. Contravariant property `pos` incompatible with covariant use in
 37: (class extends Base {
                    ^^^^ Base

variance.js:47
 47: (class extends Base {
      ^ class expr `<<anonymous class>>`. Covariant property `neg` incompatible with contravariant use in
 47: (class extends Base {
                    ^^^^ Base


Found 38 errors
