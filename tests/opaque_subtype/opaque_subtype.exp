Error ----------------------------------------------------------------------------------------------- both_bounds.js:6:1

Cannot cast `'baz'` to `Kind` because string [1] is incompatible with `Kind` [2]. [incompatible-cast]

   both_bounds.js:6:1
   6| 'baz' as Kind; // error
      ^^^^^ [1]

References:
   both_bounds.js:6:10
   6| 'baz' as Kind; // error
               ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- both_bounds.js:8:1

Cannot cast `kind` to number because `Kind` [1] is incompatible with number [2]. [incompatible-cast]

   both_bounds.js:8:1
   8| kind as number; // error
      ^^^^

References:
   both_bounds.js:3:21
   3| declare const kind: Kind;
                          ^^^^ [1]
   both_bounds.js:8:9
   8| kind as number; // error
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- both_bounds.js:12:2

Cannot cast object literal to `Obj` because property `foo` is missing in object literal [1] but exists in object
type [2]. [prop-missing]

   both_bounds.js:12:2
   12| ({}) as Obj; // error
        ^^ [1]

References:
   both_bounds.js:12:9
   12| ({}) as Obj; // error
               ^^^ [2]


Error ---------------------------------------------------------------------------------------------- both_bounds.js:13:1

Cannot cast `1` to `Obj` because number [1] is incompatible with `Obj` [2]. [incompatible-cast]

   both_bounds.js:13:1
   13| 1 as Obj; // error
       ^ [1]

References:
   both_bounds.js:13:6
   13| 1 as Obj; // error
            ^^^ [2]


Error --------------------------------------------------------------------------------------------- both_bounds.js:17:41

string [1] is incompatible with string literal `foo` [2]. [incompatible-type]

   both_bounds.js:17:41
   17| declare opaque type InvalidNoRepr super string extends 'foo'; // error: string ~> 'foo'
                                               ^^^^^^ [1]

References:
   both_bounds.js:17:56
   17| declare opaque type InvalidNoRepr super string extends 'foo'; // error: string ~> 'foo'
                                                              ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- both_bounds.js:18:31

string [1] is incompatible with string literal `foo` [2]. [incompatible-type]

   both_bounds.js:18:31
   18| opaque type InvalidRepr super string extends 'foo' = 'foo'; // error: string ~> 'foo'
                                     ^^^^^^ [1]

References:
   both_bounds.js:18:46
   18| opaque type InvalidRepr super string extends 'foo' = 'foo'; // error: string ~> 'foo'
                                                    ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- both_bounds.js:18:31

string [1] is incompatible with string literal `foo` [2]. [incompatible-type]

   both_bounds.js:18:31
   18| opaque type InvalidRepr super string extends 'foo' = 'foo'; // error: string ~> 'foo'
                                     ^^^^^^ [1]

References:
   both_bounds.js:18:54
   18| opaque type InvalidRepr super string extends 'foo' = 'foo'; // error: string ~> 'foo'
                                                            ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- both_bounds.js:22:1

Cannot cast `'b'` to `BothBounds` because string [1] is incompatible with `BothBounds` [2]. [incompatible-cast]

   both_bounds.js:22:1
   22| 'b' as BothBounds; // error
       ^^^ [1]

References:
   both_bounds.js:22:8
   22| 'b' as BothBounds; // error
              ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- decltest.js:2:33

Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   decltest.js:2:33
   2| declare opaque type Foo<+T>: {p:T}; // Error, invariant use of T
                                      ^

References:
   decltest.js:2:26
   2| declare opaque type Foo<+T>: {p:T}; // Error, invariant use of T
                               ^ [1]


Error ------------------------------------------------------------------------------------------------ distribute.js:9:1

Cannot cast `o` to `A` because: [incompatible-cast]
 - Either `O` [1] is incompatible with number [2] in property `value`.
 - Or `O` [1] is incompatible with number literal `2` [3] in property `tag`.

   distribute.js:9:1
   9| o as A<number>; // error
      ^

References:
   distribute.js:7:16
   7| declare var o: O;
                     ^ [1]
   distribute.js:9:8
   9| o as A<number>; // error
             ^^^^^^ [2]
   distribute.js:3:45
   3| type A<T> = { +tag: 1, value: T } | { +tag: 2, value: T };
                                                  ^ [3]


Error ------------------------------------------------------------------------------------------------ distribute.js:9:1

Cannot cast `o` to `A` because: [incompatible-cast]
 - Either `O` [1] is incompatible with number literal `1` [2] in property `tag`.
 - Or `O` [1] is incompatible with number [3] in property `value`.

   distribute.js:9:1
   9| o as A<number>; // error
      ^

References:
   distribute.js:7:16
   7| declare var o: O;
                     ^ [1]
   distribute.js:3:21
   3| type A<T> = { +tag: 1, value: T } | { +tag: 2, value: T };
                          ^ [2]
   distribute.js:9:8
   9| o as A<number>; // error
             ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- importtest.js:5:12

Cannot return `y` because `SuperType` [1] is incompatible with `SuperOpaque` [2]. [incompatible-return]

   importtest.js:5:12
   5|     return y;
                 ^

References:
   importtest.js:4:20
   4| function test1 (y: SuperType) : SuperOpaque { // Error: number ~> SuperOpaque
                         ^^^^^^^^^ [1]
   importtest.js:4:33
   4| function test1 (y: SuperType) : SuperOpaque { // Error: number ~> SuperOpaque
                                      ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:13:12

Cannot return `x` because number [1] is incompatible with `Counter` [2]. [incompatible-return]

   importtest.js:13:12
   13|     return x;
                  ^

References:
   importtest.js:12:20
   12| function test3 (x: number): Counter {// Error: number ~> Counter
                          ^^^^^^ [1]
   importtest.js:12:29
   12| function test3 (x: number): Counter {// Error: number ~> Counter
                                   ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:25:12

Cannot return `x` because `PolyGood` [1] is incompatible with `PolyBar` [2]. [incompatible-return]

   importtest.js:25:12
   25|     return x;
                  ^

References:
   importtest.js:24:19
   24| function test6(x: PolyGood<number>): PolyBar<number> { // Error: PolyFoo ~> PolyBar
                         ^^^^^^^^^^^^^^^^ [1]
   importtest.js:24:38
   24| function test6(x: PolyGood<number>): PolyBar<number> { // Error: PolyFoo ~> PolyBar
                                            ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:29:12

Cannot return `x` because `PolyGood` [1] is incompatible with string [2] in type argument `T` [3]. [incompatible-return]

   importtest.js:29:12
   29|     return x;
                  ^

References:
   importtest.js:28:19
   28| function test7(x: PolyGood<number>): PolyFoo<string> { // Error: number ~> string
                         ^^^^^^^^^^^^^^^^ [1]
   importtest.js:28:46
   28| function test7(x: PolyGood<number>): PolyFoo<string> { // Error: number ~> string
                                                    ^^^^^^ [2]
   test.js:12:22
   12| export class PolyFoo<T> {}
                            ^ [3]


Error ---------------------------------------------------------------------------------------------- importtest.js:37:12

Cannot assign update to `x` because number [1] is incompatible with `SuperType` [2]. [incompatible-type]

   importtest.js:37:12
   37|     return x++; // Error number ~> SuperType
                  ^^^ [1]

References:
   importtest.js:36:19
   36| function test9(x: SuperType): SuperType { // Error number ~> SuperType
                         ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:37:12

Cannot return `x++` because number [1] is incompatible with `SuperType` [2]. [incompatible-return]

   importtest.js:37:12
   37|     return x++; // Error number ~> SuperType
                  ^^^ [1]

References:
   importtest.js:36:31
   36| function test9(x: SuperType): SuperType { // Error number ~> SuperType
                                     ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- importtest.js:50:12

Cannot return `x + y` because string [1] is incompatible with number [2]. [incompatible-return]

   importtest.js:50:12
   50|     return x + y;
                  ^^^^^ [1]

References:
   importtest.js:49:32
   49| function test12(x: ID, y: ID): number { // Error: string ~> number
                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------- lower_bounds_subtype.js:5:3

Cannot cast `n` to `MiniReactNode` because: [incompatible-cast]
 - Either `MiniReactNode` [1] is incompatible with `MiniReactElement` [2].
 - Or `MiniReactNode` [1] is incompatible with string [2].

   lower_bounds_subtype.js:5:3
   5|   n as MiniReactNode; // todo: bad error
        ^

References:
   lower_bounds_subtype.js:4:43
   4| function genericTest<N: MiniReactNode>(n: N) {
                                                ^ [1]
   lower_bounds_subtype.js:5:8
   5|   n as MiniReactNode; // todo: bad error
             ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:5:48

number [1] is incompatible with `SuperType` [2]. [incompatible-type]

   test.js:5:48
   5| export opaque type SuperOpaqueBad: SuperType = Counter; // Error: number ~> SuperType
                                                     ^^^^^^^ [1]

References:
   test.js:5:36
   5| export opaque type SuperOpaqueBad: SuperType = Counter; // Error: number ~> SuperType
                                         ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:10:36

`Foo` [1] is incompatible with `Bar` [2]. [incompatible-type]

   test.js:10:36
   10| export opaque type ClassBad: Bar = Foo; // Error: Foo ~> Bar
                                          ^^^ [1]

References:
   test.js:10:30
   10| export opaque type ClassBad: Bar = Foo; // Error: Foo ~> Bar
                                    ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:15:45

`PolyFoo` [1] is incompatible with `PolyBar` [2]. [incompatible-type]

   test.js:15:45
   15| export opaque type PolyBad<T>: PolyBar<T> = PolyFoo<T>; // Error: PolyFoo ~> PolyBar
                                                   ^^^^^^^^^^ [1]

References:
   test.js:15:32
   15| export opaque type PolyBad<T>: PolyBar<T> = PolyFoo<T>; // Error: PolyFoo ~> PolyBar
                                      ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:17:27

Cannot use `PolyFoo` [1] with fewer than 1 type argument. [missing-type-arg]

   test.js:17:27
   17| class PolyBar2<T> extends PolyFoo {}
                                 ^^^^^^^

References:
   test.js:12:21
   12| export class PolyFoo<T> {}
                           ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:19:47

`PolyFoo` [1] is incompatible with `PolyBar2` [2]. [incompatible-type]

   test.js:19:47
   19| export opaque type PolyBad3<T>: PolyBar2<T> = PolyFoo<T>; // Error: PolyFoo ~> PolyBar2
                                                     ^^^^^^^^^^ [1]

References:
   test.js:19:33
   19| export opaque type PolyBad3<T>: PolyBar2<T> = PolyFoo<T>; // Error: PolyFoo ~> PolyBar2
                                       ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:25:65

string [1] is incompatible with number [2] in type argument `T` [3]. [incompatible-type-arg]

   test.js:25:65
   25| export opaque type BadContra: Contra<number | string> = EContra<string>; // Error: string ~> number
                                                                       ^^^^^^ [1]

References:
   test.js:25:38
   25| export opaque type BadContra: Contra<number | string> = EContra<string>; // Error: string ~> number
                                            ^^^^^^ [2]
   test.js:21:15
   21| class Contra<-T> {}
                     ^ [3]


Error ---------------------------------------------------------------------------------------------- typeapp-test.js:5:8

Cannot assign `null` to `foo2.p` because property `p` is not writable. [cannot-write]

   5|   foo2.p = null; // Error, covariant property p
             ^



Found 26 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
