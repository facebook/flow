Error: assignment.js:16
 16:   while (x = x.parent) { // can't assign x to ?Bar
                  ^^^^^^^^ null. This type is incompatible with
 15: function bar0(x : Bar) {
                       ^^^ object type

Error: assignment.js:16
 16:   while (x = x.parent) { // can't assign x to ?Bar
                  ^^^^^^^^ undefined. This type is incompatible with
 15: function bar0(x : Bar) {
                       ^^^ object type

Error: assignment.js:22
 22:   while (x = x.parent) { // x.parent might be null
                    ^^^^^^ property `parent`. Property cannot be accessed on possibly null value
 22:   while (x = x.parent) { // x.parent might be null
                  ^ null

Error: assignment.js:22
 22:   while (x = x.parent) { // x.parent might be null
                    ^^^^^^ property `parent`. Property cannot be accessed on possibly undefined value
 22:   while (x = x.parent) { // x.parent might be null
                  ^ undefined

Error: bool.js:12
 12:   x[0]; // error on null and undefined
       ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 12:   x[0]; // error on null and undefined
       ^ null

Error: bool.js:12
 12:   x[0]; // error on null and undefined
       ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 12:   x[0]; // error on null and undefined
       ^ undefined

Error: bool.js:18
 18:       x[0]; // error on null and undefined
           ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 18:       x[0]; // error on null and undefined
           ^ null

Error: bool.js:18
 18:       x[0]; // error on null and undefined
           ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 18:       x[0]; // error on null and undefined
           ^ undefined

Error: bool.js:24
 24:   if (100 * false) {
                 ^^^^^ boolean. The operand of an arithmetic operation must be a number.

Error: bool.js:27
 27:   if (false * 100) {
           ^^^^^ boolean. The operand of an arithmetic operation must be a number.

Error: bool.js:37
 37:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 37:     return x.result; // error
                ^ object type

Error: bool.js:44
 44:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 44:     return x.result; // error
                ^ object type

Error: cond_prop.js:11
 11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                             ^^^^^^^^^^^^ object type. This type is incompatible with the expected param type of
  9: function getTypeASTName(typeAST: Type): string {
                                      ^^^^ union: Name | ListType | NonNullType
  Member 1:
    3: type Type = Name | ListType | NonNullType;
                   ^^^^ Name
  Error:
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type. This type is incompatible with
    3: type Type = Name | ListType | NonNullType;
                   ^^^^ object type
    Property `kind` is incompatible:
        3: type Type = Name | ListType | NonNullType;
                       ^^^^ property `kind`. Property not found in
       11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                                   ^^^^^^^^^^^^ object type
  Member 2:
    3: type Type = Name | ListType | NonNullType;
                          ^^^^^^^^ ListType
  Error:
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type. This type is incompatible with
    3: type Type = Name | ListType | NonNullType;
                          ^^^^^^^^ object type
    Property `kind` is incompatible:
        3: type Type = Name | ListType | NonNullType;
                              ^^^^^^^^ property `kind`. Property not found in
       11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                                   ^^^^^^^^^^^^ object type
  Member 3:
    3: type Type = Name | ListType | NonNullType;
                                     ^^^^^^^^^^^ NonNullType
  Error:
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type. This type is incompatible with
    3: type Type = Name | ListType | NonNullType;
                                     ^^^^^^^^^^^ object type
    Property `kind` is incompatible:
        3: type Type = Name | ListType | NonNullType;
                                         ^^^^^^^^^^^ property `kind`. Property not found in
       11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                                   ^^^^^^^^^^^^ object type

Error: cond_prop.js:19
 19:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 19:     return x.result; // error
                ^ object type

Error: cond_prop.js:24
 24:       return x.result; // error, consider { foo: "herp", done: "derp" }
                    ^^^^^^ property `result`. Property not found in
 24:       return x.result; // error, consider { foo: "herp", done: "derp" }
                  ^ object type

Error: cond_prop.js:26
 26:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 26:     return x.result; // error
                ^ object type

Error: cond_prop.js:36
 36:         (t.bar: string); // error, consider { baz: "x", quux: "y", foo: "boom" }
                ^^^ property `bar`. Property not found in
 36:         (t.bar: string); // error, consider { baz: "x", quux: "y", foo: "boom" }
              ^ object type

Error: cond_prop.js:46
 46:         (t.foo: Object); // error, consider { baz: "x", quux: "y", bar: "boom" }
                ^^^ property `foo`. Property not found in
 46:         (t.foo: Object); // error, consider { baz: "x", quux: "y", bar: "boom" }
              ^ object type

Error: cond_prop.js:48
 48:         (t.quux: string); // error, consider { foo: {}, bar: "" }
                ^^^^ property `quux`. Property not found in
 48:         (t.quux: string); // error, consider { foo: {}, bar: "" }
              ^ object type

Error: cond_prop.js:54
 54:     if (o.p) {} // error: property `p` not found on null
               ^ property `p`. Property cannot be accessed on possibly null value
 54:     if (o.p) {} // error: property `p` not found on null
             ^ null

Error: eq.js:5
  5:     if (x == y) {} // error, string & number are not comparable (unsafe casting)
             ^ string. This type cannot be compared to
  5:     if (x == y) {} // error, string & number are not comparable (unsafe casting)
                  ^ number

Error: eq.js:19
 19:     if (x.y == 123) {} // error
             ^^^ string literal `bar`. This type cannot be compared to
 19:     if (x.y == 123) {} // error
                    ^^^ number

Error: eq.js:19
 19:     if (x.y == 123) {} // error
             ^^^ string literal `foo`. This type cannot be compared to
 19:     if (x.y == 123) {} // error
                    ^^^ number

Error: hasOwnProperty.js:4
  4:   x.y(); // error: could be undefined
       ^^^^^ call of method `y`. Function cannot be called on possibly undefined value
  4:   x.y(); // error: could be undefined
       ^^^ undefined

Error: hasOwnProperty.js:6
  6:     x.y(); // error: still could be undefined
         ^^^^^ call of method `y`. Function cannot be called on possibly undefined value
  6:     x.y(); // error: still could be undefined
         ^^^ undefined

Error: hasOwnProperty.js:9
  9:     x.z(); // error: unreachable, but we don't help you here
           ^ property `z`. Property not found in
  9:     x.z(); // error: unreachable, but we don't help you here
         ^ object type

Error: heap_defassign.js:10
 10:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 10:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

Error: heap_defassign.js:16
 16:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 16:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

Error: heap_defassign.js:22
 22:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 22:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

Error: heap_defassign.js:30
 30:     var y: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 30:     var y: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

Error: heap_defassign.js:38
 38:     var y: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 38:     var y: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

Error: heap_defassign.js:62
 62:         var y: number = obj.p;  // error, string ~/~ number
                             ^^^^^ string. This type is incompatible with
 62:         var y: number = obj.p;  // error, string ~/~ number
                    ^^^^^^ number

Error: heap_defassign.js:65
 65:     var z:string = obj.p;       // error, number ~/~ string
                        ^^^^^ number. This type is incompatible with
 65:     var z:string = obj.p;       // error, number ~/~ string
               ^^^^^^ string

Error: heap_defassign.js:73
 73:     var z: number = obj.p;      // error, (number | string) ~/~ number
                         ^^^^^ string. This type is incompatible with
 73:     var z: number = obj.p;      // error, (number | string) ~/~ number
                ^^^^^^ number

Error: missing-property-cond.js:11
 11:     o.p2.x; // error, since o.p2's type is unknown (e.g., could be `number`)
              ^ property `x`. Property cannot be accessed on
 11:     o.p2.x; // error, since o.p2's type is unknown (e.g., could be `number`)
         ^^^^ property `p2` of unknown type

Error: missing-property-cond.js:16
 16:   o.p3.x; // usual error outside conditional
         ^^ property `p3`. Property not found in
 16:   o.p3.x; // usual error outside conditional
       ^ object type

Error: missing-property-cond.js:23
 23:     o.p4.x; // error
              ^ property `x`. Property cannot be accessed on possibly undefined value
 23:     o.p4.x; // error
         ^^^^ property `p4` does not exist

Error: missing-property-cond.js:37
 37:   if (o.bar) {} // error, any lookup on mixed is unsafe
             ^^^ property `bar`. Property not found in
 37:   if (o.bar) {} // error, any lookup on mixed is unsafe
           ^ mixed

Error: missing-property-cond.js:41
 41:   if (typeof o.bar === 'string') {} // error
                    ^^^ property `bar`. Property not found in
 41:   if (typeof o.bar === 'string') {} // error
                  ^ mixed

Error: missing-property-cond.js:65
 65:   if (null.q) {} // error: property `q` on null
                ^ property `q`. Property cannot be accessed on possibly null value
 65:   if (null.q) {} // error: property `q` on null
           ^^^^ null

Error: mixed.js:8
  8:     takesString(x); // error
                     ^ number. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:9
  9:     (!x: false); // error: we don't know the truthiness of x
          ^^ boolean. Expected boolean literal `false`
  9:     (!x: false); // error: we don't know the truthiness of x
              ^^^^^ boolean literal `false`

Error: mixed.js:21
 21:     takesNumber(x); // error
                     ^ string. This type is incompatible with the expected param type of
  3: function takesNumber(x: number) {}
                             ^^^^^^ number

Error: mixed.js:22
 22:     (!x: false); // error: we don't know the truthiness of x
          ^^ boolean. Expected boolean literal `false`
 22:     (!x: false); // error: we don't know the truthiness of x
              ^^^^^ boolean literal `false`

Error: mixed.js:34
 34:     takesString(x); // error
                     ^ boolean. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:35
 35:     (x: true); // error: we don't know the truthiness of x
          ^ boolean. Expected boolean literal `true`
 35:     (x: true); // error: we don't know the truthiness of x
             ^^^^ boolean literal `true`

Error: mixed.js:47
 47:     takesString(x); // error
                     ^ function. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:53
 53:     takesString(x); // error
                     ^ null. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:53
 53:     takesString(x); // error
                     ^ object. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:59
 59:     takesString(x); // error
                     ^ array. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:65
 65:     takesString(x); // error
                     ^ undefined. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:71
 71:     takesString(x); // error
                     ^ null. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:77
 77:     takesString(x); // error
                     ^ null. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:77
 77:     takesString(x); // error
                     ^ undefined. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:83
 83:     takesString(x); // error
                     ^ boolean literal `true`. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:89
 89:     takesString(x); // error
                     ^ boolean literal `false`. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: mixed.js:97
 97:       (x['foo']: string); // error, mixed
            ^^^^^^^^ mixed. This type is incompatible with
 97:       (x['foo']: string); // error, mixed
                      ^^^^^^ string

Error: mixed.js:119
119:     takesString(x[0]); // error
                     ^^^^ mixed. This type is incompatible with the expected param type of
  4: function takesString(x: string) {}
                             ^^^^^^ string

Error: not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ boolean. The operand of an arithmetic operation must be a number.

Error: not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ null. The operand of an arithmetic operation must be a number.

Error: not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ undefined. The operand of an arithmetic operation must be a number.

Error: not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^^^ number. This type is incompatible with
  3: function foo(x: ?bool) {
                      ^^^^ boolean

Error: not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 11:     x[0]; // should error for null, void and number (0)
         ^ null

Error: not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 11:     x[0]; // should error for null, void and number (0)
         ^ undefined

Error: not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Indexable signature not found in
 11:     x[0]; // should error for null, void and number (0)
         ^ Number

Error: not.js:21
 21:     x[0]; // should error for number (0)
         ^^^^ access of computed property/element. Indexable signature not found in
 21:     x[0]; // should error for number (0)
         ^ Number

Error: not.js:41
 41:     (!x: false); // error, strings are not always truthy
          ^^ boolean. Expected boolean literal `false`
 41:     (!x: false); // error, strings are not always truthy
              ^^^^^ boolean literal `false`

Error: not.js:44
 44:     (!x: false); // error, numbers are not always truthy
          ^^ boolean. Expected boolean literal `false`
 44:     (!x: false); // error, numbers are not always truthy
              ^^^^^ boolean literal `false`

Error: not.js:47
 47:     (!x: false); // error, bools are not always truthy
          ^^ boolean. Expected boolean literal `false`
 47:     (!x: false); // error, bools are not always truthy
              ^^^^^ boolean literal `false`

Error: null.js:4
  4:   if (100 * null) {
                 ^^^^ null. The operand of an arithmetic operation must be a number.

Error: null.js:7
  7:   if (null * 100) {
           ^^^^ null. The operand of an arithmetic operation must be a number.

Error: number.js:8
  8:       (x: void); // error
            ^ number literal `0`. This type is incompatible with
  8:       (x: void); // error
               ^^^^ undefined

Error: number.js:10
 10:     (x: 0); // error
          ^ number. Expected number literal `0`
 10:     (x: 0); // error
             ^ number literal `0`

Error: number.js:15
 15:       (x: 0); // error
            ^ number. Expected number literal `0`
 15:       (x: 0); // error
               ^ number literal `0`

Error: number.js:17
 17:     (x: void); // error
          ^ number. This type is incompatible with
 17:     (x: void); // error
             ^^^^ undefined

Error: number.js:21
 21:     if (x === 0) {
                   ^ number literal `0`. This === check always fails because `0` is not the same number as `1`
 20:   function(x: 1): 0 {
                   ^ number literal `1`

Error: number.js:28
 28:     if (x === 1) {
                   ^ number literal `1`. This === check always fails because `1` is not the same number as `0`
 27:   function(x: 0): number {
                   ^ number literal `0`

Error: number.js:35
 35:     if (x !== 1) {
                   ^ number literal `1`. This !== check always succeeds because `1` is not the same number as `0`
 34:   function(x: 0) {
                   ^ number literal `0`

Error: number.js:51
 51:       (x: void); // error
            ^ number literal `0`. This type is incompatible with
 51:       (x: void); // error
               ^^^^ undefined

Error: number.js:55
 55:       (x: void); // error
            ^ number literal `1`. This type is incompatible with
 55:       (x: void); // error
               ^^^^ undefined

Error: number.js:63
 63:     return x.foo; // error
                ^^^^^ number. Expected number literal `0`
 59:   function(x: { foo: number }): 0 {
                                     ^ number literal `0`

Error: number.js:97
 97:       return s; // error
                  ^ number literal `3`. This type is incompatible with the expected return type of
 93:   function(s: number): ?Mode {
                             ^^^^ number enum

Error: number.js:116
116:       return x; // error
                  ^ number. Expected number literal `0`
114:   function(x: number): 0 {
                            ^ number literal `0`

Error: property.js:71
 71:     return x[y.z];  // error
                ^^^^^^ null. This type is incompatible with the expected return type of
 68: function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                                               ^^^^^^ string

Error: property.js:71
 71:     return x[y.z];  // error
                ^^^^^^ undefined. This type is incompatible with the expected return type of
 68: function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                                               ^^^^^^ string

Error: refinements.js:4
  4:         var y:string = x;
                            ^ number. This type is incompatible with
  4:         var y:string = x;
                   ^^^^^^ string

Error: refinements.js:7
  7:     var z:string = x;
                        ^ boolean. This type is incompatible with
  7:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:7
  7:     var z:string = x;
                        ^ null. This type is incompatible with
  7:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:13
 13:         var y:string = x;
                            ^ null. This type is incompatible with
 13:         var y:string = x;
                   ^^^^^^ string

Error: refinements.js:13
 13:         var y:string = x;
                            ^ number. This type is incompatible with
 13:         var y:string = x;
                   ^^^^^^ string

Error: refinements.js:16
 16:     var z:string = x;
                        ^ boolean. This type is incompatible with
 16:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:33
 33:         var y:number = x;
                            ^ string. This type is incompatible with
 33:         var y:number = x;
                   ^^^^^^ number

Error: refinements.js:36
 36:     var z:string = x;
                        ^ number. This type is incompatible with
 36:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:43
 43:         var y:string = x;
                            ^ number. This type is incompatible with
 43:         var y:string = x;
                   ^^^^^^ string

Error: refinements.js:45
 45:     var z:string = x;
                        ^ boolean. This type is incompatible with
 45:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:45
 45:     var z:string = x;
                        ^ null. This type is incompatible with
 45:     var z:string = x;
               ^^^^^^ string

Error: refinements.js:54
 54:     var z:number = x;
                        ^ boolean. This type is incompatible with
 54:     var z:number = x;
               ^^^^^^ number

Error: string.js:8
  8:       (x: void); // error
            ^ string literal `foo`. This type is incompatible with
  8:       (x: void); // error
               ^^^^ undefined

Error: string.js:10
 10:     (x: 'foo'); // error
          ^ string. Expected string literal `foo`
 10:     (x: 'foo'); // error
             ^^^^^ string literal `foo`

Error: string.js:15
 15:       (x: 'foo'); // error
            ^ string. Expected string literal `foo`
 15:       (x: 'foo'); // error
               ^^^^^ string literal `foo`

Error: string.js:17
 17:     (x: void); // error
          ^ string. This type is incompatible with
 17:     (x: void); // error
             ^^^^ undefined

Error: string.js:21
 21:     if (x === 'foo') {
                   ^^^^^ string literal `foo`. This === check always fails because `foo` is not the same string as `bar`
 20:   function(x: 'bar'): 'foo' {
                   ^^^^^ string literal `bar`

Error: string.js:28
 28:     if (x === 'bar') {
                   ^^^^^ string literal `bar`. This === check always fails because `bar` is not the same string as `foo`
 27:   function(x: 'foo'): string {
                   ^^^^^ string literal `foo`

Error: string.js:35
 35:     if (x !== 'bar') {
                   ^^^^^ string literal `bar`. This !== check always succeeds because `bar` is not the same string as `foo`
 34:   function(x: 'foo') {
                   ^^^^^ string literal `foo`

Error: string.js:51
 51:       (x: void); // error
            ^ string literal `foo`. This type is incompatible with
 51:       (x: void); // error
               ^^^^ undefined

Error: string.js:55
 55:       (x: void); // error
            ^ string literal `bar`. This type is incompatible with
 55:       (x: void); // error
               ^^^^ undefined

Error: string.js:63
 63:     return x.foo; // error
                ^^^^^ string. Expected string literal `foo`
 59:   function(x: { foo: string }): 'foo' {
                                     ^^^^^ string literal `foo`

Error: string.js:98
 98:       return s; // error
                  ^ string literal `d`. This type is incompatible with the expected return type of
 94:   function(s: string): ?Mode {
                             ^^^^ string enum

Error: string.js:117
117:       return x; // error
                  ^ string. Expected string literal ``
115:   function(x: string): "" {
                            ^^ string literal ``

Error: super_member.js:13
 13:       return super.prop; // error, unknown type passed to string expected
                  ^^^^^^^^^^ property `prop` of unknown type. This type is incompatible with the expected return type of
 11:   test(): string {
               ^^^^^^ string

Error: switch.js:8
  8:       return text; // error, should return string
                  ^^^^ number. This type is incompatible with the expected return type of
  3: function foo(text: string | number): string {
                                          ^^^^^^ string

Error: switch.js:27
 27:       return text[0]; // error, [0] on number
                  ^^^^^^^ access of computed property/element. Indexable signature not found in
 27:       return text[0]; // error, [0] on number
                  ^^^^ Number

Error: switch.js:37
 37:       return text[0]; // error, [0] on number
                  ^^^^^^^ access of computed property/element. Indexable signature not found in
 37:       return text[0]; // error, [0] on number
                  ^^^^ Number

Error: switch.js:51
 51:       return (text++) + '';
                   ^^^^ string. The operand of an arithmetic operation must be a number.

Error: tagged_union.js:20
 20:     return x.prop1.charAt(0); // typeAST: Node1, but x.prop1 may be undefined
                ^^^^^^^^^^^^^^^^^ call of method `charAt`. Method cannot be called on possibly undefined value
 20:     return x.prop1.charAt(0); // typeAST: Node1, but x.prop1 may be undefined
                ^^^^^^^ undefined

Error: tagged_union.js:34
 34:   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                  ^^^^^^^ string literal `Bad`. Expected string literal `Good`, got `Bad` instead
 34:   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                           ^^^^^^ string literal `Good`

Error: tagged_union.js:35
 35:   else (x.raw: 'No'); // error, Carrot.raw = Maybe
             ^^^^^ string literal `Maybe`. Expected string literal `No`, got `Maybe` instead
 35:   else (x.raw: 'No'); // error, Carrot.raw = Maybe
                    ^^^^ string literal `No`

Error: tagged_union.js:40
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
          ^^^^^ string literal `Maybe`. This type is incompatible with
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
                 ^^^^^^^^^^^^ string enum

Error: tagged_union.js:40
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
            ^^^ property `raw`. Property not found in
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
          ^ object type

Error: tagged_union.js:72
 72:   default: return x.A; // error, x: C and property A not found in type C
                         ^ property `A`. Property not found in
 72:   default: return x.A; // error, x: C and property A not found in type C
                       ^ object type

Error: tagged_union.js:89
 89:       (x.kindTypo: string); // typos can't be used, though
            ^^^^^^^^^^ number literal `1`. This type is incompatible with
 89:       (x.kindTypo: string); // typos can't be used, though
                        ^^^^^^ string

Error: tagged_union.js:96
 96:     if (x.fooTypo.bar === 1) {} // error, fooTypo doesn't exist
               ^^^^^^^ property `fooTypo`. Property not found in
 96:     if (x.fooTypo.bar === 1) {} // error, fooTypo doesn't exist
             ^ object type

Error: tagged_union.js:101
101:     if (x.kind === (null).toString()) {} // error, method on null
                        ^^^^^^^^^^^^^^^^^ call of method `toString`. Method cannot be called on possibly null value
101:     if (x.kind === (null).toString()) {} // error, method on null
                         ^^^^ null

Error: tagged_union.js:102
102:     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                ^^^^^^^^^^^^^^^^^ call of method `toString`. Method cannot be called on possibly null value
102:     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                 ^^^^ null

Error: tagged_union.js:113
113:       (x.legnth: string); // error: number literal 0 !~> string
            ^^^^^^^^ number literal `0`. This type is incompatible with
113:       (x.legnth: string); // error: number literal 0 !~> string
                      ^^^^^^ string

Error: tagged_union.js:118
118:       (y.legnth: string); // error: number literal 0 !~> string
            ^^^^^^^^ number literal `0`. This type is incompatible with
118:       (y.legnth: string); // error: number literal 0 !~> string
                      ^^^^^^ string

Error: tagged_union.js:123
123:       (z.toStirng: string); // error: number literal 0 !~> string
            ^^^^^^^^^^ number literal `0`. This type is incompatible with
123:       (z.toStirng: string); // error: number literal 0 !~> string
                        ^^^^^^ string

Error: tagged_union.js:128
128:       (q.valeuOf: string); // error: number literal 0 !~> string
            ^^^^^^^^^ number literal `0`. This type is incompatible with
128:       (q.valeuOf: string); // error: number literal 0 !~> string
                       ^^^^^^ string

Error: tagged_union.js:146
146:       (x.str: 'not str'); // error: 'str' !~> 'not str'
            ^^^^^ string literal `str`. Expected string literal `not str`, got `str` instead
146:       (x.str: 'not str'); // error: 'str' !~> 'not str'
                   ^^^^^^^^^ string literal `not str`

Error: tagged_union.js:149
149:       (x.num: 456); // error: 123 !~> 456
            ^^^^^ number literal `123`. Expected number literal `456`, got `123` instead
149:       (x.num: 456); // error: 123 !~> 456
                   ^^^ number literal `456`

Error: tagged_union.js:152
152:       (x.bool: false); // error: true !~> false
            ^^^^^^ boolean literal `true`. Expected boolean literal `false`, got `true` instead
152:       (x.bool: false); // error: true !~> false
                    ^^^^^ boolean literal `false`

Error: tagged_union.js:156
156:       (x.badStr: empty); // error: 'bad' !~> empty
            ^^^^^^^^ string literal `bad`. This type is incompatible with
156:       (x.badStr: empty); // error: 'bad' !~> empty
                      ^^^^^ empty

Error: tagged_union.js:159
159:       (x.badNum: empty); // error: 123 !~> empty
            ^^^^^^^^ number literal `123`. This type is incompatible with
159:       (x.badNum: empty); // error: 123 !~> empty
                      ^^^^^ empty

Error: tagged_union.js:162
162:       (x.badBool: empty); // error: true !~> empty
            ^^^^^^^^^ boolean literal `true`. This type is incompatible with
162:       (x.badBool: empty); // error: true !~> empty
                       ^^^^^ empty

Error: tagged_union.js:170
170:       x.z; // error
             ^ property `z`. Property not found in
170:       x.z; // error
           ^ object type

Error: tagged_union.js:173
173:       x.y; // error
             ^ property `y`. Property not found in
173:       x.y; // error
           ^ object type

Error: tagged_union.js:177
177:       x.y; // error
             ^ property `y`. Property not found in
177:       x.y; // error
           ^ object type

Error: tagged_union.js:180
180:       x.z; // error
             ^ property `z`. Property not found in
180:       x.z; // error
           ^ object type

Error: tagged_union.js:188
188:       x.z; // error
             ^ property `z`. Property not found in
188:       x.z; // error
           ^ object type

Error: tagged_union.js:190
190:       x.y; // error: x.foo could be a string
             ^ property `y`. Property not found in
190:       x.y; // error: x.foo could be a string
           ^ object type

Error: tagged_union.js:191
191:       x.z; // error: could still be either case (if foo was a different number)
             ^ property `z`. Property not found in
191:       x.z; // error: could still be either case (if foo was a different number)
           ^ object type

Error: tagged_union.js:196
196:       x.y; // error
             ^ property `y`. Property not found in
196:       x.y; // error
           ^ object type

Error: tagged_union.js:199
199:       x.z; // error
             ^ property `z`. Property not found in
199:       x.z; // error
           ^ object type

Error: tagged_union.js:207
207:       x.z; // error
             ^ property `z`. Property not found in
207:       x.z; // error
           ^ object type

Error: tagged_union.js:209
209:       x.y; // error: x.foo could be a string
             ^ property `y`. Property not found in
209:       x.y; // error: x.foo could be a string
           ^ object type

Error: tagged_union.js:210
210:       x.z; // error: could still be either case (if foo was a different number)
             ^ property `z`. Property not found in
210:       x.z; // error: could still be either case (if foo was a different number)
           ^ object type

Error: tagged_union.js:215
215:       x.y; // error
             ^ property `y`. Property not found in
215:       x.y; // error
           ^ object type

Error: tagged_union.js:217
217:       x.y; // error: x.foo could be a different string
             ^ property `y`. Property not found in
217:       x.y; // error: x.foo could be a different string
           ^ object type

Error: tagged_union.js:218
218:       x.z; // error: x.foo could be a number
             ^ property `z`. Property not found in
218:       x.z; // error: x.foo could be a number
           ^ object type

Error: tagged_union.js:228
228:       x.y; // error: flow isn't smart enough to figure this out yet
             ^ property `y`. Property not found in
228:       x.y; // error: flow isn't smart enough to figure this out yet
           ^ object type

Error: tagged_union.js:229
229:       x.z; // error
             ^ property `z`. Property not found in
229:       x.z; // error
           ^ object type

Error: tagged_union.js:237
237:       x.z; // error
             ^ property `z`. Property not found in
237:       x.z; // error
           ^ object type

Error: tagged_union.js:240
240:       x.y; // error
             ^ property `y`. Property not found in
240:       x.y; // error
           ^ object type

Error: tagged_union.js:244
244:       x.y; // error
             ^ property `y`. Property not found in
244:       x.y; // error
           ^ object type

Error: tagged_union.js:247
247:       x.z; // error
             ^ property `z`. Property not found in
247:       x.z; // error
           ^ object type

Error: tagged_union.js:255
255:       x.z; // error
             ^ property `z`. Property not found in
255:       x.z; // error
           ^ object type

Error: tagged_union.js:258
258:       x.y; // error
             ^ property `y`. Property not found in
258:       x.y; // error
           ^ object type

Error: tagged_union.js:262
262:       x.y; // error
             ^ property `y`. Property not found in
262:       x.y; // error
           ^ object type

Error: tagged_union.js:265
265:       x.z; // error
             ^ property `z`. Property not found in
265:       x.z; // error
           ^ object type

Error: typeof.js:5
  5:     x[0]; // error for boolean, not number
         ^^^^ access of computed property/element. Indexable signature not found in
  5:     x[0]; // error for boolean, not number
         ^ Boolean

Error: typeof.js:12
 12:     return x; // error, null
                ^ null. This type is incompatible with the expected return type of
  9: function bar(): number {
                     ^^^^^^ number

Error: typeof.js:23
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^^^^^^^^^^^^ call of method `stuff`. Function cannot be called on possibly undefined value
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^^^^^^^ undefined

Error: typeof.js:23
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^^^^^^^^^^^^ call of method `stuff`. Method cannot be called on possibly undefined value
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^ undefined

Error: typeof.js:26
 26:   BAZ.stuff; // error, could be undefined
           ^^^^^ property `stuff`. Property cannot be accessed on possibly undefined value
 26:   BAZ.stuff; // error, could be undefined
       ^^^ undefined

Error: typeof.js:30
 30:     BAZ.stuff(123); // error, refinement is gone
         ^^^^^^^^^^^^^^ call of method `stuff`. Function cannot be called on possibly undefined value
 30:     BAZ.stuff(123); // error, refinement is gone
         ^^^^^^^^^ undefined

Error: typeof.js:49
 49:   if (typeof x === "foo") { // error
                        ^^^^^ string literal `foo`. This value is not a valid `typeof` return value

Error: typeof.js:61
 61:   if (typeof x === `foo`) { // error
                        ^^^^^ string literal `foo`. This value is not a valid `typeof` return value

Error: typeof.js:69
 69:     (Foo: empty); // error, Foo is a class
          ^^^ class type: Foo. This type is incompatible with
 69:     (Foo: empty); // error, Foo is a class
               ^^^^^ empty

Error: typeof.js:77
 77:     (x: empty); // error
          ^ Foo. This type is incompatible with
 77:     (x: empty); // error
             ^^^^^ empty

Error: undef.js:31
 31:     var y = x * 1000;
                 ^ null. The operand of an arithmetic operation must be a number.

Error: undef.js:38
 38:     var y = x * 1000;
                 ^ null. The operand of an arithmetic operation must be a number.

Error: undef.js:44
 44:     var y = x.x * 1000;
                 ^^^ null. The operand of an arithmetic operation must be a number.

Error: undef.js:51
 51:     var y = x.x * 1000;
                 ^^^ null. The operand of an arithmetic operation must be a number.

Error: undef.js:69
 69:     var b = y * 1000; // error
                 ^ null. The operand of an arithmetic operation must be a number.

Error: undef.js:69
 69:     var b = y * 1000; // error
                 ^ undefined. The operand of an arithmetic operation must be a number.

Error: undef.js:74
 74:   if (100 * undefined) {
                 ^^^^^^^^^ undefined. The operand of an arithmetic operation must be a number.

Error: undef.js:77
 77:   if (undefined * 100) {
           ^^^^^^^^^ undefined. The operand of an arithmetic operation must be a number.

Error: union.js:7
  7:     x[0]; // error on boolean
         ^^^^ access of computed property/element. Indexable signature not found in
  7:     x[0]; // error on boolean
         ^ Boolean

Error: union.js:13
 13:     x[0]; // error on number
         ^^^^ access of computed property/element. Indexable signature not found in
 13:     x[0]; // error on number
         ^ Number

Error: union.js:19
 19:     x[0]; // error on number
         ^^^^ access of computed property/element. Indexable signature not found in
 19:     x[0]; // error on number
         ^ Number

Error: void.js:31
 31:     var y = x * 1000;
                 ^ null. The operand of an arithmetic operation must be a number.

Error: void.js:38
 38:     var y = x * 1000;
                 ^ null. The operand of an arithmetic operation must be a number.

Error: void.js:44
 44:     var y = x.x * 1000;
                 ^^^ null. The operand of an arithmetic operation must be a number.

Error: void.js:51
 51:     var y = x.x * 1000;
                 ^^^ null. The operand of an arithmetic operation must be a number.

Error: void.js:56
 56:   if (x !== null && x !== void(x * 1000)) {
                                    ^ undefined. The operand of an arithmetic operation must be a number.

Error: void.js:62
 62:   if (x === null || x === void(x * 1000)) {
                                    ^ undefined. The operand of an arithmetic operation must be a number.

Error: void.js:69
 69:   if (x.x !== null && x.x !== void(x.x * 1000)) {
                                        ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: void.js:75
 75:   if (x.x === null || x.x === void(x.x * 1000)) {
                                        ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: void.js:82
 82:   if (100 * void(0)) {
                 ^^^^^^^ undefined. The operand of an arithmetic operation must be a number.

Error: void.js:85
 85:   if (void(0) * 100) {
           ^^^^^^^ undefined. The operand of an arithmetic operation must be a number.


Found 190 errors
