Error ---------------------------------------------------------------------------------------------- assignment.js:16:14

Cannot assign `x.parent` to `x` because null or undefined [1] is incompatible with `Bar` [2]. [incompatible-type]

   assignment.js:16:14
   16|   while (x = x.parent) { // can't assign x to ?Bar
                    ^^^^^^^^

References:
   assignment.js:11:11
   11|   parent: ?Bar;
                 ^^^^ [1]
   assignment.js:15:19
   15| function bar0(x : Bar) {
                         ^^^ [2]


Error ---------------------------------------------------------------------------------------------- assignment.js:22:16

Cannot get `x.parent` because property `parent` is missing in null or undefined [1]. [incompatible-use]

   assignment.js:22:16
   22|   while (x = x.parent) { // x.parent might be null
                      ^^^^^^

References:
   assignment.js:21:19
   21| function bar1(x : ?Bar) {
                         ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- assignment.js:29:14

Cannot assign `y.parent` to `y` because null or undefined [1] is incompatible with `Bar` [2]. All writes to `y` must be
compatible with the type of its initializer [3]. Add an annotation to `y` [3] if a different type is desired.
[incompatible-type]

   assignment.js:29:14
   29|   while (y = y.parent) { // constrain write error
                    ^^^^^^^^

References:
   assignment.js:11:11
   11|   parent: ?Bar;
                 ^^^^ [1]
   assignment.js:27:19
   27| function bar2(x : Bar) {
                         ^^^ [2]
   assignment.js:28:7
   28|   var y = x;
             ^ [3]


Error ----------------------------------------------------------------------------------------------- assignment.js:37:9

Cannot assign `null` to `x` because null [1] is incompatible with number [2]. All writes to `x` must be compatible with
the type of its initializer [3]. Add an annotation to `x` [3] if a different type is desired. [incompatible-type]

   assignment.js:37:9
   37|     x = null; // constrain write error
               ^^^^ [1]

References:
   assignment.js:35:11
   35|   let x = 3;
                 ^ [2]
   assignment.js:35:7
   35|   let x = 3;
             ^ [3]


Error ----------------------------------------------------------------------------------------------------- bool.js:12:5

Cannot get `x[0]` because null or undefined [1] does not have properties. [incompatible-use]

   bool.js:12:5
   12|   x[0]; // error on null and undefined
           ^

References:
   bool.js:3:17
    3| function foo(x: ?boolean) {
                       ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- bool.js:18:9

Cannot get `x[0]` because null or undefined [1] does not have properties. [incompatible-use]

   bool.js:18:9
   18|       x[0]; // error on null and undefined
               ^

References:
   bool.js:15:17
   15| function bar(x: ?boolean) {
                       ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- bool.js:24:7

Cannot use operator `*` with operands number [1] and boolean [2] [unsafe-arithmetic]

   bool.js:24:7
   24|   if (100 * false) {
             ^^^^^^^^^^^

References:
   bool.js:24:7
   24|   if (100 * false) {
             ^^^ [1]
   bool.js:24:13
   24|   if (100 * false) {
                   ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- bool.js:27:7

Cannot use operator `*` with operands boolean [1] and number [2] [unsafe-arithmetic]

   bool.js:27:7
   27|   if (false * 100) {
             ^^^^^^^^^^^

References:
   bool.js:27:7
   27|   if (false * 100) {
             ^^^^^ [1]
   bool.js:27:15
   27|   if (false * 100) {
                     ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- bool.js:37:14

Cannot get `x.result` because property `result` is missing in object type [1]. [prop-missing]

   bool.js:37:14
   37|     return x.result; // error
                    ^^^^^^

References:
   bool.js:33:48
   33|   function(x: { done: true, result: string } | { done: false }) {
                                                      ^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- bool.js:44:14

Cannot get `x.result` because property `result` is missing in object type [1]. [prop-missing]

   bool.js:44:14
   44|     return x.result; // error
                    ^^^^^^

References:
   bool.js:40:48
   40|   function(x: { done: true, result: string } | { done: false }) {
                                                      ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- cond_expr.js:2:4

Cannot get `a.q` because property `q` is missing in object literal [1]. [prop-missing]

   cond_expr.js:2:4
   2| (a.q ? a.q : "foo");
         ^

References:
   cond_expr.js:1:9
   1| var a = { p: 0 };
              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- cond_expr.js:3:4

Cannot get `a.q` because property `q` is missing in object literal [1]. [prop-missing]

   cond_expr.js:3:4
   3| (a.q: mixed); // An error here
         ^

References:
   cond_expr.js:1:9
   1| var a = { p: 0 };
              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- cond_expr.js:6:7

Cannot get `b.q` because property `q` is missing in object literal [1]. [prop-missing]

   cond_expr.js:6:7
   6| if (b.q) {} else {};
            ^

References:
   cond_expr.js:5:9
   5| var b = { p: 0 };
              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- cond_expr.js:7:4

Cannot get `b.q` because property `q` is missing in object literal [1]. [prop-missing]

   cond_expr.js:7:4
   7| (b.q: mixed); // is an error here
         ^

References:
   cond_expr.js:5:9
   5| var b = { p: 0 };
              ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:11:25

Cannot call `getTypeASTName` with `typeAST.type` bound to `typeAST` because object type [1] is incompatible with
`Type` [2]. [incompatible-call]

   cond_prop.js:11:25
   11|   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^

References:
   cond_prop.js:6:66
    6| type NonNullType = {kind: 'NonNullType', type: Name | ListType | BadType};
                                                                        ^^^^^^^ [1]
   cond_prop.js:9:34
    9| function getTypeASTName(typeAST: Type): string {
                                        ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:19:14

Cannot get `x.result` because property `result` is missing in object type [1]. [prop-missing]

   cond_prop.js:19:14
   19|     return x.result; // error
                    ^^^^^^

References:
   cond_prop.js:15:47
   15|   function (x: {done: true, result: string} | {done: false}) {
                                                     ^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:24:16

Cannot get `x.result` because property `result` is missing in object type [1]. [prop-missing]

   cond_prop.js:24:16
   24|       return x.result; // error, consider { foo: "herp", done: "derp" }
                      ^^^^^^

References:
   cond_prop.js:22:47
   22|   function (x: {done: true, result: string} | {foo: string}) {
                                                     ^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:26:14

Cannot get `x.result` because property `result` is missing in object type [1]. [prop-missing]

   cond_prop.js:26:14
   26|     return x.result; // error
                    ^^^^^^

References:
   cond_prop.js:22:47
   22|   function (x: {done: true, result: string} | {foo: string}) {
                                                     ^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:34:11

Cannot get `t.bar` because property `bar` (did you mean `baz`?) is missing in object type [1]. [prop-missing]

   cond_prop.js:34:11
   34|         t.bar as string; // error, consider { baz: "x", quux: "y", foo: "boom" }
                 ^^^

References:
   cond_prop.js:32:38
   32|     function testAlwaysTruthyProp(t: T) {
                                            ^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:44:11

Cannot get `t.foo` because property `foo` is missing in object type [1]. [prop-missing]

   cond_prop.js:44:11
   44|         t.foo as Object; // error, consider { baz: "x", quux: "y", bar: "boom" }
                 ^^^

References:
   cond_prop.js:42:41
   42|     function testSometimesTruthyProp(t: T) {
                                               ^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:46:11

Cannot get `t.quux` because property `quux` is missing in object type [1]. [prop-missing]

   cond_prop.js:46:11
   46|         t.quux as string; // error, consider { foo: {}, bar: "" }
                 ^^^^

References:
   cond_prop.js:42:41
   42|     function testSometimesTruthyProp(t: T) {
                                               ^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:52:11

Cannot get `o.p` because property `p` is missing in null [1]. [incompatible-use]

   cond_prop.js:52:11
   52|     if (o.p) {
                 ^

References:
   cond_prop.js:51:16
   51|   function (o: null | {}) {
                      ^^^^ [1]


Error ----------------------------------------------------------------------------------------------- cond_prop.js:52:11

Cannot get `o.p` because property `p` is missing in object type [1]. [prop-missing]

   cond_prop.js:52:11
   52|     if (o.p) {
                 ^

References:
   cond_prop.js:51:23
   51|   function (o: null | {}) {
                             ^^ [1]


Error -------------------------------------------------------------------------------------------------------- eq.js:5:9

Cannot compare string [1] to number [2] with a non-strict equality check. Make sure the arguments are valid, or try
using strict equality (`===` or `!==`) instead. [invalid-compare]

   eq.js:5:9
   5|     if (x == y) {} // error, string & number are not comparable (unsafe casting)
              ^

References:
   eq.js:4:15
   4|   function(x: string, y: number) {
                    ^^^^^^ [1]
   eq.js:4:26
   4|   function(x: string, y: number) {
                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- eq.js:19:9

Cannot compare string literal `foo` [1] to number [2] with a non-strict equality check. Make sure the arguments are
valid, or try using strict equality (`===` or `!==`) instead. [invalid-compare]

   eq.js:19:9
   19|     if (x.y == 123) {} // error
               ^^^

References:
   eq.js:18:20
   18|   function(x: { y: 'foo' } | { y: 'bar' }) {
                          ^^^^^ [1]
   eq.js:19:16
   19|     if (x.y == 123) {} // error
                      ^^^ [2]


Error ------------------------------------------------------------------------------------------------------- eq.js:19:9

Cannot compare string literal `bar` [1] to number [2] with a non-strict equality check. Make sure the arguments are
valid, or try using strict equality (`===` or `!==`) instead. [invalid-compare]

   eq.js:19:9
   19|     if (x.y == 123) {} // error
               ^^^

References:
   eq.js:18:35
   18|   function(x: { y: 'foo' } | { y: 'bar' }) {
                                         ^^^^^ [1]
   eq.js:19:16
   19|     if (x.y == 123) {} // error
                      ^^^ [2]


Error ------------------------------------------------------------------------------------------------------ eq.js:20:17

Cannot compare number [1] with property `y` of `x` [2] because: [incompatible-type]
 - Either cannot compare number [1] with property `y` of `x` [2] because number [1] is incompatible with string literal
   `foo` [3].
 - Or cannot compare number [1] with property `y` of `x` [2] because number [1] is incompatible with string literal
   `bar` [4].

   eq.js:20:17
   20|     if (x.y === 123) {} // error
                       ^^^ [1]

References:
   eq.js:18:12
   18|   function(x: { y: 'foo' } | { y: 'bar' }) {
                  ^ [2]
   eq.js:18:20
   18|   function(x: { y: 'foo' } | { y: 'bar' }) {
                          ^^^^^ [3]
   eq.js:18:35
   18|   function(x: { y: 'foo' } | { y: 'bar' }) {
                                         ^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- exists.js:18:9

Cannot get `TDR.current` because property `current` is not readable. [cannot-read]

   18| if (TDR.current) { }
               ^^^^^^^


Error ----------------------------------------------------------------------------------------- flow_to_general.js:15:11

Invalid check of string literal `C` against optional nullable `T` [1] because string literal `C` [2] is incompatible
with `T` [3]. [incompatible-type]

   flow_to_general.js:15:11
   15| if (p === 'C') {
                 ^^^ [2]

References:
   flow_to_general.js:12:21
   12| declare var x: {p?: ?T};
                           ^^ [1]
   flow_to_general.js:12:22
   12| declare var x: {p?: ?T};
                            ^ [3]


Error ------------------------------------------------------------------------------------------------------ fn.js:14:22

Cannot call `takesBotFunction` with `x` bound to `x` because the parameter types of an unknown function [1] are unknown.
[incompatible-use]

   fn.js:14:22
   14|     takesBotFunction(x); //error
                            ^

References:
   fn.js:12:17
   12| function fun(x: mixed) {
                       ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:20:22

Cannot call `takesTopFunction` with `x` bound to `x` because the parameter types of an unknown function [1] are unknown.
[incompatible-use]

   fn.js:20:22
   20|     takesTopFunction(x); // error
                            ^

References:
   fn.js:18:18
   18| function fun2(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:26:22

Cannot call `takesMidFunction` with `x` bound to `x` because the parameter types of an unknown function [1] are unknown.
[incompatible-use]

   fn.js:26:22
   26|     takesMidFunction(x); // error
                            ^

References:
   fn.js:24:18
   24| function fun3(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:32:23

Cannot call `takesMidFunction2` with `x` bound to `x` because the parameter types of an unknown function [1] are
unknown. [incompatible-use]

   fn.js:32:23
   32|     takesMidFunction2(x); // error
                             ^

References:
   fn.js:30:18
   30| function fun4(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:38:24

Cannot call `takesHigherOrderFn` with `x` bound to `x` because the parameter types of an unknown function [1] are
unknown. [incompatible-use]

   fn.js:38:24
   38|     takesHigherOrderFn(x); // error
                              ^

References:
   fn.js:36:18
   36| function fun5(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:44:25

Cannot call `takesHigherOrderFn2` with `x` bound to `x` because the parameter types of an unknown function [1] are
unknown. [incompatible-use]

   fn.js:44:25
   44|     takesHigherOrderFn2(x); // error
                               ^

References:
   fn.js:42:18
   42| function fun6(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:50:21

Cannot call `takesMultiArgFn` with `x` bound to `x` because the parameter types of an unknown function [1] are unknown.
[incompatible-use]

   fn.js:50:21
   50|     takesMultiArgFn(x); // error
                           ^

References:
   fn.js:48:18
   48| function fun7(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:56:22

Cannot call `takesMultiArgFn2` with `x` bound to `x` because the parameter types of an unknown function [1] are unknown.
[incompatible-use]

   fn.js:56:22
   56|     takesMultiArgFn2(x); // error
                            ^

References:
   fn.js:54:18
   54| function fun8(x: mixed) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:62:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:62:5
   62|     x(y); // error
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:63:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:63:5
   63|     x(z);
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:64:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:64:5
   64|     x(x); // error
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:65:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:65:5
   65|     x(1,2,3,4,5); //error
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:66:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:66:5
   66|     x(...[1,2]); //error
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:67:5

Cannot call `x` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:67:5
   67|     x();
           ^

References:
   fn.js:60:18
   60| function fun9(x: mixed, y : mixed, z : empty) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fn.js:73:17

Cannot call `obj.field` because the parameter types of an unknown function [1] are unknown. [incompatible-use]

   fn.js:73:17
   73|   const f = obj.field(0); // error
                       ^^^^^

References:
   fn.js:72:12
   72| if (typeof obj.field === 'function') {
                  ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- fn.js:81:7

Cannot get `x.foo` because property `foo` is missing in unknown function [1]. [prop-missing]

   fn.js:81:7
   81|     x.foo; // error
             ^^^

References:
   fn.js:81:5
   81|     x.foo; // error
           ^ [1]


Error --------------------------------------------------------------------------------------- func_call_precision.js:8:2

Cannot cast `x` to number because null [1] is incompatible with number [2]. [incompatible-cast]

   func_call_precision.js:8:2
   8| (x: number); // error
       ^

References:
   func_call_precision.js:1:9
   1| let x = null;
              ^^^^ [1]
   func_call_precision.js:8:5
   8| (x: number); // error
          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------- func_call_recursive.js:10:4

Cannot cast `x` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   func_call_recursive.js:10:4
   10|   (x: number);
          ^

References:
   func_call_recursive.js:1:8
    1| var x: ?number = 0;
              ^^^^^^^ [1]
   func_call_recursive.js:10:7
   10|   (x: number);
             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- hasOwnProperty.js:4:5

Cannot call `x.y` because undefined [1] is not a function. [not-a-function]

   hasOwnProperty.js:4:5
   4|   x.y(); // error: could be undefined
          ^

References:
   hasOwnProperty.js:3:20
   3| function foo(x:{y?:() => void}) {
                         ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- hasOwnProperty.js:6:7

Cannot call `x.y` because undefined [1] is not a function. [not-a-function]

   hasOwnProperty.js:6:7
   6|     x.y(); // error: still could be undefined
            ^

References:
   hasOwnProperty.js:3:20
   3| function foo(x:{y?:() => void}) {
                         ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- hasOwnProperty.js:9:7

Cannot call `x.z` because property `z` is missing in object type [1]. [prop-missing]

   hasOwnProperty.js:9:7
   9|     x.z(); // error: unreachable, but we don't help you here
            ^

References:
   hasOwnProperty.js:3:16
   3| function foo(x:{y?:() => void}) {
                     ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- heap_defassign.js:8:21

Cannot assign `obj.p` to `x` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:8:21
   8|     var x: number = obj.p;      // error, obj.p : number | string
                          ^^^^^

References:
   heap_defassign.js:1:26
   1| type Obj = { p: number | string }
                               ^^^^^^ [1]
   heap_defassign.js:8:12
   8|     var x: number = obj.p;      // error, obj.p : number | string
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:14:21

Cannot assign `obj.p` to `x` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:14:21
   14|     var x: number = obj.p;      // error, obj.p : number | string
                           ^^^^^

References:
   heap_defassign.js:1:26
    1| type Obj = { p: number | string }
                                ^^^^^^ [1]
   heap_defassign.js:14:12
   14|     var x: number = obj.p;      // error, obj.p : number | string
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:20:21

Cannot assign `obj.p` to `x` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:20:21
   20|     var x: number = obj.p;      // error, obj.p : number | string
                           ^^^^^

References:
   heap_defassign.js:1:26
    1| type Obj = { p: number | string }
                                ^^^^^^ [1]
   heap_defassign.js:20:12
   20|     var x: number = obj.p;      // error, obj.p : number | string
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:28:21

Cannot assign `obj.p` to `y` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:28:21
   28|     var y: number = obj.p;      // error, obj.p : number | string
                           ^^^^^

References:
   heap_defassign.js:1:26
    1| type Obj = { p: number | string }
                                ^^^^^^ [1]
   heap_defassign.js:28:12
   28|     var y: number = obj.p;      // error, obj.p : number | string
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:36:21

Cannot assign `obj.p` to `y` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:36:21
   36|     var y: number = obj.p;      // error, obj.p : number | string
                           ^^^^^

References:
   heap_defassign.js:1:26
    1| type Obj = { p: number | string }
                                ^^^^^^ [1]
   heap_defassign.js:36:12
   36|     var y: number = obj.p;      // error, obj.p : number | string
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:60:25

Cannot assign `obj.p` to `y` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:60:25
   60|         var y: number = obj.p;  // error, string ~/~ number
                               ^^^^^

References:
   heap_defassign.js:51:17
   51|         obj.p = 'hey';
                       ^^^^^ [1]
   heap_defassign.js:60:16
   60|         var y: number = obj.p;  // error, string ~/~ number
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:60:25

Cannot assign `obj.p` to `y` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:60:25
   60|         var y: number = obj.p;  // error, string ~/~ number
                               ^^^^^

References:
   heap_defassign.js:54:17
   54|         obj.p = 'hey';
                       ^^^^^ [1]
   heap_defassign.js:60:16
   60|         var y: number = obj.p;  // error, string ~/~ number
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:63:20

Cannot assign `obj.p` to `z` because number [1] is incompatible with string [2]. [incompatible-type]

   heap_defassign.js:63:20
   63|     var z:string = obj.p;       // error, number ~/~ string
                          ^^^^^

References:
   heap_defassign.js:61:17
   61|         obj.p = 42;
                       ^^ [1]
   heap_defassign.js:63:11
   63|     var z:string = obj.p;       // error, number ~/~ string
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ heap_defassign.js:83:21

Cannot assign `obj.p` to `z` because string [1] is incompatible with number [2]. [incompatible-type]

   heap_defassign.js:83:21
   83|     var z: number = obj.p;      // error, (number | string) ~/~ number
                           ^^^^^

References:
   heap_defassign.js:1:26
    1| type Obj = { p: number | string }
                                ^^^^^^ [1]
   heap_defassign.js:83:12
   83|     var z: number = obj.p;      // error, (number | string) ~/~ number
                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------- inclusion_check_widening.js:36:11

Invalid check of string literal `val` against null [1] because string literal `val` [2] is incompatible with null [1].
[incompatible-type]

   inclusion_check_widening.js:36:11
   36| if (y === 'val') {} // error
                 ^^^^^ [2]

References:
   inclusion_check_widening.js:31:11
   31| const x = null;
                 ^^^^ [1]


Error -------------------------------------------------------------------------------- inclusion_check_widening.js:44:14

Invalid check of string literal `a` against key set [1] because property `a` is missing in object type [2].
[prop-missing]

   inclusion_check_widening.js:44:14
   44| if (key2 === 'a') {} // error (key2 does not include 'a')
                    ^^^

References:
   inclusion_check_widening.js:41:28
   41| type V<T: {...}> = { key2: $Keys<T> };
                                  ^^^^^^^^ [1]
   inclusion_check_widening.js:42:23
   42| declare var column: V<{...}>;
                             ^^^^^ [2]


Error -------------------------------------------------------------------------------- inclusion_check_widening.js:59:18

Invalid check of number literal `0` against nullable `C` [1] because number literal `0` [2] is incompatible with
`C` [3]. [incompatible-type]

   inclusion_check_widening.js:59:18
   59|         prop !== 0 // error (0 incompatible with C)
                        ^ [2]

References:
   inclusion_check_widening.js:50:22
   50| type State = { prop: ?C };
                            ^^ [1]
   inclusion_check_widening.js:50:23
   50| type State = { prop: ?C };
                             ^ [3]


Error -------------------------------------------------------------------------------------------- invalidation.js:13:12

Cannot call `v.f` because mixed [1] is not a function. [not-a-function]

   invalidation.js:13:12
   13|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:13:12

Cannot call `v.f` because undefined [1] is not a function. [not-a-function]

   invalidation.js:13:12
   13|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:19:12

Cannot call `v.f` because mixed [1] is not a function. [not-a-function]

   invalidation.js:19:12
   19|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:19:12

Cannot call `v.f` because undefined [1] is not a function. [not-a-function]

   invalidation.js:19:12
   19|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:25:12

Cannot call `v.f` because mixed [1] is not a function. [not-a-function]

   invalidation.js:25:12
   25|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:25:12

Cannot call `v.f` because undefined [1] is not a function. [not-a-function]

   invalidation.js:25:12
   25|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:31:12

Cannot call `v.f` because mixed [1] is not a function. [not-a-function]

   invalidation.js:31:12
   31|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:31:12

Cannot call `v.f` because undefined [1] is not a function. [not-a-function]

   invalidation.js:31:12
   31|   return v.f(); // error: trying to still use the refinement.
                  ^

References:
   invalidation.js:6:16
    6| const v: { f?: mixed } = {};
                      ^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:44:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:44:51
   44|   if (1)                                      a.b.c;   // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:46:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:46:51
   46|   if (a.b) { f();                             a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:53:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:53:51
   53|   if (a.b) { true && f();                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:54:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:54:51
   54|   if (a.b) { f() && true;                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:55:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:55:51
   55|   if (a.b) { false || f();                    a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:56:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:56:51
   56|   if (a.b) { f() || false;                    a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:57:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:57:51
   57|   if (a.b) { null ?? f();                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:58:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:58:51
   58|   if (a.b) { f() ?? true;                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:60:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:60:51
   60|   if (a.b) { p ? f() : 0;                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:61:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:61:51
   61|   if (a.b) { p ? 1 : f();                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:62:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:62:51
   62|   if (a.b) { f() ? 1 : 0;                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:64:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:64:51
   64|   if (a.b) { if (p) f();                      a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:65:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:65:51
   65|   if (a.b) { if (p); else f();                a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:66:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:66:51
   66|   if (a.b) { if (f());                        a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:69:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:69:56
   69|   if (a.b) { switch (p) { case true: f(); }        a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:70:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:70:56
   70|   if (a.b) { switch (p) { case true: f(); break; } a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:71:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:71:56
   71|   if (a.b) { switch (p) { default: f(); }          a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:72:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:72:56
   72|   if (a.b) { switch (p) { default: f(); break; }   a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:73:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:73:56
   73|   if (a.b) { switch (f()) {}                       a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:74:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:74:56
   74|   if (a.b) { switch (f()) { case true: }           a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:75:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:75:56
   75|   if (a.b) { switch (f()) { case true: break; }    a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:76:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:76:56
   76|   if (a.b) { switch (f()) { default: }             a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:77:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:77:56
   77|   if (a.b) { switch (f()) { default: break; }      a.b.c; } // error
                                                              ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:81:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:81:51
   81|   if (a.b) { while (p) f();                   a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:82:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:82:51
   82|   if (a.b) { while (f());                     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:83:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:83:51
   83|   if (a.b) { do f(); while (p);               a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:84:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:84:51
   84|   if (a.b) { do; while (f());                 a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:85:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:85:51
   85|   if (a.b) { for (; p;) f();                  a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:86:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:86:51
   86|   if (a.b) { for (; p; f());                  a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:87:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:87:51
   87|   if (a.b) { for (; f(););                    a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:88:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:88:51
   88|   if (a.b) { for (f(); p;);                   a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:89:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:89:51
   89|   if (a.b) { for (i1 in y) f();               a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:90:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:90:51
   90|   if (a.b) { for (i2 in ff());                a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:91:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:91:51
   91|   if (a.b) { for (i3 of y) f();               a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:92:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:92:51
   92|   if (a.b) { for (i4 of ff());                a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:96:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:96:51
   96|   if (a.b) { while (p) { f(); continue; }     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:97:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:97:51
   97|   if (a.b) { while (p) { f(); break;    }     a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:98:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:98:51
   98|   if (a.b) { while (p) { f(); return;   }     a.b.c; } // ideally ok, error acceptable
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- invalidation.js:99:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:99:51
   99|   if (a.b) { while (f()) { continue; }        a.b.c; } // error
                                                         ^

References:
   invalidation.js:37:15
   37| type A = {b?: {c: boolean}};
                     ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:100:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:100:51
   100|   if (a.b) { while (f()) { break;    }        a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:101:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:101:51
   101|   if (a.b) { while (f()) { return;   }        a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:103:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:103:51
   103|   if (a.b) { do { f(); continue; } while (p); a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:104:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:104:51
   104|   if (a.b) { do { f(); break;    } while (p); a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:105:47

Unreachable code. [unreachable-code]

   105|   if (a.b) { do { f(); return;   } while (p); a.b.c; } // error[unreachable-code]
                                                      ^^^^^^


Error ------------------------------------------------------------------------------------------- invalidation.js:106:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:106:51
   106|   if (a.b) { do { continue; } while (f());    a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:107:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:107:51
   107|   if (a.b) { do { break;    } while (f());    a.b.c; } // ideally ok, error acceptable
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:108:47

Unreachable code. [unreachable-code]

   108|   if (a.b) { do { return;   } while (f());    a.b.c; } // error[unreachable-code]
                                                      ^^^^^^


Error ------------------------------------------------------------------------------------------- invalidation.js:110:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:110:51
   110|   if (a.b) { for (; p;) { f(); continue; }    a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:111:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:111:51
   111|   if (a.b) { for (; p;) { f(); break;    }    a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:112:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:112:51
   112|   if (a.b) { for (; p;) { f(); return;   }    a.b.c; } // ideally ok, error acceptable
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:113:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:113:51
   113|   if (a.b) { for (; p; f()) continue;         a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:114:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:114:51
   114|   if (a.b) { for (; p; f()) break;            a.b.c; } // ideally ok, error acceptable
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:115:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:115:51
   115|   if (a.b) { for (; p; f()) return;           a.b.c; } // ideally ok, error acceptable
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:116:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:116:51
   116|   if (a.b) { for (; f();) continue;           a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:117:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:117:51
   117|   if (a.b) { for (; f();) break;              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:118:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:118:51
   118|   if (a.b) { for (; f();) return;             a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:119:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:119:51
   119|   if (a.b) { for (f(); p;) continue;          a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:120:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:120:51
   120|   if (a.b) { for (f(); p;) break;             a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:121:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:121:51
   121|   if (a.b) { for (f(); p;) return;            a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:123:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:123:52
   123|   if (a.b) { for (i5 in y) { f(); continue; }  a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:124:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:124:52
   124|   if (a.b) { for (i6 in y) { f(); break;    }  a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:125:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:125:52
   125|   if (a.b) { for (i7 in y) { f(); return;   }  a.b.c; } // ideally ok, error acceptable
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:126:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:126:52
   126|   if (a.b) { for (i8 in ff()) continue;        a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:127:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:127:52
   127|   if (a.b) { for (i9 in ff()) break;           a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:128:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:128:52
   128|   if (a.b) { for (i10 in ff()) return;         a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:130:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:130:52
   130|   if (a.b) { for (i11 of y) { f(); continue; } a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:131:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:131:52
   131|   if (a.b) { for (i12 of y) { f(); break;    } a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:132:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:132:52
   132|   if (a.b) { for (i13 of y) { f(); return;   } a.b.c; } // ideally ok, error acceptable
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:133:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:133:52
   133|   if (a.b) { for (i14 of ff()) continue;       a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:134:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:134:52
   134|   if (a.b) { for (i15 of ff()) break;          a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:135:52

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:135:52
   135|   if (a.b) { for (i16 of ff()) return;         a.b.c; } // error
                                                           ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:145:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:145:56
   145|   if (a.b) { l: { f(); }                           a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:146:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:146:56
   146|   if (a.b) { l: { f(); break l; }                  a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:147:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:147:56
   147|   if (a.b) { l: if (p) { f(); break l; }           a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:149:52

Unreachable code. [unreachable-code]

   149|   l: if (a.b) { f(); break l;                      a.b.c; } // error[unreachable-code]
                                                           ^^^^^^


Error ------------------------------------------------------------------------------------------- invalidation.js:152:61

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:152:61
   152|   if (a.b) { l: switch (p) { case true: f(); break l; } a.b.c; } // error
                                                                    ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:153:61

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:153:61
   153|   if (a.b) { l: switch (p) { default: f(); break l; }   a.b.c; } // error
                                                                    ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:154:61

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:154:61
   154|   if (a.b) { l: switch (f()) { case true: break l; }    a.b.c; } // error
                                                                    ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:155:61

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:155:61
   155|   if (a.b) { l: switch (f()) { default: break l; }      a.b.c; } // error
                                                                    ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:159:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:159:56
   159|   if (a.b) { l: while (p) { f(); continue l; }     a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:160:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:160:56
   160|   if (a.b) { l: while (p) { f(); break l;    }     a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:161:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:161:56
   161|   if (a.b) { l: while (f()) { continue l; }        a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:162:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:162:56
   162|   if (a.b) { l: while (f()) { break l;    }        a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:164:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:164:56
   164|   if (a.b) { l: do { f(); continue l; } while (p); a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:165:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:165:56
   165|   if (a.b) { l: do { f(); break l;    } while (p); a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:166:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:166:56
   166|   if (a.b) { l: do { continue l; } while (f());    a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:167:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:167:56
   167|   if (a.b) { l: do { break l;    } while (f());    a.b.c; } // ideally ok, error acceptable
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:169:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:169:56
   169|   if (a.b) { l: for (; p;) { f(); continue l; }    a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:170:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:170:56
   170|   if (a.b) { l: for (; p;) { f(); break l;    }    a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:171:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:171:56
   171|   if (a.b) { l: for (; p; f()) continue l;         a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:172:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:172:56
   172|   if (a.b) { l: for (; p; f()) break l;            a.b.c; } // ideally ok, error acceptable
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:173:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:173:56
   173|   if (a.b) { l: for (; f();) continue l;           a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:174:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:174:56
   174|   if (a.b) { l: for (; f();) break l;              a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:175:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:175:56
   175|   if (a.b) { l: for (f(); p;) continue l;          a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:176:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:176:56
   176|   if (a.b) { l: for (f(); p;) break l;             a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:178:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:178:56
   178|   if (a.b) { l: for (i1 in y) { f(); continue l; } a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:179:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:179:56
   179|   if (a.b) { l: for (i2 in y) { f(); break l;    } a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:180:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:180:56
   180|   if (a.b) { l: for (i3 in ff()) continue l;       a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:181:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:181:56
   181|   if (a.b) { l: for (i4 in ff()) break l;          a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:183:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:183:56
   183|   if (a.b) { l: for (i5 of y) { f(); continue l; } a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:184:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:184:56
   184|   if (a.b) { l: for (i6 of y) { f(); break l;    } a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:185:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:185:56
   185|   if (a.b) { l: for (i7 of ff()) continue l;       a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:186:56

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:186:56
   186|   if (a.b) { l: for (i8 of ff()) break l;          a.b.c; } // error
                                                               ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:196:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:196:51
   196|   if (a.b) { delete x.b;                      a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:197:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:197:51
   197|   if (a.b) { x.b = y;                         a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:204:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:204:51
   204|   if (a.b) { true && delete x.b;              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:205:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:205:51
   205|   if (a.b) { delete x.b && true;              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:206:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:206:51
   206|   if (a.b) { true && (x.b = y);               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:207:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:207:51
   207|   if (a.b) { (x.b = y) && true;               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:209:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:209:51
   209|   if (a.b) { false || (x.b = y);              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:210:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:210:51
   210|   if (a.b) { (x.b = y) || false;              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:211:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:211:51
   211|   if (a.b) { null ?? (x.b = y);               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:212:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:212:51
   212|   if (a.b) { (x.b = y) ?? true;               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:214:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:214:51
   214|   if (a.b) { p ? (x.b = y) : 0;               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:215:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:215:51
   215|   if (a.b) { p ? 1 : (x.b = y);               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:216:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:216:51
   216|   if (a.b) { (x.b = y) ? 1 : 0;               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:218:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:218:51
   218|   if (a.b) { if (p) x.b = y;                  a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:219:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:219:51
   219|   if (a.b) { if (p); else x.b = y;            a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:220:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:220:51
   220|   if (a.b) { if (x.b = y);                    a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:223:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:223:60
   223|   if (a.b) { switch (p) { case true: x.b = y; }        a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:224:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:224:60
   224|   if (a.b) { switch (p) { case true: x.b = y; break; } a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:225:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:225:60
   225|   if (a.b) { switch (p) { default: x.b = y; }          a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:226:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:226:60
   226|   if (a.b) { switch (p) { default: x.b = y; break; }   a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:227:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:227:60
   227|   if (a.b) { switch (x.b = y) {}                       a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:228:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:228:60
   228|   if (a.b) { switch (x.b = y) { case true: }           a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:229:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:229:60
   229|   if (a.b) { switch (x.b = y) { case true: break; }    a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:230:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:230:60
   230|   if (a.b) { switch (x.b = y) { default: }             a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:231:60

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:231:60
   231|   if (a.b) { switch (x.b = y) { default: break; }      a.b.c; } // error
                                                                   ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:235:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:235:51
   235|   if (a.b) { while (p) x.b = y;               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:236:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:236:51
   236|   if (a.b) { while (x.b = y);                 a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:237:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:237:51
   237|   if (a.b) { do x.b = y; while (p);           a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:238:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:238:51
   238|   if (a.b) { do; while (x.b = y);             a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:239:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:239:51
   239|   if (a.b) { for (; p;) x.b = y;              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:240:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:240:51
   240|   if (a.b) { for (; p; x.b = y);              a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:241:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:241:51
   241|   if (a.b) { for (; x.b = y;);                a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:242:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:242:51
   242|   if (a.b) { for (x.b = y; p;);               a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:243:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:243:51
   243|   if (a.b) { for (i1 in y) x.b = y;           a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:244:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:244:51
   244|   if (a.b) { for (i2 in x.b = y);             a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:245:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:245:51
   245|   if (a.b) { for (i3 of y) x.b = y;           a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- invalidation.js:246:51

Cannot get `a.b.c` because property `c` is missing in undefined [1]. [incompatible-use]

   invalidation.js:246:51
   246|   if (a.b) { for (i4 of x.b = y);             a.b.c; } // error
                                                          ^

References:
   invalidation.js:37:15
    37| type A = {b?: {c: boolean}};
                      ^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- issue-7103.js:13:15

Cannot cast `box` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   issue-7103.js:13:15
   13|       return (box: empty).value;
                     ^^^

References:
   issue-7103.js:7:12
    7|   let box: Box = { type: "GOOD", value: t };
                  ^^^ [1]
   issue-7103.js:13:20
   13|       return (box: empty).value;
                          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- issue-7104.js:20:15

Cannot cast `box` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   issue-7104.js:20:15
   20|       return (box: empty).value; // error, but no underconstrained error
                     ^^^

References:
   issue-7104.js:3:12
    3|   let box: Box = { type: "GOOD", value: t };
                  ^^^ [1]
   issue-7104.js:20:20
   20|       return (box: empty).value; // error, but no underconstrained error
                          ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-7105.js:9:39

Cannot cast `box` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   issue-7105.js:9:39
   9|         yield { type: "DONE", value: (box: empty).value };
                                            ^^^

References:
   issue-7105.js:4:12
   4|   let box: Box = { type: "GOOD", value: t };
                 ^^^ [1]
   issue-7105.js:9:44
   9|         yield { type: "DONE", value: (box: empty).value };
                                                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ issue-7541.js:5:9

Cannot assign `2` to `a` because number [1] is incompatible with string [2]. All writes to `a` must be compatible with
the type of its initializer [3]. Add an annotation to `a` [3] if a different type is desired. [incompatible-type]

   issue-7541.js:5:9
   5|     a = 2;
              ^ [1]

References:
   issue-7541.js:2:11
   2|   let a = "a string";
                ^^^^^^^^^^ [2]
   issue-7541.js:2:7
   2|   let a = "a string";
            ^ [3]


Error ------------------------------------------------------------------------------------- missing-property-cond.js:2:9

Cannot get `o.p1` because property `p1` is missing in object type [1]. [prop-missing]

   missing-property-cond.js:2:9
   2|   if (o.p1) { // Error, testing for unknown property
              ^^

References:
   missing-property-cond.js:1:18
   1| function foo1(o: { x: number }) {
                       ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------- missing-property-cond.js:8:9

Cannot get `o.p2` because property `p2` is missing in object type [1]. [prop-missing]

   missing-property-cond.js:8:9
   8|   if (o.p2) { // Error, testing for unknown property
              ^^

References:
   missing-property-cond.js:7:18
   7| function foo2(o: { x: number }) {
                       ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ missing-property-cond.js:9:10

Cannot get `o.p2.x` because property `x` is missing in property `p2` of unknown type [1]. [incompatible-use]

   missing-property-cond.js:9:10
   9|     o.p2.x; // error, since o.p2's type is unknown (e.g., could be `number`)
               ^

References:
   missing-property-cond.js:8:7
   8|   if (o.p2) { // Error, testing for unknown property
            ^^^^ [1]


Error ------------------------------------------------------------------------------------ missing-property-cond.js:14:5

Cannot get `o.p3` because property `p3` is missing in object type [1]. [prop-missing]

   missing-property-cond.js:14:5
   14|   o.p3.x; // usual error outside conditional
           ^^

References:
   missing-property-cond.js:13:18
   13| function foo3(o: { x: number }) {
                        ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ missing-property-cond.js:18:9

Cannot get `o.p4` because property `p4` is missing in object type [1]. [prop-missing]

   missing-property-cond.js:18:9
   18|   if (o.p4) { // Error, testing for unknown property
               ^^

References:
   missing-property-cond.js:17:25
   17| function foo4(o: $Exact<{ x: number }>) {
                               ^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- missing-property-cond.js:21:10

Cannot get `o.p4.x` because property `x` is missing in `void` (due to access of non-existent property `p4`) [1].
[incompatible-use]

   missing-property-cond.js:21:10
   21|     o.p4.x; // error
                ^

References:
   missing-property-cond.js:18:7
   18|   if (o.p4) { // Error, testing for unknown property
             ^^^^ [1]


Error ------------------------------------------------------------------------------------ missing-property-cond.js:26:9

Cannot get `o.bar` because property `bar` is missing in mixed [1]. [incompatible-type]

   missing-property-cond.js:26:9
   26|   if (o.bar) {} // error, any lookup on mixed is unsafe
               ^^^

References:
   missing-property-cond.js:25:18
   25| function foo6(o: mixed) {
                        ^^^^^ [1]


Error ----------------------------------------------------------------------------------- missing-property-cond.js:30:16

Cannot get `o.bar` because property `bar` is missing in mixed [1]. [incompatible-type]

   missing-property-cond.js:30:16
   30|   if (typeof o.bar === 'string') {} // error
                      ^^^

References:
   missing-property-cond.js:29:18
   29| function foo7(o: mixed) {
                        ^^^^^ [1]


Error ----------------------------------------------------------------------------------- missing-property-cond.js:46:12

Cannot get `null.q` because property `q` is missing in null [1]. [incompatible-use]

   missing-property-cond.js:46:12
   46|   if (null.q) {} // error: property `q` on null
                  ^

References:
   missing-property-cond.js:46:7
   46|   if (null.q) {} // error: property `q` on null
             ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- mixed.js:8:17

Cannot call `takesString` with `x` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:8:17
   8|     takesString(x); // error
                      ^

References:
   mixed.js:7:7
   7|   if (typeof x === 'number') {
            ^^^^^^^^^^^^^^^^^^^^^ [1]
   mixed.js:4:25
   4| function takesString(x: string) {}
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- mixed.js:9:5

Cannot cast `!x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   mixed.js:9:5
   9|     !x as false; // error: we don't know the truthiness of x
          ^^ [1]

References:
   mixed.js:9:11
   9|     !x as false; // error: we don't know the truthiness of x
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:21:17

Cannot call `takesNumber` with `x` bound to `x` because string [1] is incompatible with number [2]. [incompatible-call]

   mixed.js:21:17
   21|     takesNumber(x); // error
                       ^

References:
   mixed.js:20:7
   20|   if (typeof x === 'string') {
             ^^^^^^^^^^^^^^^^^^^^^ [1]
   mixed.js:3:25
    3| function takesNumber(x: number) {}
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- mixed.js:22:5

Cannot cast `!x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   mixed.js:22:5
   22|     !x as false; // error: we don't know the truthiness of x
           ^^ [1]

References:
   mixed.js:22:11
   22|     !x as false; // error: we don't know the truthiness of x
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:34:17

Cannot call `takesString` with `x` bound to `x` because boolean [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:34:17
   34|     takesString(x); // error
                       ^

References:
   mixed.js:33:7
   33|   if (typeof x === 'boolean') {
             ^^^^^^^^^^^^^^^^^^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- mixed.js:35:5

Cannot cast `x` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   mixed.js:35:5
   35|     x as true; // error: we don't know the truthiness of x
           ^

References:
   mixed.js:33:7
   33|   if (typeof x === 'boolean') {
             ^^^^^^^^^^^^^^^^^^^^^^ [1]
   mixed.js:35:10
   35|     x as true; // error: we don't know the truthiness of x
                ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:47:17

Cannot call `takesString` with `x` bound to `x` because unknown function [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:47:17
   47|     takesString(x); // error
                       ^

References:
   mixed.js:45:17
   45| function fun(x: mixed) {
                       ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:53:17

Cannot call `takesString` with `x` bound to `x` because null [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:53:17
   53|     takesString(x); // error
                       ^

References:
   mixed.js:51:18
   51| function obj0(x: mixed) {
                        ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:53:17

Cannot call `takesString` with `x` bound to `x` because object [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:53:17
   53|     takesString(x); // error
                       ^

References:
   mixed.js:51:18
   51| function obj0(x: mixed) {
                        ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:59:17

Cannot call `takesString` with `x` bound to `x` because read-only array type [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:59:17
   59|     takesString(x); // error
                       ^

References:
   mixed.js:57:18
   57| function obj1(x: mixed) {
                        ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:65:17

Cannot call `takesString` with `x` bound to `x` because undefined [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:65:17
   65|     takesString(x); // error
                       ^

References:
   mixed.js:63:19
   63| function undef(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:71:17

Cannot call `takesString` with `x` bound to `x` because null [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:71:17
   71|     takesString(x); // error
                       ^

References:
   mixed.js:69:19
   69| function null_(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:77:17

Cannot call `takesString` with `x` bound to `x` because null [1] is incompatible with string [2]. [incompatible-call]

   mixed.js:77:17
   77|     takesString(x); // error
                       ^

References:
   mixed.js:75:19
   75| function maybe(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:77:17

Cannot call `takesString` with `x` bound to `x` because undefined [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:77:17
   77|     takesString(x); // error
                       ^

References:
   mixed.js:75:19
   75| function maybe(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:83:17

Cannot call `takesString` with `x` bound to `x` because boolean literal `true` [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:83:17
   83|     takesString(x); // error
                       ^

References:
   mixed.js:81:19
   81| function true_(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- mixed.js:89:17

Cannot call `takesString` with `x` bound to `x` because boolean literal `false` [1] is incompatible with string [2].
[incompatible-call]

   mixed.js:89:17
   89|     takesString(x); // error
                       ^

References:
   mixed.js:87:20
   87| function false_(x: mixed) {
                          ^^^^^ [1]
   mixed.js:4:25
    4| function takesString(x: string) {}
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- mixed.js:97:7

Cannot cast `x['foo']` to string because mixed [1] is incompatible with string [2]. [incompatible-cast]

   mixed.js:97:7
   97|       x['foo'] as string; // error, mixed
             ^^^^^^^^

References:
   mixed.js:93:18
   93| function obj2(x: mixed) {
                        ^^^^^ [1]
   mixed.js:97:19
   97|       x['foo'] as string; // error, mixed
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- mixed.js:119:17

Cannot call `takesString` with `x[0]` bound to `x` because array element of refined mixed [1] is incompatible with
string [2]. [incompatible-call]

   mixed.js:119:17
   119|     takesString(x[0]); // error
                        ^^^^

References:
   mixed.js:117:18
   117| function arr0(x: mixed) {
                         ^^^^^ [1]
   mixed.js:4:25
     4| function takesString(x: string) {}
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- mixed_object.js:3:7

Cannot assign `3` to `x.a` because property `a` is not writable. [cannot-write]

   3|     x.a = 3;
            ^


Error ------------------------------------------------------------------------------------------------------- not.js:5:5

Cannot perform arithmetic operation because null or undefined [1] is not a number or bigint. [unsafe-arithmetic]

   not.js:5:5
   5|     x++; // should error for null, void and boolean (false)
          ^

References:
   not.js:3:17
   3| function foo(x: ?boolean) {
                      ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- not.js:5:5

Cannot perform arithmetic operation because boolean [1] is not a number or bigint. [unsafe-arithmetic]

   not.js:5:5
   5|     x++; // should error for null, void and boolean (false)
          ^

References:
   not.js:3:18
   3| function foo(x: ?boolean) {
                       ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ not.js:11:7

Cannot get `x[0]` because null or undefined [1] does not have properties. [incompatible-use]

   not.js:11:7
   11|     x[0]; // should error for null, void and number (0)
             ^

References:
   not.js:9:17
    9| function bar(x: ?number) {
                       ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ not.js:11:7

Cannot get `x[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   not.js:11:7
   11|     x[0]; // should error for null, void and number (0)
             ^

References:
   not.js:9:18
    9| function bar(x: ?number) {
                        ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ not.js:21:7

Cannot get `x[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   not.js:21:7
   21|     x[0]; // should error for number (0)
             ^

References:
   not.js:15:18
   15| function baz(x: ?number) {
                        ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ not.js:41:5

Cannot cast `!x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   not.js:41:5
   41|     !x as false; // error, strings are not always truthy
           ^^ [1]

References:
   not.js:41:11
   41|     !x as false; // error, strings are not always truthy
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ not.js:44:5

Cannot cast `!x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   not.js:44:5
   44|     !x as false; // error, numbers are not always truthy
           ^^ [1]

References:
   not.js:44:11
   44|     !x as false; // error, numbers are not always truthy
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ not.js:47:5

Cannot cast `!x` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   not.js:47:5
   47|     !x as false; // error, bools are not always truthy
           ^^ [1]

References:
   not.js:47:11
   47|     !x as false; // error, bools are not always truthy
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ null.js:4:7

Cannot use operator `*` with operands number [1] and null [2] [unsafe-arithmetic]

   null.js:4:7
   4|   if (100 * null) {
            ^^^^^^^^^^

References:
   null.js:4:7
   4|   if (100 * null) {
            ^^^ [1]
   null.js:4:13
   4|   if (100 * null) {
                  ^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ null.js:7:7

Cannot use operator `*` with operands null [1] and number [2] [unsafe-arithmetic]

   null.js:7:7
   7|   if (null * 100) {
            ^^^^^^^^^^

References:
   null.js:7:7
   7|   if (null * 100) {
            ^^^^ [1]
   null.js:7:14
   7|   if (null * 100) {
                   ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- number.js:6:8

Cannot cast `x` to undefined because number literal `0` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:6:8
   6|       (x: void); // error
             ^

References:
   number.js:4:15
   4|   function(x: number) {
                    ^^^^^^ [1]
   number.js:6:11
   6|       (x: void); // error
                ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- number.js:8:6

Cannot cast `x` to number literal `0` because number [1] is incompatible with number literal `0` [2].
[incompatible-cast]

   number.js:8:6
   8|     (x: 0); // error
           ^

References:
   number.js:4:15
   4|   function(x: number) {
                    ^^^^^^ [1]
   number.js:8:9
   8|     (x: 0); // error
              ^ [2]


Error --------------------------------------------------------------------------------------------------- number.js:13:8

Cannot cast `x` to number literal `0` because number [1] is incompatible with number literal `0` [2].
[incompatible-cast]

   number.js:13:8
   13|       (x: 0); // error
              ^

References:
   number.js:11:15
   11|   function(x: number) {
                     ^^^^^^ [1]
   number.js:13:11
   13|       (x: 0); // error
                 ^ [2]


Error --------------------------------------------------------------------------------------------------- number.js:15:6

Cannot cast `x` to undefined because number [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:15:6
   15|     (x: void); // error
            ^

References:
   number.js:11:15
   11|   function(x: number) {
                     ^^^^^^ [1]
   number.js:15:9
   15|     (x: void); // error
               ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:19:15

Invalid check of number literal `0` against number literal `1` [1] because number literal `0` [2] is incompatible with
number literal `1` [1]. [incompatible-type]

   number.js:19:15
   19|     if (x === 0) {
                     ^ [2]

References:
   number.js:18:15
   18|   function(x: 1): 0 {
                     ^ [1]


Error -------------------------------------------------------------------------------------------------- number.js:26:15

Invalid check of number literal `1` against number literal `0` [1] because number literal `1` [2] is incompatible with
number literal `0` [1]. [incompatible-type]

   number.js:26:15
   26|     if (x === 1) {
                     ^ [2]

References:
   number.js:25:15
   25|   function(x: 0): number {
                     ^ [1]


Error -------------------------------------------------------------------------------------------------- number.js:33:15

Invalid check of number literal `1` against number literal `0` [1] because number literal `1` [2] is incompatible with
number literal `0` [1]. [incompatible-type]

   number.js:33:15
   33|     if (x !== 1) {
                     ^ [2]

References:
   number.js:32:15
   32|   function(x: 0) {
                     ^ [1]


Error --------------------------------------------------------------------------------------------------- number.js:49:8

Cannot cast `x` to undefined because number literal `0` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:49:8
   49|       (x: void); // error
              ^

References:
   number.js:46:15
   46|   function(x: 0 | 1) {
                     ^ [1]
   number.js:49:11
   49|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- number.js:49:8

Cannot cast `x` to undefined because number literal `0` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:49:8
   49|       (x: void); // error
              ^

References:
   number.js:47:15
   47|     if (x === 0) {
                     ^ [1]
   number.js:49:11
   49|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- number.js:53:8

Cannot cast `x` to undefined because number literal `1` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:53:8
   53|       (x: void); // error
              ^

References:
   number.js:46:19
   46|   function(x: 0 | 1) {
                         ^ [1]
   number.js:53:11
   53|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- number.js:53:8

Cannot cast `x` to undefined because number literal `1` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:53:8
   53|       (x: void); // error
              ^

References:
   number.js:51:15
   51|     if (x === 1) {
                     ^ [1]
   number.js:53:11
   53|       (x: void); // error
                 ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:61:12

Cannot return `x.foo` because number [1] is incompatible with number literal `0` [2]. [incompatible-return]

   number.js:61:12
   61|     return x.foo; // error
                  ^^^^^

References:
   number.js:57:22
   57|   function(x: { foo: number }): 0 {
                            ^^^^^^ [1]
   number.js:57:33
   57|   function(x: { foo: number }): 0 {
                                       ^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:75:21

Cannot get `obj.bar` because property `bar` is missing in object type [1]. [prop-missing]

   number.js:75:21
   75|     if (num === obj.bar) { // Error, accessing unknown property
                           ^^^

References:
   number.js:74:30
   74|   function(num: number, obj: { foo: number }) {
                                    ^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- number.js:95:14

Cannot return `s` because number literal `3` [1] is incompatible with `Mode` [2]. [incompatible-return]

   number.js:95:14
   95|       return s; // error
                    ^

References:
   number.js:91:15
   91|   function(s: number): ?Mode {
                     ^^^^^^ [1]
   number.js:91:25
   91|   function(s: number): ?Mode {
                               ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- number.js:114:14

Cannot return `x` because number [1] is incompatible with number literal `0` [2]. [incompatible-return]

   number.js:114:14
   114|       return x; // error
                     ^

References:
   number.js:112:15
   112|   function(x: number): 0 {
                      ^^^^^^ [1]
   number.js:112:24
   112|   function(x: number): 0 {
                               ^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:124:8

Cannot cast `x` to undefined because number literal `-1` [1] is incompatible with undefined [2]. [incompatible-cast]

   number.js:124:8
   124|       (x: void); // error
               ^

References:
   number.js:122:15
   122|   function(x: number) {
                      ^^^^^^ [1]
   number.js:124:11
   124|       (x: void); // error
                  ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:126:6

Cannot cast `x` to number literal `-1` because number [1] is incompatible with number literal `-1` [2].
[incompatible-cast]

   number.js:126:6
   126|     (x: -1); // error
             ^

References:
   number.js:122:15
   122|   function(x: number) {
                      ^^^^^^ [1]
   number.js:126:9
   126|     (x: -1); // error
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:131:8

Cannot cast `x` to number literal `-1` because number [1] is incompatible with number literal `-1` [2].
[incompatible-cast]

   number.js:131:8
   131|       (x: -1); // error
               ^

References:
   number.js:129:15
   129|   function(x: number) {
                      ^^^^^^ [1]
   number.js:131:11
   131|       (x: -1); // error
                  ^^ [2]


Error -------------------------------------------------------------------------------------------------- number.js:133:6

Cannot cast `x` to number literal `-1` because number [1] is incompatible with number literal `-1` [2].
[incompatible-cast]

   number.js:133:6
   133|     (x: -1); // error
             ^

References:
   number.js:129:15
   129|   function(x: number) {
                      ^^^^^^ [1]
   number.js:133:9
   133|     (x: -1); // error
                ^^ [2]


Error ------------------------------------------------------------------------------------------------- number.js:144:15

Invalid check of number literal `-1` against number literal `0` [1] because number literal `-1` [2] is incompatible with
number literal `0` [1]. [incompatible-type]

   number.js:144:15
   144|     if (x === -1) { // error
                      ^^ [2]

References:
   number.js:143:15
   143|   function(x: 0): number {
                      ^ [1]


Error ------------------------------------------------------------------------------------------------- number.js:151:15

Invalid check of number literal `0` against number literal `-1` [1] because number literal `0` [2] is incompatible with
number literal `-1` [1]. [incompatible-type]

   number.js:151:15
   151|     if (x === 0) { //error
                      ^ [2]

References:
   number.js:150:15
   150|   function(x: -1) {
                      ^^ [1]


Error ------------------------------------------------------------------------------------------------- number.js:168:12

Cannot return `x` because number literal `0` [1] is incompatible with number literal `-1` [2]. [incompatible-return]

   number.js:168:12
   168|     return x;
                   ^

References:
   number.js:164:20
   164|   function(x: -1 | 0): -1 {
                           ^ [1]
   number.js:164:24
   164|   function(x: -1 | 0): -1 {
                               ^^ [2]


Error ---------------------------------------------------------------------------------------- object_prop_exists.js:4:5

Cannot cast `x` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   object_prop_exists.js:4:5
   4|     x as empty; // ERROR
          ^

References:
   object_prop_exists.js:2:45
   2|   declare const x: {|a: true, b: number|} | {|a: false, b: string, c: true|};
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prop_exists.js:4:10
   4|     x as empty; // ERROR
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prop_exists.js:7:5

Cannot cast `x` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   object_prop_exists.js:7:5
   7|     x as empty; // ERROR
          ^

References:
   object_prop_exists.js:2:20
   2|   declare const x: {|a: true, b: number|} | {|a: false, b: string, c: true|};
                         ^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prop_exists.js:7:10
   7|     x as empty; // ERROR
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prop_exists.js:15:9

Cannot get `x.c` because property `c` is not readable. [cannot-read]

   15|   if (x.c) { // ERROR: prop not readable
               ^


Error --------------------------------------------------------------------------------------- object_prop_exists.js:15:7

Property `c` is not readable. [cannot-read]

   15|   if (x.c) { // ERROR: prop not readable
             ^^^


Error --------------------------------------------------------------------------------------- object_prop_exists.js:16:5

Cannot cast `x` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   object_prop_exists.js:16:5
   16|     x as empty; // ERROR
           ^

References:
   object_prop_exists.js:14:45
   14|   declare const x: {|a: true, b: number|} | {|a: false, b: string, -c: true|};
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prop_exists.js:16:10
   16|     x as empty; // ERROR
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prop_exists.js:18:5

Cannot cast `x` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   object_prop_exists.js:18:5
   18|     x as empty; // ERROR
           ^

References:
   object_prop_exists.js:14:20
   14|   declare const x: {|a: true, b: number|} | {|a: false, b: string, -c: true|};
                          ^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prop_exists.js:18:10
   18|     x as empty; // ERROR
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prop_exists.js:18:5

Cannot cast `x` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   object_prop_exists.js:18:5
   18|     x as empty; // ERROR
           ^

References:
   object_prop_exists.js:14:45
   14|   declare const x: {|a: true, b: number|} | {|a: false, b: string, -c: true|};
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prop_exists.js:18:10
   18|     x as empty; // ERROR
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------- object_union_number_keys.js:6:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   object_union_number_keys.js:6:5
   6|     x[1] as empty; // ERROR
          ^^^^

References:
   object_union_number_keys.js:2:32
   2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                                     ^^^^^^ [1]
   object_union_number_keys.js:6:13
   6|     x[1] as empty; // ERROR
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------- object_union_number_keys.js:13:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   object_union_number_keys.js:13:5
   13|     x[1] as empty; // ERROR
           ^^^^

References:
   object_union_number_keys.js:2:32
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                                      ^^^^^^ [1]
   object_union_number_keys.js:13:13
   13|     x[1] as empty; // ERROR
                   ^^^^^ [2]


Error -------------------------------------------------------------------------------- object_union_number_keys.js:21:10

Cannot compare string [1] with property `0` of `x` [2] because: [incompatible-type]
 - Either cannot compare string [1] with property `0` of `x` [2] because string [1] is incompatible with string literal
   `a` [3].
 - Or cannot compare string [1] with property `0` of `x` [2] because string [1] is incompatible with string literal
   `b` [4].

   object_union_number_keys.js:21:10
   21|     case 'xxx': break; // ERROR
                ^^^^^ [1]

References:
   object_union_number_keys.js:2:17
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                       ^ [2]
   object_union_number_keys.js:2:24
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                              ^^^ [3]
   object_union_number_keys.js:2:46
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                                                    ^^^ [4]


Error -------------------------------------------------------------------------------- object_union_number_keys.js:27:10

Cannot compare string [1] with property `0` of `x` [2] because: [incompatible-type]
 - Either cannot compare string [1] with property `0` of `x` [2] because string [1] is incompatible with string literal
   `a` [3].
 - Or cannot compare string [1] with property `0` of `x` [2] because string [1] is incompatible with string literal
   `b` [4].

   object_union_number_keys.js:27:10
   27|     case 'xxx': break; // ERROR
                ^^^^^ [1]

References:
   object_union_number_keys.js:24:11
   24|   switch (x[0]) {
                 ^ [2]
   object_union_number_keys.js:2:24
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                              ^^^ [3]
   object_union_number_keys.js:2:46
    2|   declare const x: {0: 'a', 1: number} | {0: 'b', 1: string};
                                                    ^^^ [4]


Error --------------------------------------------------------------------------------- object_union_number_keys.js:36:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   object_union_number_keys.js:36:5
   36|     x[1] as empty; // ERROR
           ^^^^

References:
   object_union_number_keys.js:32:32
   32|   declare const x: {0: 'a', 1: number} | {0: null, 1: string};
                                      ^^^^^^ [1]
   object_union_number_keys.js:36:13
   36|     x[1] as empty; // ERROR
                   ^^^^^ [2]


Error --------------------------------------------------------------------------------- object_union_number_keys.js:43:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   object_union_number_keys.js:43:5
   43|     x[1] as empty; // ERROR
           ^^^^

References:
   object_union_number_keys.js:32:32
   32|   declare const x: {0: 'a', 1: number} | {0: null, 1: string};
                                      ^^^^^^ [1]
   object_union_number_keys.js:43:13
   43|     x[1] as empty; // ERROR
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:24:5

Cannot cast `foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:24:5
   24|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:22
   18|   declare const foo: ?Foo;
                            ^^^^ [1]
   opaque_type.js:24:12
   24|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:24:5

Cannot cast `foo` to empty because null [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:24:5
   24|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:23
   18|   declare const foo: ?Foo;
                             ^^^ [1]
   opaque_type.js:24:12
   24|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:24:5

Cannot cast `foo` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:24:5
   24|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:23
   18|   declare const foo: ?Foo;
                             ^^^ [1]
   opaque_type.js:24:12
   24|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:28:5

Cannot cast `foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:28:5
   28|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:22
   18|   declare const foo: ?Foo;
                            ^^^^ [1]
   opaque_type.js:28:12
   28|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:28:5

Cannot cast `foo` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:28:5
   28|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:23
   18|   declare const foo: ?Foo;
                             ^^^ [1]
   opaque_type.js:28:12
   28|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:32:5

Cannot cast `foo` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:32:5
   32|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:22
   18|   declare const foo: ?Foo;
                            ^^^^ [1]
   opaque_type.js:32:12
   32|     foo as empty; // error
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- opaque_type.js:32:5

Cannot cast `foo` to empty because null [1] is incompatible with empty [2]. [incompatible-cast]

   opaque_type.js:32:5
   32|     foo as empty; // error
           ^^^

References:
   opaque_type.js:18:23
   18|   declare const foo: ?Foo;
                             ^^^ [1]
   opaque_type.js:32:12
   32|     foo as empty; // error
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ property.js:71:12

Cannot return `x[y.z]` because null or undefined [1] is incompatible with string [2]. [incompatible-return]

   property.js:71:12
   71|     return x[y.z];  // error
                  ^^^^^^

References:
   property.js:68:32
   68| function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                      ^^^^^^^ [1]
   property.js:68:59
   68| function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                                                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:4:24

Cannot assign `x` to `y` because number [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:4:24
   4|         var y:string = x; // Error
                             ^

References:
   refinements.js:2:16
   2|     var x = b? 0 : null;
                     ^ [1]
   refinements.js:4:15
   4|         var y:string = x; // Error
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinements.js:5:13

Cannot assign `false` to `x` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with null [3].

All writes to `x` must be compatible with the type of its initializer [4]. Add an annotation to `x` [4] if a different
type is desired.

   refinements.js:5:13
   5|         x = false; // Constrain writes error
                  ^^^^^ [1]

References:
   refinements.js:2:16
   2|     var x = b? 0 : null;
                     ^ [2]
   refinements.js:2:20
   2|     var x = b? 0 : null;
                         ^^^^ [3]
   refinements.js:2:9
   2|     var x = b? 0 : null;
              ^ [4]


Error ---------------------------------------------------------------------------------------------- refinements.js:7:20

Cannot assign `x` to `z` because null [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:7:20
   7|     var z:string = x; // Error: number ~> string
                         ^

References:
   refinements.js:2:20
   2|     var x = b? 0 : null;
                         ^^^^ [1]
   refinements.js:7:11
   7|     var z:string = x; // Error: number ~> string
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:13:24

Cannot assign `x` to `y` because number [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:13:24
   13|         var y:string = x;  // Error
                              ^

References:
   refinements.js:11:16
   11|     var x = b? 0 : null;
                      ^ [1]
   refinements.js:13:15
   13|         var y:string = x;  // Error
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:13:24

Cannot assign `x` to `y` because null [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:13:24
   13|         var y:string = x;  // Error
                              ^

References:
   refinements.js:11:20
   11|     var x = b? 0 : null;
                          ^^^^ [1]
   refinements.js:13:15
   13|         var y:string = x;  // Error
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:14:13

Cannot assign `false` to `x` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with null [3].

All writes to `x` must be compatible with the type of its initializer [4]. Add an annotation to `x` [4] if a different
type is desired.

   refinements.js:14:13
   14|         x = false; // Constrain writes error
                   ^^^^^ [1]

References:
   refinements.js:11:16
   11|     var x = b? 0 : null;
                      ^ [2]
   refinements.js:11:20
   11|     var x = b? 0 : null;
                          ^^^^ [3]
   refinements.js:11:9
   11|     var x = b? 0 : null;
               ^ [4]


Error --------------------------------------------------------------------------------------------- refinements.js:16:20

Cannot assign `x` to `z` because boolean [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:16:20
   16|     var z:string = x;  // Error
                          ^

References:
   refinements.js:14:13
   14|         x = false; // Constrain writes error
                   ^^^^^ [1]
   refinements.js:16:11
   16|     var z:string = x;  // Error
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:24:13

Cannot assign `"hello"` to `x` because string [1] is incompatible with number [2]. All writes to `x` must be compatible
with the type of its initializer [3]. Add an annotation to `x` [3] if a different type is desired. [incompatible-type]

   refinements.js:24:13
   24|         x = "hello"; // Constrain writes error
                   ^^^^^^^ [1]

References:
   refinements.js:21:13
   21|     var x = 0;
                   ^ [2]
   refinements.js:21:9
   21|     var x = 0;
               ^ [3]


Error --------------------------------------------------------------------------------------------- refinements.js:27:13

Cannot assign `"hello"` to `x` because string [1] is incompatible with number [2]. All writes to `x` must be compatible
with the type of its initializer [3]. Add an annotation to `x` [3] if a different type is desired. [incompatible-type]

   refinements.js:27:13
   27|         x = "hello"; // Constrain writes error
                   ^^^^^^^ [1]

References:
   refinements.js:21:13
   21|     var x = 0;
                   ^ [2]
   refinements.js:21:9
   21|     var x = 0;
               ^ [3]


Error --------------------------------------------------------------------------------------------- refinements.js:36:20

Cannot assign `x` to `z` because number [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:36:20
   36|     var z:string = x;  // Error
                          ^

References:
   refinements.js:34:13
   34|         x = 42;
                   ^^ [1]
   refinements.js:36:11
   36|     var z:string = x;  // Error
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:42:14

Cannot assign `false` to `x` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with null [3].

All writes to `x` must be compatible with the type of its initializer [4]. Add an annotation to `x` [4] if a different
type is desired.

   refinements.js:42:14
   42|          x = false) {
                    ^^^^^ [1]

References:
   refinements.js:40:21
   40|     for (var x = b? 0 : null;
                           ^ [2]
   refinements.js:40:25
   40|     for (var x = b? 0 : null;
                               ^^^^ [3]
   refinements.js:40:14
   40|     for (var x = b? 0 : null;
                    ^ [4]


Error --------------------------------------------------------------------------------------------- refinements.js:43:24

Cannot assign `x` to `y` because number [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:43:24
   43|         var y:string = x;  // Error
                              ^

References:
   refinements.js:40:21
   40|     for (var x = b? 0 : null;
                           ^ [1]
   refinements.js:43:15
   43|         var y:string = x;  // Error
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:45:20

Cannot assign `x` to `z` because null [1] is incompatible with string [2]. [incompatible-type]

   refinements.js:45:20
   45|     var z:string = x; // Error: null ~> string
                          ^

References:
   refinements.js:40:25
   40|     for (var x = b? 0 : null;
                               ^^^^ [1]
   refinements.js:45:11
   45|     var z:string = x; // Error: null ~> string
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:51:10

Cannot assign string to `x` because string [1] is incompatible with boolean [2]. All writes to `x` must be compatible
with the type of its initializer [3]. Add an annotation to `x` [3] if a different type is desired. [incompatible-type]

   refinements.js:51:10
   51|     for (x in o) { // Constrain writes error
                ^ [1]

References:
   refinements.js:50:13
   50|     var x = false;
                   ^^^^^ [2]
   refinements.js:50:9
   50|     var x = false;
               ^ [3]


Error --------------------------------------------------------------------------------------------- refinements.js:53:13

Cannot assign `0` to `x` because number [1] is incompatible with boolean [2]. All writes to `x` must be compatible with
the type of its initializer [3]. Add an annotation to `x` [3] if a different type is desired. [incompatible-type]

   refinements.js:53:13
   53|         x = 0; // commenting this out would propagate x:string downstream
                   ^ [1]

References:
   refinements.js:50:13
   50|     var x = false;
                   ^^^^^ [2]
   refinements.js:50:9
   50|     var x = false;
               ^ [3]


Error --------------------------------------------------------------------------------------------- refinements.js:55:20

Cannot assign `x` to `z` because boolean [1] is incompatible with number [2]. [incompatible-type]

   refinements.js:55:20
   55|     var z:number = x; // Error
                          ^

References:
   refinements.js:50:13
   50|     var x = false;
                   ^^^^^ [1]
   refinements.js:55:11
   55|     var z:number = x; // Error
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- refinements.js:87:10

Cannot cast `x` to string because object type [1] is incompatible with string [2]. [incompatible-cast]

   refinements.js:87:10
   87|         (x: string); // error
                ^

References:
   refinements.js:82:14
   82|     const x: {foo: null} = {foo: null};
                    ^^^^^^^^^^^ [1]
   refinements.js:87:13
   87|         (x: string); // error
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- string.js:6:8

Cannot cast `x` to undefined because string literal `foo` [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:6:8
   6|       (x: void); // error
             ^

References:
   string.js:4:15
   4|   function(x: string) {
                    ^^^^^^ [1]
   string.js:6:11
   6|       (x: void); // error
                ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- string.js:8:6

Cannot cast `x` to string literal `foo` because string [1] is incompatible with string literal `foo` [2].
[incompatible-cast]

   string.js:8:6
   8|     (x: 'foo'); // error
           ^

References:
   string.js:4:15
   4|   function(x: string) {
                    ^^^^^^ [1]
   string.js:8:9
   8|     (x: 'foo'); // error
              ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:13:8

Cannot cast `x` to string literal `foo` because string [1] is incompatible with string literal `foo` [2].
[incompatible-cast]

   string.js:13:8
   13|       (x: 'foo'); // error
              ^

References:
   string.js:11:15
   11|   function(x: string) {
                     ^^^^^^ [1]
   string.js:13:11
   13|       (x: 'foo'); // error
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:15:6

Cannot cast `x` to undefined because string [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:15:6
   15|     (x: void); // error
            ^

References:
   string.js:11:15
   11|   function(x: string) {
                     ^^^^^^ [1]
   string.js:15:9
   15|     (x: void); // error
               ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- string.js:19:15

Invalid check of string literal `foo` against string literal `bar` [1] because string literal `foo` [2] is incompatible
with string literal `bar` [1]. [incompatible-type]

   string.js:19:15
   19|     if (x === 'foo') {
                     ^^^^^ [2]

References:
   string.js:18:15
   18|   function(x: 'bar'): 'foo' {
                     ^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- string.js:26:15

Invalid check of string literal `bar` against string literal `foo` [1] because string literal `bar` [2] is incompatible
with string literal `foo` [1]. [incompatible-type]

   string.js:26:15
   26|     if (x === 'bar') {
                     ^^^^^ [2]

References:
   string.js:25:15
   25|   function(x: 'foo'): string {
                     ^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- string.js:33:15

Invalid check of string literal `bar` against string literal `foo` [1] because string literal `bar` [2] is incompatible
with string literal `foo` [1]. [incompatible-type]

   string.js:33:15
   33|     if (x !== 'bar') {
                     ^^^^^ [2]

References:
   string.js:32:15
   32|   function(x: 'foo') {
                     ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- string.js:49:8

Cannot cast `x` to undefined because string literal `foo` [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:49:8
   49|       (x: void); // error
              ^

References:
   string.js:46:15
   46|   function(x: 'foo' | 'bar') {
                     ^^^^^ [1]
   string.js:49:11
   49|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:49:8

Cannot cast `x` to undefined because string literal `foo` [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:49:8
   49|       (x: void); // error
              ^

References:
   string.js:47:15
   47|     if (x === 'foo') {
                     ^^^^^ [1]
   string.js:49:11
   49|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:53:8

Cannot cast `x` to undefined because string literal `bar` [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:53:8
   53|       (x: void); // error
              ^

References:
   string.js:46:23
   46|   function(x: 'foo' | 'bar') {
                             ^^^^^ [1]
   string.js:53:11
   53|       (x: void); // error
                 ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:53:8

Cannot cast `x` to undefined because string literal `bar` [1] is incompatible with undefined [2]. [incompatible-cast]

   string.js:53:8
   53|       (x: void); // error
              ^

References:
   string.js:51:15
   51|     if (x === 'bar') {
                     ^^^^^ [1]
   string.js:53:11
   53|       (x: void); // error
                 ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- string.js:61:12

Cannot return `x.foo` because string [1] is incompatible with string literal `foo` [2]. [incompatible-return]

   string.js:61:12
   61|     return x.foo; // error
                  ^^^^^

References:
   string.js:57:22
   57|   function(x: { foo: string }): 'foo' {
                            ^^^^^^ [1]
   string.js:57:33
   57|   function(x: { foo: string }): 'foo' {
                                       ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- string.js:75:21

Cannot get `obj.bar` because property `bar` is missing in object type [1]. [prop-missing]

   string.js:75:21
   75|     if (str === obj.bar) { // Error, testing for unknown property
                           ^^^

References:
   string.js:74:30
   74|   function(str: string, obj: { foo: string }) {
                                    ^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- string.js:96:14

Cannot return `s` because string literal `d` [1] is incompatible with `Mode` [2]. [incompatible-return]

   string.js:96:14
   96|       return s; // error
                    ^

References:
   string.js:92:15
   92|   function(s: string): ?Mode {
                     ^^^^^^ [1]
   string.js:92:25
   92|   function(s: string): ?Mode {
                               ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- string.js:115:14

Cannot return `x` because string [1] is incompatible with empty string [2]. [incompatible-return]

   string.js:115:14
   115|       return x; // error
                     ^

References:
   string.js:113:15
   113|   function(x: string): "" {
                      ^^^^^^ [1]
   string.js:113:24
   113|   function(x: string): "" {
                               ^^ [2]


Error -------------------------------------------------------------------------------------------- super_member.js:12:15

Cannot get `super.prop` because property `prop` is missing in super of `B` [1]. [prop-missing]

   super_member.js:12:15
   12|     if (super.prop) { // Error, super.prop doesn't exist
                     ^^^^

References:
   super_member.js:10:7
   10| class B {
             ^ [1]


Error -------------------------------------------------------------------------------------------- super_member.js:13:14

Cannot return `super.prop` because property `prop` of unknown type [1] is incompatible with string [2].
[incompatible-return]

   super_member.js:13:14
   13|       return super.prop; // error, unknown type passed to string expected
                    ^^^^^^^^^^

References:
   super_member.js:12:9
   12|     if (super.prop) { // Error, super.prop doesn't exist
               ^^^^^^^^^^ [1]
   super_member.js:11:11
   11|   test(): string {
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- switch.js:8:14

Cannot return `text` because number [1] is incompatible with string [2]. [incompatible-return]

   switch.js:8:14
   8|       return text; // error, should return string
                   ^^^^

References:
   switch.js:3:29
   3| function foo(text: string | number): string {
                                  ^^^^^^ [1]
   switch.js:3:38
   3| function foo(text: string | number): string {
                                           ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- switch.js:27:19

Cannot get `text[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   switch.js:27:19
   27|       return text[0]; // error, [0] on number
                         ^

References:
   switch.js:23:30
   23| function baz1(text: string | number): string {
                                    ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- switch.js:37:19

Cannot get `text[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   switch.js:37:19
   37|       return text[0]; // error, [0] on number
                         ^

References:
   switch.js:33:30
   33| function baz2(text: string | number): string {
                                    ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- switch.js:51:15

Cannot perform arithmetic operation because string [1] is not a number or bigint. [unsafe-arithmetic]

   switch.js:51:15
   51|       return (text++) + '';
                     ^^^^

References:
   switch.js:43:22
   43| function corge(text: string | number | Array<string>): string {
                            ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:20:20

Cannot call `x.prop1.charAt` because property `charAt` is missing in undefined [1]. [incompatible-use]

   tagged_union.js:20:20
   20|     return x.prop1.charAt(0); // typeAST: Node1, but x.prop1 may be undefined
                          ^^^^^^

References:
   ast_node.js:3:11
    3|   prop1?: string
                 ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:34:30

Cannot cast `x.taste` to string literal `Good` because string literal `Bad` [1] is incompatible with string literal
`Good` [2]. [incompatible-cast]

   tagged_union.js:34:30
   34|   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                    ^^^^^^^

References:
   tagged_union.js:26:38
   26| type Apple = { kind: 'Fruit', taste: 'Bad' }
                                            ^^^^^ [1]
   tagged_union.js:34:39
   34|   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- tagged_union.js:35:9

Cannot cast `x.raw` to string literal `No` because string literal `Maybe` [1] is incompatible with string literal
`No` [2]. [incompatible-cast]

   tagged_union.js:35:9
   35|   else (x.raw: 'No'); // error, Carrot.raw = Maybe
               ^^^^^

References:
   tagged_union.js:29:50
   29| type Carrot = { kind: 'Veg', taste: 'Good', raw: 'Maybe' }
                                                        ^^^^^^^ [1]
   tagged_union.js:35:16
   35|   else (x.raw: 'No'); // error, Carrot.raw = Maybe
                      ^^^^ [2]


Error --------------------------------------------------------------------------------------------- tagged_union.js:40:6

Cannot cast `x.raw` to union type because string literal `Maybe` [1] is incompatible with union type [2].
[incompatible-cast]

   tagged_union.js:40:6
   40|     (x.raw: 'Yes' | 'No'); // 2 errors:
            ^^^^^

References:
   tagged_union.js:29:50
   29| type Carrot = { kind: 'Veg', taste: 'Good', raw: 'Maybe' }
                                                        ^^^^^^^ [1]
   tagged_union.js:40:13
   40|     (x.raw: 'Yes' | 'No'); // 2 errors:
                   ^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- tagged_union.js:40:8

Cannot get `x.raw` because property `raw` is missing in object type [1]. [prop-missing]

   tagged_union.js:40:8
   40|     (x.raw: 'Yes' | 'No'); // 2 errors:
              ^^^

References:
   tagged_union.js:38:17
   38| function qux(x: Breakfast) {
                       ^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:72:21

Cannot get `x.A` because property `A` is missing in `C` [1]. [prop-missing]

   tagged_union.js:72:21
   72|   default: return x.A; // error, x: C and property A not found in type C
                           ^

References:
   tagged_union.js:68:26
   68| function kind(x: A | B | C): number {
                                ^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:88:11

Cannot get `x.kindTypo` because property `kindTypo` is missing in `A` [1]. [prop-missing]

   tagged_union.js:88:11
   88|     if (x.kindTypo === 1) { // error: kindTypo prop missing
                 ^^^^^^^^

References:
   tagged_union.js:87:21
   87|   function test7(x: A) {
                           ^ [1]


Error --------------------------------------------------------------------------------------------- tagged_union.js:89:8

Cannot cast `x.kindTypo` to string because number literal `1` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:89:8
   89|       (x.kindTypo: string); // typos can't be used, though
              ^^^^^^^^^^

References:
   tagged_union.js:88:9
   88|     if (x.kindTypo === 1) { // error: kindTypo prop missing
               ^^^^^^^^^^ [1]
   tagged_union.js:89:20
   89|       (x.kindTypo: string); // typos can't be used, though
                          ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- tagged_union.js:96:11

Cannot get `x.fooTypo` because property `fooTypo` is missing in object type [1]. [prop-missing]

   tagged_union.js:96:11
   96|     if (x.fooTypo.bar === 1) {} // error, fooTypo doesn't exist
                 ^^^^^^^

References:
   tagged_union.js:94:21
   94|   function test8(x: {foo: {bar: 1}}) {
                           ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- tagged_union.js:101:27

Cannot call `null.toString` because property `toString` is missing in null [1]. [incompatible-use]

   tagged_union.js:101:27
   101|     if (x.kind === (null).toString()) {} // error, method on null
                                  ^^^^^^^^

References:
   tagged_union.js:101:21
   101|     if (x.kind === (null).toString()) {} // error, method on null
                            ^^^^ [1]


Error ------------------------------------------------------------------------------------------- tagged_union.js:102:35

Cannot call `null.toString` because property `toString` is missing in null [1]. [incompatible-use]

   tagged_union.js:102:35
   102|     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                          ^^^^^^^^

References:
   tagged_union.js:102:29
   102|     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                    ^^^^ [1]


Error ------------------------------------------------------------------------------------------- tagged_union.js:111:11

Cannot get `x.legnth` because property `legnth` (did you mean `length`?) is missing in array type [1]. [prop-missing]

   tagged_union.js:111:11
   111|     if (x.legnth === 0) { // Error, typos
                  ^^^^^^

References:
   tagged_union.js:107:8
   107|     x: Array<string>, y: string, z: number, q: boolean,
               ^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:113:8

Cannot cast `x.legnth` to string because number literal `0` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:113:8
   113|       (x.legnth: string); // error: number literal 0 !~> string
               ^^^^^^^^

References:
   tagged_union.js:111:9
   111|     if (x.legnth === 0) { // Error, typos
                ^^^^^^^^ [1]
   tagged_union.js:113:18
   113|       (x.legnth: string); // error: number literal 0 !~> string
                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:116:11

Cannot get `y.legnth` because property `legnth` (did you mean `length`?) is missing in string [1]. [prop-missing]

   tagged_union.js:116:11
   116|     if (y.legnth === 0) { // Error, typo
                  ^^^^^^

References:
   tagged_union.js:107:26
   107|     x: Array<string>, y: string, z: number, q: boolean,
                                 ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:118:8

Cannot cast `y.legnth` to string because number literal `0` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:118:8
   118|       (y.legnth: string); // error: number literal 0 !~> string
               ^^^^^^^^

References:
   tagged_union.js:116:9
   116|     if (y.legnth === 0) { // Error, typo
                ^^^^^^^^ [1]
   tagged_union.js:118:18
   118|       (y.legnth: string); // error: number literal 0 !~> string
                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:120:24

Cannot compare number [1] with property `toString` of `z` [2] because number [1] is incompatible with function type [3].
[incompatible-type]

   tagged_union.js:120:24
   120|     if (z.toString === 0) {} // Error
                               ^ [1]

References:
   tagged_union.js:107:34
   107|     x: Array<string>, y: string, z: number, q: boolean,
                                         ^ [2]
   <BUILTINS>/core.js:487:5
   487|     toString(radix?: number): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- tagged_union.js:121:11

Cannot get `z.toStirng` because property `toStirng` (did you mean `toString`?) is missing in number [1]. [prop-missing]

   tagged_union.js:121:11
   121|     if (z.toStirng === 0) { // Error, typo
                  ^^^^^^^^

References:
   tagged_union.js:107:37
   107|     x: Array<string>, y: string, z: number, q: boolean,
                                            ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:123:8

Cannot cast `z.toStirng` to string because number literal `0` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:123:8
   123|       (z.toStirng: string); // error: number literal 0 !~> string
               ^^^^^^^^^^

References:
   tagged_union.js:121:9
   121|     if (z.toStirng === 0) { // Error, typo
                ^^^^^^^^^^ [1]
   tagged_union.js:123:20
   123|       (z.toStirng: string); // error: number literal 0 !~> string
                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:125:23

Cannot compare number [1] with property `valueOf` of `q` [2] because number [1] is incompatible with function type [3].
[incompatible-type]

   tagged_union.js:125:23
   125|     if (q.valueOf === 0) {} // Error
                              ^ [1]

References:
   tagged_union.js:107:45
   107|     x: Array<string>, y: string, z: number, q: boolean,
                                                    ^ [2]
   <BUILTINS>/core.js:380:5
   380|     valueOf(): boolean;
            ^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- tagged_union.js:126:11

Cannot get `q.valeuOf` because property `valeuOf` (did you mean `valueOf`?) is missing in boolean [1]. [prop-missing]

   tagged_union.js:126:11
   126|     if (q.valeuOf === 0) { // Error, typo
                  ^^^^^^^

References:
   tagged_union.js:107:48
   107|     x: Array<string>, y: string, z: number, q: boolean,
                                                       ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:128:8

Cannot cast `q.valeuOf` to string because number literal `0` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:128:8
   128|       (q.valeuOf: string); // error: number literal 0 !~> string
               ^^^^^^^^^

References:
   tagged_union.js:126:9
   126|     if (q.valeuOf === 0) { // Error, typo
                ^^^^^^^^^ [1]
   tagged_union.js:128:19
   128|       (q.valeuOf: string); // error: number literal 0 !~> string
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:137:20

Cannot compare number [1] with property `call` of `t` [2] because number [1] is incompatible with function type [3].
[incompatible-type]

   tagged_union.js:137:20
   137|     if (t.call === 0) {} // Error
                           ^ [1]

References:
   tagged_union.js:108:29
   108|     r: Object, s: Function, t: () => void
                                    ^ [2]
   <BUILTINS>/core.js:364:17
   364|     proto call: <T, R, A: $ArrayLike<mixed> = []>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R;
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- tagged_union.js:138:11

Cannot get `t.calll` because property `calll` is missing in statics of function type [1]. [prop-missing]

   tagged_union.js:138:11
   138|     if (t.calll === 0) { // error: calll prop missing
                  ^^^^^

References:
   tagged_union.js:108:32
   108|     r: Object, s: Function, t: () => void
                                       ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:140:8

Cannot cast `t.calll` to string because number literal `0` [1] is incompatible with string [2]. [incompatible-cast]

   tagged_union.js:140:8
   140|       (t.calll: string); // error: number literal 0 !~> string
               ^^^^^^^

References:
   tagged_union.js:138:9
   138|     if (t.calll === 0) { // error: calll prop missing
                ^^^^^^^ [1]
   tagged_union.js:140:17
   140|       (t.calll: string); // error: number literal 0 !~> string
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- tagged_union.js:147:8

Cannot cast `x.str` to string literal `not str` because string literal `str` [1] is incompatible with string literal
`not str` [2]. [incompatible-cast]

   tagged_union.js:147:8
   147|       (x.str: 'not str'); // error: 'str' !~> 'not str'
               ^^^^^

References:
   tagged_union.js:146:9
   146|     if (x.str === 'str') {
                ^^^^^ [1]
   tagged_union.js:147:15
   147|       (x.str: 'not str'); // error: 'str' !~> 'not str'
                      ^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- tagged_union.js:150:8

Cannot cast `x.num` to number literal `456` because number literal `123` [1] is incompatible with number literal
`456` [2]. [incompatible-cast]

   tagged_union.js:150:8
   150|       (x.num: 456); // error: 123 !~> 456
               ^^^^^

References:
   tagged_union.js:149:9
   149|     if (x.num === 123) {
                ^^^^^ [1]
   tagged_union.js:150:15
   150|       (x.num: 456); // error: 123 !~> 456
                      ^^^ [2]


Error -------------------------------------------------------------------------------------------- tagged_union.js:153:8

Cannot cast `x.boolean` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean
literal `false` [2]. [incompatible-cast]

   tagged_union.js:153:8
   153|       (x.boolean: false); // error: true !~> false
               ^^^^^^^^^

References:
   tagged_union.js:152:9
   152|     if (x.boolean === true) {
                ^^^^^^^^^ [1]
   tagged_union.js:153:19
   153|       (x.boolean: false); // error: true !~> false
                          ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:156:11

Cannot get `x.badStr` because property `badStr` is missing in object type [1]. [prop-missing]

   tagged_union.js:156:11
   156|     if (x.badStr === 'bad') { // Error, reading unknown property
                  ^^^^^^

References:
   tagged_union.js:145:15
   145|   function(x: { str: string, num: number, boolean: boolean }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:157:8

Cannot cast `x.badStr` to empty because string literal `bad` [1] is incompatible with empty [2]. [incompatible-cast]

   tagged_union.js:157:8
   157|       (x.badStr: empty); // error: 'bad' !~> empty
               ^^^^^^^^

References:
   tagged_union.js:156:9
   156|     if (x.badStr === 'bad') { // Error, reading unknown property
                ^^^^^^^^ [1]
   tagged_union.js:157:18
   157|       (x.badStr: empty); // error: 'bad' !~> empty
                         ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:159:11

Cannot get `x.badNum` because property `badNum` is missing in object type [1]. [prop-missing]

   tagged_union.js:159:11
   159|     if (x.badNum === 123) { // Error, reading unknown property
                  ^^^^^^

References:
   tagged_union.js:145:15
   145|   function(x: { str: string, num: number, boolean: boolean }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:160:8

Cannot cast `x.badNum` to empty because number literal `123` [1] is incompatible with empty [2]. [incompatible-cast]

   tagged_union.js:160:8
   160|       (x.badNum: empty); // error: 123 !~> empty
               ^^^^^^^^

References:
   tagged_union.js:159:9
   159|     if (x.badNum === 123) { // Error, reading unknown property
                ^^^^^^^^ [1]
   tagged_union.js:160:18
   160|       (x.badNum: empty); // error: 123 !~> empty
                         ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- tagged_union.js:162:11

Cannot get `x.badBool` because property `badBool` is missing in object type [1]. [prop-missing]

   tagged_union.js:162:11
   162|     if (x.badBool === true) { // Error, reading unknown property
                  ^^^^^^^

References:
   tagged_union.js:145:15
   145|   function(x: { str: string, num: number, boolean: boolean }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:163:8

Cannot cast `x.badBool` to empty because boolean literal `true` [1] is incompatible with empty [2]. [incompatible-cast]

   tagged_union.js:163:8
   163|       (x.badBool: empty); // error: true !~> empty
               ^^^^^^^^^

References:
   tagged_union.js:162:9
   162|     if (x.badBool === true) { // Error, reading unknown property
                ^^^^^^^^^ [1]
   tagged_union.js:163:19
   163|       (x.badBool: empty); // error: true !~> empty
                          ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- tagged_union.js:171:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:171:9
   171|       x.z; // error
                ^

References:
   tagged_union.js:168:15
   168|   function(x: { foo: 123, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:174:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:174:9
   174|       x.y; // error
                ^

References:
   tagged_union.js:168:41
   168|   function(x: { foo: 123, y: string } | { foo: 'foo', z: string }) {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:178:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:178:9
   178|       x.y; // error
                ^

References:
   tagged_union.js:168:41
   168|   function(x: { foo: 123, y: string } | { foo: 'foo', z: string }) {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:181:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:181:9
   181|       x.z; // error
                ^

References:
   tagged_union.js:168:15
   168|   function(x: { foo: 123, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:189:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:189:9
   189|       x.z; // error
                ^

References:
   tagged_union.js:186:15
   186|   function(x: { foo: number, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:191:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:191:9
   191|       x.y; // error: x.foo could be a string
                ^

References:
   tagged_union.js:186:44
   186|   function(x: { foo: number, y: string } | { foo: 'foo', z: string }) {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:192:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:192:9
   192|       x.z; // error: could still be either case (if foo was a different number)
                ^

References:
   tagged_union.js:186:15
   186|   function(x: { foo: number, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:197:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:197:9
   197|       x.y; // error
                ^

References:
   tagged_union.js:186:44
   186|   function(x: { foo: number, y: string } | { foo: 'foo', z: string }) {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:200:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:200:9
   200|       x.z; // error
                ^

References:
   tagged_union.js:186:15
   186|   function(x: { foo: number, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:208:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:208:9
   208|       x.z; // error
                ^

References:
   tagged_union.js:205:15
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:210:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:210:9
   210|       x.y; // error: x.foo could be a string
                ^

References:
   tagged_union.js:205:44
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:211:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:211:9
   211|       x.z; // error: could still be either case (if foo was a different number)
                ^

References:
   tagged_union.js:205:15
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:216:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:216:9
   216|       x.y; // error
                ^

References:
   tagged_union.js:205:44
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:218:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:218:9
   218|       x.y; // error: x.foo could be a different string
                ^

References:
   tagged_union.js:205:44
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:219:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:219:9
   219|       x.z; // error: x.foo could be a number
                ^

References:
   tagged_union.js:205:15
   205|   function(x: { foo: number, y: string } | { foo: string, z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:229:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:229:9
   229|       x.y; // error: flow isn't smart enough to figure this out yet
                ^

References:
   tagged_union.js:225:37
   225|     x: { foo: number, y: string } | { foo: string, z: string },
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:230:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:230:9
   230|       x.z; // error
                ^

References:
   tagged_union.js:225:8
   225|     x: { foo: number, y: string } | { foo: string, z: string },
               ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:238:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:238:9
   238|       x.z; // error
                ^

References:
   tagged_union.js:235:15
   235|   function(x: { foo: null, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:241:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:241:9
   241|       x.y; // error
                ^

References:
   tagged_union.js:235:42
   235|   function(x: { foo: null, y: string } | { foo: 'foo', z: string }) {
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:245:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:245:9
   245|       x.y; // error
                ^

References:
   tagged_union.js:235:42
   235|   function(x: { foo: null, y: string } | { foo: 'foo', z: string }) {
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:248:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:248:9
   248|       x.z; // error
                ^

References:
   tagged_union.js:235:15
   235|   function(x: { foo: null, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:256:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:256:9
   256|       x.z; // error
                ^

References:
   tagged_union.js:253:15
   253|   function(x: { foo: void, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:259:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:259:9
   259|       x.y; // error
                ^

References:
   tagged_union.js:253:42
   253|   function(x: { foo: void, y: string } | { foo: 'foo', z: string }) {
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:263:9

Cannot get `x.y` because property `y` is missing in object type [1]. [prop-missing]

   tagged_union.js:263:9
   263|       x.y; // error
                ^

References:
   tagged_union.js:253:42
   253|   function(x: { foo: void, y: string } | { foo: 'foo', z: string }) {
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- tagged_union.js:266:9

Cannot get `x.z` because property `z` is missing in object type [1]. [prop-missing]

   tagged_union.js:266:9
   266|       x.z; // error
                ^

References:
   tagged_union.js:253:15
   253|   function(x: { foo: void, y: string } | { foo: 'foo', z: string }) {
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- tuple.js:30:6

Cannot get `a[2]` because tuple type [1] only has 2 elements, so index 2 is out of bounds. [invalid-tuple-index]

   tuple.js:30:6
   30|     (a[2]: number); // Error: one of the variants has only 2 elements.
            ^^^^

References:
   tuple.js:23:17
   23|   a: [string] | [number, number] | [number, number, number]
                       ^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- tuple_union.js:6:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:6:5
   6|     x[1] as empty; // ERROR
          ^^^^

References:
   tuple_union.js:2:26
   2|   declare const x: ['a', number] | ['b', string];
                               ^^^^^^ [1]
   tuple_union.js:6:13
   6|     x[1] as empty; // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:17:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:17:5
   17|     x[1] as empty; // ERROR
           ^^^^

References:
   tuple_union.js:13:26
   13|   declare const x: ['a', number] | [null, string];
                                ^^^^^^ [1]
   tuple_union.js:17:13
   17|     x[1] as empty; // ERROR
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:28:5

Cannot cast `x[1]` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:28:5
   28|     x[1] as empty; // ERROR
           ^^^^

References:
   tuple_union.js:24:27
   24|   declare const x: [true, number] | [false, string];
                                 ^^^^^^ [1]
   tuple_union.js:28:13
   28|     x[1] as empty; // ERROR
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:44:1

Cannot call `calc` because: [incompatible-call]
 - Either string [1] is incompatible with string literal `add` [2] in index 0.
 - Or rest array [3] has 3 elements but tuple type [4] has 2 elements.

   tuple_union.js:44:1
   44| calc('abs', -2, 1); // ERROR
       ^^^^

References:
   tuple_union.js:44:6
   44| calc('abs', -2, 1); // ERROR
            ^^^^^ [1]
   tuple_union.js:35:43
   35| function calc(...args: ['abs', number] | ['add', number, number]): number {
                                                 ^^^^^ [2]
   tuple_union.js:44:1
   44| calc('abs', -2, 1); // ERROR
       ^^^^^^^^^^^^^^^^^^ [3]
   tuple_union.js:35:24
   35| function calc(...args: ['abs', number] | ['add', number, number]): number {
                              ^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:47:1

Cannot call `calc` because: [incompatible-call]
 - Either string [1] is incompatible with string literal `abs` [2] in index 0.
 - Or rest array [3] has 2 elements but tuple type [4] has 3 elements.

   tuple_union.js:47:1
   47| calc('add', 999); // ERROR
       ^^^^

References:
   tuple_union.js:47:6
   47| calc('add', 999); // ERROR
            ^^^^^ [1]
   tuple_union.js:35:25
   35| function calc(...args: ['abs', number] | ['add', number, number]): number {
                               ^^^^^ [2]
   tuple_union.js:47:1
   47| calc('add', 999); // ERROR
       ^^^^^^^^^^^^^^^^ [3]
   tuple_union.js:35:42
   35| function calc(...args: ['abs', number] | ['add', number, number]): number {
                                                ^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:52:7

Cannot get `x[2]` because tuple type [1] only has 2 elements, so index 2 is out of bounds. [invalid-tuple-index]

   tuple_union.js:52:7
   52|   if (x[2]) { // Unlike for objects, we error here. We can consider not in the future.
             ^^^^

References:
   tuple_union.js:51:20
   51|   declare const x: [true, number] | [false, string, true];
                          ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:53:5

Cannot cast `x` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:53:5
   53|     x as empty; // ERROR
           ^

References:
   tuple_union.js:51:37
   51|   declare const x: [true, number] | [false, string, true];
                                           ^^^^^^^^^^^^^^^^^^^^^ [1]
   tuple_union.js:53:10
   53|     x as empty; // ERROR
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:56:5

Cannot cast `x` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:56:5
   56|     x as empty; // ERROR
           ^

References:
   tuple_union.js:51:20
   51|   declare const x: [true, number] | [false, string, true];
                          ^^^^^^^^^^^^^^ [1]
   tuple_union.js:56:10
   56|     x as empty; // ERROR
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:64:7

Cannot get `x[2]` because tuple type [1] only has 2 elements, so index 2 is out of bounds. [invalid-tuple-index]

   tuple_union.js:64:7
   64|   if (x[2]) { // ERROR: element not readable
             ^^^^

References:
   tuple_union.js:63:20
   63|   declare const x: [true, number] | [false, string, -c: true];
                          ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:64:7

Cannot get `x[2]` because tuple element at index `2` [1] labeled `c` is not readable. [cannot-read]

   64|   if (x[2]) { // ERROR: element not readable
             ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:64:7

Tuple element at index `2` [1] labeled `c` is not readable. [cannot-read]

   64|   if (x[2]) { // ERROR: element not readable
             ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- tuple_union.js:65:5

Cannot cast `x` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   tuple_union.js:65:5
   65|     x as empty; // ERROR
           ^

References:
   tuple_union.js:63:37
   63|   declare const x: [true, number] | [false, string, -c: true];
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   tuple_union.js:65:10
   65|     x as empty; // ERROR
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- typeof.js:5:7

Cannot get `x[0]` because property `0` is missing in `Boolean` [1]. [prop-missing]

   typeof.js:5:7
   5|     x[0]; // error for boolean, not number
            ^

References:
   typeof.js:3:17
   3| function foo(x: boolean | number) {
                      ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- typeof.js:12:12

Cannot return `x` because null [1] is incompatible with number [2]. [incompatible-return]

   typeof.js:12:12
   12|     return x; // error, null
                  ^

References:
   typeof.js:10:10
   10|   var x: null = null;
                ^^^^ [1]
   typeof.js:9:17
    9| function bar(): number {
                       ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:22:7

Cannot call `BAZ.stuff` because undefined [1] is not a function. [not-a-function]

   typeof.js:22:7
   22|   BAZ.stuff(123); // error, refinement is gone
             ^^^^^

References:
   lib.js:3:27
    3| declare var BAZ: {stuff?: (x: number) => void, ...} | void;
                                 ^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- typeof.js:22:7

Cannot call `BAZ.stuff` because property `stuff` is missing in undefined [1]. [incompatible-use]

   typeof.js:22:7
   22|   BAZ.stuff(123); // error, refinement is gone
             ^^^^^

References:
   lib.js:3:55
    3| declare var BAZ: {stuff?: (x: number) => void, ...} | void;
                                                             ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- typeof.js:25:7

Cannot get `BAZ.stuff` because property `stuff` is missing in undefined [1]. [incompatible-use]

   typeof.js:25:7
   25|   BAZ.stuff; // error, could be undefined
             ^^^^^

References:
   lib.js:3:55
    3| declare var BAZ: {stuff?: (x: number) => void, ...} | void;
                                                             ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- typeof.js:28:9

Cannot call `BAZ.stuff` because undefined [1] is not a function. [not-a-function]

   typeof.js:28:9
   28|     BAZ.stuff(123); // error, refinement is gone
               ^^^^^

References:
   lib.js:3:27
    3| declare var BAZ: {stuff?: (x: number) => void, ...} | void;
                                 ^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- typeof.js:28:9

Cannot call `BAZ.stuff` because property `stuff` is missing in undefined [1]. [incompatible-use]

   typeof.js:28:9
   28|     BAZ.stuff(123); // error, refinement is gone
               ^^^^^

References:
   lib.js:3:55
    3| declare var BAZ: {stuff?: (x: number) => void, ...} | void;
                                                             ^^^^ [1]


Error -------------------------------------------------------------------------------------------------- typeof.js:47:20

Cannot compare the result of `typeof` to string literal `foo` because it is not a valid `typeof` return value.
[illegal-typeof]

   47|   if (typeof x === 'foo') {
                          ^^^^^


Error -------------------------------------------------------------------------------------------------- typeof.js:60:20

Cannot compare the result of `typeof` to string literal `foo` because it is not a valid `typeof` return value.
[illegal-typeof]

   60|   if (typeof x === `foo`) {
                          ^^^^^


Error --------------------------------------------------------------------------------------------------- typeof.js:69:5

Cannot cast `Foo` to empty because class `Foo` [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:69:5
   69|     Foo as empty; // error, Foo is a class
           ^^^

References:
   typeof.js:67:9
   67|   class Foo {}
               ^^^ [1]
   typeof.js:69:12
   69|     Foo as empty; // error, Foo is a class
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:77:5

Cannot cast `x` to empty because `Foo` [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:77:5
   77|     x as empty; // error
           ^

References:
   typeof.js:75:11
   75|   let x = new Foo();
                 ^^^^^^^^^ [1]
   typeof.js:77:10
   77|     x as empty; // error
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:84:5

Cannot cast `x` to string because symbol [1] is incompatible with string [2]. [incompatible-cast]

   typeof.js:84:5
   84|     x as string; // error
           ^

References:
   typeof.js:82:7
   82|   if (typeof x === 'symbol') {
             ^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:84:10
   84|     x as string; // error
                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:90:5

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:90:5
   90|     x as empty; // error number ~> empty
           ^

References:
   typeof.js:89:7
   89|   if (typeof x === 'number') {
             ^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:90:10
   90|     x as empty; // error number ~> empty
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- typeof.js:97:5

Cannot cast `x` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:97:5
   97|     x as empty; // error number ~> empty
           ^

References:
   typeof.js:95:7
   95|   if (typeof x === 'number') {
             ^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:97:10
   97|     x as empty; // error number ~> empty
                ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:109:5

Cannot cast `x` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:109:5
   109|     x as empty; // error string ~> empty
            ^

References:
   typeof.js:108:7
   108|   if (typeof x === 'string') {
              ^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:109:10
   109|     x as empty; // error string ~> empty
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:115:5

Cannot cast `x` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:115:5
   115|     x as empty; // error boolean ~> empty
            ^

References:
   typeof.js:114:7
   114|   if (typeof x === 'boolean') {
              ^^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:115:10
   115|     x as empty; // error boolean ~> empty
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:121:5

Cannot cast `x` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   typeof.js:121:5
   121|     x as true;
            ^

References:
   typeof.js:120:7
   120|   if (typeof x === 'boolean') {
              ^^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:121:10
   121|     x as true;
                 ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:122:5

Cannot cast `x` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:122:5
   122|     x as empty; // error boolean ~> empty
            ^

References:
   typeof.js:120:7
   120|   if (typeof x === 'boolean') {
              ^^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:122:10
   122|     x as empty; // error boolean ~> empty
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:128:5

Cannot cast `x` to empty because symbol [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:128:5
   128|     x as empty; // error symbol ~> empty
            ^

References:
   typeof.js:127:7
   127|   if (typeof x === 'symbol') {
              ^^^^^^^^^^^^^^^^^^^^^ [1]
   typeof.js:128:10
   128|     x as empty; // error symbol ~> empty
                 ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:135:5

Cannot cast `C` to empty because class `C` [1] is incompatible with empty [2]. [incompatible-cast]

   typeof.js:135:5
   135|     C as empty; // error class C ~> empty
            ^

References:
   typeof.js:133:17
   133|   declare class C<X> {}
                        ^ [1]
   typeof.js:135:10
   135|     C as empty; // error class C ~> empty
                 ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- undef.js:31:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:31:13
   31|     var y = x * 1000;
                   ^^^^^^^^

References:
   undef.js:29:28
   29| function undef_var_fail(x: ?number) {
                                  ^^^^^^^ [1]
   undef.js:31:17
   31|     var y = x * 1000;
                       ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- undef.js:38:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:38:13
   38|     var y = x * 1000;
                   ^^^^^^^^

References:
   undef.js:35:32
   35| function undef_var_fail_rev(x: ?number) {
                                      ^^^^^^^ [1]
   undef.js:38:17
   38|     var y = x * 1000;
                       ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- undef.js:44:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:44:13
   44|     var y = x.x * 1000;
                   ^^^^^^^^^^

References:
   undef.js:42:34
   42| function undef_prop_fail(x: { x: ?number }) {
                                        ^^^^^^^ [1]
   undef.js:44:19
   44|     var y = x.x * 1000;
                         ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- undef.js:51:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:51:13
   51|     var y = x.x * 1000;
                   ^^^^^^^^^^

References:
   undef.js:48:38
   48| function undef_prop_fail_rev(x: { x: ?number }) {
                                            ^^^^^^^ [1]
   undef.js:51:19
   51|     var y = x.x * 1000;
                         ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- undef.js:69:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:69:13
   69|     var b = y * 1000; // error
                   ^^^^^^^^

References:
   undef.js:64:45
   64| function undef_var_nonstrict(x: ?number, y: ?number) {
                                                   ^^^^^^^ [1]
   undef.js:69:17
   69|     var b = y * 1000; // error
                       ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- undef.js:74:7

Cannot use operator `*` with operands number [1] and undefined [2] [unsafe-arithmetic]

   undef.js:74:7
   74|   if (100 * undefined) {
             ^^^^^^^^^^^^^^^

References:
   undef.js:74:7
   74|   if (100 * undefined) {
             ^^^ [1]
   undef.js:74:13
   74|   if (100 * undefined) {
                   ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- undef.js:77:7

Cannot use operator `*` with operands undefined [1] and number [2] [unsafe-arithmetic]

   undef.js:77:7
   77|   if (undefined * 100) {
             ^^^^^^^^^^^^^^^

References:
   undef.js:77:7
   77|   if (undefined * 100) {
             ^^^^^^^^^ [1]
   undef.js:77:19
   77|   if (undefined * 100) {
                         ^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:7:7

Cannot get `x[0]` because property `0` is missing in `Boolean` [1]. [prop-missing]

   union.js:7:7
     7|     x[0]; // error on boolean
              ^

References:
   <BUILTINS>/core.js:376:15
   376| declare class Boolean {
                      ^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- union.js:13:7

Cannot get `x[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   union.js:13:7
   13|     x[0]; // error on number
             ^

References:
   union.js:11:17
   11| function bar(x: thing) {
                       ^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- union.js:19:7

Cannot get `x[0]` because property `0` is missing in `Number` [1]. [prop-missing]

   union.js:19:7
   19|     x[0]; // error on number
             ^

References:
   union.js:17:18
   17| function baz(x: ?thing) {
                        ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ union_enum.js:9:4

Cannot cast `E.A` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   union_enum.js:9:4
   9|   (E.A: number); // Error expected
         ^^^

References:
   union_enum.js:3:15
   3| const E = {A: 'A', B: 'B'};
                    ^^^ [1]
   union_enum.js:9:9
   9|   (E.A: number); // Error expected
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:31:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:31:13
   31|     var y = x * 1000;
                   ^^^^^^^^

References:
   void.js:29:27
   29| function void_var_fail(x: ?number) {
                                 ^^^^^^^ [1]
   void.js:31:17
   31|     var y = x * 1000;
                       ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:38:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:38:13
   38|     var y = x * 1000;
                   ^^^^^^^^

References:
   void.js:35:31
   35| function void_var_fail_rev(x: ?number) {
                                     ^^^^^^^ [1]
   void.js:38:17
   38|     var y = x * 1000;
                       ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:44:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:44:13
   44|     var y = x.x * 1000;
                   ^^^^^^^^^^

References:
   void.js:42:32
   42| function void_pro_fail(x: { x: ?number }) {
                                      ^^^^^^^ [1]
   void.js:44:19
   44|     var y = x.x * 1000;
                         ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:51:13

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:51:13
   51|     var y = x.x * 1000;
                   ^^^^^^^^^^

References:
   void.js:48:36
   48| function void_pro_fail_rev(x: { x: ?number }) {
                                          ^^^^^^^ [1]
   void.js:51:19
   51|     var y = x.x * 1000;
                         ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:56:32

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:56:32
   56|   if (x !== null && x !== void(x * 1000)) {
                                      ^^^^^^^^

References:
   void.js:55:34
   55| function void_var_side_effect(x: ?number) {
                                        ^^^^^^^ [1]
   void.js:56:36
   56|   if (x !== null && x !== void(x * 1000)) {
                                          ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:62:32

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:62:32
   62|   if (x === null || x === void(x * 1000)) {
                                      ^^^^^^^^

References:
   void.js:61:38
   61| function void_var_side_effect_rev(x: ?number) {
                                            ^^^^^^^ [1]
   void.js:62:36
   62|   if (x === null || x === void(x * 1000)) {
                                          ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:69:36

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:69:36
   69|   if (x.x !== null && x.x !== void(x.x * 1000)) {
                                          ^^^^^^^^^^

References:
   void.js:68:40
   68| function void_prop_side_effect(x: { x: ?number }) {
                                              ^^^^^^^ [1]
   void.js:69:42
   69|   if (x.x !== null && x.x !== void(x.x * 1000)) {
                                                ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- void.js:75:36

Cannot use operator `*` with operands null or undefined [1] and number [2] [unsafe-arithmetic]

   void.js:75:36
   75|   if (x.x === null || x.x === void(x.x * 1000)) {
                                          ^^^^^^^^^^

References:
   void.js:74:44
   74| function void_prop_side_effect_rev(x: { x: ?number }) {
                                                  ^^^^^^^ [1]
   void.js:75:42
   75|   if (x.x === null || x.x === void(x.x * 1000)) {
                                                ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- void.js:82:7

Cannot use operator `*` with operands number [1] and undefined [2] [unsafe-arithmetic]

   void.js:82:7
   82|   if (100 * void(0)) {
             ^^^^^^^^^^^^^

References:
   void.js:82:7
   82|   if (100 * void(0)) {
             ^^^ [1]
   void.js:82:13
   82|   if (100 * void(0)) {
                   ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- void.js:85:7

Cannot use operator `*` with operands undefined [1] and number [2] [unsafe-arithmetic]

   void.js:85:7
   85|   if (void(0) * 100) {
             ^^^^^^^^^^^^^

References:
   void.js:85:7
   85|   if (void(0) * 100) {
             ^^^^^^^ [1]
   void.js:85:17
   85|   if (void(0) * 100) {
                       ^^^ [2]



Found 445 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
