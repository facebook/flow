assignment.js:16
 16:   while (x = x.parent) { // can't assign x to ?Bar
                  ^^^^^^^^ null. This type is incompatible with
 15: function bar0(x : Bar) {
                       ^^^ object type

assignment.js:16
 16:   while (x = x.parent) { // can't assign x to ?Bar
                  ^^^^^^^^ undefined. This type is incompatible with
 15: function bar0(x : Bar) {
                       ^^^ object type

assignment.js:22
 22:   while (x = x.parent) { // x.parent might be null
                    ^^^^^^ property `parent`. Property cannot be accessed on possibly null value
 22:   while (x = x.parent) { // x.parent might be null
                  ^ null

assignment.js:22
 22:   while (x = x.parent) { // x.parent might be null
                    ^^^^^^ property `parent`. Property cannot be accessed on possibly undefined value
 22:   while (x = x.parent) { // x.parent might be null
                  ^ undefined

bool.js:12
 12:   x[0]; // error on null and undefined
       ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 12:   x[0]; // error on null and undefined
       ^ null

bool.js:12
 12:   x[0]; // error on null and undefined
       ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 12:   x[0]; // error on null and undefined
       ^ undefined

bool.js:18
 18:       x[0]; // error on null and undefined
           ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 18:       x[0]; // error on null and undefined
           ^ null

bool.js:18
 18:       x[0]; // error on null and undefined
           ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 18:       x[0]; // error on null and undefined
           ^ undefined

bool.js:24
 24:   if (100 * false) {
                 ^^^^^ boolean. This type is incompatible with
 24:   if (100 * false) {
           ^^^^^^^^^^^ number

bool.js:27
 27:   if (false * 100) {
           ^^^^^ boolean. This type is incompatible with
 27:   if (false * 100) {
           ^^^^^^^^^^^ number

bool.js:37
 37:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 37:     return x.result; // error
                ^ object type

bool.js:44
 44:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 44:     return x.result; // error
                ^ object type

cond_prop.js:11
 11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                             ^^^^^^^^^^^^ object type. This type is incompatible with
  9: function getTypeASTName(typeAST: Type): string {
                                      ^^^^ union: Name | ListType | NonNullType
  Member 1:
    3: type Type = Name | ListType | NonNullType;
                   ^^^^ Name
  Error:
    3: type Type = Name | ListType | NonNullType;
                   ^^^^ property `kind`. Property not found in
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type
  Member 2:
    3: type Type = Name | ListType | NonNullType;
                          ^^^^^^^^ ListType
  Error:
    3: type Type = Name | ListType | NonNullType;
                          ^^^^^^^^ property `kind`. Property not found in
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type
  Member 3:
    3: type Type = Name | ListType | NonNullType;
                                     ^^^^^^^^^^^ NonNullType
  Error:
    3: type Type = Name | ListType | NonNullType;
                                     ^^^^^^^^^^^ property `kind`. Property not found in
   11:   return getTypeASTName(typeAST.type); // error, BadType not a subtype of Type
                               ^^^^^^^^^^^^ object type

cond_prop.js:19
 19:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 19:     return x.result; // error
                ^ object type

cond_prop.js:24
 24:       return x.result; // error, consider { foo: "herp", done: "derp" }
                    ^^^^^^ property `result`. Property not found in
 24:       return x.result; // error, consider { foo: "herp", done: "derp" }
                  ^ object type

cond_prop.js:26
 26:     return x.result; // error
                  ^^^^^^ property `result`. Property not found in
 26:     return x.result; // error
                ^ object type

cond_prop.js:36
 36:         (t.bar: string); // error, consider { baz: "x", quux: "y", foo: "boom" }
                ^^^ property `bar`. Property not found in
 36:         (t.bar: string); // error, consider { baz: "x", quux: "y", foo: "boom" }
              ^ object type

cond_prop.js:46
 46:         (t.foo: Object); // error, consider { baz: "x", quux: "y", bar: "boom" }
                ^^^ property `foo`. Property not found in
 46:         (t.foo: Object); // error, consider { baz: "x", quux: "y", bar: "boom" }
              ^ object type

cond_prop.js:48
 48:         (t.quux: string); // error, consider { foo: {}, bar: "" }
                ^^^^ property `quux`. Property not found in
 48:         (t.quux: string); // error, consider { foo: {}, bar: "" }
              ^ object type

hasOwnProperty.js:4
  4:   x.y(); // error: could be undefined
       ^^^^^ call of method `y`. Function cannot be called on possibly undefined value
  3: function foo(x:{y?:() => void}) {
                        ^^^^^^^^^^ undefined

hasOwnProperty.js:6
  6:     x.y(); // error: still could be undefined
         ^^^^^ call of method `y`. Function cannot be called on possibly undefined value
  3: function foo(x:{y?:() => void}) {
                        ^^^^^^^^^^ undefined

hasOwnProperty.js:9
  9:     x.z(); // error: unreachable, but we don't help you here
           ^ property `z`. Property not found in
  9:     x.z(); // error: unreachable, but we don't help you here
         ^ object type

heap_defassign.js:10
 10:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 10:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

heap_defassign.js:16
 16:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 16:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

heap_defassign.js:22
 22:     var x: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 22:     var x: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

heap_defassign.js:30
 30:     var y: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 30:     var y: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

heap_defassign.js:38
 38:     var y: number = obj.p;      // error, obj.p : number | string
                         ^^^^^ string. This type is incompatible with
 38:     var y: number = obj.p;      // error, obj.p : number | string
                ^^^^^^ number

heap_defassign.js:62
 62:         var y: number = obj.p;  // error, string ~/~ number
                             ^^^^^ string. This type is incompatible with
 62:         var y: number = obj.p;  // error, string ~/~ number
                    ^^^^^^ number

heap_defassign.js:65
 65:     var z:string = obj.p;       // error, number ~/~ string
                        ^^^^^ number. This type is incompatible with
 65:     var z:string = obj.p;       // error, number ~/~ string
               ^^^^^^ string

heap_defassign.js:73
 73:     var z: number = obj.p;      // error, (number | string) ~/~ number
                         ^^^^^ string. This type is incompatible with
 73:     var z: number = obj.p;      // error, (number | string) ~/~ number
                ^^^^^^ number

mixed.js:8
  8:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
  8:     takesString(x); // error
                     ^ number. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:9
  9:     (!x: false); // error: we don't know the truthiness of x
          ^^ boolean. Expected boolean literal `false`
  9:     (!x: false); // error: we don't know the truthiness of x
              ^^^^^ boolean literal `false`

mixed.js:21
 21:     takesNumber(x); // error
         ^^^^^^^^^^^^^^ function call
 21:     takesNumber(x); // error
                     ^ string. This type is incompatible with
  3: function takesNumber(x: number) {}
                             ^^^^^^ number

mixed.js:22
 22:     (!x: false); // error: we don't know the truthiness of x
          ^^ boolean. Expected boolean literal `false`
 22:     (!x: false); // error: we don't know the truthiness of x
              ^^^^^ boolean literal `false`

mixed.js:34
 34:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 34:     takesString(x); // error
                     ^ boolean. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:35
 35:     (x: true); // error: we don't know the truthiness of x
          ^ boolean. Expected boolean literal `true`
 35:     (x: true); // error: we don't know the truthiness of x
             ^^^^ boolean literal `true`

mixed.js:47
 47:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 47:     takesString(x); // error
                     ^ function. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:53
 53:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 53:     takesString(x); // error
                     ^ null. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:53
 53:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 53:     takesString(x); // error
                     ^ object. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:59
 59:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 59:     takesString(x); // error
                     ^ array. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:65
 65:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 65:     takesString(x); // error
                     ^ undefined. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:71
 71:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 71:     takesString(x); // error
                     ^ null. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:77
 77:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 77:     takesString(x); // error
                     ^ null. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:77
 77:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 77:     takesString(x); // error
                     ^ undefined. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:83
 83:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 83:     takesString(x); // error
                     ^ boolean. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:89
 89:     takesString(x); // error
         ^^^^^^^^^^^^^^ function call
 89:     takesString(x); // error
                     ^ boolean. This type is incompatible with
  4: function takesString(x: string) {}
                             ^^^^^^ string

mixed.js:97
 97:       (x['foo']: string); // error, mixed
            ^^^^^^^^ mixed. This type is incompatible with
 97:       (x['foo']: string); // error, mixed
                      ^^^^^^ string

not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ boolean. This type is incompatible with
  5:     x++; // should error for null, void and bool (false)
         ^^^ number

not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ null. This type is incompatible with
  5:     x++; // should error for null, void and bool (false)
         ^^^ number

not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^ undefined. This type is incompatible with
  5:     x++; // should error for null, void and bool (false)
         ^^^ number

not.js:5
  5:     x++; // should error for null, void and bool (false)
         ^^^ number. This type is incompatible with
  3: function foo(x: ?bool) {
                      ^^^^ boolean

not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
 11:     x[0]; // should error for null, void and number (0)
         ^ number

not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly null value
 11:     x[0]; // should error for null, void and number (0)
         ^ null

not.js:11
 11:     x[0]; // should error for null, void and number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on possibly undefined value
 11:     x[0]; // should error for null, void and number (0)
         ^ undefined

not.js:21
 21:     x[0]; // should error for number (0)
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
 21:     x[0]; // should error for number (0)
         ^ number

not.js:41
 41:     (!x: false); // error, strings are not always truthy
          ^^ boolean. Expected boolean literal `false`
 41:     (!x: false); // error, strings are not always truthy
              ^^^^^ boolean literal `false`

not.js:44
 44:     (!x: false); // error, numbers are not always truthy
          ^^ boolean. Expected boolean literal `false`
 44:     (!x: false); // error, numbers are not always truthy
              ^^^^^ boolean literal `false`

not.js:47
 47:     (!x: false); // error, bools are not always truthy
          ^^ boolean. Expected boolean literal `false`
 47:     (!x: false); // error, bools are not always truthy
              ^^^^^ boolean literal `false`

null.js:4
  4:   if (100 * null) {
                 ^^^^ null. This type is incompatible with
  4:   if (100 * null) {
           ^^^^^^^^^^ number

null.js:7
  7:   if (null * 100) {
           ^^^^ null. This type is incompatible with
  7:   if (null * 100) {
           ^^^^^^^^^^ number

number.js:8
  8:       (x: void); // error
            ^ number. This type is incompatible with
  8:       (x: void); // error
               ^^^^ undefined

number.js:10
 10:     (x: 0); // error
          ^ number. Expected number literal `0`
 10:     (x: 0); // error
             ^ number literal `0`

number.js:15
 15:       (x: 0); // error
            ^ number. Expected number literal `0`
 15:       (x: 0); // error
               ^ number literal `0`

number.js:17
 17:     (x: void); // error
          ^ number. This type is incompatible with
 17:     (x: void); // error
             ^^^^ undefined

number.js:51
 51:       (x: void); // error
            ^ number literal `0`. This type is incompatible with
 51:       (x: void); // error
               ^^^^ undefined

number.js:55
 55:       (x: void); // error
            ^ number literal `1`. This type is incompatible with
 55:       (x: void); // error
               ^^^^ undefined

number.js:63
 63:     return x.foo; // error
                ^^^^^ number. Expected number literal `0`
 59:   function(x: { foo: number }): 0 {
                                     ^ number literal `0`

number.js:77
 77:     if (str === obj.bar) { // error, no such property
                         ^^^ property `bar`. Property not found in
 77:     if (str === obj.bar) { // error, no such property
                     ^^^ object type

number.js:97
 97:       return s; // error
                  ^ number. This type is incompatible with
 93:   function(s: number): ?Mode {
                             ^^^^ number enum

number.js:116
116:       return x; // error
                  ^ number. Expected number literal `0`
114:   function(x: number): 0 {
                            ^ number literal `0`

property.js:64
 64:     return x[y.z];  // error
                ^^^^^^ null. This type is incompatible with
 61: function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                                               ^^^^^^ string

property.js:64
 64:     return x[y.z];  // error
                ^^^^^^ undefined. This type is incompatible with
 61: function c2(x: {[key: string]: ?string}, y: {z: string}): string {
                                                               ^^^^^^ string

refinements.js:4
  4:         var y:string = x;
                            ^ number. This type is incompatible with
  4:         var y:string = x;
                   ^^^^^^ string

refinements.js:7
  7:     var z:string = x;
                        ^ boolean. This type is incompatible with
  7:     var z:string = x;
               ^^^^^^ string

refinements.js:7
  7:     var z:string = x;
                        ^ null. This type is incompatible with
  7:     var z:string = x;
               ^^^^^^ string

refinements.js:13
 13:         var y:string = x;
                            ^ null. This type is incompatible with
 13:         var y:string = x;
                   ^^^^^^ string

refinements.js:13
 13:         var y:string = x;
                            ^ number. This type is incompatible with
 13:         var y:string = x;
                   ^^^^^^ string

refinements.js:16
 16:     var z:string = x;
                        ^ boolean. This type is incompatible with
 16:     var z:string = x;
               ^^^^^^ string

refinements.js:33
 33:         var y:number = x;
                            ^ string. This type is incompatible with
 33:         var y:number = x;
                   ^^^^^^ number

refinements.js:36
 36:     var z:string = x;
                        ^ number. This type is incompatible with
 36:     var z:string = x;
               ^^^^^^ string

refinements.js:43
 43:         var y:string = x;
                            ^ number. This type is incompatible with
 43:         var y:string = x;
                   ^^^^^^ string

refinements.js:45
 45:     var z:string = x;
                        ^ boolean. This type is incompatible with
 45:     var z:string = x;
               ^^^^^^ string

refinements.js:45
 45:     var z:string = x;
                        ^ null. This type is incompatible with
 45:     var z:string = x;
               ^^^^^^ string

refinements.js:54
 54:     var z:number = x;
                        ^ boolean. This type is incompatible with
 54:     var z:number = x;
               ^^^^^^ number

string.js:8
  8:       (x: void); // error
            ^ string. This type is incompatible with
  8:       (x: void); // error
               ^^^^ undefined

string.js:10
 10:     (x: 'foo'); // error
          ^ string. Expected string literal `foo`
 10:     (x: 'foo'); // error
             ^^^^^ string literal `foo`

string.js:15
 15:       (x: 'foo'); // error
            ^ string. Expected string literal `foo`
 15:       (x: 'foo'); // error
               ^^^^^ string literal `foo`

string.js:17
 17:     (x: void); // error
          ^ string. This type is incompatible with
 17:     (x: void); // error
             ^^^^ undefined

string.js:51
 51:       (x: void); // error
            ^ string literal `foo`. This type is incompatible with
 51:       (x: void); // error
               ^^^^ undefined

string.js:55
 55:       (x: void); // error
            ^ string literal `bar`. This type is incompatible with
 55:       (x: void); // error
               ^^^^ undefined

string.js:63
 63:     return x.foo; // error
                ^^^^^ string. Expected string literal `foo`
 59:   function(x: { foo: string }): 'foo' {
                                     ^^^^^ string literal `foo`

string.js:77
 77:     if (str === obj.bar) { // error, no such property
                         ^^^ property `bar`. Property not found in
 77:     if (str === obj.bar) { // error, no such property
                     ^^^ object type

string.js:98
 98:       return s; // error
                  ^ string. This type is incompatible with
 94:   function(s: string): ?Mode {
                             ^^^^ string enum

string.js:117
117:       return x; // error
                  ^ string. Expected string literal ``
115:   function(x: string): "" {
                            ^^ string literal ``

switch.js:8
  8:       return text; // error, should return string
                  ^^^^ number. This type is incompatible with
  3: function foo(text: string | number): string {
                                          ^^^^^^ string

switch.js:27
 27:       return text[0]; // error, [0] on number
                  ^^^^^^^ access of computed property/element. Computed property/element cannot be accessed on
 27:       return text[0]; // error, [0] on number
                  ^^^^ number

switch.js:37
 37:       return text[0]; // error, [0] on number
                  ^^^^^^^ access of computed property/element. Computed property/element cannot be accessed on
 37:       return text[0]; // error, [0] on number
                  ^^^^ number

switch.js:51
 51:       return (text++) + '';
                   ^^^^ string. This type is incompatible with
 51:       return (text++) + '';
                   ^^^^^^ number

tagged_union.js:20
 20:     return x.prop1.charAt(0); // typeAST: Node1, but x.prop1 may be undefined
                ^^^^^^^^^^^^^^^^^ call of method `charAt`. Method cannot be called on possibly undefined value
 20:     return x.prop1.charAt(0); // typeAST: Node1, but x.prop1 may be undefined
                ^^^^^^^ undefined

tagged_union.js:34
 34:   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                  ^^^^^^^ string literal `Bad`. Expected string literal `Good`, got `Bad` instead
 34:   if (x.kind === 'Fruit') { (x.taste: 'Good'); } // error, Apple.taste = Bad
                                           ^^^^^^ string literal `Good`

tagged_union.js:35
 35:   else (x.raw: 'No'); // error, Carrot.raw = Maybe
             ^^^^^ string literal `Maybe`. Expected string literal `No`, got `Maybe` instead
 35:   else (x.raw: 'No'); // error, Carrot.raw = Maybe
                    ^^^^ string literal `No`

tagged_union.js:40
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
          ^^^^^ string literal `Maybe`. This type is incompatible with
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
                 ^^^^^^^^^^^^ string enum

tagged_union.js:40
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
            ^^^ property `raw`. Property not found in
 40:     (x.raw: 'Yes' | 'No'); // 2 errors:
          ^ object type

tagged_union.js:72
 72:   default: return x.A; // error, x: C and property A not found in type C
                         ^ property `A`. Property not found in
 72:   default: return x.A; // error, x: C and property A not found in type C
                       ^ object type

tagged_union.js:88
 88:     if (x.kindTypo === 1) {} // error, kindTypo doesn't exist on A
               ^^^^^^^^ property `kindTypo`. Property not found in
 88:     if (x.kindTypo === 1) {} // error, kindTypo doesn't exist on A
             ^ object type

tagged_union.js:94
 94:     if (x.fooTypo.bar === 1) {} // error, fooTypo doesn't exist
               ^^^^^^^ property `fooTypo`. Property not found in
 94:     if (x.fooTypo.bar === 1) {} // error, fooTypo doesn't exist
             ^ object type

tagged_union.js:99
 99:     if (x.kind === (null).toString()) {} // error, method on null
                         ^^^^^^^^^^^^^^^^ call of method `toString`. Method cannot be called on possibly null value
 99:     if (x.kind === (null).toString()) {} // error, method on null
                         ^^^^ null

tagged_union.js:100
100:     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                 ^^^^^^^^^^^^^^^^ call of method `toString`. Method cannot be called on possibly null value
100:     if ({kind: 1}.kind === (null).toString()) {} // error, method on null
                                 ^^^^ null

tagged_union.js:109
109:     if (x.legnth === 0) {} // error, typo
               ^^^^^^ property `legnth`. Property not found in
109:     if (x.legnth === 0) {} // error, typo
             ^ Array

tagged_union.js:111
111:     if (y.legnth === 0) {} // error, typo
               ^^^^^^ property `legnth`. Property not found in
111:     if (y.legnth === 0) {} // error, typo
             ^ String

tagged_union.js:113
113:     if (z.toStirng === 0) {} // error, typo
               ^^^^^^^^ property `toStirng`. Property not found in
113:     if (z.toStirng === 0) {} // error, typo
             ^ Number

tagged_union.js:115
115:     if (q.valeuOf === 0) {} // error, typo
               ^^^^^^^ property `valeuOf`. Property not found in
115:     if (q.valeuOf === 0) {} // error, typo
             ^ Boolean

tagged_union.js:118
118:     if (s.calll === 0) {} // error, typo
               ^^^^^ property `calll`. Property not found in
118:     if (s.calll === 0) {} // error, typo
             ^ function type

tagged_union.js:120
120:     if (t.calll === 0) {} // error, typo
               ^^^^^ property `calll`. Property not found in
120:     if (t.calll === 0) {} // error, typo
             ^ statics of function type

typeof.js:5
  5:     x[0]; // error for boolean, not number
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
  5:     x[0]; // error for boolean, not number
         ^ boolean

typeof.js:12
 12:     return x; // error, null
                ^ null. This type is incompatible with
  9: function bar(): number {
                     ^^^^^^ number

typeof.js:23
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^^^^^^^^^^^^ call of method `stuff`. Function cannot be called on possibly undefined value
  3: declare var BAZ: {stuff?: (x: number) => void} | void;
                               ^^^^^^^^^^^^^^^^^^^ undefined. See: lib.js:3

typeof.js:23
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^^^^^^^^^^^^ call of method `stuff`. Method cannot be called on possibly undefined value
 23:   BAZ.stuff(123); // error, refinement is gone
       ^^^ undefined

typeof.js:26
 26:   BAZ.stuff; // error, could be undefined
           ^^^^^ property `stuff`. Property cannot be accessed on possibly undefined value
 26:   BAZ.stuff; // error, could be undefined
       ^^^ undefined

typeof.js:30
 30:     BAZ.stuff(123); // error, refinement is gone
         ^^^^^^^^^^^^^^ call of method `stuff`. Function cannot be called on possibly undefined value
  3: declare var BAZ: {stuff?: (x: number) => void} | void;
                               ^^^^^^^^^^^^^^^^^^^ undefined. See: lib.js:3

typeof.js:49
 49:   if (typeof x === "foo") { // error
                        ^^^^^ string literal `foo`. This value is not a valid `typeof` return value

undef.js:31
 31:     var y = x * 1000;
                 ^ null. This type is incompatible with
 31:     var y = x * 1000;
                 ^^^^^^^^ number

undef.js:38
 38:     var y = x * 1000;
                 ^ null. This type is incompatible with
 38:     var y = x * 1000;
                 ^^^^^^^^ number

undef.js:44
 44:     var y = x.x * 1000;
                 ^^^ null. This type is incompatible with
 44:     var y = x.x * 1000;
                 ^^^^^^^^^^ number

undef.js:51
 51:     var y = x.x * 1000;
                 ^^^ null. This type is incompatible with
 51:     var y = x.x * 1000;
                 ^^^^^^^^^^ number

undef.js:69
 69:     var b = y * 1000; // error
                 ^ null. This type is incompatible with
 69:     var b = y * 1000; // error
                 ^^^^^^^^ number

undef.js:69
 69:     var b = y * 1000; // error
                 ^ undefined. This type is incompatible with
 69:     var b = y * 1000; // error
                 ^^^^^^^^ number

undef.js:74
 74:   if (100 * undefined) {
                 ^^^^^^^^^ undefined. This type is incompatible with
 74:   if (100 * undefined) {
           ^^^^^^^^^^^^^^^ number

undef.js:77
 77:   if (undefined * 100) {
           ^^^^^^^^^ undefined. This type is incompatible with
 77:   if (undefined * 100) {
           ^^^^^^^^^^^^^^^ number

union.js:7
  7:     x[0]; // error on boolean
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
  7:     x[0]; // error on boolean
         ^ boolean

union.js:13
 13:     x[0]; // error on number
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
 13:     x[0]; // error on number
         ^ number

union.js:19
 19:     x[0]; // error on number
         ^^^^ access of computed property/element. Computed property/element cannot be accessed on
 19:     x[0]; // error on number
         ^ number

void.js:31
 31:     var y = x * 1000;
                 ^ null. This type is incompatible with
 31:     var y = x * 1000;
                 ^^^^^^^^ number

void.js:38
 38:     var y = x * 1000;
                 ^ null. This type is incompatible with
 38:     var y = x * 1000;
                 ^^^^^^^^ number

void.js:44
 44:     var y = x.x * 1000;
                 ^^^ null. This type is incompatible with
 44:     var y = x.x * 1000;
                 ^^^^^^^^^^ number

void.js:51
 51:     var y = x.x * 1000;
                 ^^^ null. This type is incompatible with
 51:     var y = x.x * 1000;
                 ^^^^^^^^^^ number

void.js:56
 56:   if (x !== null && x !== void(x * 1000)) {
                                    ^ undefined. This type is incompatible with
 56:   if (x !== null && x !== void(x * 1000)) {
                                    ^^^^^^^^ number

void.js:62
 62:   if (x === null || x === void(x * 1000)) {
                                    ^ undefined. This type is incompatible with
 62:   if (x === null || x === void(x * 1000)) {
                                    ^^^^^^^^ number

void.js:69
 69:   if (x.x !== null && x.x !== void(x.x * 1000)) {
                                        ^^^ undefined. This type is incompatible with
 69:   if (x.x !== null && x.x !== void(x.x * 1000)) {
                                        ^^^^^^^^^^ number

void.js:75
 75:   if (x.x === null || x.x === void(x.x * 1000)) {
                                        ^^^ undefined. This type is incompatible with
 75:   if (x.x === null || x.x === void(x.x * 1000)) {
                                        ^^^^^^^^^^ number

void.js:82
 82:   if (100 * void(0)) {
                 ^^^^^^ undefined. This type is incompatible with
 82:   if (100 * void(0)) {
           ^^^^^^^^^^^^^ number

void.js:85
 85:   if (void(0) * 100) {
           ^^^^^^ undefined. This type is incompatible with
 85:   if (void(0) * 100) {
           ^^^^^^^^^^^^^ number


Found 142 errors
