array.js 3 15
// @flow

function foo(): Array<number> {
  return [1, 2];
}
Found 0 errors
arrow-0.js 3 8
// @flow

const a: ((x: number) => number) = (x) => x + 1;
a(1);
Found 0 errors
arrow-0.js 3 13
// @flow

const a = (x: number) => x + 1;
a(1);
Found 0 errors
arrow-0.js 3 14
// @flow

const a = (x): number => x + 1;
a(1);
Found 0 errors
arrow-1.js 3 16
// @flow

const b = (x, y: string, z) => x(y, z.f);
b((k, l) => (l + k), "a", { f: 2 });
Found 0 errors
arrow-2.js 3 5
// @flow

((x): number => x + 1)(4);
Found 0 errors
class-0.js 4 3
// @flow

class A {
  f: number = 1;
  m(x) {
    return this.f + 1;
  }
}

(new A).m("");
Found 0 errors
class-0.js 4 4
// @flow

class A {
  f: number = 1;
  m(x) {
    return this.f + 1;
  }
}

(new A).m("");
Found 0 errors
class-0.js 4 3 4 4
// @flow

class A {
  f: number = 1;
  m(x) {
    return this.f + 1;
  }
}

(new A).m("");
Found 0 errors
class-1.js 5 6
// @flow

class A {
  f = 1;
  m(): string { return "a"; }
}

var a = new A;
function foo(x) { return x; }
foo(A);
Found 0 errors
class-2.js 4 6
// @flow

class A {
  m(): this {
    return this;
  }
}
Found 0 errors
class-3.js 9 15
// @flow

class A {
  m() {
    return this;
  }
}

function foo(x: (() => A)) {}
foo(new A().m);
Found 0 errors
comments-0.js 4 33
// @flow

// BEFORE FUNCTION
export function test (x: number): string {
  // ONE
  const a = 4 + x; // END OF a = 4...
  // TWO
  return /* BETWEEEN */ `${a}` // END OF return ...
} // END
Found 0 errors
dictionary.js 12 12
// @flow

() => ({
  ab: null,
  "a b": null,
  "a'b": null,
  "1": null,
  "'": null,
  " ": null,
  "_": null,
  "": null,
  get "x"(): null {
    return null;
  },
  set "y"(z: string) {}
});

() => ({
  ab: null,
  'a b': null,
  'a"b': null,
  '1': null,
  '"': null,
  ' ': null,
  '_': null,
  '': null,
  get 'x'() {
    return null;
  },
  set 'y'(z: string) {}
});
Found 0 errors
func-0.js 3 26
// @flow

function foo(x: number, y: string) {
  return x + y;
}

foo(1, "");
Found 0 errors
func-1.js 3 18
// @flow

function foo(x, y: ((z: number) => number)) {
  return x + y(x);
}

foo(1, (z) => z + 1);
Found 0 errors
func-2.js 4 17
// @flow

function foo(x, y) {
  function bar(z: number, w) {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);
Found 0 errors
func-3.js 2 22
// @flow
function throws_arg(): empty {
  throw 42;
}
Found 0 errors
func-4.js 2 22
// @flow
function throws_arg(): empty {
  if (Math.random() < 0.5) {
    throw 42;
  } else {
    throw 42;
  }
}
Found 0 errors
func-5.js 2 22
// @flow
function throws_arg(): number {
  if (Math.random() < 0.5) {
    return 42;
  } else {
    throw 42;
  }
}
Found 0 errors
func-poly-0.js 3 24
// @flow

function outer<T>(y: T): void {
  function inner<T>(x: T, z) {
    inner(x, x);
  }
}
Found 0 errors
object-0.js 7 6
// @flow

var obj = {
  n(y) {
    return this.m(y);
  },
  m(x: number) {
    return "";
  }
}

obj.n(0)
Found 0 errors
object-1.js 7 8
// @flow

var obj = {
  'n'(y) {
    return this.m(y);
  },
  'm'(x: number) {
    return "";
  }
}

obj['n'](0)
Found 0 errors
object-2.js 6 6
// @flow

function foo(x) {}

foo({
  m(): number { return 1; },
  n: () => 2,
  l: function bar() {}
});
Found 0 errors
poly-0.js 3 22
// @flow

function foo<T>(x: T): {|f: T|} {
  return {
    f: x
  }
}
Found 0 errors
poly-0.js 3 15
// @flow

function foo<T: mixed>(x: T) {
  return {
    f: x
  }
}
Found 0 errors
react-0.js 6 21
// @flow

import React from "react";
import ReactDOM from "react-dom";

function Clock(props: {|date: Date|}) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  const element = document.getElementById('root');
  if (element) {
    ReactDOM.render(
      <Clock date={new Date()} />,
      element
    );
  }
}

setInterval(tick, 1000);
Found 0 errors
spread.js 10 3
// @flow

declare opaque type O;
class C { f: O; }
class D { g: O; }

() => { declare var x: {w: O, ...{ x: O, y: O }, z: O}; return x; };
() => { declare var x: {|w: O, ...{| x: O, y: O |}, z: O|}; return x; };
() => { declare var x: {...C, o: O}; return x; };
(): {f?: O, o: mixed} => { declare var x: {o: O, ...C}; return x; };
() => { declare var x: {...C} & {...D}; return x; };
<T: {}, S: { f: O}>() => { declare var x: {...T, ...S, o: O}; return x; };
<T: {}>() => { declare var x: {...T, o: O}; return x; };
Found 0 errors
string-literal.js 11 14
// @flow

declare var a: "a";
declare var single_quote: "'";
declare var double_quote: '""';
declare var backslash: '\\';

function f1() { return a; }
function f2() { return single_quote; }
function f3() { return double_quote; }
function f4(): "\\" { return backslash; }
Found 0 errors
type-utils.js 6 3
// @flow

declare class C<P> {};

declare var typeof_C: typeof C;
(): typeof C => typeof_C;

declare var class_of_C_number: Class<C<number>>;
() => class_of_C_number;
Found 0 errors
union-0.js 3 15
// @flow

function foo(x: void | number | string | (() => void)) { }

foo(1);
foo("1");
foo(1);
foo(2);
foo(() => foo());
foo();
Found 0 errors
replacement-array.js 5 15
// @flow

// preserve spacing

function foo(): Array<number> {return [1, 2];}
Found 0 errors
replacement-arrow.js 3 13
// @flow

const a = (x: number) =>
                  x + 1;


a(1);
Found 0 errors
replacement-class.js 5 7
// @flow

class A { // end of line comment
                                f = 1;
  m(x): number { return this.f + 1; }
} (new A).m(""); // weird spacing
Found 0 errors
replacement-dictionary.js 3 3
// @flow

(): {|
  "": null,
  " ": null,
  "'": null,
  "1": null,
  _: null,
  "a b": null,
  "a'b": null,
  ab: null,
  get x(): null,
  set y(string): void,
|} => ({
  ab: null, "a b": null, "a'b": null,
  "1": null, "'": null, " ": null,
  "_": null, "": null,
  get "x"() {return null; },
  set "y"(z: string) {}});

() => ({
  ab: null, 'a b': null, 'a"b': null, '1': null, '"': null, ' ': null, '_': null, '': null,
  get 'x'() {return null;}, set 'y'(z: string) {} } );
Found 0 errors
replacement-function.js 7 47
// @flow

// Spaced out comments /* non-comments

// BEFORE FUNCTION
export //too many comments
function /*Random*/ test /*weird*/ (x: number): string /*Comments*/ {
// ONE
/* Two */  const a = 4 + x;    // END OF a = 4...



  // Three

  return /* BETWEEEN */ `${a}` // END OF return ...
} // END */
Found 0 errors
replacement-object.js 2 16
// @flow
var obj = {n(y): string {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
func-0.js 4 14 4 15
// @flow

function foo(x: number, y) {
  return x + (y: string);
}

foo(1, "");
Found 0 errors
func-0.js 4 10 4 15
// @flow

function foo(x: number, y) {
  return (x + y: string);
}

foo(1, "");
Found 0 errors
arrow-0.js 3 11 3 23
// @flow

const a: ((x: number) => number) = (x) => x + 1;
a(1);
Found 0 errors
arrow-0.js 4 1 4 5
// @flow

const a = (x) => x + 1;
(a(1): number);
Found 0 errors
arrow-0.js 3 7 3 8
// @flow

const a: ((x: number) => number) = (x) => x + 1;
a(1);
Found 0 errors
alias.js 5 24
// @flow

type MyNumber = number;

function f(x: MyNumber): MyNumber {
  return x;
};

f(1);
Found 0 errors
alias.js 5 24 --expand-type-aliases
// @flow

type MyNumber = number;

function f(x: MyNumber): number {
  return x;
};

f(1);
Found 0 errors
alias.js 6 10 6 11
// @flow

type MyNumber = number;

function f(x: MyNumber) {
  return (x: MyNumber);
};

f(1);
Found 0 errors
alias.js 9 1 9 5 --expand-type-aliases
// @flow

type MyNumber = number;

function f(x: MyNumber) {
  return x;
};

(f(1): number);
Found 0 errors
alias-0.js 9 24
// @flow

type MyObject = {
  foo: number,
  bar: boolean,
  baz: string,
};

function f(x: MyObject): MyObject {
  return x;
};

f({foo:1, bar:true, baz:"baz"});
Found 0 errors
alias-0.js 9 24 --expand-type-aliases
// @flow

type MyObject = {
  foo: number,
  bar: boolean,
  baz: string,
};

function f(x: MyObject): {bar: boolean, baz: string, foo: number} {
  return x;
};

f({foo:1, bar:true, baz:"baz"});
Found 0 errors
alias-0.js 10 10 10 11
// @flow

type MyObject = {
  foo: number,
  bar: boolean,
  baz: string,
};

function f(x: MyObject) {
  return (x: MyObject);
};

f({foo:1, bar:true, baz:"baz"});
Found 0 errors
alias-0.js 13 1 13 32 --expand-type-aliases
// @flow

type MyObject = {
  foo: number,
  bar: boolean,
  baz: string,
};

function f(x: MyObject) {
  return x;
};

(f({foo:1, bar:true, baz:"baz"}): {bar: boolean, baz: string, foo: number});
Found 0 errors
replacement-object.js 2 5
// @flow
var obj: {|m: (x: number) => string, n: (y: number) => string|} = {n(y) {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
replacement-object.js 2 6
// @flow
var obj: {|m: (x: number) => string, n: (y: number) => string|} = {n(y) {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
replacement-object.js 2 7
// @flow
var obj: {|m: (x: number) => string, n: (y: number) => string|} = {n(y) {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
replacement-object.js 2 8
// @flow
var obj: {|m: (x: number) => string, n: (y: number) => string|} = {n(y) {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
replacement-object.js 2 5 2 8
// @flow
var obj: {|m: (x: number) => string, n: (y: number) => string|} = {n(y) {return this.m(y);},m(x) {return "";}}
obj.n(0)







// This is kinda trailing whitespace
Found 0 errors
func-2.js 3 14
// @flow

function foo(x: number, y) {
  function bar(z, w) {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);
Found 0 errors
func-2.js 3 17 3 18
// @flow

function foo(x, y: number) {
  function bar(z, w) {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);
Found 0 errors
func-2.js 4 16
// @flow

function foo(x, y) {
  function bar(z: number, w) {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);
Found 0 errors
func-2.js 4 19 4 20
// @flow

function foo(x, y) {
  function bar(z, w: number) {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);
Found 0 errors
insert-type array.js 3:15
cat array.js 3:15
// @flow

function foo(): Array<number> {
  return [1, 2];
}
insert-type arrow-0.js 3:11-3:23
cat arrow-0-copy.js 3:11-3:23
// @flow

const a: ((x: number) => number) = (x) => x + 1;
a(1);
cat arrow-0.js 3:11-3:23
// @flow

const a = (x) => x + 1;
a(1);
