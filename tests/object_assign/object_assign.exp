Error ------------------------------------------------------------------------------------------------------- A.js:14:21

Cannot assign `Bad.foo()` to `bad` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:14:21
   14|   var bad: number = Bad.foo();
                           ^^^^^^^^^

References:
   A.js:8:43
    8| var Bad = Object.assign(({}: {foo?: () => string}), EventEmitter.prototype, {
                                                 ^^^^^^ [1]
   A.js:14:12
   14|   var bad: number = Bad.foo();
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:19:27

Cannot cast object literal to object type because property `foo` is missing in object literal [1] but exists in object
type [2]. [prop-missing]

   A.js:19:27
   19| var Good = Object.assign(({}: {foo: () => string}), MyEventEmitter.prototype, {
                                 ^^ [1]

References:
   A.js:19:31
   19| var Good = Object.assign(({}: {foo: () => string}), MyEventEmitter.prototype, {
                                     ^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:25:22

Cannot assign `Good.foo()` to `good` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:25:22
   25|   var good: number = Good.foo();
                            ^^^^^^^^^^

References:
   A.js:19:43
   19| var Good = Object.assign(({}: {foo: () => string}), MyEventEmitter.prototype, {
                                                 ^^^^^^ [1]
   A.js:25:13
   25|   var good: number = Good.foo();
                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:32:23

Cannot assign `A.Good.foo()` to `good_` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:32:23
   32|   var good_: number = A.Good.foo(); // string ~> number
                             ^^^^^^^^^^^^

References:
   A.js:19:43
   19| var Good = Object.assign(({}: {foo: () => string}), MyEventEmitter.prototype, {
                                                 ^^^^^^ [1]
   A.js:32:14
   32|   var good_: number = A.Good.foo(); // string ~> number
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:35:22

Cannot assign `f()` to `bad_` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:35:22
   35|   var bad_: number = f(); // error: string ~> number
                            ^^^

References:
   A.js:8:43
    8| var Bad = Object.assign(({}: {foo?: () => string}), EventEmitter.prototype, {
                                                 ^^^^^^ [1]
   A.js:35:13
   35|   var bad_: number = f(); // error: string ~> number
                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:35:22

Cannot call `f` because undefined [1] is not a function. [not-a-function]

   A.js:35:22
   35|   var bad_: number = f(); // error: string ~> number
                            ^

References:
   A.js:8:37
    8| var Bad = Object.assign(({}: {foo?: () => string}), EventEmitter.prototype, {
                                           ^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- A.js:37:23

Cannot assign `A.Bad.foo()` to `bad__` because string [1] is incompatible with number [2]. [incompatible-type]

   A.js:37:23
   37|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                             ^^^^^^^^^^^

References:
   A.js:8:43
    8| var Bad = Object.assign(({}: {foo?: () => string}), EventEmitter.prototype, {
                                                 ^^^^^^ [1]
   A.js:37:14
   37|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- A.js:37:29

Cannot call `A.Bad.foo` because undefined [1] is not a function. [not-a-function]

   A.js:37:29
   37|   var bad__: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                                   ^^^

References:
   A.js:8:37
    8| var Bad = Object.assign(({}: {foo?: () => string}), EventEmitter.prototype, {
                                           ^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- apply.js:2:73

Incorrect arguments passed to call of method `apply` because number [1] is incompatible with string [2].
[incompatible-type]

   apply.js:2:73
   2| (Object.assign.apply(null, [({}: {a?: number, b?: string}), {a: 1}, {b: 2}]): {a?: number, b?: string}); // error
                                                                              ^ [1]

References:
   apply.js:2:51
   2| (Object.assign.apply(null, [({}: {a?: number, b?: string}), {a: 1}, {b: 2}]): {a?: number, b?: string}); // error
                                                        ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- apply.js:3:2

Cannot call `Object.assign.apply` because no more than 2 arguments are expected by function type [1]. [extra-arg]

   apply.js:3:2
     3| (Object.assign.apply(({}: {a?: number, b?: string}), {a: 1}, {b: 'foo'}): {a?: number, b?: string}); // error
         ^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:360:18
   360|     proto apply: Function$Prototype$Apply; // (thisArg: any, argArray?: any) => any
                         ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- apply.js:5:2

Incorrect arguments passed to call of method `call` because array literal [1] is not an object. [not-an-object]

   apply.js:5:2
   5| (Object.assign.call(({}: {a?: number, b?: string}), [{a: 1}, {b: 'foo'}]): {a?: number, b?: string}); // error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   apply.js:5:53
   5| (Object.assign.call(({}: {a?: number, b?: string}), [{a: 1}, {b: 'foo'}]): {a?: number, b?: string}); // error
                                                          ^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- apply.js:7:65

Incorrect arguments passed to call of method `call` because number [1] is incompatible with string [2].
[incompatible-type]

   apply.js:7:65
   7| (Object.assign.call(({}: {a?: number, b?: string}), {a: 1}, {b: 2}): {a?: number, b?: string}); // error
                                                                      ^ [1]

References:
   apply.js:7:43
   7| (Object.assign.call(({}: {a?: number, b?: string}), {a: 1}, {b: 2}): {a?: number, b?: string}); // error
                                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:10:2

Cannot cast `Object.assign.length` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   apply.js:10:2
    10| (Object.assign.length : string); // error
         ^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:367:14
   367|     +length: number;
                     ^^^^^^ [1]
   apply.js:10:25
    10| (Object.assign.length : string); // error
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- apply.js:12:2

Cannot cast `Object.assign.name` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   apply.js:12:2
    12| (Object.assign.name : number); // error
         ^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:371:12
   371|     +name: string;
                   ^^^^^^ [1]
   apply.js:12:23
    12| (Object.assign.name : number); // error
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- non_objects.js:3:1

Incorrect arguments passed to call of method `assign` because property `a` is missing in string [1]. [incompatible-use]

   non_objects.js:3:1
   3| Object.assign("123", {a: "foo"});
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:3:15
   3| Object.assign("123", {a: "foo"});
                    ^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- non_objects.js:4:1

Incorrect arguments passed to call of method `assign` because property `a` is missing in number [1]. [incompatible-use]

   non_objects.js:4:1
   4| Object.assign(123, {a: "foo"});
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:4:15
   4| Object.assign(123, {a: "foo"});
                    ^^^ [1]


Error ----------------------------------------------------------------------------------------------- non_objects.js:5:1

Incorrect arguments passed to call of method `assign` because number [1] is not an object. [not-an-object]

   non_objects.js:5:1
   5| Object.assign({a: "foo"}, 123);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   non_objects.js:5:27
   5| Object.assign({a: "foo"}, 123);
                                ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- scope.js:33:4

Cannot cast `obj.attr` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   scope.js:33:4
   33|   (obj.attr: number);
          ^^^^^^^^

References:
   scope.js:31:16
   31|     obj.attr = "hello";
                      ^^^^^^^ [1]
   scope.js:33:14
   33|   (obj.attr: number);
                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:5:28

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with number [2] in property `foo`.
[incompatible-cast]

   spread.js:5:28
   5| (Object.assign(({}: {foo?: string}), ...arrOfObjs): { foo?: number}); // Error: string ~> number
                                 ^^^^^^ [1]

References:
   spread.js:5:61
   5| (Object.assign(({}: {foo?: string}), ...arrOfObjs): { foo?: number}); // Error: string ~> number
                                                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:6:28

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with number [2] in property `foo`.
[incompatible-cast]

   spread.js:6:28
   6| (Object.assign(({}: {foo?: string}), ...roArrOfObjs): { foo?: number}); // Error: string ~> number
                                 ^^^^^^ [1]

References:
   spread.js:6:63
   6| (Object.assign(({}: {foo?: string}), ...roArrOfObjs): { foo?: number}); // Error: string ~> number
                                                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:7:42

Cannot cast `Object.assign(...)` to object type because number [1] is incompatible with boolean [2] in property `bar`.
[incompatible-cast]

   spread.js:7:42
   7| (Object.assign(({}: {foo?: string, bar?: number}), ...tup): { foo?: string, bar?: boolean}); // Error: number ~> boolean
                                               ^^^^^^ [1]

References:
   spread.js:7:83
   7| (Object.assign(({}: {foo?: string, bar?: number}), ...tup): { foo?: string, bar?: boolean}); // Error: number ~> boolean
                                                                                        ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:10:25

Cannot cast `Object.assign(...)` to object type because string [1] is incompatible with boolean literal `true` [2] in
property `b`. [incompatible-cast]

   spread.js:10:25
   10|   ({}: {a?: number, b?: string, c?: boolean}),
                               ^^^^^^ [1]

References:
   spread.js:13:21
   13| ): {a?: number, b?: true, c?: boolean}); // Error: 'foo' => true
                           ^^^^ [2]



Found 22 errors
