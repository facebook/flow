A.js:13
 13: var bad: number = Bad.foo();
                       ^^^^^^^^^ string. This type is incompatible with
 13: var bad: number = Bad.foo();
              ^^^^^^ number

A.js:21
 21: var good: number = Good.foo();
                        ^^^^^^^^^^ string. This type is incompatible with
 21: var good: number = Good.foo();
               ^^^^^^ number

B.js:7
  7: var good: number = A.Good.foo();
                        ^^^^^^^^^^^^ string. This type is incompatible with
  7: var good: number = A.Good.foo();
               ^^^^^^ number

B.js:10
 10: var bad_: number = f(); // Calling the function is fine
                        ^^^ function call. This function call's `this` type is incompatible with
 13: var bad: number = Bad.foo();
                       ^^^ object literal. See: A.js:13
  The call's `this` type is:
  global object

B.js:10
 10: var bad_: number = f(); // Calling the function is fine
                        ^^^ string. This type is incompatible with
 10: var bad_: number = f(); // Calling the function is fine
               ^^^^^^ number

B.js:12
 12: var bad: number = A.Bad.foo(); // Method call is not fine
                       ^^^^^^^^^^^ string. This type is incompatible with
 12: var bad: number = A.Bad.foo(); // Method call is not fine
              ^^^^^^ number

non_objects.js:3
  3: Object.assign("123", {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  3: Object.assign("123", {a: "foo"});
                   ^^^^^ string

non_objects.js:4
  4: Object.assign(123, {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  4: Object.assign(123, {a: "foo"});
                   ^^^ number

non_objects.js:5
  5: Object.assign({a: "foo"}, 123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `assign`. Expected object instead of
  5: Object.assign({a: "foo"}, 123);
                               ^^^ number

spread.js:7
  7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
                    ^^ object literal. This type is incompatible with
  7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
                                       ^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      3: declare var arrOfObjs: Array<{ foo: string }>;
                                             ^^^^^^ string. This type is incompatible with
      7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
                                                  ^^^^^^ number

spread.js:8
  8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
                    ^^ object literal. This type is incompatible with
  8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
                                         ^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      4: declare var roArrOfObjs: $ReadOnlyArray<{foo: string}>;
                                                       ^^^^^^ string. This type is incompatible with
      8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
                                                    ^^^^^^ number

spread.js:9
  9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
                    ^^ object literal. This type is incompatible with
  9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `bar` is incompatible:
      5: declare var tup: [{foo: string}, {bar: number}];
                                                ^^^^^^ number. This type is incompatible with
      9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
                                                         ^^^^^^^ boolean

spread.js:12
 12:   {},
       ^^ object literal. This type is incompatible with
 15: ): {a: number, b: true, c: boolean}); // Error: 'foo' => true
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `b` is incompatible:
     13:   ...[{a: 1}, {b: 'foo'}],
                           ^^^^^ string. This type is incompatible with
     15: ): {a: number, b: true, c: boolean}); // Error: 'foo' => true
                           ^^^^ boolean literal `true`


Found 13 errors
