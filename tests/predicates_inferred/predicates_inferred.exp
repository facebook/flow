Error ---------------------------------------------------------------------------- predicate_with_non_bool_annot.js:8:37

Cannot return `(x === 'a') || (x === 'c') ? x : null` because string literal `c` [1] is incompatible with `T` [2].
[incompatible-return]

   predicate_with_non_bool_annot.js:8:37
   8|   return (x === 'a' || x === 'c') ? x : null; // error: 'c' incompatible with T
                                          ^

References:
   predicate_with_non_bool_annot.js:7:25
   7| function validate_2(x: ?string): ?T %checks {
                              ^^^^^^ [1]
   predicate_with_non_bool_annot.js:7:35
   7| function validate_2(x: ?string): ?T %checks {
                                        ^ [2]


Error -------------------------------------------------------------------------------------- sanity-multi-params.js:8:12

Cannot return `x` because array type [1] is incompatible with string [2]. [incompatible-return]

   sanity-multi-params.js:8:12
   8|     return x;
                 ^

References:
   sanity-multi-params.js:6:26
   6| function foo(x: string | Array<string>): string {
                               ^^^^^^^^^^^^^ [1]
   sanity-multi-params.js:6:42
   6| function foo(x: string | Array<string>): string {
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------- sanity-multi-params.js:10:14

Cannot call `x.join` because property `join` is missing in `String` [1]. [prop-missing]

   sanity-multi-params.js:10:14
   10|     return x.join();
                    ^^^^

References:
   sanity-multi-params.js:6:17
    6| function foo(x: string | Array<string>): string {
                       ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- sanity-ordering.js:16:17

Cannot access object with computed property using string [1]. [invalid-computed-prop]

   sanity-ordering.js:16:17
     16|     head = head[key] || create && (head[key] = {}); // error: no indexed type
                         ^^^

References:
   <BUILTINS>/core.js:1322:63
   1322|     split(separator?: string | RegExp, limit?: number): Array<string>;
                                                                       ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- sanity-ordering.js:16:41

Cannot assign object literal to `head[key]` because an index signature declaring the expected key / value type is
missing in object type [1]. [prop-missing]

   sanity-ordering.js:16:41
   16|     head = head[key] || create && (head[key] = {}); // error: no indexed type
                                               ^^^

References:
   sanity-ordering.js:8:26
    8| function dotAccess(head: { page: ?Object; }, create?: mixed) {
                                ^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- sanity-unbound-var.js:11:12

Cannot return `x` because array type [1] is incompatible with string [2]. [incompatible-return]

   sanity-unbound-var.js:11:12
   11|     return x;
                  ^

References:
   sanity-unbound-var.js:9:26
    9| function foo(x: string | Array<string>): string {
                                ^^^^^^^^^^^^^ [1]
   sanity-unbound-var.js:9:42
    9| function foo(x: string | Array<string>): string {
                                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------- sanity-unbound-var.js:13:14

Cannot call `x.join` because property `join` is missing in `String` [1]. [prop-missing]

   sanity-unbound-var.js:13:14
   13|     return x.join();
                    ^^^^

References:
   sanity-unbound-var.js:9:17
    9| function foo(x: string | Array<string>): string {
                       ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- sanity.js:3:35

Cannot declare predicate when a function body is present. [unsupported-syntax]

   3| function check(y: mixed): %checks(typeof y === "string") {
                                        ^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- sanity.js:14:48

Invalid body for predicate function. Expected a simple return statement as body. [unsupported-syntax]

                                                      v
   14| function indirect_is_number(y: mixed): %checks {
   15|   var y = 1;
   16|   return typeof y === "number";
   17| }
       ^


Error -------------------------------------------------------------------------------------------------- sanity.js:21:12

Cannot return `z` because string [1] is incompatible with number [2]. [incompatible-return]

   sanity.js:21:12
   21|     return z;
                  ^

References:
   sanity.js:19:17
   19| function bak(z: string | number): number {
                       ^^^^^^ [1]
   sanity.js:19:35
   19| function bak(z: string | number): number {
                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- sanity.js:23:14

Cannot get `z.length` because property `length` is missing in `Number` [1]. [prop-missing]

   sanity.js:23:14
   23|     return z.length;
                    ^^^^^^

References:
   sanity.js:19:26
   19| function bak(z: string | number): number {
                                ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- sanity.js:27:42

Invalid body for predicate function. Expected a simple return statement as body. [unsupported-syntax]

   27| function missing_body(x: mixed): %checks {}
                                                ^^



Found 12 errors
