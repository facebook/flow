Error ------------------------------------------------------------------------------------------------ abnormal.js:12:33

Unreachable code. [unreachable-code]

   12| const unreachableFunctionDef1 = function named() {} // Only expect unreachable error here
                                       ^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ abnormal.js:13:33

Unreachable code. [unreachable-code]

   13| const unreachableFunctionDef2 = function () {} // Only expect unreachable error here
                                       ^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ class_ext.js:4:19

Cannot use `42.f(...)` [1] as a superclass. Only variables and member expressions may be extended [invalid-extends]

   4|   class C extends (42 as any as D).f(x => 42) {}
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ class_ext.js:4:38

An annotation on `x` is required because Flow cannot infer its type from local context. [missing-local-annot]

   4|   class C extends (42 as any as D).f(x => 42) {}
                                           ^


Error ---------------------------------------------------------------------------------------------------- enums.js:2:17

Enum `A` is not an iterable. You can use `A.members()` to get an iterator for the enum's members. [not-iterable]

   2| for (const x of A) {} // Error: not iterable, but there should be no enforcement errors
                      ^


Error ---------------------------------------------------------------------------------------------------- enums.js:4:10

Cannot use `Foo` as a type. Enum members are not separate types. Only the enum itself, `A` [1], is a type.
[enum-value-as-type]

   enums.js:4:10
   4| const a: A.Foo = A.Foo; // Error: enum-value-as-type
               ^^^^^

References:
   enums.js:1:6
   1| enum A { Foo, Bar }
           ^ [1]


Error ----------------------------------------------------------------------------------------------------- enums.js:7:9

Cannot use variable `X` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   enums.js:7:9
   7| var y = X;
              ^

References:
   enums.js:9:13
   9| export enum X {
                  ^ [1]


Error --------------------------------------------------------------------------------- illegal_function_binding.js:2:10

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   illegal_function_binding.js:2:10
   2| function a() {} // error: illegal binding
               ^

References:
   illegal_function_binding.js:1:10
   1| function a() {}
               ^ [1]


Error ---------------------------------------------------------------------------------- illegal_function_binding.js:5:7

Cannot declare `b` [1] because the name is already bound. [name-already-bound]

   illegal_function_binding.js:5:7
   5| const b = () => {} // error: illegal binding
            ^

References:
   illegal_function_binding.js:4:7
   4| const b = () => {}
            ^ [1]


Error ---------------------------------------------------------------------------------- illegal_function_binding.js:8:7

Cannot declare `c` [1] because the name is already bound. [name-already-bound]

   illegal_function_binding.js:8:7
   8| const c = function () {} // error: illegal binding
            ^

References:
   illegal_function_binding.js:7:7
   7| const c = function () {}
            ^ [1]


Error ---------------------------------------------------------------------------------------------------- import.js:3:1

Cannot use variable `E` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   import.js:3:1
   3| E.C;
      ^

References:
   import.js:6:13
   6| import * as E from "./export";
                  ^ [1]


Error --------------------------------------------------------------------------------------------------- import.js:4:14

Cannot assign `10` to `x` because number [1] is incompatible with `C` [2]. [incompatible-type]

   import.js:4:14
   4| var x: E.C = 10;
                   ^^ [1]

References:
   import.js:4:8
   4| var x: E.C = 10;
             ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- import.js:5:8

Cannot use `c` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   5| var y: E.c = 10;
             ^^^


Error --------------------------------------------------------------------------------------------------- react.js:21:10

Cannot cast `Dialog.c` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   react.js:21:10
   21|   return Dialog.c as empty;
                ^^^^^^^^

References:
   react.js:19:12
   19| Dialog.c = ''; // OK
                  ^^ [1]
   react.js:21:22
   21|   return Dialog.c as empty;
                            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------ regression_tests.js:9:8

Cannot declare `A` [1] because the name is already bound. [name-already-bound]

   regression_tests.js:9:8
   9|   type A = number; // error, but no MissingEnvEntry internal error.
             ^

References:
   regression_tests.js:8:8
   8|   type A = number;
             ^ [1]


Error ---------------------------------------------------------------------------------------- regression_tests.js:20:12

Cannot return `42` because number [1] is incompatible with constructor void return [2]. [incompatible-return]

   regression_tests.js:20:12
   20|     return 42;
                  ^^ [1]

References:
   regression_tests.js:19:17
   19|   constructor () {
                        [2]


Error ----------------------------------------------------------------------------------------- regression_tests.js:22:3

Missing an annotation on property `a`. [missing-local-annot]

   22|   a;
         ^^


Error ----------------------------------------------------------------------------------------- regression_tests.js:25:4

Missing an annotation on property `d`. [missing-local-annot]

   25|   d = 42 + 42;
          


Error ---------------------------------------------------------------------------------------- regression_tests.js:28:18

Missing an annotation on return. [missing-local-annot]

   28|   g = (x: number) => { return 42 }
                        


Error ----------------------------------------------------------------------------------------- regression_tests.js:31:6

Missing an annotation on return. [missing-local-annot]

   31|   j() { return 42 }
            


Error ----------------------------------------------------------------------------------------- regression_tests.js:33:4

Missing an annotation on property `l`. [missing-local-annot]

   33|   l = null; // error
          


Error ---------------------------------------------------------------------------------------- regression_tests.js:44:24

Missing an annotation on `x`. [missing-local-annot]

   44| function UnannotParams(x, {a, b}, ...y) { }
                              ^


Error ---------------------------------------------------------------------------------------- regression_tests.js:44:27

Missing an annotation on destructuring. [missing-local-annot]

   44| function UnannotParams(x, {a, b}, ...y) { }
                                 ^^^^^^


Error ---------------------------------------------------------------------------------------- regression_tests.js:44:38

Missing an annotation on rest parameter `y`. [missing-local-annot]

   44| function UnannotParams(x, {a, b}, ...y) { }
                                            ^


Error ---------------------------------------------------------------------------------------- regression_tests.js:50:16

`declare module` statement is only supported at the toplevel of a library file. [unsupported-syntax]

   50| declare module 'declared-module' {
                      ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- regression_tests.js:54:14

Cannot cast `42` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   regression_tests.js:54:14
   54| (((42: any): ModScope): empty); // string ~> empty, not num ~> empty
                    ^^^^^^^^ [1]

References:
   regression_tests.js:54:25
   54| (((42: any): ModScope): empty); // string ~> empty, not num ~> empty
                               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------- regression_tests.js:56:16

`declare module` statement is only supported at the toplevel of a library file. [unsupported-syntax]

   56| declare module DeclaredModule2 {
                      ^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- regression_tests.js:61:30

Cannot resolve name `ModScope2`. [cannot-resolve-name]

   61| declare var NonexistentType: ModScope2;
                                    ^^^^^^^^^


Error ---------------------------------------------------------------------------------------- regression_tests.js:64:24

Cannot perform arithmetic operation because string [1] is not a number or bigint. [unsafe-arithmetic]

   regression_tests.js:64:24
   64| const ResultOfError = -AString;
                              ^^^^^^^

References:
   regression_tests.js:63:22
   63| declare var AString: string;
                            ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- regression_tests.js:78:30

Cannot call `inexactSpread` because Flow cannot determine a type for object type [1]. object type [2] is inexact, so it
may contain `bar` with a type that conflicts with `bar`'s definition in object type [1]. Try making object type [2]
exact. [cannot-spread-inexact]

   regression_tests.js:78:30
   78|   const inexact_spread_err = inexactSpread(inexact);
                                    ^^^^^^^^^^^^^

References:
   regression_tests.js:77:44
   77|   declare function inexactSpread<T>(x: T): {bar: 3, ...T, ...};
                                                  ^^^^^^^^^^^^^^^^^^^ [1]
   regression_tests.js:75:28
   75|   let inexact = ({foo: 3}: {foo: number, ...});
                                  ^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- regression_tests.js:90:18

Cannot use `MyClass` [1] without 1 type argument. [missing-type-arg]

   regression_tests.js:90:18
   90|   declare var c: MyClass;
                        ^^^^^^^

References:
   regression_tests.js:87:16
   87|   class MyClass<T> {
                      ^^^ [1]


Error --------------------------------------------------------------------------------------- regression_tests.js:100:23

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   100|   let foo3 = function () { this; }; // error: missing annot on this
                              ^^


Error ---------------------------------------------------------------------------------------- regression_tests.js:108:7

Cannot assign `3` to `1.toString` because property `toString` is missing in number [1]. [incompatible-use]

   regression_tests.js:108:7
   108|   (1).toString = 3; // error: toString missing in number, but no missing env entry error
              ^^^^^^^^

References:
   regression_tests.js:108:4
   108|   (1).toString = 3; // error: toString missing in number, but no missing env entry error
           ^ [1]


Error --------------------------------------------------------------------------------------- regression_tests.js:118:19

Cannot assign function to `x` because function [1] is incompatible with number [2]. [incompatible-type]

   regression_tests.js:118:19
   118|   var x: number = (x) => x;
                          ^^^^^^^^ [1]

References:
   regression_tests.js:118:10
   118|   var x: number = (x) => x;
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- regression_tests.js:118:20

An annotation on `x` is required because Flow cannot infer its type from local context. [missing-local-annot]

   118|   var x: number = (x) => x;
                           ^


Error --------------------------------------------------------------------------------------- regression_tests.js:122:19

Cannot use variable `x` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   regression_tests.js:122:19
   122|   for (const x of x) {} // Error on second x, no underconstrained error on the first one.
                          ^

References:
   regression_tests.js:122:14
   122|   for (const x of x) {} // Error on second x, no underconstrained error on the first one.
                     ^ [1]


Error --------------------------------------------------------------------------------------- regression_tests.js:154:31

Cannot assign function to `defaultValue` because function [1] is incompatible with boolean [2]. [incompatible-type]

   regression_tests.js:154:31
   154|     B(defaultValue: boolean = (x: A) => 42): void {}
                                      ^^^^^^^^^^^^ [1]

References:
   regression_tests.js:154:21
   154|     B(defaultValue: boolean = (x: A) => 42): void {}
                            ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- regression_tests.js:160:14

Cannot assign `C` to `foo` because class `C` [1] is incompatible with number [2]. [incompatible-type]

   regression_tests.js:160:14
   160|    w({ foo = C, bar}: { bar: number, foo?: number }): void { }
                     ^

References:
   regression_tests.js:159:9
   159|   class C {
                ^ [1]
   regression_tests.js:160:44
   160|    w({ foo = C, bar}: { bar: number, foo?: number }): void { }
                                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------- synthesizable_object.js:2:38

Cannot reference `this` from within method `foo` [1]. For safety, Flow restricts access to `this` inside object methods
since these methods may be unbound and rebound. Consider replacing the reference to `this` with the name of the object,
or rewriting the object as a class. [object-this-reference]

   synthesizable_object.js:2:38
   2|   foo() { SynthesizableObject.foo(); this; }, // Illegal this. Methods don't bind this.
                                           ^^^^

References:
   synthesizable_object.js:2:3
   2|   foo() { SynthesizableObject.foo(); this; }, // Illegal this. Methods don't bind this.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- this.js:3:11

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   3| function f() {
                ^^


Error ----------------------------------------------------------------------------------------------------- this.js:9:18

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   9|   foo = function (): void {
                       ^^


Error ---------------------------------------------------------------------------------------------------- this.js:13:32

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   13|   foo_a: () => void = function (): void {
                                      ^^



Found 42 errors
