Error ----------------------------------------------------------------------------------------------------- basic.js:6:2

Cannot cast `compose(...)(...)` to empty because string [1] is incompatible with empty [2].

   basic.js:6:2
     6| (compose(n => n.toString())(42): empty); // Error: string ~> empty
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:145:31
   145|     toString(radix?: number): string;
                                      ^^^^^^ [1]
   basic.js:6:34
     6| (compose(n => n.toString())(42): empty); // Error: string ~> empty
                                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- basic.js:8:2

Cannot cast `composeReverse(...)(...)` to empty because string [1] is incompatible with empty [2].

   basic.js:8:2
     8| (composeReverse(n => n.toString())(42): empty); // Error: string ~> empty
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:145:31
   145|     toString(radix?: number): string;
                                      ^^^^^^ [1]
   basic.js:8:41
     8| (composeReverse(n => n.toString())(42): empty); // Error: string ~> empty
                                                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- basic.js:10:2

Cannot cast `compose(...)(...)` to empty because number [1] is incompatible with empty [2].

   basic.js:10:2
        v-------
   10| (compose(
   11|   n => n * 5, // Error: string cannot be multiplied.
   12|   n => n.toString(),
   13| )(42): empty); // Error: number ~> empty
       ----^

References:
   basic.js:11:8
   11|   n => n * 5, // Error: string cannot be multiplied.
              ^^^^^ [1]
   basic.js:13:8
   13| )(42): empty); // Error: number ~> empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- basic.js:11:8

Cannot perform arithmetic operation because string [1] is not a number.

   basic.js:11:8
    11|   n => n * 5, // Error: string cannot be multiplied.
               ^

References:
   <BUILTINS>/core.js:145:31
   145|     toString(radix?: number): string;
                                      ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- basic.js:15:2

Cannot cast `composeReverse(...)(...)` to empty because string [1] is incompatible with empty [2].

   basic.js:15:2
         v--------------
    15| (composeReverse(
    16|   n => n * 5, // OK
    17|   n => n.toString(),
    18| )(42): empty); // Error: string ~> empty
        ----^

References:
   <BUILTINS>/core.js:145:31
   145|     toString(radix?: number): string;
                                      ^^^^^^ [1]
   basic.js:18:8
    18| )(42): empty); // Error: string ~> empty
               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- recompose.js:23:19

Cannot call `Math.round` with `props.p` bound to `x` because string [1] is incompatible with number [2].

   recompose.js:23:19
    23|     c: Math.round(props.p), // Error: string ~> number
                          ^^^^^^^

References:
   recompose.js:20:8
    20|     p: `${props.p * 3}`,
               ^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/core.js:185:14
   185|     round(x: number): number;
                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- spread.js:8:2

Cannot cast `compose(...)(...)` to empty because:
 - number [1] is incompatible with empty [2].
 - number [3] is incompatible with empty [2].

   spread.js:8:2
        v-------
    8| (compose(
    9|   ...fns1,
   10| )(42): empty); // Error: number ~> empty
       ----^

References:
   spread.js:4:37
    4| declare var fns1: Array<(number) => number>;
                                           ^^^^^^ [1]
   spread.js:10:8
   10| )(42): empty); // Error: number ~> empty
              ^^^^^ [2]
   spread.js:10:3
   10| )(42): empty); // Error: number ~> empty
         ^^ [3]


Error --------------------------------------------------------------------------------------------------- spread.js:12:2

Cannot cast `compose(...)(...)` to empty because:
 - number [1] is incompatible with empty [2].
 - string [3] is incompatible with empty [2].

   spread.js:12:2
        v-------
   12| (compose(
   13|   ...fns1, // Error: string ~> number
   14| )('foo'): empty); // Error: string ~> empty and number ~> empty
       -------^

References:
   spread.js:4:37
    4| declare var fns1: Array<(number) => number>;
                                           ^^^^^^ [1]
   spread.js:14:11
   14| )('foo'): empty); // Error: string ~> empty and number ~> empty
                 ^^^^^ [2]
   spread.js:14:3
   14| )('foo'): empty); // Error: string ~> empty and number ~> empty
         ^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- spread.js:13:6

Cannot call `compose` with compose intermediate value bound to the first parameter because string [1] is incompatible
with number [2].

   spread.js:13:6
   13|   ...fns1, // Error: string ~> number
            ^^^^

References:
   spread.js:14:3
   14| )('foo'): empty); // Error: string ~> empty and number ~> empty
         ^^^^^ [1]
   spread.js:4:26
    4| declare var fns1: Array<(number) => number>;
                                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:16:2

Cannot cast `compose(...)(...)` to empty because:
 - string [1] is incompatible with empty [2].
 - number [3] is incompatible with empty [2].

   spread.js:16:2
        v-------
   16| (compose(
   17|   ...fns2, // Error: string ~> number
   18| )(42): empty); // Error: number ~> empty and string ~> empty
       ----^

References:
   spread.js:5:37
    5| declare var fns2: Array<(number) => string>;
                                           ^^^^^^ [1]
   spread.js:18:8
   18| )(42): empty); // Error: number ~> empty and string ~> empty
              ^^^^^ [2]
   spread.js:18:3
   18| )(42): empty); // Error: number ~> empty and string ~> empty
         ^^ [3]


Error --------------------------------------------------------------------------------------------------- spread.js:17:6

Cannot call `compose` with compose intermediate value bound to the first parameter because string [1] is incompatible
with number [2].

   spread.js:17:6
   17|   ...fns2, // Error: string ~> number
            ^^^^

References:
   spread.js:5:37
    5| declare var fns2: Array<(number) => string>;
                                           ^^^^^^ [1]
   spread.js:5:26
    5| declare var fns2: Array<(number) => string>;
                                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:21:2

Cannot call `compose` because property `p` is missing in `Number` [1].

   spread.js:21:2
        v-------
   21| (compose(
   22|   ...fns3, // Error: Cannot get p on number
   23| )(x1): empty); // Error: number ~> empty and object ~> empty
       ^

References:
   spread.js:20:32
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                                      ^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:21:2

Cannot cast `compose(...)(...)` to empty because:
 - object literal [1] is incompatible with empty [2].
 - object literal [3] is incompatible with empty [2].
 - object literal [4] is incompatible with empty [2].
 - object literal [5] is incompatible with empty [2].
 - number [6] is incompatible with empty [2].

   spread.js:21:2
        v-------
   21| (compose(
   22|   ...fns3, // Error: Cannot get p on number
   23| )(x1): empty); // Error: number ~> empty and object ~> empty
       ----^

References:
   spread.js:20:12
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   spread.js:23:8
   23| )(x1): empty); // Error: number ~> empty and object ~> empty
              ^^^^^ [2]
   spread.js:20:17
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                       ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   spread.js:20:22
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                            ^^^^^^^^^^^^^^^^ [4]
   spread.js:20:27
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                                 ^^^^^^^^^ [5]
   spread.js:20:32
   20| const x1 = { p: { p: { p: { p: 42 } } } };
                                      ^^ [6]


Error --------------------------------------------------------------------------------------------------- spread.js:27:2

Cannot cast `compose(...)(...)` to empty because:
 - `X2` [1] is incompatible with empty [2].
 - `X2` [3] is incompatible with empty [2].

   spread.js:27:2
        v--------
   27| ((compose(
   28|   ...fns3,
   29| ))(x2): empty); // Error: object ~> empty
       -----^

References:
   spread.js:25:16
   25| type X2 = { p: X2 };
                      ^^ [1]
   spread.js:29:9
   29| ))(x2): empty); // Error: object ~> empty
               ^^^^^ [2]
   spread.js:26:17
   26| declare var x2: X2;
                       ^^ [3]



Found 22 errors
