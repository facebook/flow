ctor.js:2
  2:   constructor(this: this) {}
                   ^^^^^^^^^^ Found a `this` pseudo-param on a constructor.

function.js:1
  1: function fn(this: { x: number }, x: string): string {
                 ^^^^^^^^^^^^^^^^^^^ explicit this pseudo-parameters are not allowed on functions

function.js:7
  7:     function k(this: any): number {
                    ^^^^^^^^^ explicit this pseudo-parameters are not allowed on functions

function.js:14
 14: var k = (this: any) => 5;
              ^^^^^^^^^ explicit this pseudo-parameters are not allowed on functions

interface.js:21
 21: var n1: number = a.method();       // NG
                      ^^^^^^^^^^ call of method `method`
  9:   method(this: this & I): number {
                           ^ property `anotherMethod` of I. Property not found in
 21: var n1: number = a.method();       // NG
                      ^ A

interface.js:21
 21: var n1: number = a.method();       // NG
                      ^^^^^^^^^^ call of method `method`
  9:   method(this: this & I): number {
                           ^ property `anotherStaticMethod` of statics of I. Property not found in
 21: var n1: number = a.method();       // NG
                      ^ statics of A

interface.js:22
 22: var n2: number = A.staticMethod(); // NG
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 12:   static staticMethod(this: Class<I> & Class<this>): number {
                                       ^ property `anotherStaticMethod` of statics of I. Property not found in
  6: class A {
           ^ statics of A

interface.js:22
 22: var n2: number = A.staticMethod(); // NG
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 12:   static staticMethod(this: Class<I> & Class<this>): number {
                                       ^ property `anotherMethod` of I. Property not found in
 22: var n2: number = A.staticMethod(); // NG
                      ^ A

interface.js:39
 39: var n3: number = b.method(); // NG: The return type on `anotherMethod` of `B`
                      ^^^^^^^^^^ call of method `method`
 25:   anotherMethod(): string {
                        ^^^^^^ string. This type is incompatible with
  2:   anotherMethod(): number;
                        ^^^^^^ number

interface.js:39
 39: var n3: number = b.method(); // NG: The return type on `anotherMethod` of `B`
                      ^^^^^^^^^^ call of method `method`
 29:   static anotherStaticMethod(): string {
                                     ^^^^^^ string. This type is incompatible with
  3:   static anotherStaticMethod(): number;
                                     ^^^^^^ number

interface.js:73
 73:     return this.method(); // NG: The implicit pseudo-param of `methodCaller`,
                ^^^^^^^^^^^^^ call of method `method`
 69:   method(this: I): number {
                    ^ property `anotherMethod` of I. Property not found in
 68: class K {
           ^ K

interface.js:73
 73:     return this.method(); // NG: The implicit pseudo-param of `methodCaller`,
                ^^^^^^^^^^^^^ call of method `method`
 69:   method(this: I): number {
                    ^ property `anotherStaticMethod` of statics of I. Property not found in
 68: class K {
           ^ statics of K

interface.js:79
 79: var n5: number = k.method(); // NG: `k` doesn't satisfy the requirements of `I`
                      ^^^^^^^^^^ call of method `method`
 69:   method(this: I): number {
                    ^ property `anotherMethod` of I. Property not found in
 79: var n5: number = k.method(); // NG: `k` doesn't satisfy the requirements of `I`
                      ^ K

interface.js:79
 79: var n5: number = k.method(); // NG: `k` doesn't satisfy the requirements of `I`
                      ^^^^^^^^^^ call of method `method`
 69:   method(this: I): number {
                    ^ property `anotherStaticMethod` of statics of I. Property not found in
 79: var n5: number = k.method(); // NG: `k` doesn't satisfy the requirements of `I`
                      ^ statics of K

object.js:23
 23: var n1: number = a.method(); // NG
                      ^^^^^^^^^^ call of method `method`
 12:   method(this: this & I): number {
                           ^ property `anotherMethod`. Property not found in
 23: var n1: number = a.method(); // NG
                      ^ A

object.js:24
 24: var n2: number = A.staticMethod(); // NG
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 15:   static staticMethod(this: J & Class<this>): number {
                                 ^ property `anotherStaticMethod`. Property not found in
 24: var n2: number = A.staticMethod(); // NG
                      ^ statics of A

object.js:39
 39: var n3: number = b.method(); // NG
                      ^^^^^^^^^^ call of method `method`
  2:   anotherMethod(): number;
                        ^^^^^^ number. This type is incompatible with
 27:   anotherMethod(): string {
                        ^^^^^^ string

object.js:39
 39: var n3: number = b.method(); // NG
                      ^^^^^^^^^^ call of method `method`
 27:   anotherMethod(): string {
                        ^^^^^^ string. This type is incompatible with
  2:   anotherMethod(): number;
                        ^^^^^^ number

object.js:41
 41: var s3: number = B.staticMethod(); // NG: This line triggers an extra negative :(
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
  6:   anotherStaticMethod(): number;
                              ^^^^^^ number. This type is incompatible with
 31:   static anotherStaticMethod(): string {
                                     ^^^^^^ string

object.js:41
 41: var s3: number = B.staticMethod(); // NG: This line triggers an extra negative :(
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 15:   static staticMethod(this: J & Class<this>): number {
                                 ^^^^^^^^^^^^^^^ intersection. This type is incompatible with
 26: class B extends A {
           ^ class type: `this` type
  Member 1:
    5: type J = {
                ^ object type
  Error:
    5: type J = {
                ^ object type. This type is incompatible with
   26: class B extends A {
             ^ class type: `this` type
  Member 2:
   15:   static staticMethod(this: J & Class<this>): number {
                                             ^^^^ class type: some incompatible instantiation of `this`
  Error:
   26: class B extends A {
             ^ B. This type is incompatible with
   15:   static staticMethod(this: J & Class<this>): number {
                                             ^^^^ some incompatible instantiation of `this`

object.js:41
 41: var s3: number = B.staticMethod(); // NG: This line triggers an extra negative :(
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 31:   static anotherStaticMethod(): string {
                                     ^^^^^^ string. This type is incompatible with
  6:   anotherStaticMethod(): number;
                              ^^^^^^ number

object.js:54
 54: var n4: number = C.staticMethod(); // OK! False Negative!
                      ^^^^^^^^^^^^^^^^ call of method `staticMethod`
 43: class C extends A {
           ^ C. This type is incompatible with
 15:   static staticMethod(this: J & Class<this>): number {
                                           ^^^^ some incompatible instantiation of `this`

object.js:61
 61:     return this.method(); // NG
                ^^^^^^^^^^^^^ call of method `method`
 57:   method(this: I): number {
                    ^ property `anotherMethod`. Property not found in
 56: class K {
           ^ K

object.js:66
 66: var n5: number = k.method(); // NG
                      ^^^^^^^^^^ call of method `method`
 57:   method(this: I): number {
                    ^ property `anotherMethod`. Property not found in
 66: var n5: number = k.method(); // NG
                      ^ K

object.js:91
 91: t.getXMultBy(4); // NG
     ^^^^^^^^^^^^^^^ call of method `getXMultBy`
 90: t._x = "a string";
            ^^^^^^^^^^ string. This type is incompatible with
 80:   getXMultBy(this: Issue1369<number>, y: number): number {
                                  ^^^^^^ number

test.js:9
  9: a.method();
     ^^^^^^^^^^ call of method `method`
  9: a.method();
     ^ A. This type is incompatible with
  4:   method(this: Class<this>) {}
                          ^^^^ class type: `this` type


Found 26 errors
