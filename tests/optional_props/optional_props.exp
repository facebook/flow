test.js:2
  2: var y: { foo?: string } = x; // OK in TypeScript, not OK in Flow
            ^^^^^^^^^^^^^^^^ property `foo`. Property not found in
  2: var y: { foo?: string } = x; // OK in TypeScript, not OK in Flow
                               ^ object type

test.js:8
  8: o.foo = 0; // future widening is constrained
             ^ number. This type is incompatible with
  2: var y: { foo?: string } = x; // OK in TypeScript, not OK in Flow
                    ^^^^^^ string

test.js:12
 12: bar({foo: ""});
         ^^^^^^^^^ object literal. This type is incompatible with the expected param type of
 10: function bar(config: { foo?: number }) {}
                          ^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     12: bar({foo: ""});
                   ^^ string. This type is incompatible with
     10: function bar(config: { foo?: number }) {}
                                      ^^^^^^ number

test2.js:3
  3: a.foo = null; // But this is an error
             ^^^^ null. This type is incompatible with
  1: var a: { foo?: string } = {};
                    ^^^^^^ string

test2.js:10
 10: var d: { foo?: string } = { foo: null }; // But this is an error
                               ^^^^^^^^^^^^^ object literal. This type is incompatible with
 10: var d: { foo?: string } = { foo: null }; // But this is an error
            ^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     10: var d: { foo?: string } = { foo: null }; // But this is an error
                                          ^^^^ null. This type is incompatible with
     10: var d: { foo?: string } = { foo: null }; // But this is an error
                        ^^^^^^ string

test3.js:54
 54:         this.x.b = 'hello';
                    ^ property `b`. Property not found in
 54:         this.x.b = 'hello';
             ^^^^^^ object literal

test3_failure.js:7
  7:     this.o.x.b = 'hello'; // this is a spurious error (see test3.js for details)
                  ^ property `b`. Property not found in
  7:     this.o.x.b = 'hello'; // this is a spurious error (see test3.js for details)
         ^^^^^^^^ object literal


Found 7 errors
