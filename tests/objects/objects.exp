conversion.js:10
 10: (Object(undefined): Number); // error
      ^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
 10: (Object(undefined): Number); // error
                         ^^^^^^ Number

conversion.js:19
 19: (z.charAt(0): string);
        ^^^^^^ property `charAt`. Property not found in
 19: (z.charAt(0): string);
      ^ Number

objects.js:4
  4: (x.foo : string);     // error, key doesn't exist
        ^^^ property `foo`. Property not found in
  4: (x.foo : string);     // error, key doesn't exist
      ^ object type

objects.js:5
  5: (x['foo'] : string);  // error, key doesn't exist
        ^^^^^ property `foo`. Property not found in
  5: (x['foo'] : string);  // error, key doesn't exist
      ^ object type

objects.js:7
  7: (x.bar: boolean);     // error, string !~> boolean
      ^^^^^ string. This type is incompatible with
  7: (x.bar: boolean);     // error, string !~> boolean
             ^^^^^^^ boolean

objects.js:8
  8: (x['123'] : boolean); // error, string !~> boolean
      ^^^^^^^^ string. This type is incompatible with
  8: (x['123'] : boolean); // error, string !~> boolean
                 ^^^^^^^ boolean

objects.js:9
  9: x['123'] = false;     // error, boolean !~> string
                ^^^^^ boolean. This type is incompatible with
  3: var x : {'123': string, bar: string} = {'123': 'val', bar: 'bar'};
                     ^^^^^^ string

objects.js:12
 12: (x[`foo`]: string);   // error, key doesn't exist
        ^^^^^ property `foo`. Property not found in
 12: (x[`foo`]: string);   // error, key doesn't exist
      ^ object type

objects.js:15
 15: y['foo'] = 123; // error, number !~> string
                ^^^ number. This type is incompatible with
 14: var y : {foo: string} = {foo: 'bar'};
                   ^^^^^^ string

objects.js:16
 16: y['bar'] = 'abc'; // error, property not found
       ^^^^^ property `bar`. Property not found in
 16: y['bar'] = 'abc'; // error, property not found
     ^ object type

objects.js:18
 18: (y['hasOwnProperty']: string); // error, prototype method is not a string
      ^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 18: (y['hasOwnProperty']: string); // error, prototype method is not a string
                           ^^^^^^ string

unaliased_assign.js:20
 20:   glob = obj;    // error: subsequent assignment might make glob.x a number
              ^^^ object literal. This type is incompatible with
 15: var glob: { x: string } = { x: "hey" };
               ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     18:   var obj: { x: string | number };
                                  ^^^^^^ number. This type is incompatible with
     15: var glob: { x: string } = { x: "hey" };
                        ^^^^^^ string


Found 12 errors
