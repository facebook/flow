Error: compatibility.js:3
  3:     x = y; // 2 errors: `foo` not found in y.x; `bar` not found in x.x
             ^ object type. This type is incompatible with
  2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                            ^^^^^^^^^^^^^^^ property `foo`. Property not found in
      2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                                                       ^^^^^^^^^^^^^^^ object type

Error: compatibility.js:3
  3:     x = y; // 2 errors: `foo` not found in y.x; `bar` not found in x.x
             ^ object type. This type is incompatible with
  2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                                                       ^^^^^^^^^^^^^^^ property `bar`. Property not found in
      2:   function(x: { x: { foo: string } }, y: { x: { bar: number } }) {
                            ^^^^^^^^^^^^^^^ object type

Error: compatibility.js:7
  7:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
  6:   function(x: { foo: string }, y: { foo: number }) {
                   ^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      6:   function(x: { foo: string }, y: { foo: number }) {
                              ^^^^^^ string. This type is incompatible with
      6:   function(x: { foo: string }, y: { foo: number }) {
                                                  ^^^^^^ number

Error: compatibility.js:7
  7:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
  6:   function(x: { foo: string }, y: { foo: number }) {
                   ^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      6:   function(x: { foo: string }, y: { foo: number }) {
                                                  ^^^^^^ number. This type is incompatible with
      6:   function(x: { foo: string }, y: { foo: number }) {
                              ^^^^^^ string

Error: compatibility.js:11
 11:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                                       ^^^^^^^^^^^^^^^ object type. This type is incompatible with
     10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                            ^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                       ^^^^^^ string. This type is incompatible with
         10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                                                  ^^^^^^ number

Error: compatibility.js:11
 11:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                                       ^^^^^^^^^^^^^^^ object type. This type is incompatible with
     10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                            ^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                                                  ^^^^^^ number. This type is incompatible with
         10:   function(x: { x: { foo: string } }, y: { x: { foo: number } }) {
                                       ^^^^^^ string

Error: compatibility.js:15
 15:     x = y; // 1 error: number !~> string
             ^ object type. This type is incompatible with
 14:   function(x: { +foo: string }, y: { +foo: number }) {
                   ^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     14:   function(x: { +foo: string }, y: { +foo: number }) {
                                                    ^^^^^^ number. This type is incompatible with
     14:   function(x: { +foo: string }, y: { +foo: number }) {
                               ^^^^^^ string

Error: compatibility.js:19
 19:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                                        ^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                            ^^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                        ^^^^^^ string. This type is incompatible with
         18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                                                    ^^^^^^ number

Error: compatibility.js:19
 19:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                                        ^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                            ^^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                                                    ^^^^^^ number. This type is incompatible with
         18:   function(x: { x: { +foo: string } }, y: { x: { +foo: number } }) {
                                        ^^^^^^ string

Error: compatibility.js:23
 23:     x = y; // 1 error: string !~> number
             ^ object type. This type is incompatible with
 22:   function(x: { -foo: string }, y: { -foo: number }) {
                   ^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     22:   function(x: { -foo: string }, y: { -foo: number }) {
                               ^^^^^^ string. This type is incompatible with
     22:   function(x: { -foo: string }, y: { -foo: number }) {
                                                    ^^^^^^ number

Error: compatibility.js:27
 27:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                                        ^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                            ^^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                        ^^^^^^ string. This type is incompatible with
         26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                                                    ^^^^^^ number

Error: compatibility.js:27
 27:     x = y; // 2 errors: string !~> number; number !~> string
             ^ object type. This type is incompatible with
 26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                   ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                                        ^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                            ^^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                                                    ^^^^^^ number. This type is incompatible with
         26:   function(x: { x: { -foo: string } }, y: { x: { -foo: number } }) {
                                        ^^^^^^ string

Error: conversion.js:10
 10: (Object(undefined): Number); // error
      ^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
 10: (Object(undefined): Number); // error
                         ^^^^^^ Number

Error: conversion.js:19
 19: (z.charAt(0): string);
        ^^^^^^ property `charAt`. Property not found in
 19: (z.charAt(0): string);
      ^ Number

Error: objects.js:4
  4: (x.foo : string);     // error, key doesn't exist
        ^^^ property `foo`. Property not found in
  4: (x.foo : string);     // error, key doesn't exist
      ^ object type

Error: objects.js:5
  5: (x['foo'] : string);  // error, key doesn't exist
        ^^^^^ property `foo`. Property not found in
  5: (x['foo'] : string);  // error, key doesn't exist
      ^ object type

Error: objects.js:7
  7: (x.bar: boolean);     // error, string !~> boolean
      ^^^^^ string. This type is incompatible with
  7: (x.bar: boolean);     // error, string !~> boolean
             ^^^^^^^ boolean

Error: objects.js:8
  8: (x['123'] : boolean); // error, string !~> boolean
      ^^^^^^^^ string. This type is incompatible with
  8: (x['123'] : boolean); // error, string !~> boolean
                 ^^^^^^^ boolean

Error: objects.js:9
  9: x['123'] = false;     // error, boolean !~> string
                ^^^^^ boolean. This type is incompatible with
  9: x['123'] = false;     // error, boolean !~> string
     ^^^^^^^^ string

Error: objects.js:12
 12: (x[`foo`]: string);   // error, key doesn't exist
        ^^^^^ property `foo`. Property not found in
 12: (x[`foo`]: string);   // error, key doesn't exist
      ^ object type

Error: objects.js:15
 15: y['foo'] = 123; // error, number !~> string
                ^^^ number. This type is incompatible with
 15: y['foo'] = 123; // error, number !~> string
     ^^^^^^^^ string

Error: objects.js:16
 16: y['bar'] = 'abc'; // error, property not found
       ^^^^^ property `bar`. Property not found in
 16: y['bar'] = 'abc'; // error, property not found
     ^ object type

Error: objects.js:18
 18: (y['hasOwnProperty']: string); // error, prototype method is not a string
      ^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 18: (y['hasOwnProperty']: string); // error, prototype method is not a string
                           ^^^^^^ string

Error: unaliased_assign.js:20
 20:   glob = obj;    // error: subsequent assignment might make glob.x a number
              ^^^ object literal. This type is incompatible with
 15: var glob: { x: string } = { x: "hey" };
               ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     18:   var obj: { x: string | number };
                                  ^^^^^^ number. This type is incompatible with
     15: var glob: { x: string } = { x: "hey" };
                        ^^^^^^ string


Found 24 errors
