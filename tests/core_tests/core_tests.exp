Error ------------------------------------------------------------------------------------------------------ json.js:2:5

Cannot use `new` on object type [1]. Only classes can be constructed. [invalid-constructor]

   json.js:2:5
      2| new JSON(); // ERROR
             ^^^^

References:
   <BUILTINS>/core.js:1705:19
                           v-
   1705| declare var JSON: {|
   1706|     /**
   1707|      * Converts a JavaScript Object Notation (JSON) string into an object.
   1708|      * @param text A valid JSON string.
   1709|      * @param reviver A function that transforms the results. This function is called for each member of the object.
   1710|      * If a member contains nested objects, the nested objects are transformed before the parent object is.
   1711|      */
   1712|     +parse: (text: string, reviver?: (key: any, value: any) => any) => any,
   1713|     /**
   1714|      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
   1715|      * @param value A JavaScript value, usually an object or array, to be converted.
   1716|      * @param replacer A function that transforms the results or an array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.
   1717|      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
   1718|      */
   1719|     +stringify: ((
   1720|         value: null | string | number | boolean | interface {} | $ReadOnlyArray<mixed>,
   1721|         replacer?: ?((key: string, value: any) => any) | Array<any>,
   1722|         space?: string | number
   1723|       ) => string) &
   1724|       (
   1725|         value: mixed,
   1726|         replacer?: ?((key: string, value: any) => any) | Array<any>,
   1727|         space?: string | number
   1728|       ) => string | void,
   1729| |};
         -^ [1]


Error ------------------------------------------------------------------------------------------------------ json.js:9:6

Cannot assign `1` to `JSON.parse` because property `parse` is not writable. [cannot-write]

   9| JSON.parse = 1; // ERROR
           ^^^^^


Error -------------------------------------------------------------------------------------------- json_stringify.js:7:2

Cannot cast `JSON.stringify(...)` to string because undefined [1] is incompatible with string [2]. [incompatible-cast]

   json_stringify.js:7:2
      7| (JSON.stringify(bad1): string);
          ^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1728:21
   1728|       ) => string | void,
                             ^^^^ [1]
   json_stringify.js:7:24
      7| (JSON.stringify(bad1): string);
                                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- map.js:21:21

Cannot call `Map` with array literal bound to `iterable` because string [1] is incompatible with tuple type [2] in type
argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:21:21
     21|     let x = new Map(['foo', 123]); // error
                             ^^^^^^^^^^^^

References:
   map.js:21:22
     21|     let x = new Map(['foo', 123]); // error
                              ^^^^^ [1]
   <BUILTINS>/core.js:1933:38
   1933|     constructor(iterable?: ?Iterable<[K, V]>): void;
                                              ^^^^^^ [2]
   <BUILTINS>/core.js:1749:30
   1749| interface $IteratorProtocol<+Yield,+Return=void,-Next=void> {
                                      ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:21:21

Cannot call `Map` with array literal bound to `iterable` because number [1] is incompatible with tuple type [2] in type
argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:21:21
     21|     let x = new Map(['foo', 123]); // error
                             ^^^^^^^^^^^^

References:
   map.js:21:29
     21|     let x = new Map(['foo', 123]); // error
                                     ^^^ [1]
   <BUILTINS>/core.js:1933:38
   1933|     constructor(iterable?: ?Iterable<[K, V]>): void;
                                              ^^^^^^ [2]
   <BUILTINS>/core.js:1749:30
   1749| interface $IteratorProtocol<+Yield,+Return=void,-Next=void> {
                                      ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:22:42

Cannot call `Map` with array literal bound to `iterable` because string [1] is incompatible with number [2] in index 0
of type argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:22:42
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                  ^^^^^^^^^^^^^^

References:
   map.js:22:44
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                    ^^^^^ [1]
   map.js:22:16
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                        ^^^^^^ [2]
   <BUILTINS>/core.js:1749:30
   1749| interface $IteratorProtocol<+Yield,+Return=void,-Next=void> {
                                      ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:22:42

Cannot call `Map` with array literal bound to `iterable` because number [1] is incompatible with string [2] in index 1
of type argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:22:42
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                  ^^^^^^^^^^^^^^

References:
   map.js:22:51
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                           ^^^ [1]
   map.js:22:24
     22|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                ^^^^^^ [2]
   <BUILTINS>/core.js:1749:30
   1749| interface $IteratorProtocol<+Yield,+Return=void,-Next=void> {
                                      ^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------ map.js:27:6

Cannot cast `x.get(...)` to boolean because undefined [1] is incompatible with boolean [2]. [incompatible-cast]

   map.js:27:6
     27|     (x.get('foo'): boolean); // error, string | void
              ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1941:22
   1941|     get(key: K): V | void;
                              ^^^^ [1]
   map.js:27:20
     27|     (x.get('foo'): boolean); // error, string | void
                            ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ map.js:27:6

Cannot cast `x.get(...)` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   map.js:27:6
   27|     (x.get('foo'): boolean); // error, string | void
            ^^^^^^^^^^^^

References:
   map.js:26:27
   26|   function(x: Map<string, number>) {
                                 ^^^^^^ [1]
   map.js:27:20
   27|     (x.get('foo'): boolean); // error, string | void
                          ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- map.js:28:11

Cannot call `x.get` with `123` bound to `key` because number [1] is incompatible with string [2]. [incompatible-call]

   map.js:28:11
   28|     x.get(123); // error, wrong key type
                 ^^^ [1]

References:
   map.js:26:19
   26|   function(x: Map<string, number>) {
                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- weakref.js:17:23

Cannot call `WeakRef` because in type argument `T`: [incompatible-call]
 - Either boolean [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Boolean(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or boolean [1] is incompatible with read-only array type [3].

   weakref.js:17:23
     17| let wr5 = new WeakRef(true); // error, must be objects
                               ^^^^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakref.js:18:23

Cannot call `WeakRef` because in type argument `T`: [incompatible-call]
 - Either number [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   weakref.js:18:23
     18| let wr6 = new WeakRef(123); // error, must be objects
                               ^^^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakref.js:19:23

Cannot call `WeakRef` because in type argument `T`: [incompatible-call]
 - Either string [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new String(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or string [1] is incompatible with read-only array type [3].

   weakref.js:19:23
     19| let wr7 = new WeakRef('not an object'); // error, must be objects
                               ^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakset.js:17:24

Cannot call `WeakSet` because in type argument `T`: [incompatible-call]
 - Either number [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   weakset.js:17:24
     17| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                ^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakset.js:17:27

Cannot call `WeakSet` because in type argument `T`: [incompatible-call]
 - Either number [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   weakset.js:17:27
     17| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                   ^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakset.js:17:30

Cannot call `WeakSet` because in type argument `T`: [incompatible-call]
 - Either number [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   weakset.js:17:30
     17| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                      ^ [1]

References:
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- weakset.js:34:15

Cannot call `WeakSet` because in type argument `T`: [incompatible-call]
 - Either number [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   weakset.js:34:15
     34| let ws5 = new WeakSet(numbers()); // error, must be objects
                       ^^^^^^^

References:
   weakset.js:27:31
     27| function* numbers(): Iterable<number> {
                                       ^^^^^^ [1]
   <BUILTINS>/core.js:1958:28
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                    ^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1958:43
   1958| type WeaklyReferenceable = interface {} | $ReadOnlyArray<mixed>;
                                                   ^^^^^^^^^^^^^^^^^^^^^ [3]



Found 17 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
