map.js:23
 23:     let x = new Map(['foo', 123]); // error
                 ^^^^^^^^^^^^^^^^^^^^^ constructor call. Function cannot be called on any member of intersection type
 23:     let x = new Map(['foo', 123]); // error
                 ^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
  polymorphic type: function type. See lib: core.js:396
  Error:
   23:     let x = new Map(['foo', 123]); // error
                           ^^^^^^^^^^^^ array literal. This type is incompatible with
  undefined. See lib: core.js:396
  Member 2:
  polymorphic type: function type. See lib: core.js:397
  Error:
   23:     let x = new Map(['foo', 123]); // error
                           ^^^^^^^^^^^^ array literal. This type is incompatible with
  null. See lib: core.js:397
  Member 3:
  polymorphic type: function type. See lib: core.js:398
  Error:
   23:     let x = new Map(['foo', 123]); // error
                                   ^^^ number. This type is incompatible with
  tuple type. See lib: core.js:398
  Member 4:
  polymorphic type: function type. See lib: core.js:399
  Error:
   23:     let x = new Map(['foo', 123]); // error
                                   ^^^ number. This type is incompatible with
  tuple type. See lib: core.js:399

map.js:29
 29:     (x.get('foo'): boolean); // error, string | void
          ^^^^^^^^^^^^ call of method `get`
 28:   function(x: Map<string, number>) {
                               ^^^^^^ number. This type is incompatible with
 29:     (x.get('foo'): boolean); // error, string | void
                        ^^^^^^^ boolean

map.js:29
 29:     (x.get('foo'): boolean); // error, string | void
          ^^^^^^^^^^^^ call of method `get`
 29:     (x.get('foo'): boolean); // error, string | void
                        ^^^^^^^ boolean. This type is incompatible with
undefined. See lib: core.js:404

map.js:30
 30:     x.get(123); // error, wrong key type
         ^^^^^^^^^^ call of method `get`
 30:     x.get(123); // error, wrong key type
               ^^^ number. This type is incompatible with
 28:   function(x: Map<string, number>) {
                       ^^^^^^ string

regexp.js:26
 26:     RegExp('foo', 'z'); // error
         ^^^^^^^^^^^^^^^^^^ function call
 26:     RegExp('foo', 'z'); // error
                       ^^^ string. This type is incompatible with
string enum. See lib: core.js:258

regexp.js:27
 27:     new RegExp('foo', 'z'); // error
         ^^^^^^^^^^^^^^^^^^^^^^ constructor call
 27:     new RegExp('foo', 'z'); // error
                           ^^^ string. This type is incompatible with
string enum. See lib: core.js:259

weakset.js:19
 19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
               ^^^^^^^^^^^^^^^^^^^^^^ constructor call. Function cannot be called on any member of intersection type
 19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
               ^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
  polymorphic type: function type. See lib: core.js:434
  Error:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                             ^^^^^^^^^ array literal. This type is incompatible with
  undefined. See lib: core.js:434
  Member 2:
  polymorphic type: function type. See lib: core.js:435
  Error:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                              ^ number. This type is incompatible with
  object type. See lib: core.js:435
  Member 3:
  polymorphic type: function type. See lib: core.js:436
  Error:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                              ^ number. This type is incompatible with
  object type. See lib: core.js:436

weakset.js:36
 36: let ws5 = new WeakSet(numbers()); // error, must be objects
               ^^^^^^^^^^^^^^^^^^^^^^ constructor call. Function cannot be called on any member of intersection type
 36: let ws5 = new WeakSet(numbers()); // error, must be objects
               ^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
  polymorphic type: function type. See lib: core.js:434
  Error:
   36: let ws5 = new WeakSet(numbers()); // error, must be objects
                             ^^^^^^^^^ $Iterable. This type is incompatible with
  undefined. See lib: core.js:434
  Member 2:
  polymorphic type: function type. See lib: core.js:435
  Error:
   29: function* numbers(): Iterable<number> {
                                     ^^^^^^ number. This type is incompatible with
  object type. See lib: core.js:435
  Member 3:
  polymorphic type: function type. See lib: core.js:436
  Error:
   29: function* numbers(): Iterable<number> {
                                     ^^^^^^ number. This type is incompatible with
  object type. See lib: core.js:436


Found 8 errors
