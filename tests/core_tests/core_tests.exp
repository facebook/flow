Error ------------------------------------------------------------------------------------------------------ json.js:4:5

Cannot use `new` on object type [1]. Only classes can be constructed. [invalid-constructor]

   json.js:4:5
      4| new JSON(); // ERROR
             ^^^^

References:
   <BUILTINS>/core.js:1604:19
                           v-
   1604| declare var JSON: {|
   1605|     /**
   1606|      * Converts a JavaScript Object Notation (JSON) string into an object.
   1607|      * @param text A valid JSON string.
   1608|      * @param reviver A function that transforms the results. This function is called for each member of the object.
   1609|      * If a member contains nested objects, the nested objects are transformed before the parent object is.
   1610|      */
   1611|     +parse: (text: string, reviver?: (key: any, value: any) => any) => any,
   1612|     /**
   1613|      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
   1614|      * @param value A JavaScript value, usually an object or array, to be converted.
   1615|      * @param replacer A function that transforms the results or an array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.
   1616|      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
   1617|      */
   1618|     +stringify: ((
   1619|         value: null | string | number | boolean | interface {} | $ReadOnlyArray<mixed>,
   1620|         replacer?: ?((key: string, value: any) => any) | Array<any>,
   1621|         space?: string | number
   1622|       ) => string) &
   1623|       (
   1624|         value: mixed,
   1625|         replacer?: ?((key: string, value: any) => any) | Array<any>,
   1626|         space?: string | number
   1627|       ) => string | void,
   1628| |};
         -^ [1]


Error ----------------------------------------------------------------------------------------------------- json.js:11:6

Cannot assign `1` to `JSON.parse` because property `parse` is not writable. [cannot-write]

   11| JSON.parse = 1; // ERROR
            ^^^^^


Error -------------------------------------------------------------------------------------------- json_stringify.js:9:2

Cannot cast `JSON.stringify(...)` to string because undefined [1] is incompatible with string [2]. [incompatible-cast]

   json_stringify.js:9:2
      9| (JSON.stringify(bad1): string);
          ^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1627:21
   1627|       ) => string | void,
                             ^^^^ [1]
   json_stringify.js:9:24
      9| (JSON.stringify(bad1): string);
                                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- map.js:23:21

Cannot call `Map` with array literal bound to `iterable` because string [1] is incompatible with tuple type [2] in type
argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:23:21
     23|     let x = new Map(['foo', 123]); // error
                             ^^^^^^^^^^^^

References:
   map.js:23:22
     23|     let x = new Map(['foo', 123]); // error
                              ^^^^^ [1]
   <BUILTINS>/core.js:1710:38
   1710|     constructor(iterable?: ?Iterable<[K, V]>): void;
                                              ^^^^^^ [2]
   <BUILTINS>/core.js:1644:22
   1644| interface $Iterator<+Yield,+Return,-Next> {
                              ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:23:21

Cannot call `Map` with array literal bound to `iterable` because number [1] is incompatible with tuple type [2] in type
argument `Yield` [3] of the return value of property `@@iterator`. [incompatible-call]

   map.js:23:21
     23|     let x = new Map(['foo', 123]); // error
                             ^^^^^^^^^^^^

References:
   map.js:23:29
     23|     let x = new Map(['foo', 123]); // error
                                     ^^^ [1]
   <BUILTINS>/core.js:1710:38
   1710|     constructor(iterable?: ?Iterable<[K, V]>): void;
                                              ^^^^^^ [2]
   <BUILTINS>/core.js:1644:22
   1644| interface $Iterator<+Yield,+Return,-Next> {
                              ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:24:44

Cannot assign `new Map(...)` to `y` because string [1] is incompatible with number [2] in type argument `K` [3].
[incompatible-type-arg]

   map.js:24:44
     24|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                    ^^^^^ [1]

References:
   map.js:24:16
     24|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                        ^^^^^^ [2]
   <BUILTINS>/core.js:1708:19
   1708| declare class Map<K, V> extends $ReadOnlyMap<K, V> {
                           ^ [3]


Error ----------------------------------------------------------------------------------------------------- map.js:24:51

Cannot assign `new Map(...)` to `y` because number [1] is incompatible with string [2] in type argument `V` [3].
[incompatible-type-arg]

   map.js:24:51
     24|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                           ^^^ [1]

References:
   map.js:24:24
     24|     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                ^^^^^^ [2]
   <BUILTINS>/core.js:1708:22
   1708| declare class Map<K, V> extends $ReadOnlyMap<K, V> {
                              ^ [3]


Error ------------------------------------------------------------------------------------------------------ map.js:29:6

Cannot cast `x.get(...)` to boolean because undefined [1] is incompatible with boolean [2]. [incompatible-cast]

   map.js:29:6
     29|     (x.get('foo'): boolean); // error, string | void
              ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1718:22
   1718|     get(key: K): V | void;
                              ^^^^ [1]
   map.js:29:20
     29|     (x.get('foo'): boolean); // error, string | void
                            ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ map.js:29:6

Cannot cast `x.get(...)` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   map.js:29:6
   29|     (x.get('foo'): boolean); // error, string | void
            ^^^^^^^^^^^^

References:
   map.js:28:27
   28|   function(x: Map<string, number>) {
                                 ^^^^^^ [1]
   map.js:29:20
   29|     (x.get('foo'): boolean); // error, string | void
                          ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- map.js:30:11

Cannot call `x.get` with `123` bound to `key` because number [1] is incompatible with string [2]. [incompatible-call]

   map.js:30:11
   30|     x.get(123); // error, wrong key type
                 ^^^ [1]

References:
   map.js:28:19
   28|   function(x: Map<string, number>) {
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- regexp.js:26:19

Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` [1] is incompatible with `RegExp$flags` [2]
since `z` is not a member of the set. [invalid-charset-type-arg]

   regexp.js:26:19
     26|     RegExp('foo', 'z'); // error
                           ^^^ [1]

References:
   <BUILTINS>/core.js:1068:21
   1068| type RegExp$flags = $CharSet<"gimsuy">;
                             ^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- regexp.js:27:23

Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` [1] is incompatible with `RegExp$flags` [2]
since `z` is not a member of the set. [invalid-charset-type-arg]

   regexp.js:27:23
     27|     new RegExp('foo', 'z'); // error
                               ^^^ [1]

References:
   <BUILTINS>/core.js:1068:21
   1068| type RegExp$flags = $CharSet<"gimsuy">;
                             ^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in type argument `Yield` [1] of the return value of
property `@@iterator`: [incompatible-call]
 - Either number [2] is incompatible with object type [3].
 - Or number [2] is incompatible with read-only array type [4].

   weakset.js:19:23
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                               ^^^^^^^^^

References:
   <BUILTINS>/core.js:1644:22
   1644| interface $Iterator<+Yield,+Return,-Next> {
                              ^^^^^ [1]
   weakset.js:19:24
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                ^ [2]
   <BUILTINS>/core.js:1796:26
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                  ^^^^^ [3]
   <BUILTINS>/core.js:1796:34
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                          ^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in type argument `Yield` [1] of the return value of
property `@@iterator`: [incompatible-call]
 - Either number [2] is incompatible with object type [3].
 - Or number [2] is incompatible with read-only array type [4].

   weakset.js:19:23
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                               ^^^^^^^^^

References:
   <BUILTINS>/core.js:1644:22
   1644| interface $Iterator<+Yield,+Return,-Next> {
                              ^^^^^ [1]
   weakset.js:19:27
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                   ^ [2]
   <BUILTINS>/core.js:1796:26
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                  ^^^^^ [3]
   <BUILTINS>/core.js:1796:34
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                          ^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in type argument `Yield` [1] of the return value of
property `@@iterator`: [incompatible-call]
 - Either number [2] is incompatible with object type [3].
 - Or number [2] is incompatible with read-only array type [4].

   weakset.js:19:23
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                               ^^^^^^^^^

References:
   <BUILTINS>/core.js:1644:22
   1644| interface $Iterator<+Yield,+Return,-Next> {
                              ^^^^^ [1]
   weakset.js:19:30
     19| let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                      ^ [2]
   <BUILTINS>/core.js:1796:26
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                  ^^^^^ [3]
   <BUILTINS>/core.js:1796:34
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                          ^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- weakset.js:36:23

Cannot call `WeakSet` with `numbers()` bound to `iterable` because in type argument `Yield` [1]: [incompatible-call]
 - Either number [2] is incompatible with object type [3].
 - Or number [2] is incompatible with read-only array type [4].

   weakset.js:36:23
     36| let ws5 = new WeakSet(numbers()); // error, must be objects
                               ^^^^^^^^^

References:
   <BUILTINS>/core.js:1650:22
   1650| interface $Iterable<+Yield,+Return,-Next> {
                              ^^^^^ [1]
   weakset.js:29:31
     29| function* numbers(): Iterable<number> {
                                       ^^^^^^ [2]
   <BUILTINS>/core.js:1796:26
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                  ^^^^^ [3]
   <BUILTINS>/core.js:1796:34
   1796| declare class WeakSet<T: {...} | $ReadOnlyArray<any>> extends $ReadOnlyWeakSet<T> {
                                          ^^^^^^^^^^^^^^^^^^^ [4]



Found 16 errors
