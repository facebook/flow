Error: const.js:4
  4: x++;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:5
  5: x--;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:6
  6: x += 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:7
  7: x -= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:8
  8: x /= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:9
  9: x %= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:10
 10: x <<= 0
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:11
 11: x >>= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:12
 12: x >>>= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:13
 13: x |= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:14
 14: x ^= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:15
 15: x &= 0;
     ^ x. const cannot be reassigned
  1: const x = 0;
           ^ const x

Error: const.js:21
 21: (foo: number); // error: string ~> number
      ^^^ string. This type is incompatible with
 21: (foo: number); // error: string ~> number
           ^^^^^^ number

Error: const.js:22
 22: (bar: number); // error: string ~> number
      ^^^ string. This type is incompatible with
 22: (bar: number); // error: string ~> number
           ^^^^^^ number

Error: const.js:26
 26:   (baz: number); // error: string ~> number
        ^^^ string. This type is incompatible with
 26:   (baz: number); // error: string ~> number
             ^^^^^^ number

Error: rebinding.js:16
 16:   type A = number;  // error: name already bound
            ^ A. name is already bound
 15:   type A = number;
            ^ type A

Error: rebinding.js:21
 21:   class A {}        // error: name already bound
             ^ A. name is already bound
 20:   type A = number;
            ^ type A

Error: rebinding.js:26
 26:   let A = 0;        // error: name already bound
           ^ A. name is already bound
 25:   type A = number;
            ^ type A

Error: rebinding.js:31
 31:   const A = 0;     // error: name already bound
             ^ A. name is already bound
 30:   type A = number;
            ^ type A

Error: rebinding.js:36
 36:   var A = 0;        // error: name already bound
           ^ A. name is already bound
 35:   type A = number;
            ^ type A

Error: rebinding.js:41
 41:   A = 42;           // error: type alias ref'd from value pos
       ^ A. type alias referenced from value position
 40:   type A = number;
            ^ type A

Error: rebinding.js:48
 48:   type A = number;  // error: name already bound
            ^ A. name is already bound
 47:   class A {}
             ^ class A

Error: rebinding.js:53
 53:   class A {}        // error: name already bound
             ^ A. name is already bound
 52:   class A {}
             ^ class A

Error: rebinding.js:58
 58:   let A = 0;        // error: name already bound
           ^ A. name is already bound
 57:   class A {}
             ^ class A

Error: rebinding.js:63
 63:   const A = 0;     // error: name already bound
             ^ A. name is already bound
 62:   class A {}
             ^ class A

Error: rebinding.js:68
 68:   var A = 0;        // error: name already bound
           ^ A. name is already bound
 67:   class A {}
             ^ class A

Error: rebinding.js:75
 75:   type A = number;  // error: name already bound
            ^ A. name is already bound
 74:   let A = 0;
           ^ let A

Error: rebinding.js:80
 80:   class A {}        // error: name already bound
             ^ A. name is already bound
 79:   let A = 0;
           ^ let A

Error: rebinding.js:85
 85:   let A = 0;        // error: name already bound
           ^ A. name is already bound
 84:   let A = 0;
           ^ let A

Error: rebinding.js:90
 90:   const A = 0;     // error: name already bound
             ^ A. name is already bound
 89:   let A = 0;
           ^ let A

Error: rebinding.js:95
 95:   var A = 0;        // error: name already bound
           ^ A. name is already bound
 94:   let A = 0;
           ^ let A

Error: rebinding.js:102
102:   type A = number;  // error: name already bound
            ^ A. name is already bound
101:   const A = 0;
             ^ const A

Error: rebinding.js:107
107:   class A {}        // error: name already bound
             ^ A. name is already bound
106:   const A = 0;
             ^ const A

Error: rebinding.js:112
112:   let A = 0;        // error: name already bound
           ^ A. name is already bound
111:   const A = 0;
             ^ const A

Error: rebinding.js:117
117:   const A = 0;     // error: name already bound
             ^ A. name is already bound
116:   const A = 0;
             ^ const A

Error: rebinding.js:122
122:   var A = 0;        // error: name already bound
           ^ A. name is already bound
121:   const A = 0;
             ^ const A

Error: rebinding.js:127
127:   A = 42;           // error: cannot be reassigned
       ^ A. const cannot be reassigned
126:   const A = 0;
             ^ const A

Error: rebinding.js:134
134:   type A = number;  // error: name already bound
            ^ A. name is already bound
133:   var A = 0;
           ^ var A

Error: rebinding.js:139
139:   class A {}        // error: name already bound
             ^ A. name is already bound
138:   var A = 0;
           ^ var A

Error: rebinding.js:144
144:   let A = 0;        // error: name already bound
           ^ A. name is already bound
143:   var A = 0;
           ^ var A

Error: rebinding.js:149
149:   const A = 0;      // error: name already bound
             ^ A. name is already bound
148:   var A = 0;
           ^ var A

Error: rebinding.js:167
167:     function a() {}; // error: name already bound
         ^^^^^^^^^^^^^^^ a. name is already bound
166:     function a() {};
         ^^^^^^^^^^^^^^^ function a

Error: rebinding.js:177
177:       var x = 0; // error: name already bound
               ^ x. name is already bound
175:     let x = 0;
             ^ let x

Error: rebinding.js:186
186:       type x = string; // error: name already bound
                ^ x. name is already bound
184:     let x = 0;
             ^ let x

Error: rebinding.js:193
193: function fn_params_name_clash(x, x /* error: x already bound */) {}
                                      ^ x. name is already bound
193: function fn_params_name_clash(x, x /* error: x already bound */) {}
                                   ^ param x

Error: rebinding.js:195
195:   let x = 0; // error: x already bound
           ^ x. name is already bound
194: function fn_params_clash_fn_binding(x,y) {
                                         ^ param x

Error: scope.js:6
  6:     var b = ""; // error: string ~> number
                 ^^ string. This type is incompatible with
  3:   var b: number = 0;
              ^^^^^^ number

Error: scope.js:16
 16:       var b = ""; // error: string ~> number
                   ^^ string. This type is incompatible with
 12:   var b: number = 0;
              ^^^^^^ number

Error: scope.js:19
 19:       let a = ""; // error: a already bound in switch
               ^ a. name is already bound
 15:       let a = ""; // ok: local to switch
               ^ let a

Error: scope.js:30
 30:      a = "";     // error: assign before declaration
          ^ a. let referenced before declaration, or after skipped declaration
 36:       let a = "";
               ^ let a

Error: scope.js:33
 33:      var b = a;  // error: use before declaration
                  ^ a. let referenced before declaration, or after skipped declaration
 36:       let a = "";
               ^ let a

Error: scope.js:39
 39:       a = "";     // error: skipped initializer
           ^ a. let referenced before declaration, or after skipped declaration
 36:       let a = "";
               ^ let a

Error: scope.js:42
 42:       var c:string = a;  // error: skipped initializer
                          ^ a. let referenced before declaration, or after skipped declaration
 36:       let a = "";
               ^ let a

Error: scope.js:45
 45:   a = ""; // error: a no longer in scope
       ^ identifier `a`. Could not resolve name

Error: scope.js:66
 66:   for (var a = "" /* error: string ~> number */;;) {}
                    ^^ string. This type is incompatible with
 65:   var a: number = 0;
              ^^^^^^ number

Error: scope.js:76
 76:   for (var a /* error: string ~> number */ in o) {}
                ^ string. This type is incompatible with
 75:   var a: number = 0;
              ^^^^^^ number

Error: scope.js:86
 86:   for (var a /* error: string ~> number */ of xs) {}
                ^ string. This type is incompatible with
 85:   var a: number = 0;
              ^^^^^^ number

Error: scope.js:92
 92:     x: () => string = f // error: number ~> string
                           ^ function. This type is incompatible with
 92:     x: () => string = f // error: number ~> string
            ^^^^^^^^^^^^ function type
  This parameter is incompatible:
     93:   ): number {
              ^^^^^^ number. This type is incompatible with
     92:     x: () => string = f // error: number ~> string
                      ^^^^^^ string

Error: scope.js:103
103:     return x(); // error: string ~> number
                ^^^ string. This type is incompatible with the expected return type of
101:   function f0(x = () => a): number {
                                 ^^^^^^ number

Error: scope.js:105
105:   function f1(x = b /* error: cannot resolve b */): number {
                       ^ identifier `b`. Could not resolve name

Error: tdz.js:25
 25:   var v = x * c;  // errors, let + const referenced before decl
               ^ x. let referenced before declaration, or after skipped declaration
 26:   let x = 0;
           ^ let x

Error: tdz.js:25
 25:   var v = x * c;  // errors, let + const referenced before decl
                   ^ c. const referenced before declaration, or after skipped declaration
 27:   const c = 0;
             ^ const c

Error: tdz.js:31
 31:   x = 10;         // error, attempt to write to let before decl
       ^ x. let referenced before declaration, or after skipped declaration
 32:   let x = 0;
           ^ let x

Error: tdz.js:34
 34:     y = 10;       // error, attempt to write to let before decl
         ^ y. let referenced before declaration, or after skipped declaration
 35:     let y = 0;
             ^ let y

Error: tdz.js:41
 41:     var v = x * c; // errors, let + const referenced before decl
                 ^ x. let referenced before declaration, or after skipped declaration
 43:   let x = 0;
           ^ let x

Error: tdz.js:41
 41:     var v = x * c; // errors, let + const referenced before decl
                     ^ c. const referenced before declaration, or after skipped declaration
 44:   const c = 0;
             ^ const c

Error: tdz.js:80
 80: var y = new C(); // error: let ref before decl from value position
                 ^ C. class referenced before declaration, or after skipped declaration
 82: class C {}
           ^ class C

Error: tdz.js:96
 96: f(a); // error: undefined ~/> number
       ^ uninitialized variable. This type is incompatible with the expected param type of
 94: function f(n: number) { return n; }
                   ^^^^^^ number


Found 68 errors
