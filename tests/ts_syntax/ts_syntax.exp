Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

The equivalent of TypeScript's `in` variance annotation is `-` in Flow. [ts-syntax]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:1:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   1| declare function f<in A>(A): void; // ERROR
                         ^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

The equivalent of TypeScript's `out` variance annotation is `+` in Flow. [ts-syntax]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:2:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   2| declare function f<out A>(): A; // ERROR
                         ^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

The equivalent of TypeScript's `in out` variance annotation in Flow is to simply leave it out - it's the default if you
don't have a variance annotation. [ts-syntax]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ------------------------------------------------------------------------------------------ in_out_variance.js:3:20

Variance modifiers cannot appear on a type parameter of a function type. [unsupported-variance-annotation]

   3| declare function f<in out A>(A): A; // ERROR
                         ^^^^^^


Error ---------------------------------------------------------------------------------------------------- keyof.js:3:10

`keyof` is only supported when used inline in a mapped type. The equivalent of TypeScript's `keyof` type operator in
Flow is the `$Keys` utility type, used in the form `$Keys<T>`. [ts-syntax]

   3| type T = keyof O; // ERROR
               ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- never.js:1:10

The closest equivalent of TypeScript's `never` type in Flow is `empty`. [ts-syntax]

   1| type T = never; // ERROR
               ^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:1:10

The equivalent of TypeScript's `readonly` type operator applied to a tuple type is `$ReadOnly<[T, S]>`. [ts-syntax]

   1| type A = readonly [string, number]; // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:2:10

The equivalent of TypeScript's `readonly` type operator applied to an array type is `$ReadOnlyArray<T>`. [ts-syntax]

   2| type B = readonly string[]; // ERROR
               ^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonly_type.js:3:10

TypeScript's `readonly` type operator is not valid in Flow. For array types, you can use `$ReadOnlyArray<T>`. For object
and tuple types you can use `$ReadOnly<T>`. [ts-syntax]

   3| type C = readonly number; // ERROR
               ^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------- readonly_variance.js:2:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   2|   readonly foo: string, // ERROR
        ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:11:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   11|   readonly [string]: mixed; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:15:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   15|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly_variance.js:19:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `+foo: T` for class and
object type properties, and `+[string]: T` for dictionaries. [ts-syntax]

   19|   readonly prop: string; // ERROR
         ^^^^^^^^


Error -------------------------------------------------------------------------------------------- readonlyarray.js:3:11

The utility type `$ReadOnlyArray` is deprecated, use `ReadonlyArray` instead. [deprecated-utility]

   3| type T1 = $ReadOnlyArray<number>; // ERROR
                ^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- readonlymap.js:2:14

Cannot assign `3` to `x` because number [1] is incompatible with `$ReadOnlyMap` [2]. [incompatible-type]

   readonlymap.js:2:14
   2| const x: T = 3; // ERROR
                   ^ [1]

References:
   readonlymap.js:2:10
   2| const x: T = 3; // ERROR
               ^ [2]


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Cannot
determine the type of this satisfies expression. Please provide an annotation, e.g., by adding a type cast around this
expression. [signature-verification-failure]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ satisfies.js:4:18

The closest equivalent of TypeScript's `satisfies` expression in Flow is to do a cast in the form `<expr> as <type>`.
[ts-syntax]

   4| export const a = m satisfies T; // ERROR
                       ^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:1:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   1| type A<T extends string> = [T];
             ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:2:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   2| type B<+T extends string> = [T];
             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:3:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   3| type C<T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:4:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   4| type D<+T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ undefined.js:1:10

The equivalent of TypeScript's `undefined` type in Flow is `void`. Flow does not have separate `void` and `undefined`
types. [ts-syntax]

   1| type T = undefined; // ERROR
               ^^^^^^^^^



Found 24 errors
