builtin.js:11
 11: var lengthTest3: IHasLength = 123; // number doesn't have length
                      ^^^^^^^^^^ property `length` of IHasLength. Property not found in
 11: var lengthTest3: IHasLength = 123; // number doesn't have length
                                   ^^^ number

builtin.js:12
 12: var lengthTest4: IHasLength = true; // bool doesn't have length
                      ^^^^^^^^^^ property `length` of IHasLength. Property not found in
 12: var lengthTest4: IHasLength = true; // bool doesn't have length
                                   ^^^^ boolean

class.js:6
  6:   x: string;
          ^^^^^^ string. This type is incompatible with
 14:   x: number;
          ^^^^^^ number

class.js:14
 14:   x: number;
          ^^^^^^ number. This type is incompatible with
  6:   x: string;
          ^^^^^^ string

class.js:23
 23: var testInstance3: IHasYString = new ClassWithXString(); // Error missing prop
                        ^^^^^^^^^^^ property `y` of IHasYString. Property not found in
 23: var testInstance3: IHasYString = new ClassWithXString(); // Error missing prop
                                      ^^^^^^^^^^^^^^^^^^^^^^ ClassWithXString

obj.js:6
  6:   x: string;
          ^^^^^^ string. This type is incompatible with
 10: var propTest2: IHasXString = { x: 123 }; // Error string != number
                                       ^^^ number

obj.js:6
  6:   x: string;
          ^^^^^^ string. This type is incompatible with
 18: function propTest6(y: {[key: string]: number}) {
                                           ^^^^^^ number

obj.js:10
 10: var propTest2: IHasXString = { x: 123 }; // Error string != number
                                       ^^^ number. This type is incompatible with
  6:   x: string;
          ^^^^^^ string

obj.js:11
 11: var propTest3: IHasXString = {}; // Property not found
                    ^^^^^^^^^^^ property `x` of IHasXString. Property not found in
 11: var propTest3: IHasXString = {}; // Property not found
                                  ^^ object literal

obj.js:18
 18: function propTest6(y: {[key: string]: number}) {
                                           ^^^^^^ number. This type is incompatible with
  6:   x: string;
          ^^^^^^ string

optional.js:5
  5:   b?: number,
           ^^^^^^ number. This type is incompatible with
 12: var test3: HasOptional = { a: "hello", b: true }; // Error: boolean ~> number
                                               ^^^^ boolean

optional.js:10
 10: var test2: HasOptional = {}; // Error: missing property a
                ^^^^^^^^^^^ property `a` of HasOptional. Property not found in
 10: var test2: HasOptional = {}; // Error: missing property a
                              ^^ object literal

optional.js:12
 12: var test3: HasOptional = { a: "hello", b: true }; // Error: boolean ~> number
                                               ^^^^ boolean. This type is incompatible with
  5:   b?: number,
           ^^^^^^ number

statics.js:3
     v---------------
  3: interface IFoo {
  4:   foo: string;
  5:   static bar: number;
  6: }
     ^ property `bar` of statics of IFoo. Property not found in
 25: let f1: IFoo = F1; //ng
                    ^^ statics of function

statics.js:3
     v---------------
  3: interface IFoo {
  4:   foo: string;
  5:   static bar: number;
  6: }
     ^ property `bar` of statics of IFoo. Property not found in
 29: let f2: IFoo = new F2; // ng: FunT~>ConstructorT doesn't install the function's statics to the constructed ObjT
                    ^^^^^^ statics of statics of new object

statics.js:5
  5:   static bar: number;
                   ^^^^^^ number. This type is incompatible with
 10:   static bar: string; //wrong type
                   ^^^^^^ string

statics.js:10
 10:   static bar: string; //wrong type
                   ^^^^^^ string. This type is incompatible with
  5:   static bar: number;
                   ^^^^^^ number


Found 17 errors
