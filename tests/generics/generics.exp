Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:17:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:17:15
   17|     if (a === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:16:18
   16|   function a1<A: 'a'>(a: A): void {
                        ^^^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:17:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:17:15
   17|     if (a === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:16:26
   16|   function a1<A: 'a'>(a: A): void {
                                ^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:21:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:21:15
   21|     if (b === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:20:18
   20|   function b1<A: 'a', B: A>(b: B): void {
                        ^^^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:21:15

string literal `b` [1] is incompatible with string literal `a` [2]. [incompatible-type]

   detect_literal_subtypes.js:21:15
   21|     if (b === 'b'){ } // error 'b' not compatible with 'a'
                     ^^^ [1]

References:
   detect_literal_subtypes.js:20:32
   20|   function b1<A: 'a', B: A>(b: B): void {
                                      ^ [2]


Error --------------------------------------------------------------------------------- detect_literal_subtypes.js:39:12

Property `r` is missing in `T` [1]. [prop-missing]

   detect_literal_subtypes.js:39:12
   39|       case 'r': // error
                  ^^^

References:
   detect_literal_subtypes.js:33:17
   33|   function c<X: T>(x: $Keys<X>) {
                       ^ [1]


Error ------------------------------------------------------------------------------------------------ generics.js:11:11

Cannot assign `u` to `v.u` because type variable `T` [1] cannot escape from the scope in which it was defined [2] (try
adding a type annotation to `v` [3]). [escaped-generic]

   generics.js:11:11
   11|     v.u = u; 
                 ^

References:
   generics.js:9:14
    9|   m<S>(z:S,u:T,v):S {
                    ^ [1]
   generics.js:7:9
    7| class D<T> {
               ^ [2]
   generics.js:9:16
    9|   m<S>(z:S,u:T,v):S {
                      ^ [3]


Error ------------------------------------------------------------------------------------------------ generics.js:19:16

Cannot assign `d.x` to `s` because number [1] is incompatible with string [2]. [incompatible-type]

   generics.js:19:16
   19| var s:string = d.x;
                      ^^^

References:
   generics.js:18:18
   18| var b = d.m(true,0,o);
                        ^ [1]
   generics.js:19:7
   19| var s:string = d.x;
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:20:16

Cannot assign `o.u` to `n` because `T` [1] is incompatible with number [2]. [incompatible-type]

   generics.js:20:16
   20| var n:number = o.u;
                      ^^^

References:
   generics.js:9:14
    9|   m<S>(z:S,u:T,v):S {
                    ^ [1]
   generics.js:20:7
   20| var n:number = o.u;
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:28:16

Cannot assign `e.set(...)` to `x` because undefined [1] is incompatible with string [2]. [incompatible-type]

   generics.js:28:16
   28| var x:string = e.set(0);
                      ^^^^^^^^

References:
   generics.js:27:9
   27| var e = new E(); // error: too few arguments to inherited constructor
               ^^^^^^^ [1]
   generics.js:28:7
   28| var x:string = e.set(0);
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:28:16

Cannot assign `e.set(...)` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   generics.js:28:16
   28| var x:string = e.set(0);
                      ^^^^^^^^

References:
   generics.js:28:22
   28| var x:string = e.set(0);
                            ^ [1]
   generics.js:28:7
   28| var x:string = e.set(0);
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ generics.js:39:41

Cannot assign `h1` to `h2` because string [1] is incompatible with number [2] in array element of type argument `X` [3].
[incompatible-type-arg]

   generics.js:39:41
   39| var h2:F<Array<Array<Array<number>>>> = h1;
                                               ^^

References:
   generics.js:38:9
   38| h1.foo(["..."]);
               ^^^^^ [1]
   generics.js:39:28
   39| var h2:F<Array<Array<Array<number>>>> = h1;
                                  ^^^^^^ [2]
   generics.js:30:9
   30| class F<X> { }
               ^ [3]


Error ------------------------------------------------------------------------------------------------ generics.js:41:11

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   41| var obj : Object<string, string> = {} // error, arity 0
                 ^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ generics.js:42:10

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   42| var fn : Function<string> = function() { return 'foo'; } // error, arity 0
                ^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ generics.js:43:10

Cannot apply type because it is not a polymorphic type. [nonpolymorphic-type-app]

   43| var fn : function<string> = function() { return 'foo'; } // error, arity 0
                ^^^^^^^^^^^^^^^^



Found 14 errors
