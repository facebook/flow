Error ----------------------------------------------------------------------------------------------------- test.js:19:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either function type [1] requires another argument from call of method `cloneElement` [2].
 - Or function type [3] requires another argument from call of method `cloneElement` [2].
 - Or function type [4] requires another argument from call of method `cloneElement` [2].
 - Or function type [5] requires another argument from call of method `cloneElement` [2].

   test.js:19:7
    19| React.cloneElement(); // Error: Needs a minimum of two arguments.
              ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:252:6
             v-----------------------------------------------
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
   253|     element: E,
   254|     props?: ?Partial<$JSXIntrinsics[C]['props']>,
   255|     ...children: $ReadOnlyArray<React$Node>
   256|   ) => E)
          -----^ [1]
   test.js:19:1
    19| React.cloneElement(); // Error: Needs a minimum of two arguments.
        ^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:257:6
             v------------------------------------------------------------------
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   258|     element: E,
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   260|   ) => E)
          -----^ [3]
   <BUILTINS>/react.js:261:6
             v------------------------------------------------------------------
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   262|     element: E,
   263|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   264|     children: NoInfer<Props>['children']
   265|   ) => E)
          -----^ [4]
   <BUILTINS>/react.js:266:6
             v------------------------------------------------------------------
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   267|     element: E,
   268|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   269|     firstChild: NoInfer<Props>['children'][0],
   270|     secondChild: NoInfer<Props>['children'][1],
   271|     ...restChildren: NoInfer<Props>['children'] extends [+first: mixed, +second: mixed, ...infer Rest] ? Rest : NoInfer<Props>['children']
   272|   ) => E);
          -----^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:20:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with `React.Element` [2].
 - Or string [1] is incompatible with `React.Element` [3].
 - Or string [1] is incompatible with `React.Element` [4].
 - Or string [1] is incompatible with `React.Element` [5].

   test.js:20:7
    20| React.cloneElement('nope'); // Error: Not a valid element type.
              ^^^^^^^^^^^^

References:
   test.js:20:20
    20| React.cloneElement('nope'); // Error: Not a valid element type.
                           ^^^^^^ [1]
   <BUILTINS>/react.js:252:36
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:257:48
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:261:48
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:266:48
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:21:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either object literal [1] is incompatible with `React.Element` [2].
 - Or object literal [1] is incompatible with `React.Element` [3].
 - Or object literal [1] is incompatible with `React.Element` [4].
 - Or object literal [1] is incompatible with `React.Element` [5].

   test.js:21:7
    21| React.cloneElement({ type: any }); // Error: Not a valid element type.
              ^^^^^^^^^^^^

References:
   test.js:21:20
    21| React.cloneElement({ type: any }); // Error: Not a valid element type.
                           ^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:252:36
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:257:48
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:261:48
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:266:48
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:25:8

Cannot call `React.cloneElement` because `A` [1] is incompatible with `B` [2] in type argument `C` [3].
[incompatible-call]

   test.js:25:8
    25| (React.cloneElement(a): ExactReactElement_DEPRECATED<Class<B>>); // Error: A ~> B
               ^^^^^^^^^^^^

References:
   test.js:13:51
    13| declare var a: ExactReactElement_DEPRECATED<Class<A>>;
                                                          ^ [1]
   test.js:25:60
    25| (React.cloneElement(a): ExactReactElement_DEPRECATED<Class<B>>); // Error: A ~> B
                                                                   ^ [2]
   <BUILTINS>/react.js:164:44
   164| declare type ExactReactElement_DEPRECATED<+C, +P = React$ElementProps<C>> = React$Element<C, P>;
                                                   ^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:31:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `A` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or property `bar` is missing in object type [4] but exists in object literal [5].

   test.js:31:7
    31| React.cloneElement(a, {foo: 1, bar: 2}); // Error: `bar` is extra
              ^^^^^^^^^^^^

References:
   test.js:13:45
    13| declare var a: ExactReactElement_DEPRECATED<Class<A>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:259:32
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   test.js:31:23
    31| React.cloneElement(a, {foo: 1, bar: 2}); // Error: `bar` is extra
                              ^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:32:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `A` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or string [4] is incompatible with number [5] in property `foo`.

   test.js:32:7
    32| React.cloneElement(a, {foo: '1'}); // Error: `foo` is a number.
              ^^^^^^^^^^^^

References:
   test.js:13:45
    13| declare var a: ExactReactElement_DEPRECATED<Class<A>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:32:29
    32| React.cloneElement(a, {foo: '1'}); // Error: `foo` is a number.
                                    ^^^ [4]
   test.js:5:39
     5| class A extends React.Component<{foo: number}, void> {}
                                              ^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:38:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `B` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or string [4] is incompatible with number [5] in property `foo`.

   test.js:38:7
    38| React.cloneElement(b, {foo: '1'}); // Error: `foo` is a number.
              ^^^^^^^^^^^^

References:
   test.js:14:45
    14| declare var b: ExactReactElement_DEPRECATED<Class<B>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:38:29
    38| React.cloneElement(b, {foo: '1'}); // Error: `foo` is a number.
                                    ^^^ [4]
   test.js:6:39
     6| class B extends React.Component<{foo: number, bar: number}, void> {}
                                              ^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:44:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or string [4] is incompatible with number [5] in property `children`.

   test.js:44:7
    44| React.cloneElement(c, {children: '42'}); // Error: `children` is a number.
              ^^^^^^^^^^^^

References:
   test.js:15:45
    15| declare var c: ExactReactElement_DEPRECATED<Class<C>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:44:34
    44| React.cloneElement(c, {children: '42'}); // Error: `children` is a number.
                                         ^^^^ [4]
   test.js:7:44
     7| class C extends React.Component<{children: number}, void> {}
                                                   ^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:48:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or no more than 2 arguments are expected by function type [4].

   test.js:48:7
    48| React.cloneElement(c, {}, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   test.js:15:45
    15| declare var c: ExactReactElement_DEPRECATED<Class<C>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:257:6
             v------------------------------------------------------------------
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   258|     element: E,
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   260|   ) => E)
          -----^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:49:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or no more than 2 arguments are expected by function type [4].

   test.js:49:7
    49| React.cloneElement(c, undefined, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   test.js:15:45
    15| declare var c: ExactReactElement_DEPRECATED<Class<C>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react.js:252:10
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:257:6
             v------------------------------------------------------------------
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   258|     element: E,
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   260|   ) => E)
          -----^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:50:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or no more than 2 arguments are expected by function type [4].

   test.js:50:7
    50| React.cloneElement(c, null, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   test.js:15:45
    15| declare var c: ExactReactElement_DEPRECATED<Class<C>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react.js:252:10
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:257:6
             v------------------------------------------------------------------
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
   258|     element: E,
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
   260|   ) => E)
          -----^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:54:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5] in property `children`.

   test.js:54:7
    54| React.cloneElement(d, {children: 42}); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:16:45
    16| declare var d: ExactReactElement_DEPRECATED<Class<D>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:54:34
    54| React.cloneElement(d, {children: 42}); // Error: `children` is an array.
                                         ^^ [4]
   test.js:8:44
     8| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:56:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5].

   test.js:56:7
    56| React.cloneElement(d, {}, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:16:45
    16| declare var d: ExactReactElement_DEPRECATED<Class<D>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:56:27
    56| React.cloneElement(d, {}, 42); // Error: `children` is an array.
                                  ^^ [4]
   test.js:8:44
     8| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:57:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5].

   test.js:57:7
    57| React.cloneElement(d, undefined, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:16:45
    16| declare var d: ExactReactElement_DEPRECATED<Class<D>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react.js:252:10
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:57:34
    57| React.cloneElement(d, undefined, 42); // Error: `children` is an array.
                                         ^^ [4]
   test.js:8:44
     8| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:58:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5].

   test.js:58:7
    58| React.cloneElement(d, null, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:16:45
    16| declare var d: ExactReactElement_DEPRECATED<Class<D>>;
                                                    ^^^^^^^^ [1]
   <BUILTINS>/react.js:252:10
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:58:29
    58| React.cloneElement(d, null, 42); // Error: `children` is an array.
                                    ^^ [4]
   test.js:8:44
     8| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:70:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either function [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or string [4] is incompatible with number [5] in property `p`.

   test.js:70:7
    70| React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number
              ^^^^^^^^^^^^

References:
   test.js:69:1
    69| function SFC(props: { p: number }) { return null };
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:70:40
    70| React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number
                                               ^^^^^ [4]
   test.js:69:26
    69| function SFC(props: { p: number }) { return null };
                                 ^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:76:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either function type [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or property `bar` is missing in object type [4] but exists in object literal [5].

   test.js:76:7
    76| React.cloneElement(exact, {foo: 1, bar: 2}); // ERROR
              ^^^^^^^^^^^^

References:
   test.js:74:51
    74| declare const exact: ExactReactElement_DEPRECATED<typeof Exact>;
                                                          ^^^^^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:259:32
   259|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: React$RefSetter<React$ElementRef<NoInfer<C>>>|}>>,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   test.js:76:27
    76| React.cloneElement(exact, {foo: 1, bar: 2}); // ERROR
                                  ^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:92:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either `React.ComponentType` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [4] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [5] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [6] in type argument `ElementType` [3].

   test.js:92:9
    92|   React.cloneElement(el); // ERROR
                ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:166:49
   166| declare type React$MixedElement = React$Element<React$ElementType>;
                                                        ^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:252:10
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:257:17
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:261:17
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [5]
   <BUILTINS>/react.js:266:17
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [6]


Error ----------------------------------------------------------------------------------------------------- test.js:93:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either `React.ComponentType` [1] is incompatible with string [2] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [4] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [5] in type argument `ElementType` [3].
 - Or string [1] is incompatible with `React.ComponentType` [6] in type argument `ElementType` [3].

   test.js:93:9
    93|   React.cloneElement(el, {}); // ERROR
                ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:166:49
   166| declare type React$MixedElement = React$Element<React$ElementType>;
                                                        ^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:257:17
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:261:17
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [5]
   <BUILTINS>/react.js:266:17
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [6]


Error ----------------------------------------------------------------------------------------------------- test.js:99:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either undefined [1] is incompatible with `React.Element` [2].
 - Or undefined [1] is incompatible with `React.Element` [3].
 - Or undefined [1] is incompatible with `React.Element` [4].
 - Or undefined [1] is incompatible with `React.Element` [5].

   test.js:99:9
    99|   React.cloneElement(el); // ERROR
                ^^^^^^^^^^^^

References:
   test.js:98:21
    98|   declare const el: React.Node;
                            ^^^^^^^^^^ [1]
   <BUILTINS>/react.js:252:36
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:257:48
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:261:48
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:266:48
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- test.js:100:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either undefined [1] is incompatible with `React.Element` [2].
 - Or undefined [1] is incompatible with `React.Element` [3].
 - Or undefined [1] is incompatible with `React.Element` [4].
 - Or undefined [1] is incompatible with `React.Element` [5].

   test.js:100:9
   100|   React.cloneElement(el, {}); // ERROR
                ^^^^^^^^^^^^

References:
   test.js:98:21
    98|   declare const el: React.Node;
                            ^^^^^^^^^^ [1]
   <BUILTINS>/react.js:252:36
   252|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:257:48
   257|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:261:48
   261|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:266:48
   266|   & (<Props, C: React$ComponentType<empty>, E: React$Element<C, Props>>(
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ [5]



Found 21 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
