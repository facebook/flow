Error ----------------------------------------------------------------------------------------------------- test.js:20:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either function type [1] requires another argument from call of method `cloneElement` [2].
 - Or function type [3] requires another argument from call of method `cloneElement` [2].
 - Or function type [4] requires another argument from call of method `cloneElement` [2].
 - Or function type [5] requires another argument from call of method `cloneElement` [2].

   test.js:20:7
    20| React.cloneElement(); // Error: Needs a minimum of two arguments.
              ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:279:6
             v-----------------------------------------------
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
   280|     element: E,
   281|     props?: ?Partial<$JSXIntrinsics[C]['props']>,
   282|     ...children: $ReadOnlyArray<React$Node>
   283|   ) => E)
          -----^ [1]
   test.js:20:1
    20| React.cloneElement(); // Error: Needs a minimum of two arguments.
        ^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:6
             v----------------------------------------------------------------------
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   285|     element: E,
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   287|   ) => E)
          -----^ [3]
   <BUILTINS>/react.js:288:6
             v----------------------------------------------------------------------
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   289|     element: E,
   290|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   291|     children: NoInfer<Props>['children']
   292|   ) => E)
          -----^ [4]
   <BUILTINS>/react.js:293:6
             v----------------------------------------------------------------------
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   294|     element: E,
   295|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   296|     firstChild: NoInfer<Props>['children'][0],
   297|     secondChild: NoInfer<Props>['children'][1],
   298|     ...restChildren: NoInfer<Props>['children'] extends [+first: mixed, +second: mixed, ...infer Rest] ? Rest : NoInfer<Props>['children']
   299|   ) => E);
          -----^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:21:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with `React.Element` [2].
 - Or string [1] is incompatible with `React.Element` [3].
 - Or string [1] is incompatible with `React.Element` [4].
 - Or string [1] is incompatible with `React.Element` [5].

   test.js:21:7
    21| React.cloneElement('nope'); // Error: Not a valid element type.
              ^^^^^^^^^^^^

References:
   test.js:21:20
    21| React.cloneElement('nope'); // Error: Not a valid element type.
                           ^^^^^^ [1]
   <BUILTINS>/react.js:279:36
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:52
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:288:52
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:293:52
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:22:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either object literal [1] is incompatible with `React.Element` [2].
 - Or object literal [1] is incompatible with `React.Element` [3].
 - Or object literal [1] is incompatible with `React.Element` [4].
 - Or object literal [1] is incompatible with `React.Element` [5].

   test.js:22:7
    22| React.cloneElement({ type: any }); // Error: Not a valid element type.
              ^^^^^^^^^^^^

References:
   test.js:22:20
    22| React.cloneElement({ type: any }); // Error: Not a valid element type.
                           ^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:279:36
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:52
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:288:52
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:293:52
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:26:8

Cannot call `React.cloneElement` because `A` [1] is incompatible with `B` [2] in type argument `C` [3].
[incompatible-call]

   test.js:26:8
    26| (React.cloneElement(a): Element<Class<B>>); // Error: A ~> B
               ^^^^^^^^^^^^

References:
   test.js:14:30
    14| declare var a: Element<Class<A>>;
                                     ^ [1]
   test.js:26:39
    26| (React.cloneElement(a): Element<Class<B>>); // Error: A ~> B
                                              ^ [2]
   <BUILTINS>/react.js:390:32
   390|   declare export type Element<+C, +P = React$ElementProps<C>> = React$Element<C, P>;
                                       ^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:32:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either property `bar` is missing in object type [1] but exists in object literal [2].
 - Or property `bar` is missing in object type [3] but exists in object literal [2].
 - Or property `bar` is missing in object type [4] but exists in object literal [2].

   test.js:32:7
    32| React.cloneElement(a, {foo: 1, bar: 2}); // Error: `bar` is extra
              ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:286:32
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:32:23
    32| React.cloneElement(a, {foo: 1, bar: 2}); // Error: `bar` is extra
                              ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:290:31
   290|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:295:31
   295|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:33:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with number [2] in property `foo`.
 - Or statics of `A` [3] is incompatible with string [4].

   test.js:33:7
    33| React.cloneElement(a, {foo: '1'}); // Error: `foo` is a number.
              ^^^^^^^^^^^^

References:
   test.js:33:29
    33| React.cloneElement(a, {foo: '1'}); // Error: `foo` is a number.
                                    ^^^ [1]
   test.js:6:39
     6| class A extends React.Component<{foo: number}, void> {}
                                              ^^^^^^ [2]
   test.js:14:24
    14| declare var a: Element<Class<A>>;
                               ^^^^^^^^ [3]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:39:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with number [2] in property `foo`.
 - Or statics of `B` [3] is incompatible with string [4].

   test.js:39:7
    39| React.cloneElement(b, {foo: '1'}); // Error: `foo` is a number.
              ^^^^^^^^^^^^

References:
   test.js:39:29
    39| React.cloneElement(b, {foo: '1'}); // Error: `foo` is a number.
                                    ^^^ [1]
   test.js:7:39
     7| class B extends React.Component<{foo: number, bar: number}, void> {}
                                              ^^^^^^ [2]
   test.js:15:24
    15| declare var b: Element<Class<B>>;
                               ^^^^^^^^ [3]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:45:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with number [2] in property `children`.
 - Or statics of `C` [3] is incompatible with string [4].

   test.js:45:7
    45| React.cloneElement(c, {children: '42'}); // Error: `children` is a number.
              ^^^^^^^^^^^^

References:
   test.js:45:34
    45| React.cloneElement(c, {children: '42'}); // Error: `children` is a number.
                                         ^^^^ [1]
   test.js:8:44
     8| class C extends React.Component<{children: number}, void> {}
                                                   ^^^^^^ [2]
   test.js:16:24
    16| declare var c: Element<Class<C>>;
                               ^^^^^^^^ [3]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:49:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either no more than 2 arguments are expected by function type [1].
 - Or no more than 3 arguments are expected by function type [2].
 - Or property `0` is missing in `Number` [3].

   test.js:49:7
    49| React.cloneElement(c, {}, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:284:6
             v----------------------------------------------------------------------
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   285|     element: E,
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   287|   ) => E)
          -----^ [1]
   <BUILTINS>/react.js:288:6
             v----------------------------------------------------------------------
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   289|     element: E,
   290|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   291|     children: NoInfer<Props>['children']
   292|   ) => E)
          -----^ [2]
   test.js:8:44
     8| class C extends React.Component<{children: number}, void> {}
                                                   ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:50:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or no more than 2 arguments are expected by function type [4].

   test.js:50:7
    50| React.cloneElement(c, undefined, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   test.js:16:24
    16| declare var c: Element<Class<C>>;
                               ^^^^^^^^ [1]
   <BUILTINS>/react.js:279:10
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:284:6
             v----------------------------------------------------------------------
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   285|     element: E,
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   287|   ) => E)
          -----^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:51:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `C` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or no more than 2 arguments are expected by function type [4].

   test.js:51:7
    51| React.cloneElement(c, null, 1, 2, 3); // Error: `children` is not an array.
              ^^^^^^^^^^^^

References:
   test.js:16:24
    16| declare var c: Element<Class<C>>;
                               ^^^^^^^^ [1]
   <BUILTINS>/react.js:279:10
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:284:6
             v----------------------------------------------------------------------
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   285|     element: E,
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   287|   ) => E)
          -----^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:55:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either number [1] is incompatible with array type [2] in property `children`.
 - Or statics of `D` [3] is incompatible with string [4].

   test.js:55:7
    55| React.cloneElement(d, {children: 42}); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:55:34
    55| React.cloneElement(d, {children: 42}); // Error: `children` is an array.
                                         ^^ [1]
   test.js:9:44
     9| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [2]
   test.js:17:24
    17| declare var d: Element<Class<D>>;
                               ^^^^^^^^ [3]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:57:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either number [1] is incompatible with array type [2].
 - Or no more than 2 arguments are expected by function type [3].

   test.js:57:7
    57| React.cloneElement(d, {}, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:57:27
    57| React.cloneElement(d, {}, 42); // Error: `children` is an array.
                                  ^^ [1]
   test.js:9:44
     9| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:6
             v----------------------------------------------------------------------
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
   285|     element: E,
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
   287|   ) => E)
          -----^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:58:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5].

   test.js:58:7
    58| React.cloneElement(d, undefined, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:17:24
    17| declare var d: Element<Class<D>>;
                               ^^^^^^^^ [1]
   <BUILTINS>/react.js:279:10
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:58:34
    58| React.cloneElement(d, undefined, 42); // Error: `children` is an array.
                                         ^^ [4]
   test.js:9:44
     9| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:59:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either statics of `D` [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or number [4] is incompatible with array type [5].

   test.js:59:7
    59| React.cloneElement(d, null, 42); // Error: `children` is an array.
              ^^^^^^^^^^^^

References:
   test.js:17:24
    17| declare var d: Element<Class<D>>;
                               ^^^^^^^^ [1]
   <BUILTINS>/react.js:279:10
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   test.js:59:29
    59| React.cloneElement(d, null, 42); // Error: `children` is an array.
                                    ^^ [4]
   test.js:9:44
     9| class D extends React.Component<{children: Array<number>}, void> {}
                                                   ^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:71:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with number [2] in property `p`.
 - Or function [3] is incompatible with string [4].

   test.js:71:7
    71| React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number
              ^^^^^^^^^^^^

References:
   test.js:71:40
    71| React.cloneElement(<SFC p={0} />, { p: "bad" }); // Error: string ~> number
                                               ^^^^^ [1]
   test.js:70:26
    70| function SFC(props: { p: number }) { return null };
                                 ^^^^^^ [2]
   test.js:70:1
    70| function SFC(props: { p: number }) { return null };
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react-dom.js:167:4
   167|   [string]: ReactDOM$HTMLElementJSXIntrinsic,
           ^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:77:7

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either property `bar` is missing in object type [1] but exists in object literal [2].
 - Or property `bar` is missing in object type [3] but exists in object literal [2].
 - Or property `bar` is missing in object type [4] but exists in object literal [2].

   test.js:77:7
    77| React.cloneElement(exact, {foo: 1, bar: 2}); // ERROR
              ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:286:32
   286|     props?: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:77:27
    77| React.cloneElement(exact, {foo: 1, bar: 2}); // ERROR
                                  ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:290:31
   290|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:295:31
   295|     props: ?Partial<$ReadOnly<{|...$Exact<NoInfer<Props>>, key: React$Key, ref: ?React$Ref<NoInfer<C>>|}>>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:93:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either AbstractComponent [1] is incompatible with key set [2] in type argument `ElementType` [3].
 - Or string [1] is incompatible with AbstractComponent [4] in type argument `ElementType` [3].
 - Or string [1] is incompatible with AbstractComponent [5] in type argument `ElementType` [3].
 - Or string [1] is incompatible with AbstractComponent [6] in type argument `ElementType` [3].

   test.js:93:9
    93|   React.cloneElement(el); // ERROR
                ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:166:49
   166| declare type React$MixedElement = React$Element<React$ElementType>;
                                                        ^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:279:10
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                 ^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:284:17
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:288:17
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [5]
   <BUILTINS>/react.js:293:17
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [6]


Error ----------------------------------------------------------------------------------------------------- test.js:94:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either string [1] is incompatible with AbstractComponent [2] in type argument `ElementType` [3].
 - Or string [1] is incompatible with AbstractComponent [4] in type argument `ElementType` [3].
 - Or string [1] is incompatible with AbstractComponent [5] in type argument `ElementType` [3].

   test.js:94:9
    94|   React.cloneElement(el, {}); // ERROR
                ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:166:49
   166| declare type React$MixedElement = React$Element<React$ElementType>;
                                                        ^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:284:17
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:288:17
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:293:17
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- test.js:100:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either undefined [1] is incompatible with `React.Element` [2].
 - Or undefined [1] is incompatible with `React.Element` [3].
 - Or undefined [1] is incompatible with `React.Element` [4].
 - Or undefined [1] is incompatible with `React.Element` [5].

   test.js:100:9
   100|   React.cloneElement(el); // ERROR
                ^^^^^^^^^^^^

References:
   test.js:99:21
    99|   declare const el: React.Node;
                            ^^^^^^^^^^ [1]
   <BUILTINS>/react.js:279:36
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:52
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:288:52
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:293:52
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- test.js:101:9

Cannot call `React.cloneElement` because: [incompatible-call]
 - Either undefined [1] is incompatible with `React.Element` [2].
 - Or undefined [1] is incompatible with `React.Element` [3].
 - Or undefined [1] is incompatible with `React.Element` [4].
 - Or undefined [1] is incompatible with `React.Element` [5].

   test.js:101:9
   101|   React.cloneElement(el, {}); // ERROR
                ^^^^^^^^^^^^

References:
   test.js:99:21
    99|   declare const el: React.Node;
                            ^^^^^^^^^^ [1]
   <BUILTINS>/react.js:279:36
   279|   & (<C: $Keys<$JSXIntrinsics>, E: React$Element<C>>(
                                           ^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:284:52
   284|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:288:52
   288|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [4]
   <BUILTINS>/react.js:293:52
   293|   & (<Props, C: React$AbstractComponent<empty>, E: React$Element<C, Props>>(
                                                           ^^^^^^^^^^^^^^^^^^^^^^^ [5]



Found 21 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
