Error --------------------------------------------------------------------------------------------------- apply.js:12:15

Cannot call `apply` with array literal bound to `args` because number [1] is incompatible with number literal `123` [2]
in the second argument.

   apply.js:12:15
   12| apply(noRest, ['hi', 456]); // Error - 456 ~> 123
                     ^^^^^^^^^^^

References:
   apply.js:12:22
   12| apply(noRest, ['hi', 456]); // Error - 456 ~> 123
                            ^^^ [1]
   apply.js:10:29
   10| function noRest(x: 'hi', y: 123): true { return true; }
                                   ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:13:15

Cannot call `apply` with array literal bound to `args` because function [1] requires another argument from function
type [2].

   apply.js:13:15
   13| apply(noRest, ['hi']); // Error - too few args
                     ^^^^^^

References:
   apply.js:10:1
   10| function noRest(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:19:17

Cannot call `apply` with array literal bound to `args` because number [1] is incompatible with number literal `123` [2]
in index 1.

   apply.js:19:17
   19| apply(withRest, ['hi', 456]); // Error - 456 ~> 123
                       ^^^^^^^^^^^

References:
   apply.js:19:24
   19| apply(withRest, ['hi', 456]); // Error - 456 ~> 123
                              ^^^ [1]
   apply.js:17:35
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                         ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:20:17

Cannot call `apply` with array literal bound to `args` because rest array [1] has an arity of 1 but tuple type [2] has
an arity of 2.

   apply.js:20:17
   20| apply(withRest, ['hi']); // Error - too few args
                       ^^^^^^

References:
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:28
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:21:17

Cannot call `apply` with array literal bound to `args` because rest array [1] has an arity of 3 but tuple type [2] has
an arity of 2.

   apply.js:21:17
   21| apply(withRest, ['hi', 123, false]); // Error - too many args
                       ^^^^^^^^^^^^^^^^^^

References:
   apply.js:4:7
    4|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:28
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:31:19

Cannot call `applyType` with array literal bound to `args` because number [1] is incompatible with number literal
`123` [2] in the second argument.

   apply.js:31:19
   31| applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
                         ^^^^^^^^^^^

References:
   apply.js:31:26
   31| applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
                                ^^^ [1]
   apply.js:10:29
   10| function noRest(x: 'hi', y: 123): true { return true; }
                                   ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:32:19

Cannot call `applyType` with array literal bound to `args` because function [1] requires another argument from function
type [2].

   apply.js:32:19
   32| applyType(noRest, ['hi']); // Error - too few args
                         ^^^^^^

References:
   apply.js:10:1
   10| function noRest(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:38:21

Cannot call `applyType` with array literal bound to `args` because number [1] is incompatible with number literal
`123` [2] in index 1.

   apply.js:38:21
   38| applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
                           ^^^^^^^^^^^

References:
   apply.js:38:28
   38| applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
                                  ^^^ [1]
   apply.js:17:35
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                         ^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:39:21

Cannot call `applyType` with array literal bound to `args` because rest array [1] has an arity of 1 but tuple type [2]
has an arity of 2.

   apply.js:39:21
   39| applyType(withRest, ['hi']); // Error - too few args
                           ^^^^^^

References:
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:28
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- apply.js:40:21

Cannot call `applyType` with array literal bound to `args` because rest array [1] has an arity of 3 but tuple type [2]
has an arity of 2.

   apply.js:40:21
   40| applyType(withRest, ['hi', 123, false]); // Error - too many args
                           ^^^^^^^^^^^^^^^^^^

References:
   apply.js:25:7
   25|   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]
   apply.js:17:28
   17| function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:30:2

Cannot cast `<AcceptsWhatever />` to number because string [1] is incompatible with number [2].

   jsx.js:30:2
   30| (<AcceptsWhatever />: number); // Error string ~> number
        ^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:30:23
   30| (<AcceptsWhatever />: number); // Error string ~> number
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:31:2

Cannot cast `<AcceptsWhatever />` to number because string [1] is incompatible with number [2].

   jsx.js:31:2
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:29:68
   29| declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]
   jsx.js:31:53
   31| (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
                                                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:34:2

Cannot create `ExpectsProps` element because property `name` is missing in object type [1] but exists in object type [2]
in the first argument of type argument `C`.

   jsx.js:34:2
   34| (<ExpectsProps />); // Error - missing prop
        ^^^^^^^^^^^^^^^^

References:
   jsx.js:10:14
   10|   C: (props: {}, children: Children) => Elem
                    ^^ [1]
   jsx.js:33:38
   33| declare function ExpectsProps(props: { name: string }, children: any): string;
                                            ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:35:2

Cannot cast `<ExpectsProps />` to number because string [1] is incompatible with number [2].

   jsx.js:35:2
   35| (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:33:72
   33| declare function ExpectsProps(props: { name: string }, children: any): string;
                                                                              ^^^^^^ [1]
   jsx.js:35:47
   35| (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
                                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:38:2

Cannot create `ExpectsChildrenTuple` element because rest array [1] has an arity of 0 but tuple type [2] has an arity of
1 in the second argument of type argument `C`.

   jsx.js:38:2
   38| (<ExpectsChildrenTuple />); // Error - missing child
        ^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:40:2

Cannot create `ExpectsChildrenTuple` element because string [1] is incompatible with number [2] in index 0 of the second
argument of type argument `C`.

   jsx.js:40:2
   40| (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:37:62
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                    ^^^^^^ [1]
   jsx.js:40:25
   40| (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
                               ^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:41:2

Cannot create `ExpectsChildrenTuple` element because rest array [1] has an arity of 2 but tuple type [2] has an arity of
1 in the second argument of type argument `C`.

   jsx.js:41:2
   41| (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   jsx.js:37:61
   37| declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ jsx.js:46:2

Cannot create `ExpectsChildrenArray` element because string [1] is incompatible with number [2] in array element of the
second argument of type argument `C`.

   jsx.js:46:2
   46| (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   jsx.js:43:67
   43| declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                                                         ^^^^^^ [1]
   jsx.js:46:25
   46| (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
                               ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- spread.js:7:1

Cannot call `fun` because no more than 2 arguments are expected by function [1].

   spread.js:7:1
   7| fun(...['hi'], ...[], ...[123], ...[true]); // Error - true is unused
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   spread.js:3:1
   3| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- spread.js:8:1

Cannot call `fun` because no more than 2 arguments are expected by function [1].

   spread.js:8:1
   8| fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   spread.js:3:1
   3| function fun(x: 'hi', y: 123) {}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:8:20

Cannot call `fun` with boolean bound to `y` because boolean [1] is incompatible with number literal `123` [2].

   spread.js:8:20
   8| fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                         ^^^^ [1]

References:
   spread.js:3:26
   3| function fun(x: 'hi', y: 123) {}
                               ^^^ [2]


Error -------------------------------------------------------------------------------------------------- spread.js:19:33

Cannot call `funWithRestArray` with boolean bound to `y` because boolean [1] is incompatible with number literal
`123` [2].

   spread.js:19:33
   19| funWithRestArray(...['hi'], ...[true], ...[123]); // Error: true ~> 123
                                       ^^^^ [1]

References:
   spread.js:14:39
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]


Error --------------------------------------------------------------------------------------------------- spread.js:28:1

Cannot call `funWithRestArray` because:
 - string [1] is incompatible with number literal `123` [2].
 - string [1] is incompatible with number [3] in array element.

   spread.js:28:1
   28| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   spread.js:28:37
   28| funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]
   spread.js:14:39
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]
   spread.js:14:59
   14| function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                                 ^^^^^^ [3]



Found 24 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
