Error: apply.js:12
 12: apply(noRest, ['hi', 456]); // Error - 456 ~> 123
           ^^^^^^ function. This type is incompatible with the expected param type of
  4:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ function type
  This parameter is incompatible:
     12: apply(noRest, ['hi', 456]); // Error - 456 ~> 123
                              ^^^ number. Expected number literal `123`, got `456` instead
     10: function noRest(x: 'hi', y: 123): true { return true; }
                                     ^^^ number literal `123`

Error: apply.js:13
 13: apply(noRest, ['hi']); // Error - too few args
     ^^^^^^^^^^^^^^^^^^^^^ function call
  4:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 10: function noRest(x: 'hi', y: 123): true { return true; }
                                 ^^^ number literal `123`

Error: apply.js:19
 19: apply(withRest, ['hi', 456]); // Error - 456 ~> 123
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 19: apply(withRest, ['hi', 456]); // Error - 456 ~> 123
                            ^^^ number. Expected number literal `123`, got `456` instead
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                       ^^^ number literal `123`

Error: apply.js:20
 20: apply(withRest, ['hi']); // Error - too few args
     ^^^^^^^^^^^^^^^^^^^^^^^ function call
  4:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ rest parameter array of function type. Tuple arity mismatch. This tuple has 1 elements and cannot flow to the 2 elements of
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                ^^^^^^^^^^^ tuple type

Error: apply.js:21
 21: apply(withRest, ['hi', 123, false]); // Error - too many args
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
  4:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ rest parameter array of function type. Tuple arity mismatch. This tuple has 3 elements and cannot flow to the 2 elements of
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                ^^^^^^^^^^^ tuple type

Error: apply.js:31
 31: applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
               ^^^^^^ function. This type is incompatible with the expected param type of
 25:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ function type
  This parameter is incompatible:
     31: applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
                                  ^^^ number. Expected number literal `123`, got `456` instead
     10: function noRest(x: 'hi', y: 123): true { return true; }
                                     ^^^ number literal `123`

Error: apply.js:32
 32: applyType(noRest, ['hi']); // Error - too few args
     ^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 25:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 10: function noRest(x: 'hi', y: 123): true { return true; }
                                 ^^^ number literal `123`

Error: apply.js:38
 38: applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 38: applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
                                ^^^ number. Expected number literal `123`, got `456` instead
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                       ^^^ number literal `123`

Error: apply.js:39
 39: applyType(withRest, ['hi']); // Error - too few args
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 25:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ rest parameter array of function type. Tuple arity mismatch. This tuple has 1 elements and cannot flow to the 2 elements of
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                ^^^^^^^^^^^ tuple type

Error: apply.js:40
 40: applyType(withRest, ['hi', 123, false]); // Error - too many args
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 25:   fn: (...Args) => Ret,
           ^^^^^^^^^^^^^^^^ rest parameter array of function type. Tuple arity mismatch. This tuple has 3 elements and cannot flow to the 2 elements of
 17: function withRest(...rest: ['hi', 123]): true { return true; }
                                ^^^^^^^^^^^ tuple type

Error: jsx.js:30
 30: (<AcceptsWhatever />: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 30: (<AcceptsWhatever />: number); // Error string ~> number
                           ^^^^^^ number

Error: jsx.js:31
 31: (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 31: (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
                                                         ^^^^^^ number

Error: jsx.js:34
 34: (<ExpectsProps />); // Error - missing prop
      ^^^^^^^^^^^^^^^^ JSX desugared to `JSX(...)`. Function cannot be called on any member of intersection type
 34: (<ExpectsProps />); // Error - missing prop
      ^^^^^^^^^^^^^^^^ intersection
  Member 1:
                           v
    7: declare function JSX<
    8:   Children: $ReadOnlyArray<mixed>,
    9:   Elem,
  ...:
   15: ): Elem;
       ------^ polymorphic type: function type
  Error:
   33: declare function ExpectsProps(props: { name: string }, children: any): string;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
   10:   C: (props: {}, children: Children) => Elem
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
       10:   C: (props: {}, children: Children) => Elem
                        ^^ object type. This type is incompatible with
       33: declare function ExpectsProps(props: { name: string }, children: any): string;
                                                ^^^^^^^^^^^^^^^^ object type
        Property `name` is incompatible:
           33: declare function ExpectsProps(props: { name: string }, children: any): string;
                                                    ^^^^^^^^^^^^^^^^ property `name`. Property not found in
           10:   C: (props: {}, children: Children) => Elem
                            ^^ object type
  Member 2:
                           v
   18: declare function JSX<
   19:   Children: $ReadOnlyArray<mixed>,
   20:   Elem,
  ...:
   27: ): Elem;
       ------^ polymorphic type: function type
  Error:
   34: (<ExpectsProps />); // Error - missing prop
        ^^^^^^^^^^^^^^^^ null. This type is incompatible with
   21:   Props: Object,
                ^^^^^^ object type

Error: jsx.js:35
 35: (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 35: (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
                                                   ^^^^^^ number

Error: jsx.js:38
 38: (<ExpectsChildrenTuple />); // Error - mising child
      ^^^^^^^^^^^^^^^^^^^^^^^^ JSX desugared to `JSX(...)`. Function cannot be called on any member of intersection type
 38: (<ExpectsChildrenTuple />); // Error - mising child
      ^^^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
                           v
    7: declare function JSX<
    8:   Children: $ReadOnlyArray<mixed>,
    9:   Elem,
  ...:
   15: ): Elem;
       ------^ polymorphic type: function type
  Error:
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
   10:   C: (props: {}, children: Children) => Elem
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
       38: (<ExpectsChildrenTuple />); // Error - mising child
            ^^^^^^^^^^^^^^^^^^^^^^^^ rest parameter array of JSX desugared to `JSX(...)`. Tuple arity mismatch. This tuple has 0 elements and cannot flow to the 1 elements of
       37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                       ^^^^^^^^ tuple type
  Member 2:
                           v
   18: declare function JSX<
   19:   Children: $ReadOnlyArray<mixed>,
   20:   Elem,
  ...:
   27: ): Elem;
       ------^ polymorphic type: function type
  Error:
   38: (<ExpectsChildrenTuple />); // Error - mising child
        ^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
   21:   Props: Object,
                ^^^^^^ object type

Error: jsx.js:40
 40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^ JSX desugared to `JSX(...)`. Function cannot be called on any member of intersection type
 40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
                           v
    7: declare function JSX<
    8:   Children: $ReadOnlyArray<mixed>,
    9:   Elem,
  ...:
   15: ): Elem;
       ------^ polymorphic type: function type
  Error:
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
   10:   C: (props: {}, children: Children) => Elem
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
       40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
                                   ^^^ number. This type is incompatible with
       37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                        ^^^^^^ string
  Member 2:
                           v
   18: declare function JSX<
   19:   Children: $ReadOnlyArray<mixed>,
   20:   Elem,
  ...:
   27: ): Elem;
       ------^ polymorphic type: function type
  Error:
   40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
   21:   Props: Object,
                ^^^^^^ object type

Error: jsx.js:41
 41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
      ^^^^^^^^^^^^^^^^^^^^^^ JSX desugared to `JSX(...)`. Function cannot be called on any member of intersection type
 41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
      ^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
                           v
    7: declare function JSX<
    8:   Children: $ReadOnlyArray<mixed>,
    9:   Elem,
  ...:
   15: ): Elem;
       ------^ polymorphic type: function type
  Error:
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
   10:   C: (props: {}, children: Children) => Elem
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
       41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
            ^^^^^^^^^^^^^^^^^^^^^^ rest parameter array of JSX desugared to `JSX(...)`. Tuple arity mismatch. This tuple has 2 elements and cannot flow to the 1 elements of
       37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                       ^^^^^^^^ tuple type
  Member 2:
                           v
   18: declare function JSX<
   19:   Children: $ReadOnlyArray<mixed>,
   20:   Elem,
  ...:
   27: ): Elem;
       ------^ polymorphic type: function type
  Error:
   41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
        ^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
   21:   Props: Object,
                ^^^^^^ object type

Error: jsx.js:46
 46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^ JSX desugared to `JSX(...)`. Function cannot be called on any member of intersection type
 46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^ intersection
  Member 1:
                           v
    7: declare function JSX<
    8:   Children: $ReadOnlyArray<mixed>,
    9:   Elem,
  ...:
   15: ): Elem;
       ------^ polymorphic type: function type
  Error:
   43: declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
   10:   C: (props: {}, children: Children) => Elem
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
       46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
            ^^^^^^^^^^^^^^^^^^^^^^ rest parameter array of JSX desugared to `JSX(...)`. Has some incompatible type argument with
       43: declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                                                       ^^^^^^^^^^^^^ array type
        Type argument `T` is incompatible:
           46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
                                       ^^^ number. This type is incompatible with
           43: declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                                                                 ^^^^^^ string
  Member 2:
                           v
   18: declare function JSX<
   19:   Children: $ReadOnlyArray<mixed>,
   20:   Elem,
  ...:
   27: ): Elem;
       ------^ polymorphic type: function type
  Error:
   46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
   21:   Props: Object,
                ^^^^^^ object type

Error: spread.js:7
  7: fun(...['hi'], ...[], ...[123], ...[true]); // Error - true is unused
                                         ^^^^ unused function argument
    3: function fun(x: 'hi', y: 123) {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function expects no more than 2 arguments

Error: spread.js:8
  8: fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                        ^^^^ boolean. This type is incompatible with the expected param type of
  3: function fun(x: 'hi', y: 123) {}
                              ^^^ number literal `123`

Error: spread.js:8
  8: fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                                   ^^^ unused function argument
    3: function fun(x: 'hi', y: 123) {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function expects no more than 2 arguments

Error: spread.js:19
 19: funWithRestArray(...['hi'], ...[true], ...[123]); // Error: true ~> 123
                                     ^^^^ boolean. This type is incompatible with the expected param type of
 14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                           ^^^ number literal `123`

Error: spread.js:28
 28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                         ^^^^^ string. This type is incompatible with
 14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                           ^^^ number literal `123`

Error: spread.js:28
 28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rest parameter array of function call. Has some incompatible type argument with
 14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                         ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                             ^^^^^ string. This type is incompatible with
     14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                                   ^^^^^^ number


Found 24 errors
