Error: type.js:10
 10: (o1: {||}); // Error: missing x
      ^^ property `x`. Property not found in
 10: (o1: {||}); // Error: missing x
          ^^^^ object type

Error: type.js:12
 12: (o1: {|x?: X|}); // Error: x is not optional
      ^^ object type. This type is incompatible with
 12: (o1: {|x?: X|}); // Error: x is not optional
          ^^^^^^^^^ object type
  Property `x` is incompatible:
     12: (o1: {|x?: X|}); // Error: x is not optional
                    ^ undefined. This type is incompatible with
      8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                              ^ X

Error: type.js:13
 13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
      ^^ object type. This type is incompatible with
 13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
          ^^^^^^^^^^^^^^^ object type
  Property `y` is incompatible:
     13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
              ^^^^^^^^^^^^^^^ property `y`. Property not found in
     13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
          ^^ object type

Error: type.js:14
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
      ^^ object type. This type is incompatible with
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
          ^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
                    ^ undefined. This type is incompatible with
      8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                              ^ X

Error: type.js:14
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
      ^^ object type. This type is incompatible with
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
          ^^^^^^^^^^^^^^^^ object type
  Property `y` is incompatible:
     14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
              ^^^^^^^^^^^^^^^^ property `y`. Property not found in
     14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
          ^^ object type

Error: type.js:15
 15: (o1: {|x: Y|}); // Error: X = Y
      ^^ object type. This type is incompatible with
 15: (o1: {|x: Y|}); // Error: X = Y
          ^^^^^^^^ object type
  Property `x` is incompatible:
      8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                              ^ X. This type is incompatible with
     15: (o1: {|x: Y|}); // Error: X = Y
                   ^ Y

Error: type.js:15
 15: (o1: {|x: Y|}); // Error: X = Y
      ^^ object type. This type is incompatible with
 15: (o1: {|x: Y|}); // Error: X = Y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     15: (o1: {|x: Y|}); // Error: X = Y
                   ^ Y. This type is incompatible with
      8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                              ^ X

Error: type.js:16
 16: ({}: O1); // Error: missing x
      ^^ object literal. Inexact type is incompatible with exact type
 16: ({}: O1); // Error: missing x
          ^^ object type

Error: type.js:16
 16: ({}: O1); // Error: missing x
      ^^ object literal. This type is incompatible with
 16: ({}: O1); // Error: missing x
          ^^ object type
  Property `x` is incompatible:
     16: ({}: O1); // Error: missing x
              ^^ property `x`. Property not found in
     16: ({}: O1); // Error: missing x
          ^^ object literal

Error: type.js:18
 18: ({x, y}: O1); // Error: y is not in O1
      ^^^^^^ property `y`. Property not found in
 18: ({x, y}: O1); // Error: y is not in O1
              ^^ object type

Error: type.js:19
 19: ({x: y}: O1); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 19: ({x: y}: O1); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     19: ({x: y}: O1); // Error: Y ~> X
              ^ Y. This type is incompatible with
      8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                              ^ X

Error: type.js:21
 21: type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                ^ Y. This type is incompatible with
 21: type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                          ^ X

Error: type.js:27
 27: (o3: {||}); // Error: missing x and y
      ^^ property `x`. Property not found in
 27: (o3: {||}); // Error: missing x and y
          ^^^^ object type

Error: type.js:27
 27: (o3: {||}); // Error: missing x and y
      ^^ property `y`. Property not found in
 27: (o3: {||}); // Error: missing x and y
          ^^^^ object type

Error: type.js:28
 28: (o3: {|x: X|}); // Error: x is optional and missing y
      ^^ object type. This type is incompatible with
 28: (o3: {|x: X|}); // Error: x is optional and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ undefined. This type is incompatible with
     28: (o3: {|x: X|}); // Error: x is optional and missing y
                   ^ X

Error: type.js:28
 28: (o3: {|x: X|}); // Error: x is optional and missing y
      ^^ property `y`. Property not found in
 28: (o3: {|x: X|}); // Error: x is optional and missing y
          ^^^^^^^^ object type

Error: type.js:29
 29: (o3: {|x?: X|}); // Error: missing y
      ^^ property `y`. Property not found in
 29: (o3: {|x?: X|}); // Error: missing y
          ^^^^^^^^^ object type

Error: type.js:30
 30: (o3: {|x: X, y?: Y|}); // Error: x is optional
      ^^ object type. This type is incompatible with
 30: (o3: {|x: X, y?: Y|}); // Error: x is optional
          ^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ undefined. This type is incompatible with
     30: (o3: {|x: X, y?: Y|}); // Error: x is optional
                   ^ X

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ object type. This type is incompatible with
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ X. This type is incompatible with
     32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                   ^ Y

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ object type. This type is incompatible with
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ undefined. This type is incompatible with
     32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                   ^ Y

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ object type. This type is incompatible with
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                   ^ Y. This type is incompatible with
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ X

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ property `y`. Property not found in
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
          ^^^^^^^^ object type

Error: type.js:33
 33: ({}: O3); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 33: ({}: O3); // OK
          ^^ object type

Error: type.js:36
 36: ({x: y}: O3); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 36: ({x: y}: O3); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     36: ({x: y}: O3); // Error: Y ~> X
              ^ Y. This type is incompatible with
     25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                              ^ X

Error: type.js:40
 40: (o4: {||}); // Error: missing x and y
      ^^ property `x`. Property not found in
 40: (o4: {||}); // Error: missing x and y
          ^^^^ object type

Error: type.js:40
 40: (o4: {||}); // Error: missing x and y
      ^^ property `y`. Property not found in
 40: (o4: {||}); // Error: missing x and y
          ^^^^ object type

Error: type.js:41
 41: (o4: {|x: X|}); // Error: missing y
      ^^ property `y`. Property not found in
 41: (o4: {|x: X|}); // Error: missing y
          ^^^^^^^^ object type

Error: type.js:42
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
      ^^ object type. This type is incompatible with
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
          ^^^^^^^^^ object type
  Property `x` is incompatible:
     42: (o4: {|x?: X|}); // Error: x is not optional and missing y
                    ^ undefined. This type is incompatible with
     38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                              ^ X

Error: type.js:42
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
      ^^ property `y`. Property not found in
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
          ^^^^^^^^^ object type

Error: type.js:44
 44: (o4: {|x?: X, y?: Y|}); // Error: x is not optional
      ^^ object type. This type is incompatible with
 44: (o4: {|x?: X, y?: Y|}); // Error: x is not optional
          ^^^^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     44: (o4: {|x?: X, y?: Y|}); // Error: x is not optional
                    ^ undefined. This type is incompatible with
     38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                              ^ X

Error: type.js:45
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
      ^^ object type. This type is incompatible with
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                              ^ X. This type is incompatible with
     45: (o4: {|x: Y|}); // Error: X = Y, and missing y
                   ^ Y

Error: type.js:45
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
      ^^ object type. This type is incompatible with
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
          ^^^^^^^^ object type
  Property `x` is incompatible:
     45: (o4: {|x: Y|}); // Error: X = Y, and missing y
                   ^ Y. This type is incompatible with
     38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                              ^ X

Error: type.js:45
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
      ^^ property `y`. Property not found in
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
          ^^^^^^^^ object type

Error: type.js:46
 46: ({}: O4); // Error: missing x
      ^^ object literal. Inexact type is incompatible with exact type
 46: ({}: O4); // Error: missing x
          ^^ object type

Error: type.js:46
 46: ({}: O4); // Error: missing x
      ^^ object literal. This type is incompatible with
 46: ({}: O4); // Error: missing x
          ^^ object type
  Property `x` is incompatible:
     46: ({}: O4); // Error: missing x
              ^^ property `x`. Property not found in
     46: ({}: O4); // Error: missing x
          ^^ object literal

Error: type.js:49
 49: ({x: y}: O4); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 49: ({x: y}: O4); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     49: ({x: y}: O4); // Error: Y ~> X
              ^ Y. This type is incompatible with
     38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                              ^ X

Error: type.js:53
 53: (o5: {|x?: X|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 53: (o5: {|x?: X|}); // Error: inexact ~> exact
          ^^^^^^^^^ exact type: object type

Error: type.js:55
 55: (o5: {x: X}); // Error: x is optional
      ^^ object type. This type is incompatible with
 55: (o5: {x: X}); // Error: x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ undefined. This type is incompatible with
     55: (o5: {x: X}); // Error: x is optional
                  ^ X

Error: type.js:57
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
      ^^ object type. This type is incompatible with
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
          ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ undefined. This type is incompatible with
     57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
                  ^ X

Error: type.js:57
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
      ^^ object type. This type is incompatible with
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
          ^^^^^^^^^^^^^ object type
  Property `y` is incompatible:
     57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
              ^^^^^^^^^^^^^ property `y`. Property not found in
     57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
          ^^ object type

Error: type.js:58
 58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
      ^^ object type. This type is incompatible with
 58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
          ^^^^^^^^^^^^^^ object type
  Property `y` is incompatible:
     58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
              ^^^^^^^^^^^^^^ property `y`. Property not found in
     58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
          ^^ object type

Error: type.js:59
 59: (o5: {x: Y}); // Error: x is optional and X = Y
      ^^ object type. This type is incompatible with
 59: (o5: {x: Y}); // Error: x is optional and X = Y
          ^^^^^^ object type
  Property `x` is incompatible:
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ X. This type is incompatible with
     59: (o5: {x: Y}); // Error: x is optional and X = Y
                  ^ Y

Error: type.js:59
 59: (o5: {x: Y}); // Error: x is optional and X = Y
      ^^ object type. This type is incompatible with
 59: (o5: {x: Y}); // Error: x is optional and X = Y
          ^^^^^^ object type
  Property `x` is incompatible:
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ undefined. This type is incompatible with
     59: (o5: {x: Y}); // Error: x is optional and X = Y
                  ^ Y

Error: type.js:59
 59: (o5: {x: Y}); // Error: x is optional and X = Y
      ^^ object type. This type is incompatible with
 59: (o5: {x: Y}); // Error: x is optional and X = Y
          ^^^^^^ object type
  Property `x` is incompatible:
     59: (o5: {x: Y}); // Error: x is optional and X = Y
                  ^ Y. This type is incompatible with
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ X

Error: type.js:63
 63: ({x: y}: O5); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 63: ({x: y}: O5); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     63: ({x: y}: O5); // Error: Y ~> X
              ^ Y. This type is incompatible with
     51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                             ^ X

Error: type.js:67
 67: (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 67: (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^^^^^^^^ exact type: object type

Error: type.js:69
 69: (o6: {x: X}); // Error: x is optional
      ^^ object type. This type is incompatible with
 69: (o6: {x: X}); // Error: x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ undefined. This type is incompatible with
     69: (o6: {x: X}); // Error: x is optional
                  ^ X

Error: type.js:71
 71: (o6: {x: X, y?: Y}); // Error: x is optional
      ^^ object type. This type is incompatible with
 71: (o6: {x: X, y?: Y}); // Error: x is optional
          ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ undefined. This type is incompatible with
     71: (o6: {x: X, y?: Y}); // Error: x is optional
                  ^ X

Error: type.js:73
 73: (o6: {x: Y}); // Error: X = Y, x is optional
      ^^ object type. This type is incompatible with
 73: (o6: {x: Y}); // Error: X = Y, x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ X. This type is incompatible with
     73: (o6: {x: Y}); // Error: X = Y, x is optional
                  ^ Y

Error: type.js:73
 73: (o6: {x: Y}); // Error: X = Y, x is optional
      ^^ object type. This type is incompatible with
 73: (o6: {x: Y}); // Error: X = Y, x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ undefined. This type is incompatible with
     73: (o6: {x: Y}); // Error: X = Y, x is optional
                  ^ Y

Error: type.js:73
 73: (o6: {x: Y}); // Error: X = Y, x is optional
      ^^ object type. This type is incompatible with
 73: (o6: {x: Y}); // Error: X = Y, x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     73: (o6: {x: Y}); // Error: X = Y, x is optional
                  ^ Y. This type is incompatible with
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ X

Error: type.js:77
 77: ({x: y}: O6); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 77: ({x: y}: O6); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     77: ({x: y}: O6); // Error: Y ~> X
              ^ Y. This type is incompatible with
     65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                             ^ X

Error: type.js:81
 81: (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 81: (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^^^^^^^^ exact type: object type

Error: type.js:83
 83: (o7: {x: X}); // Error: x is optional
      ^^ object type. This type is incompatible with
 83: (o7: {x: X}); // Error: x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ undefined. This type is incompatible with
     83: (o7: {x: X}); // Error: x is optional
                  ^ X

Error: type.js:85
 85: (o7: {x: X, y?: Y}); // Error: x is optional
      ^^ object type. This type is incompatible with
 85: (o7: {x: X, y?: Y}); // Error: x is optional
          ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ undefined. This type is incompatible with
     85: (o7: {x: X, y?: Y}); // Error: x is optional
                  ^ X

Error: type.js:87
 87: (o7: {x: Y}); // Error: X = Y and x is optional
      ^^ object type. This type is incompatible with
 87: (o7: {x: Y}); // Error: X = Y and x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ X. This type is incompatible with
     87: (o7: {x: Y}); // Error: X = Y and x is optional
                  ^ Y

Error: type.js:87
 87: (o7: {x: Y}); // Error: X = Y and x is optional
      ^^ object type. This type is incompatible with
 87: (o7: {x: Y}); // Error: X = Y and x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ undefined. This type is incompatible with
     87: (o7: {x: Y}); // Error: X = Y and x is optional
                  ^ Y

Error: type.js:87
 87: (o7: {x: Y}); // Error: X = Y and x is optional
      ^^ object type. This type is incompatible with
 87: (o7: {x: Y}); // Error: X = Y and x is optional
          ^^^^^^ object type
  Property `x` is incompatible:
     87: (o7: {x: Y}); // Error: X = Y and x is optional
                  ^ Y. This type is incompatible with
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ X

Error: type.js:91
 91: ({x: y}: O7); // Error: Y ~> X
      ^^^^^^ object literal. This type is incompatible with
 91: ({x: y}: O7); // Error: Y ~> X
              ^^ object type
  Property `x` is incompatible:
     91: ({x: y}: O7); // Error: Y ~> X
              ^ Y. This type is incompatible with
     79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                             ^ X

Error: type.js:93
 93: type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                               ^ Y. This type is incompatible with
 93: type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                                        ^ X

Error: type.js:97
 97: type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                ^ Y. This type is incompatible with
 97: type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                         ^ X

Error: type.js:101
101: type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                 ^ Y. This type is incompatible with
101: type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                            ^ X

Error: type.js:105
105: type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                  ^ undefined. This type is incompatible with
105: type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                            ^ Y

Error: type.js:109
109: type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                      ^^^^^^^^ undefined property `y`. This type is incompatible with
109: type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                                     ^ Y

Error: type_dict.js:10
 10: (o1: {||}); // Error: missing y
      ^^ property `y`. Property not found in
 10: (o1: {||}); // Error: missing y
          ^^^^ object type

Error: type_dict.js:11
 11: (o1: {|y: Y|}); // Error: y is optional
      ^^ object type. This type is incompatible with
 11: (o1: {|y: Y|}); // Error: y is optional
          ^^^^^^^^ object type
  Property `y` is incompatible:
      8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                              ^ undefined. This type is incompatible with
     11: (o1: {|y: Y|}); // Error: y is optional
                   ^ Y

Error: type_dict.js:13
 13: (o1: {|y?: X|}); // Error: Y = X
      ^^ object type. This type is incompatible with
 13: (o1: {|y?: X|}); // Error: Y = X
          ^^^^^^^^^ object type
  Property `y` is incompatible:
      8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                              ^ Y. This type is incompatible with
     13: (o1: {|y?: X|}); // Error: Y = X
                    ^ X

Error: type_dict.js:13
 13: (o1: {|y?: X|}); // Error: Y = X
      ^^ object type. This type is incompatible with
 13: (o1: {|y?: X|}); // Error: Y = X
          ^^^^^^^^^ object type
  Property `y` is incompatible:
     13: (o1: {|y?: X|}); // Error: Y = X
                    ^ X. This type is incompatible with
      8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                              ^ Y

Error: type_dict.js:14
 14: ({}: O1); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 14: ({}: O1); // OK
          ^^ object type

Error: type_dict.js:16
 16: ({y: x}: O1); // Error: X ~> Y
      ^^^^^^ object literal. This type is incompatible with
 16: ({y: x}: O1); // Error: X ~> Y
              ^^ object type
  Property `y` is incompatible:
     16: ({y: x}: O1); // Error: X ~> Y
              ^ X. This type is incompatible with
      8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                              ^ Y

Error: type_dict.js:18
 18: type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                          ^ Y. This type is incompatible with
 18: type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                                           ^ X

Error: type_dict.js:24
 24: (o3: {||}); // Error: missing y
      ^^ property `y`. Property not found in
 24: (o3: {||}); // Error: missing y
          ^^^^ object type

Error: type_dict.js:25
 25: (o3: {|y: Y|}); // Error: y is optional
      ^^ object type. This type is incompatible with
 25: (o3: {|y: Y|}); // Error: y is optional
          ^^^^^^^^ object type
  Property `y` is incompatible:
     22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                              ^ undefined. This type is incompatible with
     25: (o3: {|y: Y|}); // Error: y is optional
                   ^ Y

Error: type_dict.js:27
 27: (o3: {|y?: X|}); // Error: Y = X
      ^^ object type. This type is incompatible with
 27: (o3: {|y?: X|}); // Error: Y = X
          ^^^^^^^^^ object type
  Property `y` is incompatible:
     22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                              ^ Y. This type is incompatible with
     27: (o3: {|y?: X|}); // Error: Y = X
                    ^ X

Error: type_dict.js:27
 27: (o3: {|y?: X|}); // Error: Y = X
      ^^ object type. This type is incompatible with
 27: (o3: {|y?: X|}); // Error: Y = X
          ^^^^^^^^^ object type
  Property `y` is incompatible:
     27: (o3: {|y?: X|}); // Error: Y = X
                    ^ X. This type is incompatible with
     22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                              ^ Y

Error: type_dict.js:28
 28: ({}: O3); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 28: ({}: O3); // OK
          ^^ object type

Error: type_dict.js:30
 30: ({y: x}: O3); // Error: X ~> Y
      ^^^^^^ object literal. This type is incompatible with
 30: ({y: x}: O3); // Error: X ~> Y
              ^^ object type
  Property `y` is incompatible:
     30: ({y: x}: O3); // Error: X ~> Y
              ^ X. This type is incompatible with
     22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                              ^ Y

Error: type_dict.js:34
 34: (o4: {|y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 34: (o4: {|y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^ exact type: object type

Error: type_dict.js:36
 36: (o4: {y: Y}); // Error: y is optional
      ^^ object type. This type is incompatible with
 36: (o4: {y: Y}); // Error: y is optional
          ^^^^^^ object type
  Property `y` is incompatible:
     32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                             ^ undefined. This type is incompatible with
     36: (o4: {y: Y}); // Error: y is optional
                  ^ Y

Error: type_dict.js:38
 38: (o4: {y?: X}); // Error: Y = X
      ^^ object type. This type is incompatible with
 38: (o4: {y?: X}); // Error: Y = X
          ^^^^^^^ object type
  Property `y` is incompatible:
     32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                             ^ Y. This type is incompatible with
     38: (o4: {y?: X}); // Error: Y = X
                   ^ X

Error: type_dict.js:38
 38: (o4: {y?: X}); // Error: Y = X
      ^^ object type. This type is incompatible with
 38: (o4: {y?: X}); // Error: Y = X
          ^^^^^^^ object type
  Property `y` is incompatible:
     38: (o4: {y?: X}); // Error: Y = X
                   ^ X. This type is incompatible with
     32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                             ^ Y

Error: type_dict.js:42
 42: ({y: x}: O4); // Error: X ~> Y
      ^^^^^^ object literal. This type is incompatible with
 42: ({y: x}: O4); // Error: X ~> Y
              ^^ object type
  Property `y` is incompatible:
     42: ({y: x}: O4); // Error: X ~> Y
              ^ X. This type is incompatible with
     32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                             ^ Y

Error: type_dict.js:46
 46: (o5: {|y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 46: (o5: {|y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^ exact type: object type

Error: type_dict.js:48
 48: (o5: {y: Y}); // Error: y is optional
      ^^ object type. This type is incompatible with
 48: (o5: {y: Y}); // Error: y is optional
          ^^^^^^ object type
  Property `y` is incompatible:
     44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                             ^ undefined. This type is incompatible with
     48: (o5: {y: Y}); // Error: y is optional
                  ^ Y

Error: type_dict.js:50
 50: (o5: {y?: X}); // Error: Y = X
      ^^ object type. This type is incompatible with
 50: (o5: {y?: X}); // Error: Y = X
          ^^^^^^^ object type
  Property `y` is incompatible:
     44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                             ^ Y. This type is incompatible with
     50: (o5: {y?: X}); // Error: Y = X
                   ^ X

Error: type_dict.js:50
 50: (o5: {y?: X}); // Error: Y = X
      ^^ object type. This type is incompatible with
 50: (o5: {y?: X}); // Error: Y = X
          ^^^^^^^ object type
  Property `y` is incompatible:
     50: (o5: {y?: X}); // Error: Y = X
                   ^ X. This type is incompatible with
     44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                             ^ Y

Error: type_dict.js:54
 54: ({y: x}: O5); // Error: X ~> Y
      ^^^^^^ object literal. This type is incompatible with
 54: ({y: x}: O5); // Error: X ~> Y
              ^^ object type
  Property `y` is incompatible:
     54: ({y: x}: O5); // Error: X ~> Y
              ^ X. This type is incompatible with
     44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                             ^ Y

Error: type_dict.js:56
 56: type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                         ^ Y. This type is incompatible with
 56: type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                                         ^ X

Error: type_dict.js:60
 60: type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                          ^ Y. This type is incompatible with
 60: type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                                          ^ X

Error: type_dict.js:84
 84: type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                  ^ X. This type is incompatible with
 84: type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                                   ^ Y

Error: type_dict.js:96
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                  ^ X. This type is incompatible with
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                            ^ Y

Error: type_dict.js:96
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                  ^ undefined. This type is incompatible with
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                            ^ Y

Error: type_generic.js:1
  1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                     ^ A. This type is incompatible with
  1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ some incompatible instantiation of `B`

Error: type_generic.js:2
  2:   const {...o, p} = a;
              ^^^^ rest of object pattern. Expected object instead of
  2:   const {...o, p} = a;
                         ^ A

Error: type_generic.js:2
  2:   const {...o, p} = a;
                    ^ property `p`. Property cannot be accessed on
  2:   const {...o, p} = a;
                         ^ A

Error: type_generic.js:7
  7: (o: {|x: string|});
      ^ object literal. This type is incompatible with
  7: (o: {|x: string|});
         ^^^^^^^^^^^^^ object type
  Property `x` is incompatible:
      6: const [o, p] = remove({x: 'foo', p: 42});
                                   ^^^^^ undefined. This type is incompatible with
      7: (o: {|x: string|});
                  ^^^^^^ string

Error: type_generic.js:7
  7: (o: {|x: string|});
      ^ property `p`. Property not found in
  7: (o: {|x: string|});
         ^^^^^^^^^^^^^ object type

Error: type_union.js:14
 14: ({x}: O1<X, Y>); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 14: ({x}: O1<X, Y>); // Error: x is not allowed
           ^^^^^^^^ union: object type(s)
  Member 1:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   14: ({x}: O1<X, Y>); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   14: ({x}: O1<X, Y>); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:16
 16: ({x, y}: O1<X, Y>); // Error: x is not allowed
      ^^^^^^ object literal. This type is incompatible with
 16: ({x, y}: O1<X, Y>); // Error: x is not allowed
              ^^^^^^^^ union: object type(s)
  Member 1:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   16: ({x, y}: O1<X, Y>); // Error: x is not allowed
        ^^^^^^ property `x`. Property not found in
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   16: ({x, y}: O1<X, Y>); // Error: x is not allowed
        ^^^^^^ property `x`. Property not found in
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:21
 21: ({y}: O2<X, Y>); // Error: y is not allowed
      ^^^ object literal. This type is incompatible with
 21: ({y}: O2<X, Y>); // Error: y is not allowed
           ^^^^^^^^ union: object type(s)
  Member 1:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   21: ({y}: O2<X, Y>); // Error: y is not allowed
        ^^^ property `y`. Property not found in
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   21: ({y}: O2<X, Y>); // Error: y is not allowed
        ^^^ property `y`. Property not found in
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:22
 22: ({x, y}: O2<X, Y>); // Error: y is not allowed
      ^^^^^^ object literal. This type is incompatible with
 22: ({x, y}: O2<X, Y>); // Error: y is not allowed
              ^^^^^^^^ union: object type(s)
  Member 1:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   22: ({x, y}: O2<X, Y>); // Error: y is not allowed
        ^^^^^^ property `y`. Property not found in
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   22: ({x, y}: O2<X, Y>); // Error: y is not allowed
        ^^^^^^ property `x`. Property not found in
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:25
 25: (o: O3); // OK
      ^ exact type: object type. This type is incompatible with
 25: (o: O3); // OK
         ^^ union: object type(s)
  Member 1:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ undefined property `y`. This type is incompatible with
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                       ^ Y
  Member 2:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ undefined property `x`. This type is incompatible with
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ X

Error: type_union.js:29
 29: ({x}: O4); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 29: ({x}: O4); // Error: x is not allowed
           ^^ union: object type(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   29: ({x}: O4); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   29: ({x}: O4); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:30
 30: ({y}: O4); // Error: y is not allowed
      ^^^ object literal. This type is incompatible with
 30: ({y}: O4); // Error: y is not allowed
           ^^ union: object type(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   30: ({y}: O4); // Error: y is not allowed
        ^^^ property `y`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   30: ({y}: O4); // Error: y is not allowed
        ^^^ property `y`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:31
 31: ({x, y}: O4); // Error: x and y are not allowed
      ^^^^^^ object literal. This type is incompatible with
 31: ({x, y}: O4); // Error: x and y are not allowed
              ^^ union: object type(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   31: ({x, y}: O4); // Error: x and y are not allowed
        ^^^^^^ property `x`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   31: ({x, y}: O4); // Error: x and y are not allowed
        ^^^^^^ property `x`. Property not found in
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:34
 34: (o: O5); // Error: missing x and missing y
      ^ exact type: object type. This type is incompatible with
 34: (o: O5); // Error: missing x and missing y
         ^^ union: object type(s)
  Member 1:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   34: (o: O5); // Error: missing x and missing y
        ^ object type. This type is incompatible with
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
    Property `x` is incompatible:
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ property `x`. Property not found in
       34: (o: O5); // Error: missing x and missing y
            ^ object type
  Member 2:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   34: (o: O5); // Error: missing x and missing y
        ^ object type. This type is incompatible with
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
    Property `y` is incompatible:
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ property `y`. Property not found in
       34: (o: O5); // Error: missing x and missing y
            ^ object type

Error: type_union.js:37
 37: ({x, y}: O5); // Error: x and y are not allowed together
      ^^^^^^ object literal. This type is incompatible with
 37: ({x, y}: O5); // Error: x and y are not allowed together
              ^^ union: object type(s)
  Member 1:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   37: ({x, y}: O5); // Error: x and y are not allowed together
        ^^^^^^ property `y`. Property not found in
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Member 2:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   37: ({x, y}: O5); // Error: x and y are not allowed together
        ^^^^^^ property `x`. Property not found in
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type

Error: type_union.js:39
 39: type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                     ^^^^^^^^ undefined property `y`. This type is incompatible with
 39: type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                                               ^ Y

Error: type_union.js:44
 44: ({x}: O7); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 44: ({x}: O7); // Error: x is not allowed
           ^^ union: object type(s)
  Member 1:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   44: ({x}: O7); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Member 2:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   44: ({x}: O7); // Error: x is not allowed
        ^^^ property `x`. Property not found in
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type

Error: type_union.js:46
 46: ({x, y}: O7); // Error: x is not allowed
      ^^^^^^ object literal. This type is incompatible with
 46: ({x, y}: O7); // Error: x is not allowed
              ^^ union: object type(s)
  Member 1:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   46: ({x, y}: O7); // Error: x is not allowed
        ^^^^^^ property `x`. Property not found in
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Member 2:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   46: ({x, y}: O7); // Error: x is not allowed
        ^^^^^^ property `x`. Property not found in
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type

Error: type_union.js:49
 49: (o: O8); // OK
      ^ exact type: object type. This type is incompatible with
 49: (o: O8); // OK
         ^^ union: object type(s)
  Member 1:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ undefined property `y`. This type is incompatible with
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                            ^ Y
  Member 2:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ undefined property `x`. This type is incompatible with
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ X

Error: type_union.js:55
 55: ({x, y}: O9); // Error: x and y are not allowed together
      ^^^^^^ object literal. This type is incompatible with
 55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^ union: object type(s)
  Member 1:
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   55: ({x, y}: O9); // Error: x and y are not allowed together
        ^^^^^^ object literal. This type is incompatible with
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
    Member 1:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
    Error:
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ property `y`. Property not found in
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
    Member 2:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
    Error:
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ property `x`. Property not found in
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
  Member 2:
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   55: ({x, y}: O9); // Error: x and y are not allowed together
        ^^^^^^ object literal. This type is incompatible with
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
    Member 1:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type
    Error:
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ property `x`. Property not found in
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type
    Member 2:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type
    Error:
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ property `x`. Property not found in
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type


Found 112 errors
