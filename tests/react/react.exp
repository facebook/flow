createElementRequiredProp_string.js:5
  5:   props: {
              ^ property `test`. Property not found in
 20:     return (<Cmp/>);
                 ^^^^^^ props of React element `Cmp`

import_react.js:7
  7: var b: number = new react.Component(); // Error: ReactComponent ~> number
                     ^^^^^^^^^^^^^^^^^^^^^ constructor call
  7: var b: number = new react.Component(); // Error: ReactComponent ~> number
                     ^^^^^^^^^^^^^^^^^^^^^ React$Component. This type is incompatible with
  7: var b: number = new react.Component(); // Error: ReactComponent ~> number
            ^^^^^^ number

jsx_spread.js:11
 11: var blah = <Foo {...props} />; // error bar, number given string expected
                ^^^^^^^^^^^^^^^^^^ React element `Foo`
 10: var props = {bar: 42};
                       ^^ number. This type is incompatible with
  6:     bar: React.PropTypes.string.isRequired,
              ^^^^^^^^^^^^^^^^^^^^^^ string

proptype_arrayOf.js:13
 13: var fail_not_array = <Example arr={2} />
                          ^^^^^^^^^^^^^^^^^^^ React element `Example`
 13: var fail_not_array = <Example arr={2} />
                                        ^ number. This type is incompatible with
  6:     arr: React.PropTypes.arrayOf(React.PropTypes.number).isRequired
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ arrayOf

proptype_arrayOf.js:14
 14: var fail_mistyped_elems = <Example arr={[1, "foo"]} />
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ React element `Example`
 14: var fail_mistyped_elems = <Example arr={[1, "foo"]} />
                                                 ^^^^^ string. This type is incompatible with
  6:     arr: React.PropTypes.arrayOf(React.PropTypes.number).isRequired
                                      ^^^^^^^^^^^^^^^^^^^^^^ number

proptype_func.js:14
 14: var fail_mistyped = <Example func={2} />
                         ^^^^^^^^^^^^^^^^^^^^ React element `Example`
 14: var fail_mistyped = <Example func={2} />
                                        ^ number. This type is incompatible with
  6:     func: React.PropTypes.func.isRequired
               ^^^^^^^^^^^^^^^^^^^^ func

proptype_object.js:13
 13: var fail_mistyped = <Example object={2} />
                         ^^^^^^^^^^^^^^^^^^^^^^ React element `Example`
 13: var fail_mistyped = <Example object={2} />
                                          ^ number. This type is incompatible with
  6:     object: React.PropTypes.object.isRequired
                 ^^^^^^^^^^^^^^^^^^^^^^ object

proptype_objectOf.js:13
 13: var fail_not_object = <Example obj={2} />
                           ^^^^^^^^^^^^^^^^^^^ React element `Example`
 13: var fail_not_object = <Example obj={2} />
                                         ^ number. This type is incompatible with
  6:     obj: React.PropTypes.objectOf(React.PropTypes.number).isRequired
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ objectOf

proptype_objectOf.js:14
 14: var fail_mistyped_props = <Example obj={{foo: "foo"}} />
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ React element `Example`
 14: var fail_mistyped_props = <Example obj={{foo: "foo"}} />
                                                   ^^^^^ string. This type is incompatible with
  6:     obj: React.PropTypes.objectOf(React.PropTypes.number).isRequired
                                       ^^^^^^^^^^^^^^^^^^^^^^ number

proptype_oneOf.js:11
 11: var ex2 = <Example literal="bar" />;
               ^^^^^^^^^^^^^^^^^^^^^^^^^ React element `Example`
 11: var ex2 = <Example literal="bar" />;
                                ^^^^^ string. Expected string literal `foo`, got `bar` instead
  6:     literal: React.PropTypes.oneOf(["foo"]).isRequired
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string literal `foo`

proptype_oneOfType.js:23
 23: var fail_bool = <Example prop={true} />
                     ^^^^^^^^^^^^^^^^^^^^^^^ React element `Example`
 23: var fail_bool = <Example prop={true} />
                                    ^^^^ boolean. This type is incompatible with
  6:     prop: React.PropTypes.oneOfType([
               ^ union: number | string
  Member 1:
    8:       React.PropTypes.number
             ^^^^^^^^^^^^^^^^^^^^^^ number
  Error:
   23: var fail_bool = <Example prop={true} />
                                      ^^^^ boolean. This type is incompatible with
    8:       React.PropTypes.number
             ^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    7:       React.PropTypes.string,
             ^^^^^^^^^^^^^^^^^^^^^^ string
  Error:
   23: var fail_bool = <Example prop={true} />
                                      ^^^^ boolean. This type is incompatible with
    7:       React.PropTypes.string,
             ^^^^^^^^^^^^^^^^^^^^^^ string


Found 11 errors
