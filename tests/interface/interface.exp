indexer.js:9
  9:   [k2: number]: number; // error: not supported (yet)
       ^^^^^^^^^^^^^^^^^^^^ multiple indexers are not supported

interface.js:3
  3: var x: string = new C().x;
                     ^^^^^^^^^ number. This type is incompatible with
  3: var x: string = new C().x;
            ^^^^^^ string

interface.js:7
  7: var i = new I(); // error
                 ^ I. type referenced from value position
  5: interface I { x: number; }
     ^^^^^^^^^^^^^^^^^^^^^^^^^^ type I

interface.js:10
 10:   (o.name: string); // error, name is static
          ^^^^ property `name`. Property not found in
 10:   (o.name: string); // error, name is static
        ^ I

test.js:2
  2: interface I_ { x: number }
                       ^^^^^^ number. This type is incompatible with
  6: var k: K = { x: "", y: "" }; // error: x should be number
                     ^^ string

test.js:6
  6: var k: K = { x: "", y: "" }; // error: x should be number
                     ^^ string. This type is incompatible with
  2: interface I_ { x: number }
                       ^^^^^^ number

test.js:7
  7: (k.x: string); // error: x is number
      ^^^ number. This type is incompatible with
  7: (k.x: string); // error: x is number
           ^^^^^^ string

test.js:11
 11: declare class D extends C, Other { } // error: multiple extends
                             ^ A class cannot extend multiple classes!

test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
              ^^^^^^ number. This type is incompatible with
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                             ^^ string

test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
              ^^^^^^ number. This type is incompatible with
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                           ^^ string

test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                             ^^ string. This type is incompatible with
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
              ^^^^^^ number

test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                           ^^ string. This type is incompatible with
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
              ^^^^^^ number

test.js:20
 20: (e.x: string); // error: x is number
      ^^^ number. This type is incompatible with
 20: (e.x: string); // error: x is number
           ^^^^^^ string

test.js:22
 22: (e.z: string); // error: z is number
      ^^^ number. This type is incompatible with
 22: (e.z: string); // error: z is number
           ^^^^^^ string

test2.js:5
  5: function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                                      ^ property `z`. Property not found in
  5: function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                                    ^ L

test3.js:1
  1: interface I { x: number, y : string }
                      ^^^^^^ number. This type is incompatible with
  3: interface K extends I, J { x: string } // error: x is number in I
                                   ^^^^^^ string

test3.js:3
  3: interface K extends I, J { x: string } // error: x is number in I
                                   ^^^^^^ string. This type is incompatible with
  1: interface I { x: number, y : string }
                      ^^^^^^ number

test3.js:5
  5:   (k.x: number); // error: x is string in K
        ^^^ string. This type is incompatible with
  5:   (k.x: number); // error: x is string in K
             ^^^^^^ number

test3.js:6
  6:   (k.y: number); // error: y is string in I
        ^^^ string. This type is incompatible with
  6:   (k.y: number); // error: y is string in I
             ^^^^^^ number

test4.js:8
  8: var p: A & I = a; // NG
                ^ property `fn` of I. Property not found in
  8: var p: A & I = a; // NG
                    ^ A

test4.js:8
  8: var p: A & I = a; // NG
                ^ property `gn` of statics of I. Property not found in
  8: var p: A & I = a; // NG
                    ^ statics of A

test4.js:9
  9: var P: Class<A> & Class<I> = A; // NG
                             ^ property `gn` of statics of I. Property not found in
  6: class A {}
           ^ statics of A

test4.js:9
  9: var P: Class<A> & Class<I> = A; // NG
                             ^ property `fn` of I. Property not found in
  9: var P: Class<A> & Class<I> = A; // NG
                                  ^ A

test4.js:20
 20: var q: A & I = b; // OK
                ^ property `gn` of statics of I. Property not found in
 20: var q: A & I = b; // OK
                    ^ statics of B

test4.js:21
 21: var Q: Class<A> & Class<I> = B; // OK
                             ^ property `gn` of statics of I. Property not found in
 11: class B extends A {
           ^ statics of B


Found 25 errors
