Error ----------------------------------------------------------------------------------------------------- array.js:4:2

Cannot cast `a` to interface type because number [1] is incompatible with boolean [2] in the return value of property
`pop`. [incompatible-cast]

   array.js:4:2
   4| (a: interface {pop(): boolean}); // ERROR
       ^

References:
   array.js:1:22
   1| declare var a: Array<number>;
                           ^^^^^^ [1]
   array.js:4:23
   4| (a: interface {pop(): boolean}); // ERROR
                            ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:5:19

Cannot assign function to `f0` because number [1] is incompatible with undefined [2] in the return value.
[incompatible-type]

   fun.js:5:19
   5| var f0: F = () => 0; // error: number ~> void
                        ^ [1]

References:
   fun.js:2:7
   2|   (): void;
            ^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:11:2

Cannot cast `f` to interface type because property `xxx` is missing in function [1] but exists in interface type [2].
[prop-missing]

   fun.js:11:2
   11| (f: interface {xxx: boolean}); // ERROR
        ^

References:
   fun.js:9:1
    9| function f() {}
       ^^^^^^^^^^^^ [1]
   fun.js:11:5
   11| (f: interface {xxx: boolean}); // ERROR
           ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- indexer.js:8:3

Multiple indexers are not supported. [unsupported-syntax]

   8|   [k2: number]: number; // ERROR
        ^^^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- indexer.js:40:3

Cannot get `x['xxx']` because string `xxx` [1] is incompatible with literal union [2]. [incompatible-type]

   indexer.js:40:3
   40|   x['xxx']; // ERROR
         ^^^^^^^^ [1]

References:
   indexer.js:27:4
   27|   [Keys]: number | string;
          ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:45:5

Cannot assign `1` to `x['a']` because property `a` is not writable. [cannot-write]

   45|   x['a'] = 1; // ERROR
           ^^^


Error -------------------------------------------------------------------------------------------------- indexer.js:46:3

Cannot get `x['xxx']` because string `xxx` [1] is incompatible with literal union [2]. [incompatible-type]

   indexer.js:46:3
   46|   x['xxx']; // ERROR
         ^^^^^^^^ [1]

References:
   indexer.js:30:5
   30|   +[Keys]: number | string;
           ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:50:5

Cannot get `x['a']` because an index signature declaring the expected key / value type is not readable. [cannot-read]

   50|   x['a']; // ERROR
           ^^^


Error -------------------------------------------------------------------------------------------------- indexer.js:52:3

Cannot assign `1` to `x['xxx']` because string `xxx` [1] is incompatible with literal union [2]. [incompatible-type]

   indexer.js:52:3
   52|   x['xxx'] = 1; // ERROR
         ^^^^^^^^ [1]

References:
   indexer.js:33:5
   33|   -[Keys]: number;
           ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:58:5

Cannot assign `1` to `x[s]` because an index signature declaring the expected key / value type is not writable.
[cannot-write]

   58|   x[s] = 1; // ERROR
           ^


Error -------------------------------------------------------------------------------------------------- indexer.js:59:5

Cannot get `x[true]` because boolean [1] is incompatible with string [2]. [incompatible-type]

   indexer.js:59:5
   59|   x[true]; // ERROR
           ^^^^ [1]

References:
   indexer.js:55:33
   55|   declare const x: interface {+[string]: number};
                                       ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:64:4

Cannot cast `x` to `Invariant` because string [1] is incompatible with number [2] in the indexer property. This property
is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-cast]

   indexer.js:64:4
   64|   (x: Invariant); // ERROR
          ^

References:
   indexer.js:27:20
   27|   [Keys]: number | string;
                          ^^^^^^ [1]
   indexer.js:63:29
   63|   declare const x: {[Keys]: number};
                                   ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:77:4

Cannot cast `x` to interface type because string [1] is incompatible with number [2] in the indexer property.
[incompatible-cast]

   indexer.js:77:4
   77|   (x: interface {[Keys]: number}); // ERROR
          ^

References:
   indexer.js:76:38
   76|   declare const x: {[Keys]: number | string};
                                            ^^^^^^ [1]
   indexer.js:77:26
   77|   (x: interface {[Keys]: number}); // ERROR
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- indexer.js:78:4

Cannot cast `x` to interface type because string [1] is incompatible with number [2] in the indexer property.
[incompatible-cast]

   indexer.js:78:4
   78|   (x: interface {+[Keys]: number}); // ERROR
          ^

References:
   indexer.js:76:38
   76|   declare const x: {[Keys]: number | string};
                                            ^^^^^^ [1]
   indexer.js:78:27
   78|   (x: interface {+[Keys]: number}); // ERROR
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- indexer.js:137:4

Cannot cast `x['bar']` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   indexer.js:137:4
   137|   (x['bar']: empty); // ERROR
           ^^^^^^^^

References:
   indexer.js:127:8
   127|   bar: string;
               ^^^^^^ [1]
   indexer.js:137:14
   137|   (x['bar']: empty); // ERROR
                     ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- indexer.js:145:4

Cannot cast `x['foo']` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   indexer.js:145:4
   145|   (x['foo']: empty); // ERROR
           ^^^^^^^^

References:
   indexer.js:128:3
   128|   foo(): null;
          ^^^^^^^^^^^ [1]
   indexer.js:145:14
   145|   (x['foo']: empty); // ERROR
                     ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- indexer.js:145:6

Cannot get `x['foo']` because property `foo` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   indexer.js:145:6
   145|   (x['foo']: empty); // ERROR
             ^^^^^ [1]

References:
   indexer.js:128:3
   128|   foo(): null;
          ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- indexer.js:148:4

Cannot cast `x['xxx']` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   indexer.js:148:4
   148|   (x['xxx']: empty); // ERROR
           ^^^^^^^^

References:
   indexer.js:131:13
   131|   [string]: () => number;
                    ^^^^^^^^^^^^ [1]
   indexer.js:148:14
   148|   (x['xxx']: empty); // ERROR
                     ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- indexer.js:178:5

Cannot assign `1` to `x['a']` because property `a` is not writable. [cannot-write]

   178|   x['a'] = 1; // ERROR
            ^^^


Error ------------------------------------------------------------------------------------------------- indexer.js:179:5

Cannot get `x[true]` because boolean [1] is incompatible with literal union [2]. [incompatible-type]

   indexer.js:179:5
   179|   x[true]; // ERROR
            ^^^^ [1]

References:
   indexer.js:175:42
   175|   declare const x: $ReadOnly<interface {[Keys]: number}>;
                                                 ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- inline.js:5:6

Cannot cast object literal to `A` because string [1] is incompatible with number [2] in property `p`.
[incompatible-cast]

   inline.js:5:6
   5| ({p: "bad"}: A); // error: string ~> number
           ^^^^^ [1]

References:
   inline.js:1:25
   1| type A = interface { p: number }
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- inline.js:8:6

Cannot cast object literal to `B` because string [1] is incompatible with number [2] in property `p`.
[incompatible-cast]

   inline.js:8:6
   8| ({p: "bad", q: 0}: B); // error: string ~> number
           ^^^^^ [1]

References:
   inline.js:1:25
   1| type A = interface { p: number }
                              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:9:12

Cannot cast object literal to `B` because string [1] is incompatible with number [2] in property `q`.
[incompatible-cast]

   inline.js:9:12
   9| ({p: 0, q: "bad"}: B); // error: string ~> number
                 ^^^^^ [1]

References:
   inline.js:2:35
   2| type B = interface extends A { q: number }
                                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:10:2

Cannot cast object literal to `B` because property `p` is missing in object literal [1] but exists in `A` [2].
[prop-missing]

   inline.js:10:2
   10| ({q: 0}: B); // error: missing property p
        ^^^^^^ [1]

References:
   inline.js:2:28
    2| type B = interface extends A { q: number }
                                  ^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:11:2

Cannot cast object literal to `B` because property `q` is missing in object literal [1] but exists in `B` [2].
[prop-missing]

   inline.js:11:2
   11| ({p: 0}: B); // error: missing property q
        ^^^^^^ [1]

References:
   inline.js:11:10
   11| ({p: 0}: B); // error: missing property q
                ^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:16:4

Cannot cast `o.p` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   inline.js:16:4
   16|   (o.p: empty); // error: number ~> empty
          ^^^

References:
   inline.js:13:18
   13| interface J { p: number }
                        ^^^^^^ [1]
   inline.js:16:9
   16|   (o.p: empty); // error: number ~> empty
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:17:4

Cannot cast `o.q` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   inline.js:17:4
   17|   (o.q: empty); // error: string ~> empty
          ^^^

References:
   inline.js:14:18
   14| interface K { q: string }
                        ^^^^^^ [1]
   inline.js:17:9
   17|   (o.q: empty); // error: string ~> empty
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- inline.js:18:5

Cannot get `o.z` because property `z` is missing in interface type [1]. [prop-missing]

   inline.js:18:5
   18|   o.z; // error: undeclared property z
           ^

References:
   inline.js:15:15
   15| function f(o: interface extends J, K {}) {
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- inline.js:21:5

Cannot get `o.name` because property `name` is missing in interface type [1]. [prop-missing]

   inline.js:21:5
   21|   o.name;
           ^^^^

References:
   inline.js:15:15
   15| function f(o: interface extends J, K {}) {
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- inline.js:25:29

Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   inline.js:25:29
   25| type C<+T> = interface { p: T }
                                   ^

References:
   inline.js:25:9
   25| type C<+T> = interface { p: T }
               ^ [1]


Error --------------------------------------------------------------------------------------------------- inline.js:29:6

Cannot extend `Base` [1] with interface type because string [2] is incompatible with number [3] in property `p`.
[incompatible-extend]

   inline.js:29:6
   29|   p: string, // error: string ~> number
            ^^^^^^ [2]

References:
   inline.js:28:34
   28| type Derived = interface extends Base {
                                        ^^^^ [1]
   inline.js:27:21
   27| interface Base { p: number }
                           ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ interface.js:3:17

Cannot assign `(new C()).x` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   interface.js:3:17
   3| var x: string = new C().x;
                      ^^^^^^^^^

References:
   interface.js:1:22
   1| declare class C { x: number; }
                           ^^^^^^ [1]
   interface.js:3:8
   3| var x: string = new C().x;
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:7:13

Cannot use type `I` [1] as a value. Types are erased and don't exist at runtime. [type-as-value]

   interface.js:7:13
   7| var i = new I(); // error
                  ^

References:
   interface.js:5:11
   5| interface I { x: number; }
                ^ [1]


Error ------------------------------------------------------------------------------------------------ interface.js:10:6

Cannot get `o.name` because property `name` is missing in `I` [1]. [prop-missing]

   interface.js:10:6
   10|   (o.name: string); // error, name is static
            ^^^^

References:
   interface.js:9:31
    9| function testInterfaceName(o: I) {
                                     ^ [1]


Error ------------------------------------------------------------------------------------------------ interface.js:29:2

Cannot cast `new D` to `J` because undefined [1] is incompatible with number [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   interface.js:29:2
   29| (new D : J); // error, x is invariant
        ^^^^^

References:
   interface.js:22:7
   22|   x?: number;
             ^^^^^^ [1]
   interface.js:26:6
   26|   x: number;
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:38:2

Cannot cast `o2["b"]` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   interface.js:38:2
   38| (o2["b"] : boolean); // error
        ^^^^^^^

References:
   interface.js:36:40
   36| declare var o2 : interface {[string] : number};
                                              ^^^^^^ [1]
   interface.js:38:12
   38| (o2["b"] : boolean); // error
                  ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:43:2

Cannot cast `o3` to interface type because number [1] is incompatible with boolean [2] in the indexer property.
[incompatible-cast]

   interface.js:43:2
   43| (o3 : interface {[string] : boolean}); // error
        ^^

References:
   interface.js:41:30
   41| declare var o3 : {[string] : number};
                                    ^^^^^^ [1]
   interface.js:43:29
   43| (o3 : interface {[string] : boolean}); // error
                                   ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:44:7

Cannot cast object literal to interface type because number [1] is incompatible with boolean [2] in property `x`.
[incompatible-cast]

   interface.js:44:7
   44| ({x : 3} : interface {[string] : boolean}); // error
             ^ [1]

References:
   interface.js:44:34
   44| ({x : 3} : interface {[string] : boolean}); // error
                                        ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:46:2

Cannot cast `o3` to interface type because string [1] is incompatible with number [2] in the indexer property's key.
[incompatible-cast]

   interface.js:46:2
   46| (o3: interface {[number] : number}); // error
        ^^

References:
   interface.js:41:20
   41| declare var o3 : {[string] : number};
                          ^^^^^^ [1]
   interface.js:46:18
   46| (o3: interface {[number] : number}); // error
                        ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:47:2

Cannot cast object literal to interface type because string `x` [1] is incompatible with number [2] in the indexer
property's key. [incompatible-cast]

   interface.js:47:2
   47| ({x : 3} : interface {[number] : number}); // error
        ^^^^^^^ [1]

References:
   interface.js:47:24
   47| ({x : 3} : interface {[number] : number}); // error
                              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:51:2

Cannot cast `o4` to interface type because string [1] is incompatible with string literal `asdf` [2] in the indexer
property's key. [incompatible-cast]

   interface.js:51:2
   51| (o4 : interface {[string] : number}); // error
        ^^

References:
   interface.js:51:19
   51| (o4 : interface {[string] : number}); // error
                         ^^^^^^ [1]
   interface.js:49:20
   49| declare var o4 : {["asdf"] : number};
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ interface.js:59:2

Cannot cast `o6` to interface type because string [1] is incompatible with string literal `asdf` [2] in the indexer
property's key. [incompatible-cast]

   interface.js:59:2
   59| (o6 : interface {["asdf"] : number}); // error
        ^^

References:
   interface.js:57:20
   57| declare var o6 : {[string] : number};
                          ^^^^^^ [1]
   interface.js:59:19
   59| (o6 : interface {["asdf"] : number}); // error
                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitives.js:1:2

Cannot cast `undefined` to interface type because undefined [1] is incompatible with interface type [2].
[incompatible-cast]

   primitives.js:1:2
   1| (undefined: interface {}); // ERROR
       ^^^^^^^^^ [1]

References:
   primitives.js:1:13
   1| (undefined: interface {}); // ERROR
                  ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitives.js:2:2

Cannot cast `null` to interface type because null [1] is incompatible with interface type [2]. [incompatible-cast]

   primitives.js:2:2
   2| (null: interface {}); // ERROR
       ^^^^ [1]

References:
   primitives.js:2:8
   2| (null: interface {}); // ERROR
             ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitives.js:5:4

Cannot cast `1` to interface type because number [1], a primitive, cannot be used as a subtype of interface type [2].
You can wrap it in `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
[incompatible-type]

   primitives.js:5:4
   5|   (1: interface {}); // ERROR
         ^ [1]

References:
   primitives.js:5:7
   5|   (1: interface {}); // ERROR
            ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitives.js:7:4

Cannot cast `x` to interface type because number [1], a primitive, cannot be used as a subtype of interface type [2].
You can wrap it in `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
[incompatible-type]

   primitives.js:7:4
   7|   (x: interface {}); // ERROR
         ^

References:
   primitives.js:6:20
   6|   declare const x: number;
                         ^^^^^^ [1]
   primitives.js:7:7
   7|   (x: interface {}); // ERROR
            ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitives.js:13:4

Cannot cast `true` to interface type because boolean [1], a primitive, cannot be used as a subtype of interface
type [2]. You can wrap it in `new Boolean(...))` to turn it into an object and attempt to use it as a subtype of an
interface. [incompatible-type]

   primitives.js:13:4
   13|   (true: interface {}); // ERROR
          ^^^^ [1]

References:
   primitives.js:13:10
   13|   (true: interface {}); // ERROR
                ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitives.js:15:4

Cannot cast `x` to interface type because boolean [1], a primitive, cannot be used as a subtype of interface type [2].
You can wrap it in `new Boolean(...))` to turn it into an object and attempt to use it as a subtype of an interface.
[incompatible-type]

   primitives.js:15:4
   15|   (x: interface {}); // ERROR
          ^

References:
   primitives.js:14:20
   14|   declare const x: boolean;
                          ^^^^^^^ [1]
   primitives.js:15:7
   15|   (x: interface {}); // ERROR
             ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitives.js:21:4

Cannot cast `x` to interface type because symbol [1] is incompatible with interface type [2]. [incompatible-cast]

   primitives.js:21:4
   21|   (x: interface {}); // ERROR
          ^

References:
   primitives.js:20:20
   20|   declare const x: symbol;
                          ^^^^^^ [1]
   primitives.js:21:7
   21|   (x: interface {}); // ERROR
             ^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- string.js:4:2

Cannot cast `s` to interface type because string [1], a primitive, cannot be used as a subtype of interface type [2].
You can wrap it in `new String(...))` to turn it into an object and attempt to use it as a subtype of an interface.
[incompatible-type]

   string.js:4:2
   4| (s: interface {charAt(pos: number): string}); // ERROR
       ^

References:
   string.js:1:18
   1| declare const s: string;
                       ^^^^^^ [1]
   string.js:4:5
   4| (s: interface {charAt(pos: number): string}); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- string.js:5:17

string [1], a primitive, cannot be used as a subtype of `$Iterable` [2]. You can wrap it in `new String(...))` to turn
it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   string.js:5:17
      5| for (const c of s) {} // ERROR
                         ^

References:
   string.js:1:18
      1| declare const s: string;
                          ^^^^^^ [1]
   <BUILTINS>/core.js:1733:11
   1733| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:35:2

Cannot cast `new A` to `J` because property `y` is missing in `A` [1] but exists in `J` [2]. [prop-missing]

   subtyping.js:35:2
   35| (new A : J); // error
        ^^^^^ [1]

References:
   subtyping.js:35:10
   35| (new A : J); // error
                ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:47:2

Cannot cast `new D` to `K` because property `x` is missing in `D` [1] but exists in `K` [2]. [prop-missing]

   subtyping.js:47:2
   47| (new D : K); // error
        ^^^^^ [1]

References:
   subtyping.js:47:10
   47| (new D : K); // error
                ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:64:2

Cannot cast `E` to `L` because property `y` is missing in class `E` [1] but exists in `L` [2]. [prop-missing]

   subtyping.js:64:2
   64| (E : L); // error
        ^

References:
   subtyping.js:51:7
   51| class E {
             ^ [1]
   subtyping.js:64:6
   64| (E : L); // error
            ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:77:2

Cannot cast `new G` to `M` because property `z` is missing in `G` [1] but exists in `M` [2]. [prop-missing]

   subtyping.js:77:2
   77| (new G : M); // error
        ^^^^^ [1]

References:
   subtyping.js:77:10
   77| (new G : M); // error
                ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:78:2

Cannot cast `new G` to `N` because property `z` is missing in `G` [1] but exists in `M` [2]. [prop-missing]

   subtyping.js:78:2
   78| (new G : N); // error
        ^^^^^ [1]

References:
   subtyping.js:74:21
   74| interface N extends M {
                           ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:6:17

Cannot assign object literal to `k` because string [1] is incompatible with number [2] in property `x`.
[incompatible-type]

   test.js:6:17
   6| var k: K = { x: "", y: "" }; // error: x should be number
                      ^^ [1]

References:
   test.js:2:19
   2| interface I_ { x: number }
                        ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:7:2

Cannot cast `k.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:7:2
   7| (k.x: string); // error: x is number
       ^^^

References:
   test.js:2:19
   2| interface I_ { x: number }
                        ^^^^^^ [1]
   test.js:7:7
   7| (k.x: string); // error: x is number
            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:17:25

Cannot assign object literal to `e` because string [1] is incompatible with number [2] in property `x`.
[incompatible-type]

   test.js:17:25
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                               ^^ [1]

References:
   test.js:17:10
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:17:39

Cannot assign object literal to `e` because string [1] is incompatible with number [2] in property `z`.
[incompatible-type]

   test.js:17:39
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                             ^^ [1]

References:
   test.js:17:10
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:18:2

Cannot cast `e.x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:18:2
   18| (e.x: string); // error: x is number
        ^^^

References:
   test.js:17:10
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                ^^^^^^ [1]
   test.js:18:7
   18| (e.x: string); // error: x is number
             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:20:2

Cannot cast `e.z` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:20:2
   20| (e.z: string); // error: z is number
        ^^^

References:
   test.js:17:10
   17| var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                ^^^^^^ [1]
   test.js:20:7
   20| (e.z: string); // error: z is number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test2.js:5:34

Cannot get `l.z` because property `z` is missing in `L` [1]. [prop-missing]

   test2.js:5:34
   5| function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                                       ^

References:
   test2.js:5:17
   5| function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                      ^ [1]


Error ---------------------------------------------------------------------------------------------------- test3.js:3:31

Cannot extend `I` [1] with `K` because string [2] is incompatible with number [3] in property `x`. [incompatible-extend]

   test3.js:3:31
   3| interface K extends I, J { x: string } // error: x is number in I
                                    ^^^^^^ [2]

References:
   test3.js:3:21
   3| interface K extends I, J { x: string } // error: x is number in I
                          ^ [1]
   test3.js:1:18
   1| interface I { x: number, y : string }
                       ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test3.js:5:4

Cannot cast `k.x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test3.js:5:4
   5|   (k.x: number); // error: x is string in K
         ^^^

References:
   test3.js:3:31
   3| interface K extends I, J { x: string } // error: x is number in I
                                    ^^^^^^ [1]
   test3.js:5:9
   5|   (k.x: number); // error: x is string in K
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test3.js:6:4

Cannot cast `k.y` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test3.js:6:4
   6|   (k.y: number); // error: y is string in I
         ^^^

References:
   test3.js:1:30
   1| interface I { x: number, y : string }
                                   ^^^^^^ [1]
   test3.js:6:9
   6|   (k.y: number); // error: y is string in I
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test4.js:2:2

Cannot cast function to `I` because property `foo` is missing in function [1] but exists in `I` [2]. [prop-missing]

   test4.js:2:2
   2| (function foo(x: number) { }: I); // error, property `foo` not found function
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   test4.js:2:31
   2| (function foo(x: number) { }: I); // error, property `foo` not found function
                                    ^ [2]


Error ----------------------------------------------------------------------------------------------------- test4.js:9:9

Cannot call `(new C()).bar` because: [incompatible-call]
 - Either string [1] is incompatible with number [2] in the first parameter.
 - Or property `foo` is missing in function [3] but exists in `I` [4].

   test4.js:9:9
   9| new C().bar((x: string) => { }); // error, number ~/~> string
              ^^^

References:
   test4.js:9:17
   9| new C().bar((x: string) => { }); // error, number ~/~> string
                      ^^^^^^ [1]
   test4.js:6:14
   6|   bar(f: (x: number) => void): void;
                   ^^^^^^ [2]
   test4.js:9:13
   9| new C().bar((x: string) => { }); // error, number ~/~> string
                  ^^^^^^^^^^^^^^^^^^ [3]
   test4.js:5:10
   5|   bar(i: I): void;
               ^ [4]


Error ---------------------------------------------------------------------------------------------------- test5.js:12:2

Cannot cast `a.x` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   test5.js:12:2
   12| (a.x: empty); // error: function ~> empty
        ^^^

References:
   test5.js:3:3
    3|   x(): void;
         ^^^^^^^^^ [1]
   test5.js:12:7
   12| (a.x: empty); // error: function ~> empty
             ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test5.js:12:4

Cannot get `a.x` because property `x` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   test5.js:12:4
   12| (a.x: empty); // error: function ~> empty
          ^ [1]

References:
   test5.js:3:3
    3|   x(): void;
         ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test5.js:15:2

Cannot cast `b.x` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test5.js:15:2
   15| (b.x: empty); // error: number ~> empty
        ^^^

References:
   test5.js:8:6
    8|   x: number;
            ^^^^^^ [1]
   test5.js:15:7
   15| (b.x: empty); // error: number ~> empty
             ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- top.js:3:2

Cannot cast `x` to interface type because mixed [1] is incompatible with interface type [2]. [incompatible-cast]

   top.js:3:2
   3| (x: interface {}); // ERROR
       ^

References:
   top.js:1:16
   1| declare var x: mixed;
                     ^^^^^ [1]
   top.js:3:5
   3| (x: interface {}); // ERROR
          ^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- utility.js:10:3

Cannot assign `3` to `x.foo` because property `foo` is not writable. [cannot-write]

   10| x.foo = 3; // error as expected
         ^^^


Error -------------------------------------------------------------------------------------------------- utility.js:33:2

Cannot cast `b` to `$ReadOnly` because property `qux` is missing in `B` [1] but exists in `K` [2]. [prop-missing]

   utility.js:33:2
   33| (b : $ReadOnly<K>); // error
        ^

References:
   utility.js:19:9
   19| let b = new B();
               ^^^^^^^ [1]
   utility.js:33:16
   33| (b : $ReadOnly<K>); // error
                      ^ [2]



Found 74 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
