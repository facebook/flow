Error: fun.js:5
  5: var f0: F = () => 0; // error: number ~> void
                 ^^^^^^^ function. This type is incompatible with
  5: var f0: F = () => 0; // error: number ~> void
             ^ F
  Callable property is incompatible:
      5: var f0: F = () => 0; // error: number ~> void
                     ^^^^^^^ function. This type is incompatible with
      2:   (): void;
           ^^^^^^^^ function type
      This parameter is incompatible:
          5: var f0: F = () => 0; // error: number ~> void
                               ^ number. This type is incompatible with
          2:   (): void;
                   ^^^^ undefined

Error: indexer.js:9
  9:   [k2: number]: number; // error: not supported (yet)
       ^^^^^^^^^^^^^^^^^^^^ multiple indexers are not supported

Error: interface.js:3
  3: var x: string = new C().x;
                     ^^^^^^^^^ number. This type is incompatible with
  3: var x: string = new C().x;
            ^^^^^^ string

Error: interface.js:7
  7: var i = new I(); // error
                 ^ I. type referenced from value position
  5: interface I { x: number; }
               ^ type I

Error: interface.js:10
 10:   (o.name: string); // error, name is static
          ^^^^ property `name`. Property not found in
 10:   (o.name: string); // error, name is static
        ^ I

Error: test.js:6
  6: var k: K = { x: "", y: "" }; // error: x should be number
                ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  3: interface J extends I, I_ { }
                            ^^ I_
  Property `x` is incompatible:
      2: interface I_ { x: number }
                           ^^^^^^ number. This type is incompatible with
      6: var k: K = { x: "", y: "" }; // error: x should be number
                         ^^ string

Error: test.js:6
  6: var k: K = { x: "", y: "" }; // error: x should be number
                ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  3: interface J extends I, I_ { }
                            ^^ I_
  Property `x` is incompatible:
      6: var k: K = { x: "", y: "" }; // error: x should be number
                         ^^ string. This type is incompatible with
      2: interface I_ { x: number }
                           ^^^^^^ number

Error: test.js:7
  7: (k.x: string); // error: x is number
      ^^^ number. This type is incompatible with
  7: (k.x: string); // error: x is number
           ^^^^^^ string

Error: test.js:11
 11: declare class D extends C, Other { } // error: multiple extends
                                ^^^^^ A class cannot extend multiple classes!

Error: test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                        ^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
 15: interface A_<X> { x: X }
     ^^^^^^^^^^^^^^^^^^^^^^^^ A_
  Property `x` is incompatible:
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                  ^^^^^^ number. This type is incompatible with
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                 ^^ string

Error: test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                        ^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
 15: interface A_<X> { x: X }
     ^^^^^^^^^^^^^^^^^^^^^^^^ A_
  Property `x` is incompatible:
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                 ^^ string. This type is incompatible with
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                  ^^^^^^ number

Error: test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                        ^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
 16: interface B<Z> extends A<string>, A_<Z> { z: Z }
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B
  Property `z` is incompatible:
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                  ^^^^^^ number. This type is incompatible with
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                               ^^ string

Error: test.js:19
 19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                        ^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
 16: interface B<Z> extends A<string>, A_<Z> { z: Z }
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B
  Property `z` is incompatible:
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                                               ^^ string. This type is incompatible with
     19: var e: E<number> = { x: "", y: "", z: "" }; // error: x and z should be numbers
                  ^^^^^^ number

Error: test.js:20
 20: (e.x: string); // error: x is number
      ^^^ number. This type is incompatible with
 20: (e.x: string); // error: x is number
           ^^^^^^ string

Error: test.js:22
 22: (e.z: string); // error: z is number
      ^^^ number. This type is incompatible with
 22: (e.z: string); // error: z is number
           ^^^^^^ string

Error: test2.js:5
  5: function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                                      ^ property `z`. Property not found in
  5: function foo(l: L) { l.x; l.y; l.z; } // error: z not found in L
                                    ^ L

Error: test3.js:1
  1: interface I { x: number, y : string }
                      ^^^^^^ number. This type is incompatible with
  3: interface K extends I, J { x: string } // error: x is number in I
                                   ^^^^^^ string

Error: test3.js:3
  3: interface K extends I, J { x: string } // error: x is number in I
                                   ^^^^^^ string. This type is incompatible with
  1: interface I { x: number, y : string }
                      ^^^^^^ number

Error: test3.js:5
  5:   (k.x: number); // error: x is string in K
        ^^^ string. This type is incompatible with
  5:   (k.x: number); // error: x is string in K
             ^^^^^^ number

Error: test3.js:6
  6:   (k.y: number); // error: y is string in I
        ^^^ string. This type is incompatible with
  6:   (k.y: number); // error: y is string in I
             ^^^^^^ number

Error: test4.js:2
  2: (function foo(x: number) { }: I); // error, property `foo` not found function
      ^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  2: (function foo(x: number) { }: I); // error, property `foo` not found function
                                   ^ I
  Property `foo` is incompatible:
      2: (function foo(x: number) { }: I); // error, property `foo` not found function
                                       ^ property `foo` of I. Property not found in
      2: (function foo(x: number) { }: I); // error, property `foo` not found function
          ^^^^^^^^^^^^^^^^^^^^^^^ function

Error: test4.js:9
  9: new C().bar((x: string) => { }); // error, number ~/~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `bar`. Function cannot be called on any member of intersection type
  9: new C().bar((x: string) => { }); // error, number ~/~> string
     ^^^^^^^^^^^ intersection
  Member 1:
    5:   bar(i: I): void;
         ^^^^^^^^^^^^^^^ function type
  Error:
    9: new C().bar((x: string) => { }); // error, number ~/~> string
                   ^^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
    5:   bar(i: I): void;
                ^ I
    Property `foo` is incompatible:
        5:   bar(i: I): void;
                    ^ property `foo` of I. Property not found in
        9: new C().bar((x: string) => { }); // error, number ~/~> string
                       ^^^^^^^^^^^^^^^^^^ function
  Member 2:
    6:   bar(f: (x: number) => void): void;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
  Error:
    9: new C().bar((x: string) => { }); // error, number ~/~> string
                   ^^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
    6:   bar(f: (x: number) => void): void;
                ^^^^^^^^^^^^^^^^^^^ function type
    This parameter is incompatible:
        6:   bar(f: (x: number) => void): void;
                        ^^^^^^ number. This type is incompatible with
        9: new C().bar((x: string) => { }); // error, number ~/~> string
                           ^^^^^^ string


Found 22 errors
