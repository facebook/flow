Error: issue-1462-i.js:21
 21:   print(val.foo);  // <--- foo could be an array
             ^^^^^^^ array type. This type is incompatible with the expected param type of
 16: function print(x: number) {
                       ^^^^^^ number

Error: issue-824.js:21
 21:     return this.foo(p);
                         ^ intersection type. This type is incompatible with the expected param type of
 10:   static foo(p: K): bool {
                     ^ union: B | C
  Member 1:
    3: type K = B | C;
                ^ B
  Error:
   21:     return this.foo(p);
                           ^ intersection. This type is incompatible with
    3: type K = B | C;
                ^ B
    Member 1:
     13:   static bar(p: I & K): bool {
                         ^ I
    Error:
     13:   static bar(p: I & K): bool {
                         ^ object type. This type is incompatible with
      3: type K = B | C;
                  ^ B
    Member 2:
     13:   static bar(p: I & K): bool {
                             ^ K
    Error:
     13:   static bar(p: I & K): bool {
                             ^ C. This type is incompatible with
      3: type K = B | C;
                  ^ B
  Member 2:
    3: type K = B | C;
                    ^ C
  Error:
   21:     return this.foo(p);
                           ^ intersection. This type is incompatible with
    3: type K = B | C;
                    ^ C
    Member 1:
     13:   static bar(p: I & K): bool {
                         ^ I
    Error:
     13:   static bar(p: I & K): bool {
                         ^ object type. This type is incompatible with
      3: type K = B | C;
                      ^ C
    Member 2:
     13:   static bar(p: I & K): bool {
                             ^ K
    Error:
     13:   static bar(p: I & K): bool {
                             ^ B. This type is incompatible with
      3: type K = B | C;
                      ^ C

Error: test1.js:39
 39: const fun_result = fun(() => "");
                            ^^^^^^^^ function. Could not decide which case to select
 35: function fun(a: A3 | A4) {
                     ^^^^^^^ union type
  Case 1 may work:
   35: function fun(a: A3 | A4) {
                       ^^ A3
  But if it doesn't, case 2 looks promising too:
   35: function fun(a: A3 | A4) {
                            ^^ A4
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   39: const fun_result = fun(() => "");
                                    ^^ return

Error: test1.js:57
 57: inst([new B6]);
          ^^^^^^^^ array literal. Could not decide which case to select
 53: function inst(a: A5 | A6) { }
                      ^^^^^^^ union type
  Case 1 may work:
   53: function inst(a: A5 | A6) { }
                        ^^ A5
  But if it doesn't, case 2 looks promising too:
   53: function inst(a: A5 | A6) { }
                             ^^ A6
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   57: inst([new B6]);
            ^^^^^^^^ inferred union of array element types (alternatively, provide an annotation to summarize the array element type)

Error: test10.js:38
 38: check_fun((x) => x);
               ^^^^^^^^ function. Could not decide which case to select
 35: function check_fun(_: ((_: number) => number) | ((_: string) => string)) { }
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   35: function check_fun(_: ((_: number) => number) | ((_: string) => string)) { }
                              ^^^^^^^^^^^^^^^^^^^^^ function type
  But if it doesn't, case 2 looks promising too:
   35: function check_fun(_: ((_: number) => number) | ((_: string) => string)) { }
                                                        ^^^^^^^^^^^^^^^^^^^^^ function type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   38: check_fun((x) => x);
                        ^ return
   38: check_fun((x) => x);
                  ^ parameter `x`

Error: test10.js:50
 50: check_obj({ x: id("") });
               ^^^^^^^^^^^^^ object literal. Could not decide which case to select
 44: function check_obj(_: { x: number } | { x: string }) { }
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   44: function check_obj(_: { x: number } | { x: string }) { }
                             ^^^^^^^^^^^^^ object type
  But if it doesn't, case 2 looks promising too:
   44: function check_obj(_: { x: number } | { x: string }) { }
                                             ^^^^^^^^^^^^^ object type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   50: check_obj({ x: id("") });
                      ^^^^^^ function call

Error: test10.js:59
 59: check_arr([""]);
               ^^^^ array literal. Could not decide which case to select
 56: function check_arr(_: number[] | string[]) { }
                           ^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   56: function check_arr(_: number[] | string[]) { }
                             ^^^^^^^^ array type
  But if it doesn't, case 2 looks promising too:
   56: function check_arr(_: number[] | string[]) { }
                                        ^^^^^^^^ array type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   59: check_arr([""]);
                 ^^^^ inferred union of array element types (alternatively, provide an annotation to summarize the array element type)

Error: test10.js:62
 62: check_arr([id("")]);
               ^^^^^^^^ array literal. Could not decide which case to select
 56: function check_arr(_: number[] | string[]) { }
                           ^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   56: function check_arr(_: number[] | string[]) { }
                             ^^^^^^^^ array type
  But if it doesn't, case 2 looks promising too:
   56: function check_arr(_: number[] | string[]) { }
                                        ^^^^^^^^ array type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   62: check_arr([id("")]);
                 ^^^^^^^^ inferred union of array element types (alternatively, provide an annotation to summarize the array element type)

Error: test11.js:12
 12: length({ kind: "cons" }); // missing `next`
            ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
  5: function length(list: List) {
                           ^^^^ union: Nil | Cons
  Member 1:
   16: type List = Nil | Cons;
                   ^^^ Nil
  Error:
   12: length({ kind: "cons" }); // missing `next`
              ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
   16: type List = Nil | Cons;
                   ^^^ object type
    Property `kind` is incompatible:
       12: length({ kind: "cons" }); // missing `next`
                          ^^^^^^ string. Expected string literal `nil`, got `cons` instead
       17: type Nil = { kind: "nil" };
                              ^^^^^ string literal `nil`
  Member 2:
   16: type List = Nil | Cons;
                         ^^^^ Cons
  Error:
   12: length({ kind: "cons" }); // missing `next`
              ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
   16: type List = Nil | Cons;
                         ^^^^ object type
    Property `next` is incompatible:
       16: type List = Nil | Cons;
                             ^^^^ property `next`. Property not found in
       12: length({ kind: "cons" }); // missing `next`
                  ^^^^^^^^^^^^^^^^ object literal

Error: test11.js:14
 14: length({ kind: "empty" }); // `kind` not found
            ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
  5: function length(list: List) {
                           ^^^^ union: Nil | Cons
  Member 1:
   16: type List = Nil | Cons;
                   ^^^ Nil
  Error:
   14: length({ kind: "empty" }); // `kind` not found
              ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
   16: type List = Nil | Cons;
                   ^^^ object type
    Property `kind` is incompatible:
       14: length({ kind: "empty" }); // `kind` not found
                          ^^^^^^^ string. Expected string literal `nil`, got `empty` instead
       17: type Nil = { kind: "nil" };
                              ^^^^^ string literal `nil`
  Member 2:
   16: type List = Nil | Cons;
                         ^^^^ Cons
  Error:
   14: length({ kind: "empty" }); // `kind` not found
              ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
   16: type List = Nil | Cons;
                         ^^^^ object type
    Property `kind` is incompatible:
       14: length({ kind: "empty" }); // `kind` not found
                          ^^^^^^^ string. Expected string literal `cons`, got `empty` instead
       18: type Cons = { kind: "cons", next: List };
                               ^^^^^^ string literal `cons`

Error: test14.js:12
 12:   union({ x: c.get() });
             ^^^^^^^^^^^^^^ object literal. Could not decide which case to select
  9: function union(o: { x: string } | { x: number }) { }
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
    9: function union(o: { x: string } | { x: number }) { }
                         ^^^^^^^^^^^^^ object type
  But if it doesn't, case 2 looks promising too:
    9: function union(o: { x: string } | { x: number }) { }
                                         ^^^^^^^^^^^^^ object type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   12:   union({ x: c.get() });
                    ^^^^^^^ call of method `get`

Error: test16.js:11
 11: foo(() => qux());
         ^^^^^^^^^^^ function. Could not decide which case to select
 10: function foo(x: Foo) { }
                     ^^^ union type
  Case 1 may work:
    6: type Foo = T | (() => bool);
                  ^ T
  But if it doesn't, case 2 looks promising too:
    6: type Foo = T | (() => bool);
                       ^^^^^^^^^^ function type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   11: foo(() => qux());
                 ^^^^^ return

Error: test16.js:14
 14: bar(() => qux());
         ^^^^^^^^^^^ function. Could not decide which case to select
 13: function bar(x: Bar) { }
                     ^^^ union type
  Case 2 may work:
    8: type Bar = number | (() => string) | (() => bool);
                            ^^^^^^^^^^^^ function type
  But if it doesn't, case 3 looks promising too:
    8: type Bar = number | (() => string) | (() => bool);
                                             ^^^^^^^^^^ function type
  Please provide additional annotation(s) to determine whether case 2 works (or consider merging it with case 3):
   14: bar(() => qux());
                 ^^^^^ return

Error: test17.js:7
  7: ([].concat([0,1])[1]: string)
      ^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
  7: ([].concat([0,1])[1]: string)
                           ^^^^^^ string

Error: test20.js:14
 14: [""].reduce((acc,str) => acc * str.length);
                              ^^^ string. The operand of an arithmetic operation must be a number.

Error: test20.js:14
 14: [""].reduce((acc,str) => acc * str.length);
                                        ^^^^^^ property `length`. Property not found in
 14: [""].reduce((acc,str) => acc * str.length);
                                    ^^^ Number

Error: test21.js:11
 11: ({ type: bar(), x: str() }: T);
      ^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. Could not decide which case to select
 11: ({ type: bar(), x: str() }: T);
                                 ^ union type
  Case 1 may work:
    6:   | { type: "FOO", x: number }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  But if it doesn't, case 2 looks promising too:
    7:   | { type: "BAR", x: string }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   11: ({ type: bar(), x: str() }: T);
                ^^^^^ function call
   11: ({ type: bar(), x: str() }: T);
                          ^^^^^ function call

Error: test22.js:20
 20:   else return x.result;
                   ^^^^^^^^ property `result`. Property cannot be accessed on any member of intersection type
 20:   else return x.result;
                   ^ intersection
  Member 1:
                    v
   12: type Error = {
   13:   type: 'ERROR';
   14: } & Empty;
       ^ object type
  Error:
   20:   else return x.result;
                       ^^^^^^ property `result`. Property not found in
                    v
   12: type Error = {
   13:   type: 'ERROR';
   14: } & Empty;
       ^ object type
  Member 2:
   14: } & Empty;
           ^^^^^ Empty
  Error:
   20:   else return x.result;
                       ^^^^^^ property `result`. Property not found in
   14: } & Empty;
           ^^^^^ object type

Error: test26.js:20
 20: new Record().set('foo', "42");
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`. Function cannot be called on any member of intersection type
 20: new Record().set('foo', "42");
     ^^^^^^^^^^^^^^^^ intersection
  Member 1:
   16:   set(x: 'foo', y: number): void;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
  Error:
   20: new Record().set('foo', "42");
                               ^^^^ string. This type is incompatible with the expected param type of
   16:   set(x: 'foo', y: number): void;
                          ^^^^^^ number
  Member 2:
   17:   set(x: 'bar', y: string): void;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type
  Error:
   20: new Record().set('foo', "42");
                        ^^^^^ string. Expected string literal `bar`, got `foo` instead
   17:   set(x: 'bar', y: string): void;
                ^^^^^ string literal `bar`

Error: test33.js:7
  7: foo(bar); // error: ambiguous speculation
         ^^^ function. Could not decide which case to select
  5: function foo(cb: (() => string) | (() => number)) {}
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
    5: function foo(cb: (() => string) | (() => number)) {}
                         ^^^^^^^^^^^^ function type
  But if it doesn't, case 2 looks promising too:
    5: function foo(cb: (() => string) | (() => number)) {}
                                          ^^^^^^^^^^^^ function type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
    6: function bar() { return 0 }
                     ^ return

Error: test33.js:8
  8: (bar(): string); // error: number ~> string
      ^^^^^ number. This type is incompatible with
  8: (bar(): string); // error: number ~> string
             ^^^^^^ string

Error: test5.js:14
 14: fun(a1);
         ^^ function. Could not decide which case to select
 11: function fun(a: ((x: number) => number) | ((x: string) => string)) { }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   11: function fun(a: ((x: number) => number) | ((x: string) => string)) { }
                        ^^^^^^^^^^^^^^^^^^^^^ function type
  But if it doesn't, case 2 looks promising too:
   11: function fun(a: ((x: number) => number) | ((x: string) => string)) { }
                                                  ^^^^^^^^^^^^^^^^^^^^^ function type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   13: function a1(x) { return x; }
                     ^ return
   13: function a1(x) { return x; }
                   ^ parameter `x`

Error: test5.js:25
 25: arr(a2);
         ^^ empty array literal. Could not decide which case to select
 22: function arr(a: number[] | string[]) { }
                     ^^^^^^^^^^^^^^^^^^^ union type
  Case 1 may work:
   22: function arr(a: number[] | string[]) { }
                       ^^^^^^^^ array type
  But if it doesn't, case 2 looks promising too:
   22: function arr(a: number[] | string[]) { }
                                  ^^^^^^^^ array type
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
   24: var a2 = [];
                ^^ unknown element type of empty array

Error: test9.js:12
 12:   return x * x;
              ^ null. The operand of an arithmetic operation must be a number.

Error: test9.js:12
 12:   return x * x;
                  ^ null. The operand of an arithmetic operation must be a number.


Found 25 errors
