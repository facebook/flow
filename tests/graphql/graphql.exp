arguments-of-correct-type.js:58
 58:       idArgField(idArg: 1) # ID is a string
                             ^ This value expected to be of type `ID`

arguments-of-correct-type.js:98
 98:       stringArgField(stringArg: 1) # error
                                     ^ This value expected to be of type `String`

arguments-of-correct-type.js:107
107:       stringArgField(stringArg: 1.0) # error
                                     ^^^ This value expected to be of type `String`

arguments-of-correct-type.js:116
116:          stringArgField(stringArg: true) # error
                                        ^^^^ This value expected to be of type `String`

arguments-of-correct-type.js:125
125:       stringArgField(stringArg: BAR) # error
                                     ^^^ This value expected to be of type `String`

arguments-of-correct-type.js:138
138:       intArgField(intArg: "3") # error
                               ^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:147
147:       intArgField(intArg: 829384293849283498239482938) # error
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ This is not a valid int32 value

arguments-of-correct-type.js:156
156:       intArgField(intArg: FOO) # error
                               ^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:165
165:       intArgField(intArg: 3.0) # error
                               ^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:174
174:       intArgField(intArg: 3.333) # error
                               ^^^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:187
187:       floatArgField(floatArg: "3.333") # error
                                   ^^^^^^^ This value expected to be of type `Float`

arguments-of-correct-type.js:196
196:       floatArgField(floatArg: true) # error
                                   ^^^^ This value expected to be of type `Float`

arguments-of-correct-type.js:205
205:       floatArgField(floatArg: FOO) # error
                                   ^^^ This value expected to be of type `Float`

arguments-of-correct-type.js:219
219:       booleanArgField(booleanArg: 2) # error
                                       ^ This value expected to be of type `Boolean`

arguments-of-correct-type.js:228
228:       booleanArgField(booleanArg: 1.0) # error
                                       ^^^ This value expected to be of type `Boolean`

arguments-of-correct-type.js:237
237:       booleanArgField(booleanArg: "true") # error
                                       ^^^^^^ This value expected to be of type `Boolean`

arguments-of-correct-type.js:246
246:       booleanArgField(booleanArg: TRUE) # error
                                       ^^^^ This value expected to be of type `Boolean`

arguments-of-correct-type.js:260
260:       idArgField(idArg: 1.0) # error
                             ^^^ This value expected to be of type `ID`

arguments-of-correct-type.js:269
269:       idArgField(idArg: true) # error
                             ^^^^ This value expected to be of type `ID`

arguments-of-correct-type.js:278
278:       idArgField(idArg: SOMETHING) # error
                             ^^^^^^^^^ This value expected to be of type `ID`

arguments-of-correct-type.js:292
292:       doesKnowCommand(dogCommand: 2) # error
                                       ^ This value expected to be of type `DogCommand`

arguments-of-correct-type.js:301
301:       doesKnowCommand(dogCommand: 1.0) # error
                                       ^^^ This value expected to be of type `DogCommand`

arguments-of-correct-type.js:310
310:       doesKnowCommand(dogCommand: "SIT") # error
                                       ^^^^^ This value expected to be of type `DogCommand`

arguments-of-correct-type.js:319
319:       doesKnowCommand(dogCommand: true) # error
                                       ^^^^ This value expected to be of type `DogCommand`

arguments-of-correct-type.js:328
328:       doesKnowCommand(dogCommand: JUGGLE) # error
                                       ^^^^^^ This value expected to be of enum type `DogCommand`

arguments-of-correct-type.js:337
337:       doesKnowCommand(dogCommand: sit) # error
                                       ^^^ This value expected to be of enum type `DogCommand`

arguments-of-correct-type.js:391
391:       stringListArgField(stringListArg: ["one", 2]) # expected String, found Int
                                                     ^ This value expected to be of type `String`

arguments-of-correct-type.js:400
400:       stringListArgField(stringListArg: 1) # expected String, found Int
                                             ^ This value expected to be of type `String`

arguments-of-correct-type.js:510
510:       multipleReqs(req2: "two", req1: "one")
                              ^^^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:510
510:       multipleReqs(req2: "two", req1: "one")
                                           ^^^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:519
519:       multipleReqs(req1: "one") # missing 'req2', bad value for 'req1'
           ^^^^^^^^^^^^ Missings required argument `req2`

arguments-of-correct-type.js:519
519:       multipleReqs(req1: "one") # missing 'req2', bad value for 'req1'
                              ^^^^^ This value expected to be of type `Int`

arguments-of-correct-type.js:528
528:       multipleReqs(req1: null) # missing 'req2', bad value for 'req1'
           ^^^^^^^^^^^^ Missings required argument `req2`

arguments-of-correct-type.js:528
528:       multipleReqs(req1: null) # missing 'req2', bad value for 'req1'
                              ^^^^ can't be null

arguments-of-correct-type.js:613
613:       complexArgField(complexArg: { intField: 4 }) # expected Bool, found null
                                       ^^^^^^^^^^^^^^^ Missing required field `requiredField` in object of type `ComplexInput`

arguments-of-correct-type.js:623
623:         stringListField: ["one", 2], # expected string, found '2'
                                      ^ This value expected to be of type `String`

arguments-of-correct-type.js:636
636:         unknownField: "value" # unknown field
             ^^^^^^^^^^^^ Field `unknownField` is not found in `ComplexInput`

fields-on-correct-type.js:43
 43:   fragment unknownSelection on UnknownType { # only error for unknown type
                                    ^^^^^^^^^^^ Type `UnknownType` not found in schema

fields-on-correct-type.js:51
 51:     unknown_pet_field { # field not defined
         ^^^^^^^^^^^^^^^^^ Field not found in type `Pet`

fields-on-correct-type.js:53
 53:         unknown_cat_field # field not defined
             ^^^^^^^^^^^^^^^^^ Field not found in type `Cat`

fields-on-correct-type.js:62
 62:     meowVolume # field not defined
         ^^^^^^^^^^ Field not found in type `Dog`

fields-on-correct-type.js:69
 69:     unknown_field { # error only here
         ^^^^^^^^^^^^^ Field not found in type `Dog`

fields-on-correct-type.js:79
 79:       unknown_field # field not defined
           ^^^^^^^^^^^^^ Field not found in type `Pet`

fields-on-correct-type.js:88
 88:       meowVolume # field not defined
           ^^^^^^^^^^ Field not found in type `Dog`

fields-on-correct-type.js:96
 96:     volume : mooVolume # field not defined
                  ^^^^^^^^^ Field not found in type `Dog`

fields-on-correct-type.js:103
103:     barkVolume : kawVolume # field not defined
                      ^^^^^^^^^ Field not found in type `Dog`

fields-on-correct-type.js:110
110:     tailLength # field not defined
         ^^^^^^^^^^ Field not found in type `Pet`

fields-on-correct-type.js:117
117:     nickname # field not defined
         ^^^^^^^^ Field not found in type `Pet`

fields-on-correct-type.js:131
131:     directField # direct selection on union
         ^^^^^^^^^^^ Selection on union `CatOrDog` can only contain fragment spreads

fields-on-correct-type.js:138
138:     name # direct selection on union
         ^^^^ Selection on union `CatOrDog` can only contain fragment spreads

fragments-on-composite-types.js:44
 44:   fragment scalarFragment on Boolean { # error
                                  ^^^^^^^ Fragment cannot condition on non composite type `Boolean`

fragments-on-composite-types.js:51
 51:   fragment scalarFragment on FurColor { # error
                                  ^^^^^^^^ Fragment cannot condition on non composite type `FurColor`

fragments-on-composite-types.js:58
 58:   fragment inputFragment on ComplexInput { # error
                                 ^^^^^^^^^^^^ Fragment cannot condition on non composite type `ComplexInput`

fragments-on-composite-types.js:66
 66:     ... on String {
                ^^^^^^ Fragment cannot condition on non composite type `String`

known-argument-names.js:20
 20:     unknownField(unknownArg: SIT) # unknown field
         ^^^^^^^^^^^^ Field not found in type `Dog`

known-argument-names.js:71
 71:     doesKnowCommand(unknown: true) # error
                         ^^^^^^^ Field does not have argument `unknown`

known-argument-names.js:78
 78:     doesKnowCommand(whoknows: 1, dogCommand: SIT, unknown: true) # 2 errors
                         ^^^^^^^^ Field does not have argument `whoknows`

known-argument-names.js:78
 78:     doesKnowCommand(whoknows: 1, dogCommand: SIT, unknown: true) # 2 errors
                                                       ^^^^^^^ Field does not have argument `unknown`

known-argument-names.js:86
 86:       doesKnowCommand(unknown: true) # error
                           ^^^^^^^ Field does not have argument `unknown`

known-argument-names.js:91
 91:           doesKnowCommand(unknown: true) # error
                               ^^^^^^^ Field does not have argument `unknown`

known-type-names.js:17
 17:   query Foo($var: JumbledUpLetters) { # error
                       ^^^^^^^^^^^^^^^^ Type `JumbledUpLetters` not found in schema

known-type-names.js:20
 20:       pets { ... on Badger { name }, ...PetFields } # error
                         ^^^^^^ Type `Badger` not found in schema

known-type-names.js:23
 23:   fragment PetFields on Peettt { # error
                             ^^^^^^ Type `Peettt` not found in schema

possible-fragment-spreads.js:76
 76:     ... on Dog { barkVolume } # error
         ^^^^^^^^^^^^^^^^^^^^^^^^^ inline fragment. Fragment cannot be spread here as objects of type `Cat` can never be of type `Dog`

possible-fragment-spreads.js:131
131:     ...on Intelligent { iq } # error
         ^^^^^^^^^^^^^^^^^^^^^^^^ inline fragment. Fragment cannot be spread here as objects of type `Pet` can never be of type `Intelligent`

provided-non-null-arguments.js:106
106:       multipleReqs(req2: 2) # missing 'req1'
           ^^^^^^^^^^^^ Missings required argument `req1`

provided-non-null-arguments.js:115
115:       multipleReqs # missing 'req1' and 'req2'
           ^^^^^^^^^^^^ Missings required argument `req1`

provided-non-null-arguments.js:115
115:       multipleReqs # missing 'req1' and 'req2'
           ^^^^^^^^^^^^ Missings required argument `req2`

provided-non-null-arguments.js:124
124:       multipleReqs(req1: "one") # missing 'req2', bad value for 'req1'
           ^^^^^^^^^^^^ Missings required argument `req2`

provided-non-null-arguments.js:124
124:       multipleReqs(req1: "one") # missing 'req2', bad value for 'req1'
                              ^^^^^ This value expected to be of type `Int`

scalar-leafs.js:13
 13:     human # error
         ^^^^^ Field of object type `Human` requires selection

scalar-leafs.js:23
 23:     human { pets } # error
                 ^^^^ Field of object type `Pet` requires selection

scalar-leafs.js:37
 37:     barks { sinceWhen } # error
               ^^^^^^^^^^^^^ Cannot select on non-object type `Boolean`

scalar-leafs.js:44
 44:     furColor { inHexdec } # error
                  ^^^^^^^^^^^^ Cannot select on non-object type `FurColor`

scalar-leafs.js:51
 51:     doesKnowCommand(dogCommand: SIT) { sinceWhen } # error
                                          ^^^^^^^^^^^^^ Cannot select on non-object type `Boolean`

scalar-leafs.js:58
 58:     name @include(if: true) { isAlsoHumanName } # error
                                 ^^^^^^^^^^^^^^^^^^^ Cannot select on non-object type `String`

scalar-leafs.js:65
 65:     doesKnowCommand(dogCommand: SIT) @include(if: true) { sinceWhen } # error
                                                             ^^^^^^^^^^^^^ Cannot select on non-object type `Boolean`

unique-variable-names.js:11
 11:   query A($x: Int, $x: Int, $x: String) { __typename } # 2 errors
                        ^^ There can be only one variable named `x`

unique-variable-names.js:11
 11:   query A($x: Int, $x: Int, $x: String) { __typename } # 2 errors
                                 ^^ There can be only one variable named `x`

unique-variable-names.js:12
 12:   query B($x: String, $x: Int) { __typename } # error
                           ^^ There can be only one variable named `x`

unique-variable-names.js:13
 13:   query C($x: Int, $x: Int) { __typename } # error
                        ^^ There can be only one variable named `x`

variables-are-input-types.js:12
 12:   query Foo($a: Dog, $b: [[CatOrDog!]]!, $c: Pet) { # 3 errors
                     ^^^ Type `Dog` is not a correct input type

variables-are-input-types.js:12
 12:   query Foo($a: Dog, $b: [[CatOrDog!]]!, $c: Pet) { # 3 errors
                                ^^^^^^^^ Type `CatOrDog` is not a correct input type

variables-are-input-types.js:12
 12:   query Foo($a: Dog, $b: [[CatOrDog!]]!, $c: Pet) { # 3 errors
                                                  ^^^ Type `Pet` is not a correct input type


Found 84 errors
