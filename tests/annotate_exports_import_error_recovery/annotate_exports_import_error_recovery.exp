
=== Codemod annotate-exports ===

>>> ./main.js
// @flow

import type {OK} from "./lib.js";import { foo, bar } from './lib';

import { props } from './props';

const f = foo();
const g: {ok: OK,...} = bar();

module.exports = {
  f,
  g,
 };

>>> Launching report...

Stats:
  Files changed:                            1
  Number of annotations added:              1
  Total size of annotations:                2
  Number of sig. ver. errors:               3
  Number of annotations required:           3
  Number of annotations skipped:            0

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         0
  Import Error:
    Loc source none:                        0
    Parsing heaps get ast error:            0
    Indeterminate module type:              0
    No matching export:                     2
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            0
  Empty SomeKnownUpper:                     0


=== Autofix exports ===

>>> ./lib.js
// @flow

import { props } from './props';

export class OK {}

export function foo(): {ok: OK, props: Props,...} {
  return {
    ok: new OK,
    props: props(),
  };
}

declare export function bar(): { ok: OK };

>>> ./main.js
// @flow

import type {OK} from "./lib.js";import { foo, bar } from './lib';

import { props } from './props';

const f: {ok: OK, props: Props,...} = foo();
const g: {ok: OK,...} = bar();

module.exports = {
  f,
  g,
 };


=== Diff between codemod-ed & autofix-ed ===
>>> ./lib.js
7c7
< export function foo() {
---
> export function foo(): {ok: OK, props: Props,...} {

>>> ./main.js
7c7
< const f = foo();
---
> const f: {ok: OK, props: Props,...} = foo();

