
=== Codemod annotate-exports ===

>>> ./test.js
// @flow

declare var objProto: typeof Object.__proto__;
declare var funProto: typeof Function.__proto__;
declare var funProtoApply: typeof Function.prototype.apply;
declare var funProtoBind: typeof Function.prototype.bind;
declare var funProtoCall: typeof Function.prototype.call;


export function foo(): {
  funProto: typeof Object.prototype,
  funProtoApply: <T, R, A: $ArrayLike<mixed> = $ReadOnly<[]>>(
    thisArg: T,
    args?: A
  ) => R,
  funProtoBind: typeof Function.prototype.bind,
  funProtoCall: <T, R, A: $ArrayLike<mixed> = $ReadOnly<[]>>(
    thisArg: T,
    ...args: A
  ) => R,
  objProto: typeof Object.prototype,
} {
    return {
        objProto,
        funProto,
        funProtoApply,
        funProtoBind,
        funProtoCall,
    }
}

>>> Launching report...

Stats:
  Files changed:                            1
  Number of annotations added:              1
  Total size of annotations:               22
  Number of sig. ver. errors:               1
  Number of annotations required:           1
  Number of annotations skipped:            0

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         0
  Import Error:
    Loc source none:                        0
    Indeterminate module type:              0
    No matching export:                     0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            0
  Empty SomeKnownUpper:                     0


=== Autofix exports ===

>>> ./test.js
// @flow

declare var objProto: typeof Object.__proto__;
declare var funProto: typeof Function.__proto__;
declare var funProtoApply: typeof Function.prototype.apply;
declare var funProtoBind: typeof Function.prototype.bind;
declare var funProtoCall: typeof Function.prototype.call;


export function foo(): {
  funProto: typeof Object.prototype,
  funProtoApply: <T, R, A: $ArrayLike<mixed> = $ReadOnly<[]>>(
    thisArg: T,
    args?: A
  ) => R,
  funProtoBind: typeof Function.prototype.bind,
  funProtoCall: <T, R, A: $ArrayLike<mixed> = $ReadOnly<[]>>(
    thisArg: T,
    ...args: A
  ) => R,
  objProto: typeof Object.prototype,
  ...
} {
    return {
        objProto,
        funProto,
        funProtoApply,
        funProtoBind,
        funProtoCall,
    }
}


=== Diff between codemod-ed & autofix-ed ===
>>> ./test.js
21a22
>   ...

