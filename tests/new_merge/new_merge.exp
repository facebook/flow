Error ------------------------------------------------------------------------------------------------------ main.js:6:2

Cannot cast empty string to `T1` because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:6:2
   6| ("": T1); // error string ~> nunber
       ^^ [1]

References:
   main.js:6:6
   6| ("": T1); // error string ~> nunber
           ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:13:2

Cannot cast `x3` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:13:2
   13| (x3: empty); // error number ~> empty
        ^^

References:
   lookup.js:8:23
    8| declare export var x: typeof d.f;
                             ^^^^^^^^^^ [1]
   main.js:13:6
   13| (x3: empty); // error number ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:22:2

Cannot cast `x4` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:22:2
   22| (x4: empty); // error number ~> empty
        ^^

References:
   get_prop_instantiation.js:8:23
    8| declare export var x: typeof d.f;
                             ^^^^^^^^^^ [1]
   main.js:22:6
   22| (x4: empty); // error number ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:26:2

Cannot cast `x5` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:26:2
   26| (x5: empty); // error number ~> empty
        ^^

References:
   get_prop_class.js:4:13
    4|   static s: number;
                   ^^^^^^ [1]
   main.js:26:6
   26| (x5: empty); // error number ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:27:2

Cannot cast `y5` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:27:2
   27| (y5: empty); // error function type ~> empty
        ^^

References:
   get_prop_class.js:10:3
   10|   static m(): void {}
         ^^^^^^^^^^^^^^^^^^^ [1]
   main.js:27:6
   27| (y5: empty); // error function type ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:30:2

Cannot cast `1` to `T6` because number [1] is incompatible with `C` [2]. [incompatible-cast]

   main.js:30:2
   30| (1: T6); // error number ~> class
        ^ [1]

References:
   main.js:30:5
   30| (1: T6); // error number ~> class
           ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:32:2

Cannot cast `x6` to empty because `C` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:32:2
   32| (x6: empty); // error C ~> empty
        ^^

References:
   main.js:31:17
   31| declare var x6: T6;
                       ^^ [1]
   main.js:32:6
   32| (x6: empty); // error C ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:35:2

Cannot cast `(new Foo8).x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:35:2
   35| ((new Foo8).x: number); // error: Qux wins
        ^^^^^^^^^^^^

References:
   mixins.js:5:38
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                            ^^^^^^ [1]
   main.js:35:16
   35| ((new Foo8).x: number); // error: Qux wins
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:36:2

Cannot cast `(new Foo8).y` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:36:2
   36| ((new Foo8).y: string); // error: Bar wins
        ^^^^^^^^^^^^

References:
   mixins.js:5:57
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                                               ^^^^^^ [1]
   main.js:36:16
   36| ((new Foo8).y: string); // error: Bar wins
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:37:2

Cannot cast `(new Foo8).z` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:37:2
   37| ((new Foo8).z: number); // error: Qux wins
        ^^^^^^^^^^^^

References:
   mixins.js:5:38
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                            ^^^^^^ [1]
   main.js:37:16
   37| ((new Foo8).z: number); // error: Qux wins
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:38:2

Cannot cast `C8` to empty because class `C` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:38:2
   38| (C8: empty); // error class ~> empty
        ^^

References:
   mixins.js:26:22
   26| declare export class C mixins O1, O2, Number {}
                            ^ [1]
   main.js:38:6
   38| (C8: empty); // error class ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:41:2

Cannot cast `x9` to empty because module `./export_named_any` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:41:2
   41| (x9: empty); // error module ~> empty
        ^^

References:
   main.js:40:13
   40| import * as x9 from './export_named_any';
                   ^^ [1]
   main.js:41:6
   41| (x9: empty); // error module ~> empty
            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:46:2

Cannot cast `C10` to empty because class `<<anonymous class>>` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:46:2
   46| (C10: empty); // error anonymous class ~> empty
        ^^^

References:
   mk_instance_obj.js:5:16
                      v------
    5| export default class {
    6|   // $FlowExpectedError[value-as-type]
    7|   p: T;
    8| }
       ^ [1]
   main.js:46:7
   46| (C10: empty); // error anonymous class ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:51:1

Cannot use `A.B` [1] with fewer than 1 type argument. [missing-type-arg]

   main.js:51:1
   51| B11.x;
       ^^^

References:
   qualified_typeapp.js:3:8
    3| class B<T> { x: T }
              ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- main.js:54:38

Cannot assign `x14` to `y14` because `B` [1] is incompatible with `A` [2] in array element. [incompatible-type]

   main.js:54:38
   54| const y14: Array<A14 /* tvar 2 */> = x14; // unify 1(B) = 2(A), update 1 goto 2, expected error
                                            ^^^

References:
   unification.js:6:29
    6| declare export var x: Array<B/* tvar 1 */>;
                                   ^ [1]
   main.js:54:18
   54| const y14: Array<A14 /* tvar 2 */> = x14; // unify 1(B) = 2(A), update 1 goto 2, expected error
                        ^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:58:2

Cannot cast `f15()` to empty because `Promise` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:58:2
     58| (f15(): empty);
          ^^^^^

References:
   <BUILTINS>/core.js:1809:15
   1809| declare class Promise<+R> {
                       ^^^^^^^ [1]
   main.js:58:9
     58| (f15(): empty);
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:60:18

Cannot resolve name `T16`. [cannot-resolve-name]

   60| declare var t16: T16;
                        ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:61:5

Cannot resolve name `S16`. [cannot-resolve-name]

   61| (1: S16); // error number ~> string
           ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:64:2

Cannot resolve name `C16`. [cannot-resolve-name]

   64| (C16: empty); // error class ~> empty
        ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:65:2

Cannot resolve name `arr16`. [cannot-resolve-name]

   65| (arr16: $ReadOnlyArray<empty>); // okay - inferred as any
        ^^^^^


Error ---------------------------------------------------------------------------------------------------- main.js:67:18

Cannot resolve name `D16`. [cannot-resolve-name]

   67| declare var d16: D16;
                        ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:73:2

Cannot cast `E17` to empty because enum `E` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:73:2
   73| (E17: empty); // error enum ~> empty
        ^^^

References:
   enums.js:3:13
    3| export enum E {
                   ^ [1]
   main.js:73:7
   73| (E17: empty); // error enum ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:75:6

Cannot access `C` because `C` is not a member of enum `E` [1]. [invalid-enum-access]

   main.js:75:6
   75| (E17.C: empty); // error - not a member
            ^

References:
   enums.js:3:13
    3| export enum E {
                   ^ [1]


Error ----------------------------------------------------------------------------------------------------- main.js:78:2

Cannot cast `x18` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:78:2
   78| (x18: empty); // error number, string ~> empty
        ^^^

References:
   eval_readonly.js:3:22
    3| export type U = { f: number } | { f: string };
                            ^^^^^^ [1]
   main.js:78:7
   78| (x18: empty); // error number, string ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:78:2

Cannot cast `x18` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:78:2
   78| (x18: empty); // error number, string ~> empty
        ^^^

References:
   eval_readonly.js:3:38
    3| export type U = { f: number } | { f: string };
                                            ^^^^^^ [1]
   main.js:78:7
   78| (x18: empty); // error number, string ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:79:2

Cannot cast `y18` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:79:2
   79| (y18: empty); // error number ~> empty
        ^^^

References:
   eval_readonly.js:14:24
   14| const s = { ...roe, f: 1 };
                              ^ [1]
   main.js:79:7
   79| (y18: empty); // error number ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:80:2

Cannot cast `z18` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:80:2
   80| (z18: empty); // error string ~> empty
        ^^^

References:
   eval_readonly.js:9:15
    9| type O = { f: string };
                     ^^^^^^ [1]
   main.js:80:7
   80| (z18: empty); // error string ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:85:2

Cannot cast `y19` to object type because undefined [1] is incompatible with number [2] in property `a`.
[incompatible-cast]

   main.js:85:2
   85| (y19: { a: number }); // error undefined ~> number
        ^^^

References:
   main.js:84:13
   84| (y19: { a?: number }); // okay
                   ^^^^^^ [1]
   main.js:85:12
   85| (y19: { a: number }); // error undefined ~> number
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:89:2

Cannot cast `C20` to empty because `C` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:89:2
   89| (C20: empty); // error C ~> empty
        ^^^

References:
   existential.js:5:24
    5| declare export default C;
                              ^ [1]
   main.js:89:7
   89| (C20: empty); // error C ~> empty
             ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:110:2

Cannot cast `p1_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:110:2
   110| (p1_f_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:6:23
     6| type P1 = { ...O1, f: string };
                              ^^^^^^ [1]
   main.js:110:11
   110| (p1_f_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:111:2

Cannot cast `p2_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:111:2
   111| (p2_f_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:7:23
     7| type P2 = { ...O2, f: string };
                              ^^^^^^ [1]
   main.js:111:11
   111| (p2_f_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:112:2

Cannot cast `p3_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:112:2
   112| (p3_f_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:9:24
     9| type P3 = {| ...O1, f: string |};
                               ^^^^^^ [1]
   main.js:112:11
   112| (p3_f_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:113:2

Cannot cast `p4_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:113:2
   113| (p4_f_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:10:24
    10| type P4 = {| ...O2, f: string |};
                               ^^^^^^ [1]
   main.js:113:11
   113| (p4_f_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:114:2

Cannot cast `p1_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:114:2
   114| (p1_g_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:3:27
     3| type O1 = { f: number, g: string, ... };
                                  ^^^^^^ [1]
   main.js:114:11
   114| (p1_g_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:115:2

Cannot cast `p2_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:115:2
   115| (p2_g_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:4:28
     4| type O2 = {| f: number, g: string |};
                                   ^^^^^^ [1]
   main.js:115:11
   115| (p2_g_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:116:2

Cannot cast `p3_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:116:2
   116| (p3_g_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:3:27
     3| type O1 = { f: number, g: string, ... };
                                  ^^^^^^ [1]
   main.js:116:11
   116| (p3_g_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:117:2

Cannot cast `p4_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:117:2
   117| (p4_g_22: empty); // error string ~> empty
         ^^^^^^^

References:
   eval_spread.js:4:28
     4| type O2 = {| f: number, g: string |};
                                   ^^^^^^ [1]
   main.js:117:11
   117| (p4_g_22: empty); // error string ~> empty
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:124:2

Cannot cast `p1_22` to object type because inexact `P1` [1] is incompatible with exact object type [2].
[incompatible-exact]

   main.js:124:2
   124| (p1_22: {| f: string, g: string |}); // error incompatible exact
         ^^^^^

References:
   eval_spread.js:12:24
    12| declare export var p1: P1;
                               ^^ [1]
   main.js:124:9
   124| (p1_22: {| f: string, g: string |}); // error incompatible exact
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:125:2

Cannot cast `p2_22` to object type because inexact `P2` [1] is incompatible with exact object type [2].
[incompatible-exact]

   main.js:125:2
   125| (p2_22: {| f: string, g: string |}); // error incompatible exact
         ^^^^^

References:
   eval_spread.js:13:24
    13| declare export var p2: P2;
                               ^^ [1]
   main.js:125:9
   125| (p2_22: {| f: string, g: string |}); // error incompatible exact
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:136:2

Cannot cast `d23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:136:2
   136| (d23: empty); // error string ~> empty
         ^^^

References:
   eval_rest.js:5:24
     5| declare export var d_: typeof d.g;
                               ^^^^^^^^^^ [1]
   main.js:136:7
   136| (d23: empty); // error string ~> empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:137:2

Cannot cast `r1_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:137:2
   137| (r1_23: empty); // error string ~> empty
         ^^^^^

References:
   eval_rest.js:9:25
     9| declare export var r1_: typeof r1.g;
                                ^^^^^^^^^^^ [1]
   main.js:137:9
   137| (r1_23: empty); // error string ~> empty
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:138:2

Cannot cast `r2_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:138:2
   138| (r2_23: empty); // error string and undefined ~> empty
         ^^^^^

References:
   eval_rest.js:13:25
    13| declare export var r2_: typeof r2.g;
                                ^^^^^^^^^^^ [1]
   main.js:138:9
   138| (r2_23: empty); // error string and undefined ~> empty
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:138:2

Cannot cast `r2_23` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:138:2
   138| (r2_23: empty); // error string and undefined ~> empty
         ^^^^^

References:
   eval_rest.js:13:25
    13| declare export var r2_: typeof r2.g;
                                ^^^^^^^^^^^ [1]
   main.js:138:9
   138| (r2_23: empty); // error string and undefined ~> empty
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:139:2

Cannot cast `r3_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:139:2
   139| (r3_23: empty); // error string and undefined ~> empty
         ^^^^^

References:
   eval_rest.js:17:25
    17| declare export var r3_: typeof r3.g;
                                ^^^^^^^^^^^ [1]
   main.js:139:9
   139| (r3_23: empty); // error string and undefined ~> empty
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:139:2

Cannot cast `r3_23` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:139:2
   139| (r3_23: empty); // error string and undefined ~> empty
         ^^^^^

References:
   eval_rest.js:17:25
    17| declare export var r3_: typeof r3.g;
                                ^^^^^^^^^^^ [1]
   main.js:139:9
   139| (r3_23: empty); // error string and undefined ~> empty
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:143:2

Cannot cast `t24` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:143:2
   143| (t24: empty); // error number (length) ~> empty
         ^^^

References:
   main.js:142:18
   142| declare var t24: T24;
                         ^^^ [1]
   main.js:143:7
   143| (t24: empty); // error number (length) ~> empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:146:2

Cannot cast `x25` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:146:2
   146| (x25: empty); // error number ~> empty
         ^^^

References:
   obj_rest.js:3:18
     3| const obj = { f: 1 };
                         ^ [1]
   main.js:146:7
   146| (x25: empty); // error number ~> empty
              ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:164:2

Cannot cast `S26.getState()` to empty because `RecordInstance` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:164:2
   164| (S26.getState(): empty); // error RecordInstance ~> empty
         ^^^^^^^^^^^^^^

References:
   type_of_typeapp.js:11:31
    11| class Store extends BaseStore<State> {}
                                      ^^^^^ [1]
   main.js:164:18
   164| (S26.getState(): empty); // error RecordInstance ~> empty
                         ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:174:2

Cannot cast `C27.Q` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:174:2
   174| (C27.Q: string); // error
         ^^^^^

References:
   recursive.js:8:13
     8|   static Q: typeof (C.P);
                    ^^^^^^^^^^^^ [1]
   main.js:174:9
   174| (C27.Q: string); // error
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:176:2

Cannot cast `x27.q` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:176:2
   176| (x27.q: string); // error
         ^^^^^

References:
   recursive.js:13:6
    13|   q: typeof (x.p);
             ^^^^^^^^^^^^ [1]
   main.js:176:9
   176| (x27.q: string); // error
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:180:2

Cannot cast `t28` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:180:2
   180| (t28: empty); // error number (length) ~> empty
         ^^^

References:
   main.js:179:18
   179| declare var t28: T28;
                         ^^^ [1]
   main.js:180:7
   180| (t28: empty); // error number (length) ~> empty
              ^^^^^ [2]



Found 51 errors
