Error --------------------------------------------------------------------------------------- get_prop_instance.js:12:34

Cannot use computed property on `C` [1] in an export position. Please provide an (alternative) annotation for computed
property [2]. [invalid-exported-annotation]

   get_prop_instance.js:12:34
   12| export const instance_computed = c[s]; // ERROR
                                        ^^^^ [2]

References:
   get_prop_instance.js:3:15
    3| declare class C {
                     ^ [1]


Error -------------------------------------------------------------------------------------------- intersection.js:13:23

Cannot use `c` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   13| declare export var x: c; // error: value-as-type
                             ^


Error ----------------------------------------------------------------------------------------------------- keys.js:15:1

Cannot cast `f` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   keys.js:15:1
   15| f as empty; // error
       ^

References:
   keys.js:13:45
   13| declare var exact_intersection: $Exact<{ f: string, ... } & { g: number, ... }>;
                                                   ^^^^^^ [1]
   keys.js:15:6
   15| f as empty; // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ main.js:6:1

Cannot cast empty string to `T1` because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:6:1
   6| '' as T1; // error string ~> nunber
      ^^ [1]

References:
   main.js:6:7
   6| '' as T1; // error string ~> nunber
            ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:13:1

Cannot cast `x3` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:13:1
   13| x3 as empty; // error number ~> empty
       ^^

References:
   lookup.js:8:23
    8| declare export var x: typeof d.f;
                             ^^^^^^^^^^ [1]
   main.js:13:7
   13| x3 as empty; // error number ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:22:1

Cannot cast `x4` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:22:1
   22| x4 as empty; // error number ~> empty
       ^^

References:
   get_prop_instantiation.js:8:23
    8| declare export var x: typeof d.f;
                             ^^^^^^^^^^ [1]
   main.js:22:7
   22| x4 as empty; // error number ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:26:1

Cannot cast `x5` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:26:1
   26| x5 as empty; // error number ~> empty
       ^^

References:
   get_prop_class.js:4:13
    4|   static s: number;
                   ^^^^^^ [1]
   main.js:26:7
   26| x5 as empty; // error number ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:27:1

Cannot cast `y5` to empty because function [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:27:1
   27| y5 as empty; // error function type ~> empty
       ^^

References:
   get_prop_class.js:10:3
   10|   static m(): void {}
         ^^^^^^^^^^^^^^^^^^^ [1]
   main.js:27:7
   27| y5 as empty; // error function type ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:30:1

Cannot cast `1` to `T6` because number [1] is incompatible with `C` [2]. [incompatible-cast]

   main.js:30:1
   30| 1 as T6; // error number ~> class
       ^ [1]

References:
   main.js:30:6
   30| 1 as T6; // error number ~> class
            ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:32:1

Cannot cast `x6` to empty because `C` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:32:1
   32| x6 as empty; // error C ~> empty
       ^^

References:
   main.js:31:17
   31| declare var x6: T6;
                       ^^ [1]
   main.js:32:7
   32| x6 as empty; // error C ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:35:1

Cannot cast `(new Foo8()).x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:35:1
   35| new Foo8().x as number; // error: Qux wins
       ^^^^^^^^^^^^

References:
   mixins.js:5:38
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                            ^^^^^^ [1]
   main.js:35:17
   35| new Foo8().x as number; // error: Qux wins
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:36:1

Cannot cast `(new Foo8()).y` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:36:1
   36| new Foo8().y as string; // error: Bar wins
       ^^^^^^^^^^^^

References:
   mixins.js:5:57
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                                               ^^^^^^ [1]
   main.js:36:17
   36| new Foo8().y as string; // error: Bar wins
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:37:1

Cannot cast `(new Foo8()).z` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   main.js:37:1
   37| new Foo8().z as number; // error: Qux wins
       ^^^^^^^^^^^^

References:
   mixins.js:5:38
    5| declare export class Foo extends Qux<string> mixins Bar<number> {
                                            ^^^^^^ [1]
   main.js:37:17
   37| new Foo8().z as number; // error: Qux wins
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:38:1

Cannot cast `C8` to empty because class `C` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:38:1
   38| C8 as empty; // error class ~> empty
       ^^

References:
   mixins.js:26:22
   26| declare export class C mixins O1, O2, Number {}
                            ^ [1]
   main.js:38:7
   38| C8 as empty; // error class ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:41:1

Cannot cast `x9` to empty because module `./export_named_any` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:41:1
   41| x9 as empty; // error module ~> empty
       ^^

References:
   export_named_any.js
   ^^^^^^^^^^^^^^^^^^^ [1]
   main.js:41:7
   41| x9 as empty; // error module ~> empty
             ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:46:1

Cannot cast `C10` to empty because class `<<anonymous class>>` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:46:1
   46| C10 as empty; // error anonymous class ~> empty
       ^^^

References:
   mk_instance_obj.js:5:16
                      v------
    5| export default class {
    6|   // $FlowExpectedError[value-as-type]
    7|   p: T;
    8| }
       ^ [1]
   main.js:46:8
   46| C10 as empty; // error anonymous class ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:51:1

Cannot use `A.B` [1] with fewer than 1 type argument. [missing-type-arg]

   main.js:51:1
   51| B11.x;
       ^^^

References:
   qualified_typeapp.js:3:8
    3| class B<T> { x: T }
              ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- main.js:54:38

Cannot assign `x14` to `y14` because `A` [1] is incompatible with `B` [2] in array element. Arrays are invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-type]

   main.js:54:38
   54| const y14: Array<A14 /* tvar 2 */> = x14; // unify 1(B) = 2(A), update 1 goto 2, expected error
                                            ^^^

References:
   main.js:54:18
   54| const y14: Array<A14 /* tvar 2 */> = x14; // unify 1(B) = 2(A), update 1 goto 2, expected error
                        ^^^ [1]
   unification.js:6:29
    6| declare export var x: Array<B/* tvar 1 */>;
                                   ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:58:1

Cannot cast `f15()` to empty because `Promise` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:58:1
     58| f15() as empty;
         ^^^^^

References:
   <BUILTINS>/core.js:1984:15
   1984| declare class Promise<+R = mixed> {
                       ^^^^^^^ [1]
   main.js:58:10
     58| f15() as empty;
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:60:18

Cannot resolve name `T16`. [cannot-resolve-name]

   60| declare var t16: T16;
                        ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:61:6

Cannot resolve name `S16`. [cannot-resolve-name]

   61| 1 as S16; // error number ~> string
            ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:64:1

Cannot resolve name `C16`. [cannot-resolve-name]

   64| C16 as empty; // error class ~> empty
       ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:65:1

Cannot resolve name `arr16`. [cannot-resolve-name]

   65| arr16 as $ReadOnlyArray<empty>; // okay - inferred as any
       ^^^^^


Error ---------------------------------------------------------------------------------------------------- main.js:67:18

Cannot resolve name `D16`. [cannot-resolve-name]

   67| declare var d16: D16;
                        ^^^


Error ----------------------------------------------------------------------------------------------------- main.js:73:1

Cannot cast `E17` to empty because enum `E` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:73:1
   73| E17 as empty; // error enum ~> empty
       ^^^

References:
   enums.js:3:13
    3| export enum E {
                   ^ [1]
   main.js:73:8
   73| E17 as empty; // error enum ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:74:1

Cannot cast `E17.A` to empty because `E` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:74:1
   74| E17.A as empty; // error enum ~> empty
       ^^^^^

References:
   enums.js:3:13
    3| export enum E {
                   ^ [1]
   main.js:74:10
   74| E17.A as empty; // error enum ~> empty
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:75:5

Cannot access `C` because `C` is not a member of enum `E` [1]. [invalid-enum-access]

   main.js:75:5
   75| E17.C as empty; // error - not a member
           ^

References:
   enums.js:3:13
    3| export enum E {
                   ^ [1]


Error ----------------------------------------------------------------------------------------------------- main.js:80:1

Cannot cast `x18` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:80:1
   80| x18 as empty; // error number, string ~> empty
       ^^^

References:
   eval_readonly.js:3:22
    3| export type U = { f: number } | { f: string };
                            ^^^^^^ [1]
   main.js:80:8
   80| x18 as empty; // error number, string ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:80:1

Cannot cast `x18` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:80:1
   80| x18 as empty; // error number, string ~> empty
       ^^^

References:
   eval_readonly.js:3:38
    3| export type U = { f: number } | { f: string };
                                            ^^^^^^ [1]
   main.js:80:8
   80| x18 as empty; // error number, string ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:81:1

Cannot cast `y18` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:81:1
   81| y18 as empty; // error number ~> empty
       ^^^

References:
   eval_readonly.js:14:24
   14| const s = { ...roe, f: 1 };
                              ^ [1]
   main.js:81:8
   81| y18 as empty; // error number ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:82:1

Cannot cast `z18` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:82:1
   82| z18 as empty; // error string ~> empty
       ^^^

References:
   eval_readonly.js:9:15
    9| type O = { f: string };
                     ^^^^^^ [1]
   main.js:82:8
   82| z18 as empty; // error string ~> empty
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:85:1

Cannot cast `baz01` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:85:1
   85| baz01 as empty; // error number ~> empty
       ^^^^^

References:
   eval_indexed_access.js:3:31
    3| type Foo1 = {foo: {bar: {baz: number}}};
                                     ^^^^^^ [1]
   main.js:85:10
   85| baz01 as empty; // error number ~> empty
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:86:1

Cannot cast `baz02` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:86:1
   86| baz02 as empty; // error number ~> empty
       ^^^^^

References:
   eval_indexed_access.js:7:46
    7| type Foo2 = {[string]: {[string]: {[string]: number}}};
                                                    ^^^^^^ [1]
   main.js:86:10
   86| baz02 as empty; // error number ~> empty
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:91:1

Cannot cast `y19` to object type because property `a` is missing in object literal [1] but exists in object type [2].
[prop-missing]

   main.js:91:1
   91| y19 as {a: number}; // error undefined ~> number
       ^^^

References:
   spread.js:10:18
   10| export const y = { ...t };
                        ^^^^^^^^ [1]
   main.js:91:8
   91| y19 as {a: number}; // error undefined ~> number
              ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:113:1

Cannot cast `p1_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:113:1
   113| p1_f_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:6:23
     6| type P1 = { ...O1, f: string };
                              ^^^^^^ [1]
   main.js:113:12
   113| p1_f_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:114:1

Cannot cast `p2_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:114:1
   114| p2_f_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:7:23
     7| type P2 = { ...O2, f: string };
                              ^^^^^^ [1]
   main.js:114:12
   114| p2_f_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:115:1

Cannot cast `p3_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:115:1
   115| p3_f_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:9:24
     9| type P3 = {| ...O1, f: string |};
                               ^^^^^^ [1]
   main.js:115:12
   115| p3_f_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:116:1

Cannot cast `p4_f_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:116:1
   116| p4_f_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:10:24
    10| type P4 = {| ...O2, f: string |};
                               ^^^^^^ [1]
   main.js:116:12
   116| p4_f_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:117:1

Cannot cast `p1_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:117:1
   117| p1_g_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:3:27
     3| type O1 = { f: number, g: string, ... };
                                  ^^^^^^ [1]
   main.js:117:12
   117| p1_g_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:118:1

Cannot cast `p2_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:118:1
   118| p2_g_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:4:28
     4| type O2 = {| f: number, g: string |};
                                   ^^^^^^ [1]
   main.js:118:12
   118| p2_g_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:119:1

Cannot cast `p3_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:119:1
   119| p3_g_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:3:27
     3| type O1 = { f: number, g: string, ... };
                                  ^^^^^^ [1]
   main.js:119:12
   119| p3_g_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:120:1

Cannot cast `p4_g_22` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:120:1
   120| p4_g_22 as empty; // error string ~> empty
        ^^^^^^^

References:
   eval_spread.js:4:28
     4| type O2 = {| f: number, g: string |};
                                   ^^^^^^ [1]
   main.js:120:12
   120| p4_g_22 as empty; // error string ~> empty
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:127:1

Cannot cast `p1_22` to object type because inexact `P1` [1] is incompatible with exact object type [2].
[incompatible-exact]

   main.js:127:1
   127| p1_22 as {|f: string, g: string|}; // error incompatible exact
        ^^^^^

References:
   eval_spread.js:12:24
    12| declare export var p1: P1;
                               ^^ [1]
   main.js:127:10
   127| p1_22 as {|f: string, g: string|}; // error incompatible exact
                 ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:128:1

Cannot cast `p2_22` to object type because inexact `P2` [1] is incompatible with exact object type [2].
[incompatible-exact]

   main.js:128:1
   128| p2_22 as {|f: string, g: string|}; // error incompatible exact
        ^^^^^

References:
   eval_spread.js:13:24
    13| declare export var p2: P2;
                               ^^ [1]
   main.js:128:10
   128| p2_22 as {|f: string, g: string|}; // error incompatible exact
                 ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:134:1

Cannot cast `d23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:134:1
   134| d23 as empty; // error string ~> empty
        ^^^

References:
   eval_rest.js:5:24
     5| declare export var d_: typeof d.g;
                               ^^^^^^^^^^ [1]
   main.js:134:8
   134| d23 as empty; // error string ~> empty
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:135:1

Cannot cast `r1_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:135:1
   135| r1_23 as empty; // error string ~> empty
        ^^^^^

References:
   eval_rest.js:9:25
     9| declare export var r1_: typeof r1.g;
                                ^^^^^^^^^^^ [1]
   main.js:135:10
   135| r1_23 as empty; // error string ~> empty
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:136:1

Cannot cast `r2_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:136:1
   136| r2_23 as empty; // error string and undefined ~> empty
        ^^^^^

References:
   eval_rest.js:13:25
    13| declare export var r2_: typeof r2.g;
                                ^^^^^^^^^^^ [1]
   main.js:136:10
   136| r2_23 as empty; // error string and undefined ~> empty
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:136:1

Cannot cast `r2_23` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:136:1
   136| r2_23 as empty; // error string and undefined ~> empty
        ^^^^^

References:
   eval_rest.js:13:25
    13| declare export var r2_: typeof r2.g;
                                ^^^^^^^^^^^ [1]
   main.js:136:10
   136| r2_23 as empty; // error string and undefined ~> empty
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:137:1

Cannot cast `r3_23` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:137:1
   137| r3_23 as empty; // error string and undefined ~> empty
        ^^^^^

References:
   eval_rest.js:17:25
    17| declare export var r3_: typeof r3.g;
                                ^^^^^^^^^^^ [1]
   main.js:137:10
   137| r3_23 as empty; // error string and undefined ~> empty
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:137:1

Cannot cast `r3_23` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:137:1
   137| r3_23 as empty; // error string and undefined ~> empty
        ^^^^^

References:
   eval_rest.js:17:25
    17| declare export var r3_: typeof r3.g;
                                ^^^^^^^^^^^ [1]
   main.js:137:10
   137| r3_23 as empty; // error string and undefined ~> empty
                 ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:141:1

Cannot cast `t24` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:141:1
   141| t24 as empty; // error number (length) ~> empty
        ^^^

References:
   main.js:140:18
   140| declare var t24: T24;
                         ^^^ [1]
   main.js:141:8
   141| t24 as empty; // error number (length) ~> empty
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:144:1

Cannot cast `x25` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:144:1
   144| x25 as empty; // error number ~> empty
        ^^^

References:
   obj_rest.js:3:18
     3| const obj = { f: 1 };
                         ^ [1]
   main.js:144:8
   144| x25 as empty; // error number ~> empty
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:156:1

Cannot cast `frozenSuitevalues` to `IndirectFrozenSuiteValues` because `FrozenSuiteValues` [1] is incompatible with
`IndirectFrozenSuiteValues` [2]. Type `FrozenSuiteValues` [1] includes members `Extra Suite` that are not included in
type `IndirectFrozenSuiteValues` [2]. [incompatible-cast]

   main.js:156:1
   156| frozenSuitevalues as IndirectFrozenSuiteValues; // error = 'Extra Suite' missing
        ^^^^^^^^^^^^^^^^^

References:
   main.js:155:32
   155| declare var frozenSuitevalues: FrozenSuiteValues;
                                       ^^^^^^^^^^^^^^^^^ [1]
   main.js:156:22
   156| frozenSuitevalues as IndirectFrozenSuiteValues; // error = 'Extra Suite' missing
                             ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:162:1

Cannot cast `S26.getState()` to empty because `RecordInstance` [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:162:1
   162| S26.getState() as empty; // error RecordInstance ~> empty
        ^^^^^^^^^^^^^^

References:
   type_of_typeapp.js:11:31
    11| class Store extends BaseStore<State> {}
                                      ^^^^^ [1]
   main.js:162:19
   162| S26.getState() as empty; // error RecordInstance ~> empty
                          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:168:1

Cannot cast `C27.Q` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:168:1
   168| C27.Q as string; // error
        ^^^^^

References:
   recursive.js:8:13
     8|   static Q: typeof (C.P);
                    ^^^^^^^^^^^^ [1]
   main.js:168:10
   168| C27.Q as string; // error
                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:170:1

Cannot cast `x27.q` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   main.js:170:1
   170| x27.q as string; // error
        ^^^^^

References:
   recursive.js:13:6
    13|   q: typeof (x.p);
             ^^^^^^^^^^^^ [1]
   main.js:170:10
   170| x27.q as string; // error
                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:174:1

Cannot cast `t28` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:174:1
   174| t28 as empty; // error number (length) ~> empty
        ^^^

References:
   main.js:173:18
   173| declare var t28: T28;
                         ^^^ [1]
   main.js:174:8
   174| t28 as empty; // error number (length) ~> empty
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:178:1

Cannot cast `instance_named` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   main.js:178:1
   178| instance_named as empty; // ERROR
        ^^^^^^^^^^^^^^

References:
   get_prop_instance.js:5:6
     5|   s: number;
             ^^^^^^ [1]
   main.js:178:19
   178| instance_named as empty; // ERROR
                          ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- union.js:13:23

Cannot use `c` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   13| declare export var x: c; // error: value-as-type
                             ^



Found 59 errors
