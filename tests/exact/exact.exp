Error ---------------------------------------------------------------------------------------------------- call.js:22:13

Cannot assign object literal to `c1` because property `f` is missing in object type [1] but exists in object
literal [2].

   call.js:22:13
                   v
   22| let c1: C = {
   23|   f: '', // Should cause an error
   24|   d: null,
   25| };
       ^ [2]

References:
   call.js:22:9
   22| let c1: C = {
               ^ [1]


Error ---------------------------------------------------------------------------------------------------- call.js:26:21

Cannot assign object literal to `c2` because property `f` is missing in object type [1] but exists in object
literal [2].

   call.js:26:21
                           v
   26| let c2: $Exact<C> = {
   27|   f: '',
   28|   d: null,
   29| };
       ^ [2]

References:
   call.js:26:16
   26| let c2: $Exact<C> = {
                      ^ [1]


Error ------------------------------------------------------------------------------------------------ callable.js:17:26

Cannot assign `f` to `g` because a callable signature is missing in object type [1] but exists in object type [2].

   callable.js:17:26
   17| var g: {| x: string |} = f; // error: callable signature in f missing in g
                                ^

References:
   callable.js:17:8
   17| var g: {| x: string |} = f; // error: callable signature in f missing in g
              ^^^^^^^^^^^^^^^ [1]
   callable.js:16:16
   16| declare var f: {| (): void, x: string |};
                      ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- error_continues.js:3:3

Cannot cast `any` to object type because:
 - inexact object type [1] is incompatible with exact object type [2].
 - number [3] is incompatible with string [4] in property `p`.

   error_continues.js:3:3
   3| ((any: {p: number}): {|p: string|}); // We should get two errors here!
        ^^^^^^^^^^^^^^^^

References:
   error_continues.js:3:8
   3| ((any: {p: number}): {|p: string|}); // We should get two errors here!
             ^^^^^^^^^^^ [1]
   error_continues.js:3:22
   3| ((any: {p: number}): {|p: string|}); // We should get two errors here!
                           ^^^^^^^^^^^^^ [2]
   error_continues.js:3:12
   3| ((any: {p: number}): {|p: string|}); // We should get two errors here!
                 ^^^^^^ [3]
   error_continues.js:3:27
   3| ((any: {p: number}): {|p: string|}); // We should get two errors here!
                                ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------- exact_basics.js:49:20

Cannot call `takesExactlyPerson` with `subtypeOfPerson` bound to `person` because property `first` is missing in
`ExactPerson` [1] but exists in object literal [2].

   exact_basics.js:49:20
   49| takesExactlyPerson(subtypeOfPerson); // error
                          ^^^^^^^^^^^^^^^

References:
   exact_basics.js:43:45
   43| declare function takesExactlyPerson(person: ExactPerson): void;
                                                   ^^^^^^^^^^^ [1]
   exact_basics.js:41:23
   41| var subtypeOfPerson = { salutation: "Mr", first: "Bob", last: "Dobalina" };
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- exact_basics.js:61:20

Cannot call `takesExactlyPerson` with `returnsSubtypeOfPerson()` bound to `person` because inexact `Person` [1] is
incompatible with exact `ExactPerson` [2].

   exact_basics.js:61:20
   61| takesExactlyPerson(returnsSubtypeOfPerson());  // error
                          ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   exact_basics.js:54:44
   54| declare function returnsSubtypeOfPerson(): Person;
                                                  ^^^^^^ [1]
   exact_basics.js:43:45
   43| declare function takesExactlyPerson(person: ExactPerson): void;
                                                   ^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- exact_basics.js:71:20

Cannot call `takesExactlyPerson` with `returnsExactlyPerson2()` bound to `person` because property `first` is missing in
`ExactPerson` [1] but exists in `ExactPerson2` [2].

   exact_basics.js:71:20
   71| takesExactlyPerson(returnsExactlyPerson2()); // error
                          ^^^^^^^^^^^^^^^^^^^^^^^

References:
   exact_basics.js:43:45
   43| declare function takesExactlyPerson(person: ExactPerson): void;
                                                   ^^^^^^^^^^^ [1]
   exact_basics.js:68:43
   68| declare function returnsExactlyPerson2(): ExactPerson2;
                                                 ^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- exact_basics.js:85:23

Cannot call `takesSubtypeOfPerson2` with `returnsExactlyPerson()` bound to `person2` because property `first` is missing
in `ExactPerson` [1] but exists in `Person2` [2].

   exact_basics.js:85:23
   85| takesSubtypeOfPerson2(returnsExactlyPerson()); // error
                             ^^^^^^^^^^^^^^^^^^^^^^

References:
   exact_basics.js:55:42
   55| declare function returnsExactlyPerson(): ExactPerson;
                                                ^^^^^^^^^^^ [1]
   exact_basics.js:76:49
   76| declare function takesSubtypeOfPerson2(person2: Person2): void;
                                                       ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- exact_basics.js:94:17

Cannot create exact type from `PersonPred` [1].

   exact_basics.js:94:17
   94| takesPersonPred(returnsExactlyPersonPred()); // error
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   exact_basics.js:91:53
   91| declare function returnsExactlyPersonPred(): $Exact<PersonPred>;
                                                           ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- objmap.js:11:32

Cannot assign object literal to `doesError` because number [1] is incompatible with number literal `2` [2] in property
`a`.

   objmap.js:11:32
   11| const doesError: MappedThing = {a: 3};
                                      ^^^^^^

References:
   objmap.js:11:36
   11| const doesError: MappedThing = {a: 3};
                                          ^ [1]
   objmap.js:5:47
    5| type MappedThing = $ObjMap<ExactThing, (1) => 2>;
                                                     ^ [2]


Error -------------------------------------------------------------------------------------------------- objmap.js:14:35

Cannot assign object literal to `shouldntWork` because property `b` is missing in object type [1] but exists in object
literal [2].

   objmap.js:14:35
   14| const shouldntWork: MappedThing = {a: 2, b: 1};
                                         ^^^^^^^^^^^^ [2]

References:
   objmap.js:14:21
   14| const shouldntWork: MappedThing = {a: 2, b: 1};
                           ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- optional.js:3:47

Cannot return `x` because property `p` is missing in object type [1] but exists in object type [2].

   optional.js:3:47
   3| function foo1(x: {||}): {p?: number} { return x; } // error, p must be read-only
                                                    ^

References:
   optional.js:3:18
   3| function foo1(x: {||}): {p?: number} { return x; } // error, p must be read-only
                       ^^^^ [1]
   optional.js:3:25
   3| function foo1(x: {||}): {p?: number} { return x; } // error, p must be read-only
                              ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:5:71

Cannot return `x` because string [1] is incompatible with number [2] in property `p`.

   optional.js:5:71
   5| function foo3(x: {|__proto__: { p: string}|}): {+p?: number} { return x; } // error, type incompatibility
                                                                            ^

References:
   optional.js:5:36
   5| function foo3(x: {|__proto__: { p: string}|}): {+p?: number} { return x; } // error, type incompatibility
                                         ^^^^^^ [1]
   optional.js:5:54
   5| function foo3(x: {|__proto__: { p: string}|}): {+p?: number} { return x; } // error, type incompatibility
                                                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ prop_test.js:12:7

Property `xxx` is missing in `Person` [1].

   prop_test.js:12:7
   12|   if (p.xxx) {     // Error - xxx doesn't exist in the exact type
             ^^^^^

References:
   prop_test.js:11:36
   11| function prop_test_exact(p: $Exact<Person>): string {
                                          ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- prop_test.js:28:10

Cannot get `pc.state` because property `state` is missing in `Person` [1].

   prop_test.js:28:10
   28|   return pc.state;      // error, since (pc: $Exact<Person>).first may be ""
                ^^^^^^^^

References:
   prop_test.js:24:43
   24| function prop_test_exact_union(pc: $Exact<Person> | $Exact<Address>): string {
                                                 ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- unsealed.js:14:3

Cannot call `f` with `o` bound to `o` because:
 - Either property `p` is missing in object literal [1] but exists in object type [2].
 - Or inexact object literal [1] is incompatible with exact object type [3].

   unsealed.js:14:3
   14| f(o); // error: o incompatible with exact type
         ^

References:
   unsealed.js:12:9
   12| var o = {};
               ^^ [1]
   unsealed.js:4:15
    4| function f(o: {p: string} | $Exact<{}>): string {
                     ^^^^^^^^^^^ [2]
   unsealed.js:4:29
    4| function f(o: {p: string} | $Exact<{}>): string {
                                   ^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- unsealed2.js:15:12

Cannot return `x.q` because string [1] is incompatible with number [2].

   unsealed2.js:15:12
   15|     return x.q;
                  ^^^

References:
   unsealed2.js:23:9
   23|   x.q = "not a number";
               ^^^^^^^^^^^^^^ [1]
   unsealed2.js:13:16
   13| function f(_): number {
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- use_ops.js:2:31

Cannot assign `a` to `b` because inexact object type [1] is incompatible with exact object type [2] in property `p`.

   use_ops.js:2:31
   2| var b: { p: {| q: null |} } = a; // error a != b, with nested info for a.p != b.p
                                    ^

References:
   use_ops.js:1:21
   1| declare var a: { p: { q: null } };
                          ^^^^^^^^^^^ [1]
   use_ops.js:2:13
   2| var b: { p: {| q: null |} } = a; // error a != b, with nested info for a.p != b.p
                  ^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- use_ops.js:6:3

Cannot call `f` with `o` bound to `o` because inexact object type [1] is incompatible with exact object type [2].

   use_ops.js:6:3
   6| f(o); // error: inexact arg incompatible with exact param (error should indicate exactness issue)
        ^

References:
   use_ops.js:5:16
   5| declare var o: { p: null };
                     ^^^^^^^^^^^ [1]
   use_ops.js:4:15
   4| function f(o: {| p: null |}) {}
                    ^^^^^^^^^^^^^ [2]



Found 20 errors
