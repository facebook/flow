Error ---------------------------------------------------------------------------------------------------- symbol.js:8:3

Cannot call `Symbol` because no more than 1 argument is expected by function type [1].

   symbol.js:8:3
     8|   Symbol('foo', 'bar'); // Error: unused argument
          ^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:103:3
   103|   static (value?:any): symbol & Symbol;
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- symbol.js:23:6

Cannot cast `x` to boolean because symbol [1] is incompatible with boolean [2].

   symbol.js:23:6
   23|     (x: boolean); // Error
            ^

References:
   symbol.js:20:12
   20|   const x: symbol | boolean = true;
                  ^^^^^^ [1]
   symbol.js:23:9
   23|     (x: boolean); // Error
               ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- symbol.js:26:6

Cannot cast `x` to symbol because boolean [1] is incompatible with symbol [2].

   symbol.js:26:6
   26|     (x: symbol); // Error
            ^

References:
   symbol.js:20:21
   20|   const x: symbol | boolean = true;
                           ^^^^^^^ [1]
   symbol.js:26:9
   26|     (x: symbol); // Error
               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- symbol.js:45:27

Cannot assign `Symbol.toPrimitive` to `y` because `Symbol` [1] is incompatible with `$SymbolMatch` [2].

   symbol.js:45:27
   45|   const y: $SymbolMatch = Symbol.toPrimitive; // Error
                                 ^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:98:50
   98| declare opaque type $SymbolToPrimitive: symbol & Symbol;
                                                        ^^^^^^ [1]
   symbol.js:45:12
   45|   const y: $SymbolMatch = Symbol.toPrimitive; // Error
                  ^^^^^^^^^^^^ [2]



Found 4 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
