Error: api.js:11
 11: na(Children.map(a, (x: string) => (x: string))); // Error
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. This type is incompatible with the expected param type of
 30: function na(x: Array<number>) {}
                    ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     11: na(Children.map(a, (x: string) => (x: string))); // Error
                                               ^^^^^^ string. This type is incompatible with
     30: function na(x: Array<number>) {}
                              ^^^^^^ number

Error: api.js:11
 11: na(Children.map(a, (x: string) => (x: string))); // Error
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
227:       fn: (child: $NonMaybeType<T>, index: number) => U,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:227
  This parameter is incompatible:
    227:       fn: (child: $NonMaybeType<T>, index: number) => U,
                           ^^^^^^^^^^^^^^^^ number. This type is incompatible with. See lib: <BUILTINS>/react.js:227
     11: na(Children.map(a, (x: string) => (x: string))); // Error
                                ^^^^^^ string

Error: api.js:12
 12: sa(Children.map(a, (x: number) => (x: number))); // Error
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. This type is incompatible with the expected param type of
 31: function sa(x: Array<string>) {}
                    ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     12: sa(Children.map(a, (x: number) => (x: number))); // Error
                                               ^^^^^^ number. This type is incompatible with
     31: function sa(x: Array<string>) {}
                              ^^^^^^ string

Error: api.js:14
 14: Children.forEach(a, (x: number) => {}); // Error
                         ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
232:       fn: (child: T, index: number) => mixed,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:232
  This parameter is incompatible:
      5: const a: ChildrenArray<?number> = [
                                ^^^^^^^ null. This type is incompatible with
     14: Children.forEach(a, (x: number) => {}); // Error
                                 ^^^^^^ number

Error: api.js:14
 14: Children.forEach(a, (x: number) => {}); // Error
                         ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
232:       fn: (child: T, index: number) => mixed,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:232
  This parameter is incompatible:
      5: const a: ChildrenArray<?number> = [
                                ^^^^^^^ undefined. This type is incompatible with
     14: Children.forEach(a, (x: number) => {}); // Error
                                 ^^^^^^ number

Error: api.js:16
 16: Children.forEach(a, (x: string) => {}); // Error
                         ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
232:       fn: (child: T, index: number) => mixed,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:232
  This parameter is incompatible:
      5: const a: ChildrenArray<?number> = [
                                ^^^^^^^ null. This type is incompatible with
     16: Children.forEach(a, (x: string) => {}); // Error
                                 ^^^^^^ string

Error: api.js:16
 16: Children.forEach(a, (x: string) => {}); // Error
                         ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
232:       fn: (child: T, index: number) => mixed,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:232
  This parameter is incompatible:
      5: const a: ChildrenArray<?number> = [
                                ^^^^^^^ undefined. This type is incompatible with
     16: Children.forEach(a, (x: string) => {}); // Error
                                 ^^^^^^ string

Error: api.js:16
 16: Children.forEach(a, (x: string) => {}); // Error
                         ^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
232:       fn: (child: T, index: number) => mixed,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/react.js:232
  This parameter is incompatible:
      5: const a: ChildrenArray<?number> = [
                                 ^^^^^^ number. This type is incompatible with
     16: Children.forEach(a, (x: string) => {}); // Error
                                 ^^^^^^ string

Error: api.js:19
 19: s(Children.count(a)); // Error
       ^^^^^^^^^^^^^^^^^ number. This type is incompatible with the expected param type of
 29: function s(x: string) {}
                   ^^^^^^ string

Error: api.js:22
 22: s(Children.only(a)); // Error
       ^^^^^^^^^^^^^^^^ number. This type is incompatible with the expected param type of
 29: function s(x: string) {}
                   ^^^^^^ string

Error: api.js:25
 25: sa(Children.toArray(a)); // Error
        ^^^^^^^^^^^^^^^^^^^ array type. This type is incompatible with the expected param type of
 31: function sa(x: Array<string>) {}
                    ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
      5: const a: ChildrenArray<?number> = [
                                 ^^^^^^ number. This type is incompatible with
     31: function sa(x: Array<string>) {}
                              ^^^^^^ string

Error: builtin_intrinsic.js:24
 24: <builtin>
     ^^^^^^^^^ React element `builtin`. This type is incompatible with
                v
175:     props: {
176:       children?: React$Node,
177:       [key: string]: any,
178:     },
         ^ object type. See lib: <BUILTINS>/react-dom.js:175
  Property `children` is incompatible:
     25:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    176:       children?: React$Node,
                          ^^^^^^^^^^ union: undefined | null | boolean | number | string | type application of React$Element | React$Portal | type application of identifier `Iterable`. See lib: <BUILTINS>/react-dom.js:176
      Member 1:
       15:   | void
               ^^^^ undefined. See lib: <BUILTINS>/react.js:15
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       15:   | void
               ^^^^ undefined. See lib: <BUILTINS>/react.js:15
      Member 2:
       16:   | null
               ^^^^ null. See lib: <BUILTINS>/react.js:16
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       16:   | null
               ^^^^ null. See lib: <BUILTINS>/react.js:16
      Member 3:
       17:   | boolean
               ^^^^^^^ boolean. See lib: <BUILTINS>/react.js:17
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       17:   | boolean
               ^^^^^^^ boolean. See lib: <BUILTINS>/react.js:17
      Member 4:
       18:   | number
               ^^^^^^ number. See lib: <BUILTINS>/react.js:18
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | number
               ^^^^^^ number. See lib: <BUILTINS>/react.js:18
      Member 5:
       19:   | string
               ^^^^^^ string. See lib: <BUILTINS>/react.js:19
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | string
               ^^^^^^ string. See lib: <BUILTINS>/react.js:19
      Member 6:
       20:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of React$Element. See lib: <BUILTINS>/react.js:20
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
       20:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/react.js:20
      Member 7:
       21:   | React$Portal
               ^^^^^^^^^^^^ React$Portal. See lib: <BUILTINS>/react.js:21
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       21:   | React$Portal
               ^^^^^^^^^^^^ React$Portal. See lib: <BUILTINS>/react.js:21
      Member 8:
       22:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ type application of identifier `Iterable`. See lib: <BUILTINS>/react.js:22
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       22:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:22
        Property `@@iterator` is incompatible:
           22:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of $Iterable. Property not found in. See lib: <BUILTINS>/react.js:22
           25:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error: component.js:15
 15: <MyComponent />; // Error: `children` is required.
     ^^^^^^^^^^^^^^^ React element `MyComponent`
 15: <MyComponent />; // Error: `children` is required.
     ^^^^^^^^^^^^^^^ props of React element `MyComponent`. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                   ^^^^^^^^^^^^^^^^ property `children`. Property not found in
     15: <MyComponent />; // Error: `children` is required.
         ^^^^^^^^^^^^^^^ props of React element `MyComponent`

Error: component.js:16
 16: <MyComponent></MyComponent>; // Error: `children` is required.
     ^^^^^^^^^^^^^ React element `MyComponent`
 16: <MyComponent></MyComponent>; // Error: `children` is required.
     ^^^^^^^^^^^^^ props of React element `MyComponent`. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                   ^^^^^^^^^^^^^^^^ property `children`. Property not found in
     16: <MyComponent></MyComponent>; // Error: `children` is required.
         ^^^^^^^^^^^^^ props of React element `MyComponent`

Error: component.js:18
 18: <MyComponent>{}</MyComponent>; // Error: `children` is required.
     ^^^^^^^^^^^^^ React element `MyComponent`
 18: <MyComponent>{}</MyComponent>; // Error: `children` is required.
     ^^^^^^^^^^^^^ props of React element `MyComponent`. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                   ^^^^^^^^^^^^^^^^ property `children`. Property not found in
     18: <MyComponent>{}</MyComponent>; // Error: `children` is required.
         ^^^^^^^^^^^^^ props of React element `MyComponent`

Error: component.js:40
 40: <MyComponent>
     ^^^^^^^^^^^^^ React element `MyComponent`. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     41:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                              ^^^^ union: undefined | null | boolean | number | string | type application of React$Element | React$Portal | type application of identifier `Iterable`
      Member 1:
       15:   | void
               ^^^^ undefined. See lib: <BUILTINS>/react.js:15
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       15:   | void
               ^^^^ undefined. See lib: <BUILTINS>/react.js:15
      Member 2:
       16:   | null
               ^^^^ null. See lib: <BUILTINS>/react.js:16
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       16:   | null
               ^^^^ null. See lib: <BUILTINS>/react.js:16
      Member 3:
       17:   | boolean
               ^^^^^^^ boolean. See lib: <BUILTINS>/react.js:17
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       17:   | boolean
               ^^^^^^^ boolean. See lib: <BUILTINS>/react.js:17
      Member 4:
       18:   | number
               ^^^^^^ number. See lib: <BUILTINS>/react.js:18
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | number
               ^^^^^^ number. See lib: <BUILTINS>/react.js:18
      Member 5:
       19:   | string
               ^^^^^^ string. See lib: <BUILTINS>/react.js:19
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | string
               ^^^^^^ string. See lib: <BUILTINS>/react.js:19
      Member 6:
       20:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of React$Element. See lib: <BUILTINS>/react.js:20
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
       20:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/react.js:20
      Member 7:
       21:   | React$Portal
               ^^^^^^^^^^^^ React$Portal. See lib: <BUILTINS>/react.js:21
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       21:   | React$Portal
               ^^^^^^^^^^^^ React$Portal. See lib: <BUILTINS>/react.js:21
      Member 8:
       22:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ type application of identifier `Iterable`. See lib: <BUILTINS>/react.js:22
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       22:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:22
        Property `@@iterator` is incompatible:
           22:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of $Iterable. Property not found in. See lib: <BUILTINS>/react.js:22
           41:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error: fun.js:23
 23: <Fun />; // Error: `children` is required.
     ^^^^^^^ React element `Fun`
 23: <Fun />; // Error: `children` is required.
     ^^^^^^^ props of React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                           ^^^^^^^^^^^^^^ property `children`. Property not found in
     23: <Fun />; // Error: `children` is required.
         ^^^^^^^ props of React element `Fun`

Error: fun.js:27
 27: <Fun>{() => 42}{() => 42}</Fun>; // Error: Two functions are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     27: <Fun>{() => 42}{() => 42}</Fun>; // Error: Two functions are not allowed.
         ^^^^^ React children array. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:29
 29: <Fun>{() => 42}  </Fun>; // Error: Spaces make it an array.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     29: <Fun>{() => 42}  </Fun>; // Error: Spaces make it an array.
         ^^^^^ React children array. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:30
 30: <Fun>  {() => 42}</Fun>; // Error: Spaces make it an array.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     30: <Fun>  {() => 42}</Fun>; // Error: Spaces make it an array.
         ^^^^^ React children array. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:37
 37: <Fun>
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
            v--------
     38:   {data => {
     39:     (data.foo: number); // OK: `foo` is a number.
     40:     (data.bar: string); // Error: `bar` is a number.
    ...:
     43:   }}
           ^ function. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type
      This parameter is incompatible:
         42:     return '42'; // Error: Must return a number.
                        ^^^^ string. This type is incompatible with
         14: type Fn = (Data) => number;
                                 ^^^^^^ number

Error: fun.js:40
 40:     (data.bar: string); // Error: `bar` is a number.
          ^^^^^^^^ number. This type is incompatible with
 40:     (data.bar: string); // Error: `bar` is a number.
                    ^^^^^^ string

Error: fun.js:41
 41:     (data.nope: boolean); // Error: `nope` does not exist.
               ^^^^ property `nope`. Property not found in
 41:     (data.nope: boolean); // Error: `nope` does not exist.
          ^^^^ object type

Error: fun.js:46
 46: <Fun>{}</Fun>; // Error: `void` is not allowed.
     ^^^^^ React element `Fun`
 46: <Fun>{}</Fun>; // Error: `void` is not allowed.
     ^^^^^ props of React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                           ^^^^^^^^^^^^^^ property `children`. Property not found in
     46: <Fun>{}</Fun>; // Error: `void` is not allowed.
         ^^^^^ props of React element `Fun`

Error: fun.js:47
 47: <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
     ^^^^^ React element `Fun`
 47: <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
     ^^^^^ props of React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                           ^^^^^^^^^^^^^^ property `children`. Property not found in
     47: <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
         ^^^^^ props of React element `Fun`

Error: fun.js:48
 48: <Fun>{undefined}</Fun>; // Error: `undefined` is not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     48: <Fun>{undefined}</Fun>; // Error: `undefined` is not allowed.
               ^^^^^^^^^ undefined. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:49
 49: <Fun>{null}</Fun>; // Error: `null` is not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     49: <Fun>{null}</Fun>; // Error: `null` is not allowed.
               ^^^^ null. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:50
 50: <Fun>{true}</Fun>; // Error: `boolean`s are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     50: <Fun>{true}</Fun>; // Error: `boolean`s are not allowed.
               ^^^^ boolean. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:51
 51: <Fun>{false}</Fun>; // Error: `boolean`s are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     51: <Fun>{false}</Fun>; // Error: `boolean`s are not allowed.
               ^^^^^ boolean. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:52
 52: <Fun>{0}</Fun>; // Error: `number`s are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     52: <Fun>{0}</Fun>; // Error: `number`s are not allowed.
               ^ number. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:53
 53: <Fun>{42}</Fun>; // Error: `number`s are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     53: <Fun>{42}</Fun>; // Error: `number`s are not allowed.
               ^^ number. This type is incompatible with
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type

Error: fun.js:54
 54: <Fun><intrinsic/></Fun>; // Error: elements are not allowed.
     ^^^^^ React element `Fun`. This type is incompatible with
 16: class Fun extends React.Component<{children: Fn}, void> {}
                                       ^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: class Fun extends React.Component<{children: Fn}, void> {}
                                                      ^^ function type. This type is incompatible with
                                                                       v-
    158: declare type React$Element<+ElementType: React$ElementType> = {|
    159:   +type: ElementType,
    160:   +props: React$ElementProps<ElementType>,
    ...:
    163: |};
         -^ object type. See lib: <BUILTINS>/react.js:158
      Callable property is incompatible:
         16: class Fun extends React.Component<{children: Fn}, void> {}
                                                          ^^ function type. Callable signature not found in
                                                                           v-
        158: declare type React$Element<+ElementType: React$ElementType> = {|
        159:   +type: ElementType,
        160:   +props: React$ElementProps<ElementType>,
        ...:
        163: |};
             -^ object type. See lib: <BUILTINS>/react.js:158

Error: fun.js:56
 56: <Obj />; // Error: `children` is required.
     ^^^^^^^ React element `Obj`
 56: <Obj />; // Error: `children` is required.
     ^^^^^^^ props of React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     18: class Obj extends React.Component<{children: Data}, void> {}
                                           ^^^^^^^^^^^^^^^^ property `children`. Property not found in
     56: <Obj />; // Error: `children` is required.
         ^^^^^^^ props of React element `Obj`

Error: fun.js:60
 60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
     ^^^^^ React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
               ^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
     18: class Obj extends React.Component<{children: Data}, void> {}
                                                      ^^^^ object type
      Property `bar` is incompatible:
         60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                                   ^^^ string. This type is incompatible with
         11:   bar: number,
                    ^^^^^^ number

Error: fun.js:60
 60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
     ^^^^^ React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
               ^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
     18: class Obj extends React.Component<{children: Data}, void> {}
                                                      ^^^^ object type
      Property `foo` is incompatible:
         60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                         ^^^ string. This type is incompatible with
         10:   foo: number,
                    ^^^^^^ number

Error: fun.js:61
 61: <Obj>{{foo: 1, bar: 2}}{{foo: 1, bar: 2}}</Obj>; // Error: Two objects are not
     ^^^^^ React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     61: <Obj>{{foo: 1, bar: 2}}{{foo: 1, bar: 2}}</Obj>; // Error: Two objects are not
         ^^^^^ React children array. This type is incompatible with
     18: class Obj extends React.Component<{children: Data}, void> {}
                                                      ^^^^ object type

Error: fun.js:63
 63: <Obj>{{foo: 1, bar: 2}}  </Obj>; // Error: Spaces make it an array.
     ^^^^^ React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     63: <Obj>{{foo: 1, bar: 2}}  </Obj>; // Error: Spaces make it an array.
         ^^^^^ React children array. This type is incompatible with
     18: class Obj extends React.Component<{children: Data}, void> {}
                                                      ^^^^ object type

Error: fun.js:64
 64: <Obj>  {{foo: 1, bar: 2}}</Obj>; // Error: Spaces make it an array.
     ^^^^^ React element `Obj`. This type is incompatible with
 18: class Obj extends React.Component<{children: Data}, void> {}
                                       ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     64: <Obj>  {{foo: 1, bar: 2}}</Obj>; // Error: Spaces make it an array.
         ^^^^^ React children array. This type is incompatible with
     18: class Obj extends React.Component<{children: Data}, void> {}
                                                      ^^^^ object type

Error: fun.js:71
 71: <FunArrayOnly>{() => 42}</FunArrayOnly>; // Error: A single expression is not
     ^^^^^^^^^^^^^^ React element `FunArrayOnly`. This type is incompatible with
 20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     71: <FunArrayOnly>{() => 42}</FunArrayOnly>; // Error: A single expression is not
                        ^^^^^^^^ function. This type is incompatible with
     20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                               ^^^^^^^^^ array type

Error: fun.js:77
 77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
     ^^^^^^^^^^^^^^ React element `FunArrayOnly`. This type is incompatible with
 20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
         ^^^^^^^^^^^^^^ React children array. Has some incompatible type argument with
     20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                               ^^^^^^^^^ array type
      Type argument `T` is incompatible:
         77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                            ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
         20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                         ^^ function type

Error: fun.js:77
 77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
     ^^^^^^^^^^^^^^ React element `FunArrayOnly`. This type is incompatible with
 20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
         ^^^^^^^^^^^^^^ React children array. Has some incompatible type argument with
     20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                               ^^^^^^^^^ array type
      Type argument `T` is incompatible:
         77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                                                  ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
         20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                         ^^ function type

Error: fun.js:80
 80: <FunArrayOnly>{[() => 42, () => 42]}{() => 42}</FunArrayOnly>;
     ^^^^^^^^^^^^^^ React element `FunArrayOnly`. This type is incompatible with
 20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     80: <FunArrayOnly>{[() => 42, () => 42]}{() => 42}</FunArrayOnly>;
         ^^^^^^^^^^^^^^ React children array. Has some incompatible type argument with
     20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                               ^^^^^^^^^ array type
      Type argument `T` is incompatible:
         80: <FunArrayOnly>{[() => 42, () => 42]}{() => 42}</FunArrayOnly>;
                            ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
         20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                         ^^ function type

Error: fun.js:83
 83: <FunArrayOnly>
     ^^^^^^^^^^^^^^ React element `FunArrayOnly`. This type is incompatible with
 20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     84:   {() => 42}
            ^^^^^^^^ function. This type is incompatible with
     20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                               ^^^^^^^^^ array type

Error: fun.js:108
108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
     ^^^^^^^^^^ React children array. Has some incompatible type argument with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                            ^^^^^^^^^ array type
  Type argument `T` is incompatible:
    108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                    ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                      ^^ function type

Error: fun.js:108
108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
     ^^^^^^^^^^ React children array. Has some incompatible type argument with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                            ^^^^^^^^^ array type
  Type argument `T` is incompatible:
    108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                                          ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                      ^^ function type

Error: fun.js:111
111: <FunArray>{[() => 42, () => 42]}{() => 42}</FunArray>;
     ^^^^^^^^^^ React children array. Has some incompatible type argument with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                            ^^^^^^^^^ array type
  Type argument `T` is incompatible:
    111: <FunArray>{[() => 42, () => 42]}{() => 42}</FunArray>;
                    ^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                      ^^ function type

Error: fun.js:134
134: <FunArray>{}</FunArray>; // Error: `void` is not allowed.
     ^^^^^^^^^^ React element `FunArray`
134: <FunArray>{}</FunArray>; // Error: `void` is not allowed.
     ^^^^^^^^^^ props of React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
    134: <FunArray>{}</FunArray>; // Error: `void` is not allowed.
         ^^^^^^^^^^ props of React element `FunArray`

Error: fun.js:135
135: <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
     ^^^^^^^^^^ React element `FunArray`
135: <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
     ^^^^^^^^^^ props of React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
    135: <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
         ^^^^^^^^^^ props of React element `FunArray`

Error: fun.js:136
136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                    ^^^^^^^^^ undefined. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:137
137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                    ^^^^ null. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:138
138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:139
139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:140
140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                    ^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:141
141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:142
142: <FunArray><intrinsic/></FunArray>; // Error: elements are not allowed.
               ^^^^^^^^^^^^ React element `intrinsic`
142: <FunArray><intrinsic/></FunArray>; // Error: elements are not allowed.
     ^^^^^^^^^^ React element `FunArray`. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    142: <FunArray><intrinsic/></FunArray>; // Error: elements are not allowed.
                   ^^^^^^^^^^^^ exact type: object type. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: Fn | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ function type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
        Callable property is incompatible:
           21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                 ^^ function type. Callable signature not found in
                                                                             v-
          158: declare type React$Element<+ElementType: React$ElementType> = {|
          159:   +type: ElementType,
          160:   +props: React$ElementProps<ElementType>,
          ...:
          163: |};
               -^ object type. See lib: <BUILTINS>/react.js:158
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158

Error: tabs.js:26
 26: <TabBar />; // Error: `children` is required.
     ^^^^^^^^^^ React element `TabBar`
 26: <TabBar />; // Error: `children` is required.
     ^^^^^^^^^^ props of React element `TabBar`. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
     26: <TabBar />; // Error: `children` is required.
         ^^^^^^^^^^ props of React element `TabBar`

Error: tabs.js:30
 30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^ React element `TabBar`. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
         ^^^^^^^^ React children array. This type is incompatible with
     24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       14:   | void
               ^^^^ undefined
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       15:   | null
               ^^^^ null
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       16:   | boolean
               ^^^^^^^ boolean
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Inexact type is incompatible with exact type
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Has some incompatible type argument with
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
        Type argument `T` is incompatible:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
            Member 1:
             14:   | void
                     ^^^^ undefined
            Error:
             30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                         ^^ JSX text. This type is incompatible with
             14:   | void
                     ^^^^ undefined
            Member 2:
             15:   | null
                     ^^^^ null
            Error:
             30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                         ^^ JSX text. This type is incompatible with
             15:   | null
                     ^^^^ null
            Member 3:
             16:   | boolean
                     ^^^^^^^ boolean
            Error:
             30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                         ^^ JSX text. This type is incompatible with
             16:   | boolean
                     ^^^^^^^ boolean
            Member 4:
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
            Error:
             30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                         ^^ JSX text. Inexact type is incompatible with exact type
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
            Member 5:
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type
            Error:
             30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                         ^^ JSX text. This type is incompatible with
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type

Error: tabs.js:31
 31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^ React element `TabBar`. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
         ^^^^^^^^ React children array. This type is incompatible with
     24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       14:   | void
               ^^^^ undefined
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       15:   | null
               ^^^^ null
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       16:   | boolean
               ^^^^^^^ boolean
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Inexact type is incompatible with exact type
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Has some incompatible type argument with
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
        Type argument `T` is incompatible:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
            Member 1:
             14:   | void
                     ^^^^ undefined
            Error:
             31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                               ^^ JSX text. This type is incompatible with
             14:   | void
                     ^^^^ undefined
            Member 2:
             15:   | null
                     ^^^^ null
            Error:
             31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                               ^^ JSX text. This type is incompatible with
             15:   | null
                     ^^^^ null
            Member 3:
             16:   | boolean
                     ^^^^^^^ boolean
            Error:
             31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                               ^^ JSX text. This type is incompatible with
             16:   | boolean
                     ^^^^^^^ boolean
            Member 4:
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
            Error:
             31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                               ^^ JSX text. Inexact type is incompatible with exact type
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
            Member 5:
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type
            Error:
             31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                               ^^ JSX text. This type is incompatible with
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type

Error: tabs.js:32
 32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
     ^^^^^^^^ React element `TabBar`. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
         ^^^^^^^^ React children array. This type is incompatible with
     24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       14:   | void
               ^^^^ undefined
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       15:   | null
               ^^^^ null
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. This type is incompatible with
       16:   | boolean
               ^^^^^^^ boolean
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Inexact type is incompatible with exact type
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
           ^^^^^^^^ React children array. Has some incompatible type argument with
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
        Type argument `T` is incompatible:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
            Member 1:
             14:   | void
                     ^^^^ undefined
            Error:
             32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                     ^^ JSX text. This type is incompatible with
             14:   | void
                     ^^^^ undefined
            Member 2:
             15:   | null
                     ^^^^ null
            Error:
             32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                     ^^ JSX text. This type is incompatible with
             15:   | null
                     ^^^^ null
            Member 3:
             16:   | boolean
                     ^^^^^^^ boolean
            Error:
             32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                     ^^ JSX text. This type is incompatible with
             16:   | boolean
                     ^^^^^^^ boolean
            Member 4:
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
            Error:
             32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                     ^^ JSX text. Inexact type is incompatible with exact type
             17:   | React$Element<typeof Tab>
                     ^^^^^^^^^^^^^^^^^^^^^^^^^ exact type: object type
            Member 5:
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type
            Error:
             32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                     ^^ JSX text. This type is incompatible with
             18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                     ^^^^^^^^^^^^^^^^^ array type

Error: tabs.js:67
 67: <TabBar><NotTab/></TabBar>; // Error: We can only have tab components.
             ^^^^^^^^^ React element `NotTab`
 67: <TabBar><NotTab/></TabBar>; // Error: We can only have tab components.
     ^^^^^^^^ React element `TabBar`. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     67: <TabBar><NotTab/></TabBar>; // Error: We can only have tab components.
                 ^^^^^^^^^ exact type: object type. This type is incompatible with
     24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                                         ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       14:   | void
               ^^^^ undefined. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       15:   | null
               ^^^^ null. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       16:   | boolean
               ^^^^^^^ boolean. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
        Property `type` is incompatible:
           11: class NotTab extends React.Component<{}, void> {}
                     ^^^^^^ NotTab. This type is incompatible with
           10: class Tab extends React.Component<{}, void> {}
                     ^^^ Tab
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158

Error: tabs.js:68
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
             ^^^^^^^^^ React element `NotTab`
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
     ^^^^^^^^ React children array. Has some incompatible type argument with
 18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
         ^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                 ^^^^^^^^^ exact type: object type. This type is incompatible with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                   ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       14:   | void
               ^^^^ undefined. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       15:   | null
               ^^^^ null. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       16:   | boolean
               ^^^^^^^ boolean. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
        Property `type` is incompatible:
           11: class NotTab extends React.Component<{}, void> {}
                     ^^^^^^ NotTab. This type is incompatible with
           10: class Tab extends React.Component<{}, void> {}
                     ^^^ Tab
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158

Error: tabs.js:68
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                      ^^^^^^^^^ React element `NotTab`
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
     ^^^^^^^^ React children array. Has some incompatible type argument with
 18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
         ^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                          ^^^^^^^^^ exact type: object type. This type is incompatible with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                   ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       14:   | void
               ^^^^ undefined. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       15:   | null
               ^^^^ null. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       16:   | boolean
               ^^^^^^^ boolean. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
        Property `type` is incompatible:
           11: class NotTab extends React.Component<{}, void> {}
                     ^^^^^^ NotTab. This type is incompatible with
           10: class Tab extends React.Component<{}, void> {}
                     ^^^ Tab
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158

Error: tabs.js:73
 73:   <NotTab/>
       ^^^^^^^^^ React element `NotTab`
 71: <TabBar>
     ^^^^^^^^ React children array. Has some incompatible type argument with
 18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
         ^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     73:   <NotTab/>
           ^^^^^^^^^ exact type: object type. This type is incompatible with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                   ^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
       14:   | void
               ^^^^ undefined
      Error:
       14:   | void
               ^^^^ undefined. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 2:
       15:   | null
               ^^^^ null
      Error:
       15:   | null
               ^^^^ null. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 3:
       16:   | boolean
               ^^^^^^^ boolean
      Error:
       16:   | boolean
               ^^^^^^^ boolean. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
      Member 4:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       17:   | React$Element<typeof Tab>
               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158
        Property `type` is incompatible:
           11: class NotTab extends React.Component<{}, void> {}
                     ^^^^^^ NotTab. This type is incompatible with
           10: class Tab extends React.Component<{}, void> {}
                     ^^^ Tab
      Member 5:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type
      Error:
       18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
               ^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
                                                                         v-
      158: declare type React$Element<+ElementType: React$ElementType> = {|
      159:   +type: ElementType,
      160:   +props: React$ElementProps<ElementType>,
      ...:
      163: |};
           -^ object type. See lib: <BUILTINS>/react.js:158

Error: text.js:9
  9: <Text />; // Error: `children` is required.
     ^^^^^^^^ React element `Text`
  9: <Text />; // Error: `children` is required.
     ^^^^^^^^ props of React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      5: class Text extends React.Component<{children: string}, void> {}
                                            ^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
      9: <Text />; // Error: `children` is required.
         ^^^^^^^^ props of React element `Text`

Error: text.js:11
 11: <TextLiteral />; // Error: `children` is required.
     ^^^^^^^^^^^^^^^ React element `TextLiteral`
 11: <TextLiteral />; // Error: `children` is required.
     ^^^^^^^^^^^^^^^ props of React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
     11: <TextLiteral />; // Error: `children` is required.
         ^^^^^^^^^^^^^^^ props of React element `TextLiteral`

Error: text.js:15
 15: <Text></Text>; // Error: `children` does not exist.
     ^^^^^^ React element `Text`
 15: <Text></Text>; // Error: `children` does not exist.
     ^^^^^^ props of React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      5: class Text extends React.Component<{children: string}, void> {}
                                            ^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
     15: <Text></Text>; // Error: `children` does not exist.
         ^^^^^^ props of React element `Text`

Error: text.js:18
 18: <Text>{}</Text>; // Error: `children` is required.
     ^^^^^^ React element `Text`
 18: <Text>{}</Text>; // Error: `children` is required.
     ^^^^^^ props of React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      5: class Text extends React.Component<{children: string}, void> {}
                                            ^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
     18: <Text>{}</Text>; // Error: `children` is required.
         ^^^^^^ props of React element `Text`

Error: text.js:19
 19: <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
     ^^^^^^ React element `Text`
 19: <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
     ^^^^^^ props of React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      5: class Text extends React.Component<{children: string}, void> {}
                                            ^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
     19: <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
         ^^^^^^ props of React element `Text`

Error: text.js:20
 20: <Text>{undefined}</Text>; // Error: `undefined` is not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     20: <Text>{undefined}</Text>; // Error: `undefined` is not allowed.
                ^^^^^^^^^ undefined. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:21
 21: <Text>{null}</Text>; // Error: `null` is not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     21: <Text>{null}</Text>; // Error: `null` is not allowed.
                ^^^^ null. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:22
 22: <Text>{true}</Text>; // Error: `boolean`s are not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     22: <Text>{true}</Text>; // Error: `boolean`s are not allowed.
                ^^^^ boolean. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:23
 23: <Text>{false}</Text>; // Error: `boolean`s are not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     23: <Text>{false}</Text>; // Error: `boolean`s are not allowed.
                ^^^^^ boolean. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:24
 24: <Text>{0}</Text>; // Error: `number`s are not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     24: <Text>{0}</Text>; // Error: `number`s are not allowed.
                ^ number. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:25
 25: <Text>{42}</Text>; // Error: `number`s are not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     25: <Text>{42}</Text>; // Error: `number`s are not allowed.
                ^^ number. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:26
 26: <Text><intrinsic/></Text>; // Error: elements are not allowed.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
                                                                       v-
    158: declare type React$Element<+ElementType: React$ElementType> = {|
    159:   +type: ElementType,
    160:   +props: React$ElementProps<ElementType>,
    ...:
    163: |};
         -^ object type. This type is incompatible with. See lib: <BUILTINS>/react.js:158
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:35
 35: <Text>{'Hello, '}{'world!'}</Text>; // Error: We did not allow an array.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     35: <Text>{'Hello, '}{'world!'}</Text>; // Error: We did not allow an array.
         ^^^^^^ React children array. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:36
 36: <Text>Hello, {'world!'}</Text>; // Error: We did not allow an array.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     36: <Text>Hello, {'world!'}</Text>; // Error: We did not allow an array.
         ^^^^^^ React children array. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:37
 37: <Text>{'Hello, world!'}  </Text>; // Error: Spaces cause there to be an array.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     37: <Text>{'Hello, world!'}  </Text>; // Error: Spaces cause there to be an array.
         ^^^^^^ React children array. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:38
 38: <Text>  {'Hello, world!'}</Text>; // Error: Spaces cause there to be an array.
     ^^^^^^ React element `Text`. This type is incompatible with
  5: class Text extends React.Component<{children: string}, void> {}
                                        ^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     38: <Text>  {'Hello, world!'}</Text>; // Error: Spaces cause there to be an array.
         ^^^^^^ React children array. This type is incompatible with
      5: class Text extends React.Component<{children: string}, void> {}
                                                       ^^^^^^ string

Error: text.js:48
 48: <TextLiteral>buz</TextLiteral>; // Error: `buz` is not allowed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     48: <TextLiteral>buz</TextLiteral>; // Error: `buz` is not allowed.
                      ^^^ JSX text. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: text.js:49
 49: <TextLiteral>{'buz'}</TextLiteral>; // Error: `buz` is not allowed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     49: <TextLiteral>{'buz'}</TextLiteral>; // Error: `buz` is not allowed.
                       ^^^^^ string. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: text.js:50
 50: <TextLiteral>foo  </TextLiteral>; // Error: Spaces are not trimmed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     50: <TextLiteral>foo  </TextLiteral>; // Error: Spaces are not trimmed.
                      ^^^^^ JSX text. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: text.js:51
 51: <TextLiteral>  foo</TextLiteral>; // Error: Spaces are not trimmed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     51: <TextLiteral>  foo</TextLiteral>; // Error: Spaces are not trimmed.
                      ^^^^^ JSX text. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: text.js:52
 52: <TextLiteral>{'foo'}  </TextLiteral>; // Error: Spaces are not trimmed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     52: <TextLiteral>{'foo'}  </TextLiteral>; // Error: Spaces are not trimmed.
         ^^^^^^^^^^^^^ React children array. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: text.js:53
 53: <TextLiteral>  {'foo'}</TextLiteral>; // Error: Spaces are not trimmed.
     ^^^^^^^^^^^^^ React element `TextLiteral`. This type is incompatible with
  7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     53: <TextLiteral>  {'foo'}</TextLiteral>; // Error: Spaces are not trimmed.
         ^^^^^^^^^^^^^ React children array. This type is incompatible with
      7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                              ^^^^^^^^^^^^^ string enum

Error: tuple.js:9
  9: <Tuple />; // Error: `children` is required.
     ^^^^^^^^^ React element `Tuple`
  9: <Tuple />; // Error: `children` is required.
     ^^^^^^^^^ props of React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `children`. Property not found in
      9: <Tuple />; // Error: `children` is required.
         ^^^^^^^^^ props of React element `Tuple`

Error: tuple.js:12
 12: <Tuple>{true}{'foo'}{42}{null}</Tuple>; // Error: One to many.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     12: <Tuple>{true}{'foo'}{42}{null}</Tuple>; // Error: One to many.
         ^^^^^^^ React children array. Tuple arity mismatch. This tuple has 4 elements and cannot flow to the 3 elements of
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ tuple type

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                               ^^^^^^^ boolean. This type is incompatible with
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                ^^ JSX text

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                        ^^^^^^ string. This type is incompatible with
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                   ^^^^ boolean

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                                ^^^^^^ number. This type is incompatible with
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                        ^^^ JSX text

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
         ^^^^^^^ React children array. Tuple arity mismatch. This tuple has 4 elements and cannot flow to the 3 elements of
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ tuple type

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                ^^ JSX text. This type is incompatible with
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                               ^^^^^^^ boolean

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                   ^^^^ boolean. This type is incompatible with
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                        ^^^^^^ string

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                        ^^^ JSX text. This type is incompatible with
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                                ^^^^^^ number

Error: tuple.js:14
 14: <Tuple>{true}foo{42}  </Tuple>; // Error: Spaces add items.
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     14: <Tuple>{true}foo{42}  </Tuple>; // Error: Spaces add items.
         ^^^^^^^ React children array. Tuple arity mismatch. This tuple has 4 elements and cannot flow to the 3 elements of
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ tuple type

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
         ^^^^^^^ React children array. Tuple arity mismatch. This tuple has 2 elements and cannot flow to the 3 elements of
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ tuple type

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
                 ^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                               ^^^^^^^ boolean

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
                                    ^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                        ^^^^^^ string

Error: tuple.js:18
 18: <Tuple>{[true, 'foo', 42, null]}</Tuple>; // Error: One to many
     ^^^^^^^ React element `Tuple`. This type is incompatible with
  6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     18: <Tuple>{[true, 'foo', 42, null]}</Tuple>; // Error: One to many
                 ^^^^^^^^^^^^^^^^^^^^^^^ array literal. Tuple arity mismatch. This tuple has 4 elements and cannot flow to the 3 elements of
      6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ tuple type

Error: tuple.js:34
 34: <TupleOne>{true}</TupleOne>; // Error: A single expression is not an array.
     ^^^^^^^^^^ React element `TupleOne`. This type is incompatible with
  7: class TupleOne extends React.Component<{children: [boolean]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     34: <TupleOne>{true}</TupleOne>; // Error: A single expression is not an array.
                    ^^^^ boolean. This type is incompatible with
      7: class TupleOne extends React.Component<{children: [boolean]}, void> {}
                                                           ^^^^^^^^^ tuple type

Error: view.js:31
 31: <View>
     ^^^^^^ React element `View`. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     32:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       32:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       32:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       32:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       32:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       32:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:35
 35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
     ^^^^^^ React element `View`. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
               ^^^^^^^^^^^^^ JSX text. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:36
 36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
     ^^^^^^ React element `View`. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                ^^^^^^^^^^^^^^^ string. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:37
 37: <View>{42}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^ React element `View`. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                ^^ number. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:38
 38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^ React element `View`. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
         ^^^^^^ React children array. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
           ^^^^^^ React children array. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
           ^^^^^^ React children array. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
           ^^^^^^ React children array. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
           ^^^^^^ React children array. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
           ^^^^^^ React children array. Has some incompatible type argument with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
        Type argument `T` is incompatible:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
           10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                         ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
            Member 1:
              6:   | void
                     ^^^^ undefined
            Error:
             38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                        ^ number. This type is incompatible with
              6:   | void
                     ^^^^ undefined
            Member 2:
              7:   | null
                     ^^^^ null
            Error:
             38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                        ^ number. This type is incompatible with
              7:   | null
                     ^^^^ null
            Member 3:
              8:   | boolean
                     ^^^^^^^ boolean
            Error:
             38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                        ^ number. This type is incompatible with
              8:   | boolean
                     ^^^^^^^ boolean
            Member 4:
              9:   | React$Element<any>
                     ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
            Error:
             38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                        ^ number. Inexact type is incompatible with exact type
              9:   | React$Element<any>
                     ^^^^^^^^^^^^^^^^^^ exact type: object type
            Member 5:
             10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
            Error:
             38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                        ^ number. This type is incompatible with
             10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^ React element `View`
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
            ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                 ^^^ string. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                   ^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                   ^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                   ^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                   ^^^ string. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                   ^^^ string. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^ React element `View`
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
            ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                      ^^^ string. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                        ^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                        ^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                        ^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                        ^^^ string. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                        ^^^ string. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^ React element `View`
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
            ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                           ^^^ string. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                             ^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                             ^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                             ^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                             ^^^ string. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                             ^^^ string. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^ React element `View`
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
            ^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                 ^ number. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                   ^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                   ^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                   ^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                   ^ number. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                   ^ number. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^ React element `View`
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
            ^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                    ^ number. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                      ^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                      ^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                      ^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                      ^ number. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                      ^ number. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^ React element `View`
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
            ^^^^^^^^^ array literal. Has some incompatible type argument with
 10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                   ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | type application of identifier `React$Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                         ^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                         ^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                         ^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean
      Member 4:
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ type application of identifier `React$Element`
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                         ^ number. Inexact type is incompatible with exact type
        9:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ exact type: object type
      Member 5:
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Error:
       40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                         ^ number. This type is incompatible with
       10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type


Found 111 errors
