Error ------------------------------------------------------------------------------------------------------ api.js:14:4

Cannot call `na` with `Children.map(...)` bound to `x` because number [1] is incompatible with string [2] in array
element. Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-call]

   api.js:14:4
   14| na(Children.map(a, (x: string) => x as string)); // Error
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   api.js:33:22
   33| function na(x: Array<number>) {}
                            ^^^^^^ [1]
   api.js:14:40
   14| na(Children.map(a, (x: string) => x as string)); // Error
                                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:14:40

Cannot call `na` with `Children.map(...)` bound to `x` because string [1] is incompatible with number [2] in array
element. [incompatible-call]

   api.js:14:40
   14| na(Children.map(a, (x: string) => x as string)); // Error
                                              ^^^^^^ [1]

References:
   api.js:33:22
   33| function na(x: Array<number>) {}
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:14:24

Cannot call `Children.map` with function bound to `fn` because string [1] is incompatible with number [2] in the first
parameter. [incompatible-call]

   api.js:14:24
   14| na(Children.map(a, (x: string) => x as string)); // Error
                              ^^^^^^ [1]

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:14:24

Cannot call `Children.map` with function bound to `fn` because string [1] is incompatible with number [2] in the first
parameter. [incompatible-call]

   api.js:14:24
   14| na(Children.map(a, (x: string) => x as string)); // Error
                              ^^^^^^ [1]

References:
   api.js:5:25
    5| const a: ChildrenArray<?number> = [
                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:15:4

Cannot call `sa` with `Children.map(...)` bound to `x` because string [1] is incompatible with number [2] in array
element. Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-call]

   api.js:15:4
   15| sa(Children.map(a, (x: number) => x as number)); // Error
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   api.js:34:22
   34| function sa(x: Array<string>) {}
                            ^^^^^^ [1]
   api.js:15:40
   15| sa(Children.map(a, (x: number) => x as number)); // Error
                                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:15:40

Cannot call `sa` with `Children.map(...)` bound to `x` because number [1] is incompatible with string [2] in array
element. [incompatible-call]

   api.js:15:40
   15| sa(Children.map(a, (x: number) => x as number)); // Error
                                              ^^^^^^ [1]

References:
   api.js:34:22
   34| function sa(x: Array<string>) {}
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:17:25

Cannot call `Children.forEach` with function bound to `fn` because number [1] is incompatible with nullable number [2]
in the first parameter. [incompatible-call]

   api.js:17:25
   17| Children.forEach(a, (x: number) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:17:25

Cannot call `Children.forEach` with function bound to `fn` because number [1] is incompatible with null or undefined [2]
in the first parameter. [incompatible-call]

   api.js:17:25
   17| Children.forEach(a, (x: number) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:24
    5| const a: ChildrenArray<?number> = [
                              ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:19:25

Cannot call `Children.forEach` with function bound to `fn` because string [1] is incompatible with nullable number [2]
in the first parameter. [incompatible-call]

   api.js:19:25
   19| Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:19:25

Cannot call `Children.forEach` with function bound to `fn` because string [1] is incompatible with number [2] in the
first parameter. [incompatible-call]

   api.js:19:25
   19| Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:19:25

Cannot call `Children.forEach` with function bound to `fn` because string [1] is incompatible with null or undefined [2]
in the first parameter. [incompatible-call]

   api.js:19:25
   19| Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:24
    5| const a: ChildrenArray<?number> = [
                              ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- api.js:19:25

Cannot call `Children.forEach` with function bound to `fn` because string [1] is incompatible with number [2] in the
first parameter. [incompatible-call]

   api.js:19:25
   19| Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [1]

References:
   api.js:5:25
    5| const a: ChildrenArray<?number> = [
                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:22:3

Cannot call `s` with `Children.count(...)` bound to `x` because number [1] is incompatible with string [2].
[incompatible-call]

   api.js:22:3
    22| s(Children.count(a)); // Error
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:800:44
   800|       count(children: ChildrenArray<any>): number,
                                                   ^^^^^^ [1]
   api.js:32:15
    32| function s(x: string) {}
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:25:3

Cannot call `s` with `Children.only(...)` bound to `x` because number [1] is incompatible with string [2].
[incompatible-call]

   api.js:25:3
   25| s(Children.only(a)); // Error
         ^^^^^^^^^^^^^^^^

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [1]
   api.js:32:15
   32| function s(x: string) {}
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:25:3

Cannot call `s` with `Children.only(...)` bound to `x` because number [1] is incompatible with string [2].
[incompatible-call]

   api.js:25:3
   25| s(Children.only(a)); // Error
         ^^^^^^^^^^^^^^^^

References:
   api.js:5:25
    5| const a: ChildrenArray<?number> = [
                               ^^^^^^ [1]
   api.js:32:15
   32| function s(x: string) {}
                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:28:4

Cannot call `sa` with `Children.toArray(...)` bound to `x` because number [1] is incompatible with string [2] in array
element. [incompatible-call]

   api.js:28:4
   28| sa(Children.toArray(a)); // Error
          ^^^^^^^^^^^^^^^^^^^

References:
   api.js:5:25
    5| const a: ChildrenArray<?number> = [
                               ^^^^^^ [1]
   api.js:34:22
   34| function sa(x: Array<string>) {}
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ api.js:28:4

Cannot call `sa` with `Children.toArray(...)` bound to `x` because in array element: [incompatible-call]
 - Either string [1] is incompatible with number [2].
 - Or string [1] is incompatible with number [3].

Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.

   api.js:28:4
   28| sa(Children.toArray(a)); // Error
          ^^^^^^^^^^^^^^^^^^^

References:
   api.js:34:22
   34| function sa(x: Array<string>) {}
                            ^^^^^^ [1]
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [2]
   api.js:5:25
    5| const a: ChildrenArray<?number> = [
                               ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- api.js:28:21

Cannot call `sa` with `Children.toArray(...)` bound to `x` because number [1] is incompatible with string [2] in array
element. [incompatible-call]

   api.js:28:21
   28| sa(Children.toArray(a)); // Error
                           ^

References:
   api.js:5:10
    5| const a: ChildrenArray<?number> = [
                ^^^^^^^^^^^^^^^^^^^^^^ [1]
   api.js:34:22
   34| function sa(x: Array<string>) {}
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- builtin_intrinsic.js:25:4

Cannot create `builtin` element because in property `children`: [incompatible-type]
 - Either object literal [1] is incompatible with `React.Element` [2].
 - Or object literal [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in object literal [1] but exists in `$Iterable` [4].

   builtin_intrinsic.js:25:4
   25|   {{a: 1, b: 2, c: 3}}
          ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------ component.js:15:2

Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   component.js:15:2
   15| <MyComponent />; // Error: `children` is required.
        ^^^^^^^^^^^

References:
   component.js:15:1
   15| <MyComponent />; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]
   component.js:6:43
    6| class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ component.js:16:2

Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   component.js:16:2
   16| <MyComponent></MyComponent>; // Error: `children` is required.
        ^^^^^^^^^^^

References:
   component.js:16:1
   16| <MyComponent></MyComponent>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   component.js:6:43
    6| class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ component.js:18:2

Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   component.js:18:2
   18| <MyComponent>{}</MyComponent>; // Error: `children` is required.
        ^^^^^^^^^^^

References:
   component.js:18:1
   18| <MyComponent>{}</MyComponent>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   component.js:6:43
    6| class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ component.js:41:4

Cannot create `MyComponent` element because in property `children`: [incompatible-type]
 - Either object literal [1] is incompatible with `React.Element` [2].
 - Or object literal [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in object literal [1] but exists in `$Iterable` [4].

   component.js:41:4
   41|   {{a: 1, b: 2, c: 3}}
          ^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------------ fun.js:23:2

Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:23:2
   23| <Fun />; // Error: `children` is required.
        ^^^

References:
   fun.js:23:1
   23| <Fun />; // Error: `children` is required.
       ^^^^^^^ [1]
   fun.js:16:35
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:27:6

Cannot create `Fun` element because children array [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:27:6
            v
   27| <Fun>
   28|   {() => 42}
   29|   {() => 42}
   30| </Fun>; // Error: Two functions are not allowed.
       ^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:32:6

Cannot create `Fun` element because children array [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:32:6
   32| <Fun>{() => 42} </Fun>; // Error: Spaces make it an array.
            ^^^^^^^^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:33:6

Cannot create `Fun` element because children array [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:33:6
   33| <Fun> {() => 42}</Fun>; // Error: Spaces make it an array.
            ^^^^^^^^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:43:12

Cannot create `Fun` element because string [1] is incompatible with number [2] in the return value of property
`children`. [incompatible-type]

   fun.js:43:12
   43|     return '42'; // Error: Must return a number.
                  ^^^^ [1]

References:
   fun.js:14:19
   14| type Fn = Data => number;
                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:41:5

Cannot cast `data.bar` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   fun.js:41:5
   41|     data.bar as string; // Error: `bar` is a number.
           ^^^^^^^^

References:
   fun.js:11:8
   11|   bar: number,
              ^^^^^^ [1]
   fun.js:41:17
   41|     data.bar as string; // Error: `bar` is a number.
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:42:10

Cannot get `data.nope` because property `nope` is missing in `Data` [1]. [prop-missing]

   fun.js:42:10
   42|     data.nope as boolean; // Error: `nope` does not exist.
                ^^^^

References:
   fun.js:14:11
   14| type Fn = Data => number;
                 ^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ fun.js:47:2

Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:47:2
   47| <Fun>{}</Fun>; // Error: `void` is not allowed.
        ^^^

References:
   fun.js:47:1
   47| <Fun>{}</Fun>; // Error: `void` is not allowed.
       ^^^^^^^^^^^^^ [1]
   fun.js:16:35
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:48:2

Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:48:2
   48| <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
        ^^^

References:
   fun.js:48:1
   48| <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   fun.js:16:35
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:49:7

Cannot create `Fun` element because undefined [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:49:7
   49| <Fun>{undefined}</Fun>; // Error: `undefined` is not allowed.
             ^^^^^^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:50:7

Cannot create `Fun` element because null [1] is incompatible with `Fn` [2] in property `children`. [incompatible-type]

   fun.js:50:7
   50| <Fun>{null}</Fun>; // Error: `null` is not allowed.
             ^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:51:7

Cannot create `Fun` element because boolean [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:51:7
   51| <Fun>{true}</Fun>; // Error: `boolean`s are not allowed.
             ^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:52:7

Cannot create `Fun` element because boolean [1] is incompatible with `Fn` [2] in property `children`.
[incompatible-type]

   fun.js:52:7
   52| <Fun>{false}</Fun>; // Error: `boolean`s are not allowed.
             ^^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:53:7

Cannot create `Fun` element because number [1] is incompatible with `Fn` [2] in property `children`. [incompatible-type]

   fun.js:53:7
   53| <Fun>{0}</Fun>; // Error: `number`s are not allowed.
             ^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:54:7

Cannot create `Fun` element because number [1] is incompatible with `Fn` [2] in property `children`. [incompatible-type]

   fun.js:54:7
   54| <Fun>{42}</Fun>; // Error: `number`s are not allowed.
             ^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:56:3

Cannot create `Fun` element because a call signature declaring the expected parameter / return type is missing in
`React.Element` [1] but exists in `Fn` [2] in property `children`. [prop-missing]

   fun.js:56:3
   56|   <intrinsic />
         ^^^^^^^^^^^^^ [1]

References:
   fun.js:16:46
   16| class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:59:2

Cannot create `Obj` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:59:2
   59| <Obj />; // Error: `children` is required.
        ^^^

References:
   fun.js:59:1
   59| <Obj />; // Error: `children` is required.
       ^^^^^^^ [1]
   fun.js:18:35
   18| class Obj extends React.Component<{children: Data}, void> {}
                                         ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:63:13

Cannot create `Obj` element because string [1] is incompatible with number [2] in property `children.foo`.
[incompatible-type]

   fun.js:63:13
   63| <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                   ^^^ [1]

References:
   fun.js:10:8
   10|   foo: number,
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:63:23

Cannot create `Obj` element because string [1] is incompatible with number [2] in property `children.bar`.
[incompatible-type]

   fun.js:63:23
   63| <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                             ^^^ [1]

References:
   fun.js:11:8
   11|   bar: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:64:6

Cannot create `Obj` element because children array [1] is incompatible with `Data` [2] in property `children`.
[incompatible-type]

   fun.js:64:6
            v
   64| <Obj>
   65|   {{foo: 1, bar: 2}}
   66|   {{foo: 1, bar: 2}}
   67| </Obj>; // Error: Two objects are not
       ^ [1]

References:
   fun.js:18:46
   18| class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:69:6

Cannot create `Obj` element because children array [1] is incompatible with `Data` [2] in property `children`.
[incompatible-type]

   fun.js:69:6
   69| <Obj>{{foo: 1, bar: 2}} </Obj>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^^^^^^^^ [1]

References:
   fun.js:18:46
   18| class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:70:6

Cannot create `Obj` element because children array [1] is incompatible with `Data` [2] in property `children`.
[incompatible-type]

   fun.js:70:6
   70| <Obj> {{foo: 1, bar: 2}}</Obj>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^^^^^^^^ [1]

References:
   fun.js:18:46
   18| class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:75:16

Cannot create `FunArrayOnly` element because function [1] is incompatible with array type [2] in property `children`.
[incompatible-type]

   fun.js:75:16
   75| <FunArrayOnly>{() => 42}</FunArrayOnly>; // Error: A single expression is not
                      ^^^^^^^^ [1]

References:
   fun.js:20:55
   20| class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                             ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:85:4

Cannot create `FunArrayOnly` element because array literal [1] is incompatible with `Fn` [2] in array element of
property `children`. [incompatible-type]

   fun.js:85:4
   85|   {[() => 42, () => 42]}
          ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   fun.js:20:61
   20| class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:86:4

Cannot create `FunArrayOnly` element because array literal [1] is incompatible with `Fn` [2] in array element of
property `children`. [incompatible-type]

   fun.js:86:4
   86|   {[() => 42, () => 42]}
          ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   fun.js:20:61
   20| class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]


Error ------------------------------------------------------------------------------------------------------ fun.js:91:4

Cannot create `FunArrayOnly` element because array literal [1] is incompatible with `Fn` [2] in array element of
property `children`. [incompatible-type]

   fun.js:91:4
   91|   {[() => 42, () => 42]}
          ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   fun.js:20:61
   20| class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:96:16

Cannot create `FunArrayOnly` element because function [1] is incompatible with array type [2] in property `children`.
[incompatible-type]

   fun.js:96:16
   96| <FunArrayOnly>{() => 42}</FunArrayOnly>;
                      ^^^^^^^^ [1]

References:
   fun.js:20:55
   20| class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                             ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- fun.js:116:11

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either array literal [1] is incompatible with `Fn` [2] in array element.
 - Or children array [3] is incompatible with `Fn` [4].

   fun.js:116:11
                  v
   116| <FunArray>
   117|   {[() => 42, () => 42]}
   118|   {[() => 42, () => 42]}
   119| </FunArray>;
        ^ [3]

References:
   fun.js:117:4
   117|   {[() => 42, () => 42]}
           ^^^^^^^^^^^^^^^^^^^^ [1]
   fun.js:21:62
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                     ^^ [2]
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [4]


Error ---------------------------------------------------------------------------------------------------- fun.js:122:11

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either array literal [1] is incompatible with `Fn` [2] in array element.
 - Or children array [3] is incompatible with `Fn` [4].

   fun.js:122:11
                  v
   122| <FunArray>
   123|   {[() => 42, () => 42]}
   124|   {() => 42}
   125| </FunArray>;
        ^ [3]

References:
   fun.js:123:4
   123|   {[() => 42, () => 42]}
           ^^^^^^^^^^^^^^^^^^^^ [1]
   fun.js:21:62
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                     ^^ [2]
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [4]


Error ----------------------------------------------------------------------------------------------------- fun.js:140:2

Cannot create `FunArray` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:140:2
   140| <FunArray>{}</FunArray>; // Error: `void` is not allowed.
         ^^^^^^^^

References:
   fun.js:140:1
   140| <FunArray>{}</FunArray>; // Error: `void` is not allowed.
        ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   fun.js:21:40
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- fun.js:141:2

Cannot create `FunArray` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   fun.js:141:2
   141| <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
         ^^^^^^^^

References:
   fun.js:141:1
   141| <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   fun.js:21:40
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- fun.js:142:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either undefined [1] is incompatible with `Fn` [2].
 - Or undefined [1] is incompatible with array type [3].

   fun.js:142:12
   142| <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                   ^^^^^^^^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- fun.js:143:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either null [1] is incompatible with `Fn` [2].
 - Or null [1] is incompatible with array type [3].

   fun.js:143:12
   143| <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                   ^^^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- fun.js:144:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either boolean [1] is incompatible with `Fn` [2].
 - Or boolean [1] is incompatible with array type [3].

   fun.js:144:12
   144| <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                   ^^^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- fun.js:145:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either boolean [1] is incompatible with `Fn` [2].
 - Or boolean [1] is incompatible with array type [3].

   fun.js:145:12
   145| <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                   ^^^^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- fun.js:146:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either number [1] is incompatible with `Fn` [2].
 - Or number [1] is incompatible with array type [3].

   fun.js:146:12
   146| <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                   ^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- fun.js:147:12

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either number [1] is incompatible with `Fn` [2].
 - Or number [1] is incompatible with array type [3].

   fun.js:147:12
   147| <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                   ^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- fun.js:149:3

Cannot create `FunArray` element because in property `children`: [incompatible-type]
 - Either a call signature declaring the expected parameter / return type is missing in `React.Element` [1] but exists
   in `Fn` [2].
 - Or `React.Element` [1] is incompatible with array type [3].

   fun.js:149:3
   149|   <intrinsic />
          ^^^^^^^^^^^^^ [1]

References:
   fun.js:21:51
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                          ^^ [2]
   fun.js:21:56
    21| class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                               ^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- spread.js:7:6

A spread argument is unsupported here. [unsupported-syntax]

   7| <Foo>{...["a", "b"]}</Foo>
           ^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- tabs.js:26:2

Cannot create `TabBar` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   tabs.js:26:2
   26| <TabBar />; // Error: `children` is required.
        ^^^^^^

References:
   tabs.js:26:1
   26| <TabBar />; // Error: `children` is required.
       ^^^^^^^^^^ [1]
   tabs.js:24:38
   24| class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- tabs.js:30:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either children array [1] is incompatible with `React.Element` [2].
 - Or JSX text [3] is incompatible with boolean [4] in array element.

   tabs.js:30:9
   30| <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
               ^^^^^^^^^^^^^^ [1]

References:
   tabs.js:17:5
   17|   | ExactReactElement_DEPRECATED<typeof Tab>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   tabs.js:30:9
   30| <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
               ^^ [3]
   tabs.js:16:5
   16|   | boolean
           ^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- tabs.js:31:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either children array [1] is incompatible with `React.Element` [2].
 - Or JSX text [3] is incompatible with boolean [4] in array element.

   tabs.js:31:9
   31| <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
               ^^^^^^^^^^^^^^ [1]

References:
   tabs.js:17:5
   17|   | ExactReactElement_DEPRECATED<typeof Tab>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   tabs.js:31:15
   31| <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                     ^^ [3]
   tabs.js:16:5
   16|   | boolean
           ^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- tabs.js:32:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either children array [1] is incompatible with `React.Element` [2].
 - Or JSX text [3] is incompatible with boolean [4] in array element.

   tabs.js:32:9
   32| <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
               ^^^^^^^^^^^^^^ [1]

References:
   tabs.js:17:5
   17|   | ExactReactElement_DEPRECATED<typeof Tab>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   tabs.js:32:21
   32| <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                           ^^ [3]
   tabs.js:16:5
   16|   | boolean
           ^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- tabs.js:67:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either `NotTab` [1] is incompatible with `Tab` [2] in type argument `ElementType` [3].
 - Or `React.Element` [4] is incompatible with array type [5].

   tabs.js:67:9
    67| <TabBar><NotTab/></TabBar>; // Error: We can only have tab components.
                ^^^^^^^^^ [4]

References:
   tabs.js:11:7
    11| class NotTab extends React.Component<{}, void> {}
              ^^^^^^ [1]
   tabs.js:10:7
    10| class Tab extends React.Component<{}, void> {}
              ^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   tabs.js:18:5
    18|   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
            ^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- tabs.js:68:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either `NotTab` [1] is incompatible with `Tab` [2] in type argument `ElementType` [3] of array element.
 - Or `React.Element` [4] is incompatible with array type [5] in array element.

   tabs.js:68:9
    68| <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                ^^^^^^^^^^^^^^^^^^

References:
   tabs.js:11:7
    11| class NotTab extends React.Component<{}, void> {}
              ^^^^^^ [1]
   tabs.js:10:7
    10| class Tab extends React.Component<{}, void> {}
              ^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   tabs.js:68:9
    68| <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                ^^^^^^^^^ [4]
   tabs.js:18:5
    18|   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
            ^^^^^^^^^^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- tabs.js:71:9

Cannot create `TabBar` element because in property `children`: [incompatible-type]
 - Either `NotTab` [1] is incompatible with `Tab` [2] in type argument `ElementType` [3] of array element.
 - Or `React.Element` [4] is incompatible with array type [5] in array element.

   tabs.js:71:9
                v
    71| <TabBar>
    72|   <Tab/>
    73|   <NotTab/>
    74|   <Tab/>
    75|   <Tab/>
    76| </TabBar>;
        ^

References:
   tabs.js:11:7
    11| class NotTab extends React.Component<{}, void> {}
              ^^^^^^ [1]
   tabs.js:10:7
    10| class Tab extends React.Component<{}, void> {}
              ^^^ [2]
   <BUILTINS>/react.js:150:36
   150| declare opaque type React$Element<+ElementType: React$ElementType, +P = React$ElementProps<ElementType>>: {...};
                                           ^^^^^^^^^^^ [3]
   tabs.js:73:3
    73|   <NotTab/>
          ^^^^^^^^^ [4]
   tabs.js:18:5
    18|   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
            ^^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------------------------ text.js:9:2

Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   text.js:9:2
   9| <Text />; // Error: `children` is required.
       ^^^^

References:
   text.js:9:1
   9| <Text />; // Error: `children` is required.
      ^^^^^^^^ [1]
   text.js:5:36
   5| class Text extends React.Component<{children: string}, void> {}
                                         ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:11:2

Cannot create `TextLiteral` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   text.js:11:2
   11| <TextLiteral />; // Error: `children` is required.
        ^^^^^^^^^^^

References:
   text.js:11:1
   11| <TextLiteral />; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]
   text.js:7:43
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:15:2

Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   text.js:15:2
   15| <Text></Text>; // Error: `children` does not exist.
        ^^^^

References:
   text.js:15:1
   15| <Text></Text>; // Error: `children` does not exist.
       ^^^^^^^^^^^^^ [1]
   text.js:5:36
    5| class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:18:2

Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   text.js:18:2
   18| <Text>{}</Text>; // Error: `children` is required.
        ^^^^

References:
   text.js:18:1
   18| <Text>{}</Text>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]
   text.js:5:36
    5| class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:19:2

Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   text.js:19:2
   19| <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
        ^^^^

References:
   text.js:19:1
   19| <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   text.js:5:36
    5| class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:20:8

Cannot create `Text` element because undefined [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:20:8
   20| <Text>{undefined}</Text>; // Error: `undefined` is not allowed.
              ^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:21:8

Cannot create `Text` element because null [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:21:8
   21| <Text>{null}</Text>; // Error: `null` is not allowed.
              ^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:22:8

Cannot create `Text` element because boolean [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:22:8
   22| <Text>{true}</Text>; // Error: `boolean`s are not allowed.
              ^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:23:8

Cannot create `Text` element because boolean [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:23:8
   23| <Text>{false}</Text>; // Error: `boolean`s are not allowed.
              ^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:24:8

Cannot create `Text` element because number [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:24:8
   24| <Text>{0}</Text>; // Error: `number`s are not allowed.
              ^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:25:8

Cannot create `Text` element because number [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:25:8
   25| <Text>{42}</Text>; // Error: `number`s are not allowed.
              ^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:26:7

Cannot create `Text` element because `React.Element` [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:26:7
   26| <Text><intrinsic/></Text>; // Error: elements are not allowed.
             ^^^^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:35:7

Cannot create `Text` element because children array [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:35:7
   35| <Text>{'Hello, '}{'world!'}</Text>; // Error: We did not allow an array.
             ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:36:7

Cannot create `Text` element because children array [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:36:7
   36| <Text>Hello, {'world!'}</Text>; // Error: We did not allow an array.
             ^^^^^^^^^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:37:7

Cannot create `Text` element because children array [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:37:7
   37| <Text>{'Hello, world!'}  </Text>; // Error: Spaces cause there to be an array.
             ^^^^^^^^^^^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- text.js:38:7

Cannot create `Text` element because children array [1] is incompatible with string [2] in property `children`.
[incompatible-type]

   text.js:38:7
   38| <Text>  {'Hello, world!'}</Text>; // Error: Spaces cause there to be an array.
             ^^^^^^^^^^^^^^^^^^^ [1]

References:
   text.js:5:47
    5| class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:48:14

Cannot create `TextLiteral` element because JSX text [1] is incompatible with union type [2] in property `children`.
[incompatible-type]

   text.js:48:14
   48| <TextLiteral>buz</TextLiteral>; // Error: `buz` is not allowed.
                    ^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:49:15

Cannot create `TextLiteral` element because string [1] is incompatible with union type [2] in property `children`.
[incompatible-type]

   text.js:49:15
   49| <TextLiteral>{'buz'}</TextLiteral>; // Error: `buz` is not allowed.
                     ^^^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:50:14

Cannot create `TextLiteral` element because JSX text [1] is incompatible with union type [2] in property `children`.
[incompatible-type]

   text.js:50:14
   50| <TextLiteral>foo  </TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:51:14

Cannot create `TextLiteral` element because JSX text [1] is incompatible with union type [2] in property `children`.
[incompatible-type]

   text.js:51:14
   51| <TextLiteral>  foo</TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:52:14

Cannot create `TextLiteral` element because children array [1] is incompatible with union type [2] in property
`children`. [incompatible-type]

   text.js:52:14
   52| <TextLiteral>{'foo'}  </TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^^^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- text.js:53:14

Cannot create `TextLiteral` element because children array [1] is incompatible with union type [2] in property
`children`. [incompatible-type]

   text.js:53:14
   53| <TextLiteral>  {'foo'}</TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^^^^^ [1]

References:
   text.js:7:54
    7| class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- tuple.js:9:2

Cannot create `Tuple` element because property `children` is missing in props [1] but exists in object type [2].
[prop-missing]

   tuple.js:9:2
   9| <Tuple />; // Error: `children` is required.
       ^^^^^

References:
   tuple.js:9:1
   9| <Tuple />; // Error: `children` is required.
      ^^^^^^^^^ [1]
   tuple.js:6:27
   6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tuple.js:12:8

Cannot create `Tuple` element because children array [1] has 4 elements but tuple type [2] has 3 elements in property
`children`. [invalid-tuple-arity]

   tuple.js:12:8
   12| <Tuple>{true}{'foo'}{42}{null}</Tuple>; // Error: One to many.
              ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   tuple.js:6:38
    6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tuple.js:13:8

Cannot create `Tuple` element because children array [1] has 4 elements but tuple type [2] has 3 elements in property
`children`. [invalid-tuple-arity]

   tuple.js:13:8
   13| <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
              ^^^^^^^^^^^^^^^ [1]

References:
   tuple.js:6:38
    6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tuple.js:14:8

Cannot create `Tuple` element because children array [1] has 4 elements but tuple type [2] has 3 elements in property
`children`. [invalid-tuple-arity]

   tuple.js:14:8
   14| <Tuple>{true}foo{42}  </Tuple>; // Error: Spaces add items.
              ^^^^^^^^^^^^^^^ [1]

References:
   tuple.js:6:38
    6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tuple.js:16:8

Cannot create `Tuple` element because children array [1] has 2 elements but tuple type [2] has 3 elements in property
`children`. [invalid-tuple-arity]

   tuple.js:16:8
   16| <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   tuple.js:6:38
    6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tuple.js:18:9

Cannot create `Tuple` element because array literal [1] has 4 elements but tuple type [2] has 3 elements in property
`children`. [invalid-tuple-arity]

   tuple.js:18:9
   18| <Tuple>{[true, 'foo', 42, null]}</Tuple>; // Error: One to many
               ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   tuple.js:6:38
    6|   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuple.js:34:12

Cannot create `TupleOne` element because boolean [1] is incompatible with tuple type [2] in property `children`.
[incompatible-type]

   tuple.js:34:12
   34| <TupleOne>{true}</TupleOne>; // Error: A single expression is not an array.
                  ^^^^ [1]

References:
   tuple.js:7:51
    7| class TupleOne extends React.Component<{children: [boolean]}, void> {}
                                                         ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- view.js:32:4

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either object literal [1] is incompatible with `React.Element` [2].
 - Or object literal [1] is incompatible with array type [3].

   view.js:32:4
   32|   {{a: 1, b: 2, c: 3}}
          ^^^^^^^^^^^^^^^^^^ [1]

References:
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   view.js:10:5
   10|   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- view.js:35:7

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either JSX text [1] is incompatible with boolean [2].
 - Or JSX text [1] is incompatible with `React.Element` [3].

   view.js:35:7
   35| <View>Hello, world!</View>; // Error: Strings are not allowed as children.
             ^^^^^^^^^^^^^ [1]

References:
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [2]
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- view.js:36:8

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either string [1] is incompatible with boolean [2].
 - Or string [1] is incompatible with `React.Element` [3].

   view.js:36:8
   36| <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
              ^^^^^^^^^^^^^^^ [1]

References:
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [2]
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- view.js:37:8

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with `React.Element` [3].

   view.js:37:8
   37| <View>{42}</View>; // Error: Numbers are not allowed as children.
              ^^ [1]

References:
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [2]
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- view.js:38:7

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either children array [1] is incompatible with `React.Element` [2].
 - Or number [3] is incompatible with boolean [4] in array element.

   view.js:38:7
   38| <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
             ^^^^^^^^^ [1]

References:
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   view.js:38:8
   38| <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
              ^ [3]
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- view.js:39:8

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either string [1] is incompatible with boolean [2] in array element.
 - Or string [1] is incompatible with `React.Element` [3] in array element.

   view.js:39:8
   39| <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
              ^^^^^^^^^^^^^^^

References:
   view.js:39:9
   39| <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
               ^^^ [1]
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [2]
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- view.js:40:8

Cannot create `View` element because in property `children`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2] in array element.
 - Or number [1] is incompatible with `React.Element` [3] in array element.

   view.js:40:8
   40| <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
              ^^^^^^^^^

References:
   view.js:40:9
   40| <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
               ^ [1]
   view.js:8:5
    8|   | boolean
           ^^^^^^^ [2]
   view.js:9:5
    9|   | ExactReactElement_DEPRECATED<any>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]



Found 105 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
