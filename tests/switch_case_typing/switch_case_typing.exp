Error ------------------------------------------------------------------------------------------------------ test.js:8:8

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:8:8
   8|   case 'qux': // error
             ^^^^^ [2]

References:
   test.js:2:16
   2| declare var x: Enum;
                     ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:17:8

Invalid check of number literal `3` against `Enum` [1] because number literal `3` [2] is incompatible with `Enum` [1].
[incompatible-type]

   test.js:17:8
   17|   case 3: // error
              ^ [2]

References:
   test.js:2:16
    2| declare var x: Enum;
                      ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:26:8

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:26:8
   26|   case 'qux': // error
              ^^^^^ [2]

References:
   test.js:2:16
    2| declare var x: Enum;
                      ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:33:16

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:33:16
   33| else if (x === 'qux') {} // error
                      ^^^^^ [2]

References:
   test.js:2:16
    2| declare var x: Enum;
                      ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:37:16

Invalid check of string literal `qux` against `Enum` [1] because string literal `qux` [2] is incompatible with
`Enum` [1]. [incompatible-type]

   test.js:37:16
   37| else if (x === 'qux') {} // error
                      ^^^^^ [2]

References:
   test.js:2:16
    2| declare var x: Enum;
                      ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:45:8

Invalid check of number literal `4` against `eNum` [1] because number literal `4` [2] is incompatible with `eNum` [1].
[incompatible-type]

   test.js:45:8
   45|   case 4: // error
              ^ [2]

References:
   test.js:40:16
   40| declare var y: eNum;
                      ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:54:8

Invalid check of number literal `4` against `eNum` [1] because number literal `4` [2] is incompatible with `eNum` [1].
[incompatible-type]

   test.js:54:8
   54|   case 4: // error
              ^ [2]

References:
   test.js:40:16
   40| declare var y: eNum;
                      ^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:65:8

Cannot compare string [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string
   literal `foo` [3].
 - Or cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string literal
   `bar` [4].
 - Or cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string literal
   `baz` [5].

   test.js:65:8
   65|   case 'qux': // error
              ^^^^^ [1]

References:
   test.js:59:13
   59| declare var o: DisjointUnion;
                   ^ [2]
   test.js:58:30
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                    ^^^^^ [3]
   test.js:58:48
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                      ^^^^^ [4]
   test.js:58:66
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                        ^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `foo` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:58:30
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                    ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `bar` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:58:48
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                      ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `baz` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:58:66
   58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                        ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `foo` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:62:8
   62|   case 'foo':
              ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `bar` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:63:8
   63|   case 'bar':
              ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `foo` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:70:8
   70|   case 'foo':
              ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `bar` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:71:8
   71|   case 'bar':
              ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:73:6

Cannot cast `o.type` to empty because string literal `baz` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:73:6
   73|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:72:8
   72|   case 'baz':
              ^^^^^ [1]
   test.js:73:14
   73|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:75:8

Cannot compare string [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string
   literal `foo` [3].
 - Or cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string literal
   `bar` [4].
 - Or cannot compare string [1] with property `type` of `o` [2] because string [1] is incompatible with string literal
   `baz` [5].

   test.js:75:8
    75|   case 'qux': // error
               ^^^^^ [1]

References:
   test.js:110:20
   110| if (KeyObj.ERR === o.type) {} // error
                           ^ [2]
   test.js:58:30
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [3]
   test.js:58:48
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [4]
   test.js:58:66
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [5]


Error ----------------------------------------------------------------------------------------------------- test.js:76:6

Cannot cast `o.type` to empty because string literal `qux` [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:76:6
   76|     (o.type: empty); // error
            ^^^^^^

References:
   test.js:65:8
   65|   case 'qux': // error
              ^^^^^ [1]
   test.js:76:14
   76|     (o.type: empty); // error
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:85:8

Cannot compare number [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare number [1] with property `type` of `o` [2] because number [1] is incompatible with string
   literal `foo` [3].
 - Or cannot compare number [1] with property `type` of `o` [2] because number [1] is incompatible with string literal
   `bar` [4].
 - Or cannot compare number [1] with property `type` of `o` [2] because number [1] is incompatible with string literal
   `baz` [5].

   test.js:85:8
    85|   case 3: // error
               ^ [1]

References:
   test.js:110:20
   110| if (KeyObj.ERR === o.type) {} // error
                           ^ [2]
   test.js:58:30
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [3]
   test.js:58:48
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [4]
   test.js:58:66
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- test.js:90:11

Invalid check of string literal `a` against `String` [1] because string literal `a` [2] is incompatible with
`String` [1]. [incompatible-type]

   test.js:90:11
   90| if (s === "a" || s === "b") {} // error
                 ^^^ [2]

References:
   test.js:89:16
   89| declare var s: String;
                      ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:90:24

Invalid check of string literal `b` against `String` [1] because string literal `b` [2] is incompatible with
`String` [1]. [incompatible-type]

   test.js:90:24
   90| if (s === "a" || s === "b") {} // error
                              ^^^ [2]

References:
   test.js:89:16
   89| declare var s: String;
                      ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:91:11

Invalid check of string literal `a` against `String` [1] because string literal `a` [2] is incompatible with
`String` [1]. [incompatible-type]

   test.js:91:11
   91| if (s === "a" && s === "b") {} // error
                 ^^^ [2]

References:
   test.js:89:16
   89| declare var s: String;
                      ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:91:24

Invalid check of string literal `b` against `String` [1] because string literal `b` [2] is incompatible with
`String` [1]. [incompatible-type]

   test.js:91:24
   91| if (s === "a" && s === "b") {} // error
                              ^^^ [2]

References:
   test.js:89:16
   89| declare var s: String;
                      ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:94:12

Invalid check of number literal `1` against string [1] because number literal `1` [2] is incompatible with string [1].
[incompatible-type]

   test.js:94:12
   94| if (st === 1 || st === 2) {} // error
                  ^ [2]

References:
   test.js:93:17
   93| declare var st: string;
                       ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:94:24

Invalid check of number literal `2` against string [1] because number literal `2` [2] is incompatible with string [1].
[incompatible-type]

   test.js:94:24
   94| if (st === 1 || st === 2) {} // error
                              ^ [2]

References:
   test.js:93:17
   93| declare var st: string;
                       ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:95:12

Invalid check of number literal `1` against string [1] because number literal `1` [2] is incompatible with string [1].
[incompatible-type]

   test.js:95:12
   95| if (st === 1 && st === 2) {} // error
                  ^ [2]

References:
   test.js:93:17
   93| declare var st: string;
                       ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:95:24

Invalid check of number literal `2` against string [1] because number literal `2` [2] is incompatible with string [1].
[incompatible-type]

   test.js:95:24
   95| if (st === 1 && st === 2) {} // error
                              ^ [2]

References:
   test.js:93:17
   93| declare var st: string;
                       ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:99:19

Cannot compare number [1] with property `field` of `obj` [2] because number [1] is incompatible with string [3].
[incompatible-type]

   test.js:99:19
   99| if (obj.field === 1 || obj.field === 2) {} // error
                         ^ [1]

References:
   test.js:98:13
   98| declare var obj: Obj;
                   ^^^ [2]
   test.js:97:22
   97| type Obj = { field : string };
                            ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- test.js:99:38

Cannot compare number [1] with property `field` of `obj` [2] because number [1] is incompatible with string [3].
[incompatible-type]

   test.js:99:38
   99| if (obj.field === 1 || obj.field === 2) {} // error
                                            ^ [1]

References:
   test.js:98:13
   98| declare var obj: Obj;
                   ^^^ [2]
   test.js:97:22
   97| type Obj = { field : string };
                            ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- test.js:100:19

Cannot compare number [1] with property `field` of `obj` [2] because number [1] is incompatible with string [3].
[incompatible-type]

   test.js:100:19
   100| if (obj.field === 1 && obj.field === 2) {} // error
                          ^ [1]

References:
   test.js:98:13
    98| declare var obj: Obj;
                    ^^^ [2]
   test.js:97:22
    97| type Obj = { field : string };
                             ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- test.js:109:16

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `baz` [6].

   test.js:109:16
   109| if (o.type === KeyObj.ERR) {} // error
                       ^^^^^^^^^^ [1]

References:
   test.js:110:20
   110| if (KeyObj.ERR === o.type) {} // error
                           ^ [2]
   test.js:106:10
   106|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:58:30
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:58:48
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:58:66
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]


Error ---------------------------------------------------------------------------------------------------- test.js:110:5

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `baz` [6].

   test.js:110:5
   110| if (KeyObj.ERR === o.type) {} // error
            ^^^^^^^^^^ [1]

References:
   test.js:110:20
   110| if (KeyObj.ERR === o.type) {} // error
                           ^ [2]
   test.js:106:10
   106|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:58:30
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:58:48
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:58:66
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]


Error ---------------------------------------------------------------------------------------------------- test.js:115:8

Cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because: [incompatible-type]
 - Either cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `foo` [4].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `bar` [5].
 - Or cannot compare `KeyObj.ERR` [1] with property `type` of `o` [2] because string [3] is incompatible with string
   literal `baz` [6].

   test.js:115:8
   115|   case KeyObj.ERR: // error
               ^^^^^^^^^^ [1]

References:
   test.js:110:20
   110| if (KeyObj.ERR === o.type) {} // error
                           ^ [2]
   test.js:106:10
   106|   "ERR": 'err',
                 ^^^^^ [3]
   test.js:58:30
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                     ^^^^^ [4]
   test.js:58:48
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                       ^^^^^ [5]
   test.js:58:66
    58| type DisjointUnion = { type: 'foo' } | { type: 'bar' } | { type: 'baz' }
                                                                         ^^^^^ [6]



Found 33 errors
