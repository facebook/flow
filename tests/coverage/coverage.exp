[0m// check coverage of declare module

[0m[0mdeclare module foo {
}[0m[0m
[0m
Covered: 100.00% (1 of 1 expressions)

[0m// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes a crash with coverage --color.

[0m[0mdeclare module foo {
}[0m[0m

[0m[0mdeclare module bar {
}[0m[0m
[0m
Covered: 100.00% (2 of 2 expressions)

[0m// This file triggers a violation of the "disjoint-or-nested ranges invariant"
// that we implicitly assume in type-at-pos and coverage implementations. In
// particular, when unchecked it causes non-termination with coverage --color.

[0m[0mdeclare module foo {
}[0m[0m

[0m[0mdeclare module bar {
}[0m[0m

[0m[0mdeclare class qux {
}[0m[0m
[0m
Covered: 100.00% (3 of 3 expressions)

Covered: 75.00% (3 of 4 expressions)

Covered: 75.00% (3 of 4 expressions)

Covered: 0.00% (0 of 4 expressions)

Covered: 75.00% (3 of 4 expressions)

-----------------------------
coverage.js
-----------------------------

{
  "expressions":{
    "covered_count":10,
    "covered_locs":[
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":7,"offset":16},
        "end":{"line":3,"column":9,"offset":19}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":13,"offset":22},
        "end":{"line":3,"column":13,"offset":23}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":13,"offset":22},
        "end":{"line":3,"column":17,"offset":27}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":13,"offset":22},
        "end":{"line":3,"column":21,"offset":31}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":17,"offset":26},
        "end":{"line":3,"column":17,"offset":27}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":3,"column":21,"offset":30},
        "end":{"line":3,"column":21,"offset":31}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":5,"column":18,"offset":51},
        "end":{"line":5,"column":20,"offset":54}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":5,"column":18,"offset":51},
        "end":{"line":5,"column":24,"offset":58}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":5,"column":24,"offset":57},
        "end":{"line":5,"column":24,"offset":58}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":7,"column":19,"offset":79},
        "end":{"line":7,"column":19,"offset":80}
      }
    ],
    "uncovered_count":5,
    "uncovered_locs":[
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":5,"column":7,"offset":40},
        "end":{"line":5,"column":14,"offset":48}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":7,"column":7,"offset":67},
        "end":{"line":7,"column":9,"offset":70}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":7,"column":13,"offset":73},
        "end":{"line":7,"column":15,"offset":76}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":7,"column":13,"offset":73},
        "end":{"line":7,"column":19,"offset":80}
      },
      {
        "source":"coverage.js",
        "type":"SourceFile",
        "start":{"line":9,"column":1,"offset":83},
        "end":{"line":9,"column":3,"offset":86}
      }
    ]
  }
}
[0m// @flow

const [0m[0mfoo[0m[0m = [0m[0m5[0m[0m [0m[0m+[0m[0m [0m[0m3[0m[0m [0m[0m+[0m[0m [0m[0m2[0m[0m;

const [0m[31mbar: any[0m[0m = [0m[0mfoo[0m[0m [0m[0m-[0m[0m [0m[0m2[0m[0m;

const [0m[31mbaz[0m[0m = [0m[31mbar[0m[0m [0m[31m+[0m[0m [0m[0m1[0m[0m;

[0m[31mbaz[0m[0m;
[0m
Covered: 66.67% (10 of 15 expressions)

-----------------------------
unicode.js
-----------------------------

{
  "expressions":{
    "covered_count":5,
    "covered_locs":[
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":3,"column":2,"offset":11},
        "end":{"line":3,"column":5,"offset":15}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":5,"column":7,"offset":30},
        "end":{"line":5,"column":11,"offset":35}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":5,"column":15,"offset":38},
        "end":{"line":5,"column":17,"offset":44}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":5,"column":21,"offset":47},
        "end":{"line":5,"column":24,"offset":51}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":7,"column":2,"offset":61},
        "end":{"line":7,"column":5,"offset":65}
      }
    ],
    "uncovered_count":3,
    "uncovered_locs":[
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":3,"column":2,"offset":11},
        "end":{"line":3,"column":10,"offset":20}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":5,"column":21,"offset":47},
        "end":{"line":5,"column":29,"offset":56}
      },
      {
        "source":"unicode.js",
        "type":"SourceFile",
        "start":{"line":7,"column":2,"offset":61},
        "end":{"line":7,"column":10,"offset":70}
      }
    ]
  }
}
[0m// @flow

([0m[0mnull[0m[0m:[0m[31m any[0m[0m);

const [0m[0memoji[0m[0m = [0m[0m"ðŸ’©"[0m[0m; ([0m[0mnull[0m[0m:[0m[31m any[0m[0m);

([0m[0mnull[0m[0m:[0m[31m any[0m[0m);
[0m
Covered: 62.50% (5 of 8 expressions)

