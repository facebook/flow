Error --------------------------------------------------------------------------------------------------------- B.js:6:4

Cannot get `b.foo` because property `foo` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   B.js:6:4
   6| (b.foo: number); // error, number !~> function
         ^^^ [1]

References:
   A.js:2:3
   2|   foo(x:number):void { }
        ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------------- C.js:4:9

Cannot extend `B` [1] with `C` because string [2] is incompatible with number [3] in the first parameter of property
`foo`. [incompatible-extend]

   C.js:4:9
   4|   foo(x:string):void { }
              ^^^^^^ [2]

References:
   C.js:3:17
   3| class C extends B {
                      ^ [1]
   A.js:2:9
   2|   foo(x:number):void { }
              ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------------- C.js:8:2

Cannot cast `c.foo` to number because function [1] is incompatible with number [2]. [incompatible-cast]

   C.js:8:2
   8| (c.foo: number); // error, number !~> function
       ^^^^^

References:
   C.js:4:3
   4|   foo(x:string):void { }
        ^^^^^^^^^^^^^^^^^^^^^^ [1]
   C.js:8:9
   8| (c.foo: number); // error, number !~> function
              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------------- C.js:8:4

Cannot get `c.foo` because property `foo` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   C.js:8:4
   8| (c.foo: number); // error, number !~> function
         ^^^ [1]

References:
   C.js:4:3
   4|   foo(x:string):void { }
        ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------------- D.js:3:9

Cannot get `(new E()).x` because property `x` is missing in `E` [1]. [prop-missing]

   D.js:3:9
   3| new E().x
              ^

References:
   D.js:3:1
   3| new E().x
      ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- class_shapes.js:18:3

Cannot get `x.b` because property `b` is missing in `TestClass` [1]. [prop-missing]

   class_shapes.js:18:3
   18| x.b; // error, TestClass has no b
         ^

References:
   class_shapes.js:15:9
   15| var x = new TestClass();
               ^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- class_shapes.js:20:3

Cannot get `x.d` because property `d` is missing in `TestClass` [1]. [prop-missing]

   class_shapes.js:20:3
   20| x.d; // error, TestClass has no d
         ^

References:
   class_shapes.js:15:9
   15| var x = new TestClass();
               ^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- class_shapes.js:22:15

Cannot assign `x` to `y` because property `b` is missing in `TestClass` [1] but exists in `Foo` [2]. [prop-missing]

   class_shapes.js:22:15
   22| var y : Foo = x;
                     ^

References:
   class_shapes.js:15:9
   15| var x = new TestClass();
               ^^^^^^^^^^^^^^^ [1]
   class_shapes.js:22:9
   22| var y : Foo = x;
               ^^^ [2]


Error -------------------------------------------------------------------------------------------- class_shapes.js:35:15

Cannot assign `z` to `w` because number [1] is incompatible with string [2] in property `a`. [incompatible-type]

   class_shapes.js:35:15
   35| var w : Foo = z;
                     ^

References:
   class_shapes.js:27:6
   27|   a: number;  // conflicts with cast to Foo
            ^^^^^^ [1]
   class_shapes.js:4:6
    4|   a: string;    // exists in TestClass
            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_shapes.js:35:15

Cannot assign `z` to `w` because number [1] is incompatible with string [2] in property `b`. [incompatible-type]

   class_shapes.js:35:15
   35| var w : Foo = z;
                     ^

References:
   class_shapes.js:31:6
   31|   b: number;  // conflicts with cast to Foo
            ^^^^^^ [1]
   class_shapes.js:5:6
    5|   b: string;    // doesn't exist
            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_shapes.js:35:15

Cannot assign `z` to `w` because number [1] is incompatible with string [2] in property `c`. [incompatible-type]

   class_shapes.js:35:15
   35| var w : Foo = z;
                     ^

References:
   class_shapes.js:28:7
   28|   c: ?number; // conflicts with cast to Foo
             ^^^^^^ [1]
   class_shapes.js:6:8
    6|   c?: ?string;  // exists in TestClass, optional
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- expr.js:14:13

Cannot resolve name `Baz`. [cannot-resolve-name]

   14| var b = new Baz(); // error: Baz is not a runtime binding in this scope
                   ^^^


Error ----------------------------------------------------------------------------------------------------- expr.js:17:8

Cannot resolve name `Qux`. [cannot-resolve-name]

   17| var c: Qux = new C(); // error: Qux is not a type in this scope
              ^^^


Error ---------------------------------------------------------------------------------------------------- expr.js:29:21

Cannot assign `new _Alias()` to `alias1` because `Alias` [1] is incompatible with `Alias` [2]. [incompatible-type]

   expr.js:29:21
   29| var alias1: Alias = new _Alias(); // error: bad pun
                           ^^^^^^^^^^^^ [1]

References:
   expr.js:29:13
   29| var alias1: Alias = new _Alias(); // error: bad pun
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- expr.js:30:21

Cannot assign `_Alias.factory()` to `alias2` because `Alias` [1] is incompatible with `Alias` [2]. [incompatible-type]

   expr.js:30:21
   30| var alias2: Alias = _Alias.factory(); // error: bad pun
                           ^^^^^^^^^^^^^^^^

References:
   expr.js:25:21
   25|   static factory(): Alias {
                           ^^^^^ [1]
   expr.js:30:13
   30| var alias2: Alias = _Alias.factory(); // error: bad pun
                   ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- loc.js:5:7

Cannot declare `Foo` [1] because the name is already bound. [name-already-bound]

   loc.js:5:7
   5| class Foo {} // error, shadows type Foo
            ^^^

References:
   loc.js:3:6
   3| type Foo = number
           ^^^ [1]


Error -------------------------------------------------------------------------------------------------- statics.js:10:2

Cannot cast `C` to object type because string [1] is incompatible with number [2] in property `p`. [incompatible-cast]

   statics.js:10:2
   10| (C: {p:number}); // errors, string ~> number & vice versa (unify)
        ^

References:
   statics.js:4:13
    4|   static p: string;
                   ^^^^^^ [1]
   statics.js:10:8
   10| (C: {p:number}); // errors, string ~> number & vice versa (unify)
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- statics.js:13:2

Cannot cast `o` to statics of `C` because object type [1] is incompatible with statics of `C` [2]. [incompatible-cast]

   statics.js:13:2
   13| (o: Class<C>); // error, object type incompatible with class type
        ^

References:
   statics.js:12:16
   12| declare var o: {p:number};
                      ^^^^^^^^^^ [1]
   statics.js:13:5
   13| (o: Class<C>); // error, object type incompatible with class type
           ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- statics.js:19:2

Cannot cast `Dup1.x` to empty because function [1] is incompatible with empty [2]. [incompatible-cast]

   statics.js:19:2
   19| (Dup1.x: empty); // function ~> empty
        ^^^^^^

References:
   statics.js:17:3
   17|   static x() {}
         ^^^^^^^^^^^^^ [1]
   statics.js:19:10
   19| (Dup1.x: empty); // function ~> empty
                ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- statics.js:25:2

Cannot cast `Dup2.x` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   statics.js:25:2
   25| (Dup2.x: empty); // string ~> empty
        ^^^^^^

References:
   statics.js:23:13
   23|   static x: string;
                   ^^^^^^ [1]
   statics.js:25:10
   25| (Dup2.x: empty); // string ~> empty
                ^^^^^ [2]



Found 20 errors
