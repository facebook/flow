Error --------------------------------------------------------------------------------------------------- async.js:10:10

Cannot return `1` because number [1] is incompatible with boolean [2] in type argument `R` [3]. [incompatible-return]

   async.js:10:10
     10|   return 1;  // error, number != boolean
                  ^ [1]

References:
   async.js:9:30
      9| async function f1(): Promise<boolean> {
                                      ^^^^^^^ [2]
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [3]


Error --------------------------------------------------------------------------------------------------- async.js:29:10

Cannot return `await p` because number [1] is incompatible with boolean [2] in type argument `R` [3].
[incompatible-return]

   async.js:29:10
     29|   return await p; // error, number != boolean
                  ^^^^^^^

References:
   async.js:28:30
     28| async function f4(p: Promise<number>): Promise<boolean> {
                                      ^^^^^^ [1]
   async.js:28:48
     28| async function f4(p: Promise<number>): Promise<boolean> {
                                                        ^^^^^^^ [2]
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [3]


Error --------------------------------------------------------------------------------------------------- async.js:43:29

Cannot expect undefined as the return type of async function because undefined [1] is incompatible with
implicitly-returned `Promise`. [incompatible-return]

   43|   static async m(a: mixed): void { await a; } // error, void != Promise<void>
                                   ^^^^ [1]


Error -------------------------------------------------------------------------------------------------- async2.js:11:21

Cannot assign `a` to `c` because number [1] is incompatible with string [2]. [incompatible-type]

   async2.js:11:21
   11|     var c: string = a; // Error: number ~> string
                           ^

References:
   async2.js:5:12
    5|     return 42;
                  ^^ [1]
   async2.js:11:12
   11|     var c: string = a; // Error: number ~> string
                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- async2.js:30:30

Cannot assign `voidoid1` to `voidoid3` because `Promise` [1] is incompatible with undefined [2] in the return value.
[incompatible-type]

   async2.js:30:30
   30|   var voidoid3: () => void = voidoid1; // error, void != Promise<void>
                                    ^^^^^^^^

References:
   async2.js:24:28
   24|   async function voidoid1() {
                                  ^ [1]
   async2.js:30:23
   30|   var voidoid3: () => void = voidoid1; // error, void != Promise<void>
                             ^^^^ [2]


Error -------------------------------------------------------------------------------------------------- async2.js:48:30

Cannot expect undefined as the return type of async function because undefined [1] is incompatible with
implicitly-returned `Promise`. [incompatible-return]

   48|   async function voidoid5(): void { // error, void != Promise<void>
                                    ^^^^ [1]


Error -------------------------------------------------------------------------------------------------- async2.js:55:13

Cannot expect `Promise` as the return type of async function because number [1] is incompatible with implicitly-returned
undefined in type argument `R` [2]. [incompatible-return]

   async2.js:55:13
     55|   : Promise<number> { // error, number != void
                     ^^^^^^ [1]

References:
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [2]


Error -------------------------------------------------------------------------------------------------- async3.js:29:19

Cannot assign `a` to `c` because number [1] is incompatible with string [2]. [incompatible-type]

   async3.js:29:19
   29|   var c: string = a;
                         ^

References:
   async3.js:10:10
   10|   return 42;
                ^^ [1]
   async3.js:29:10
   29|   var c: string = a;
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- async_base_class.js:12:22

Cannot use `await P` [1] as a superclass. Only variables and member expressions may be extended [invalid-extends]

   12|   class Bar extends (await P) { }
                            ^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- async_return_void.js:2:3

Cannot return undefined because undefined [1] is incompatible with string [2] in type argument `R` [3].
[incompatible-return]

   async_return_void.js:2:3
      2|   return;
           ^^^^^^^ [1]

References:
   async_return_void.js:1:32
      1| async function foo1(): Promise<string> {
                                        ^^^^^^ [2]
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [3]


Error ---------------------------------------------------------------------------------------- async_return_void.js:6:10

Cannot return `undefined` because undefined [1] is incompatible with string [2] in type argument `R` [3].
[incompatible-return]

   async_return_void.js:6:10
      6|   return undefined;
                  ^^^^^^^^^ [1]

References:
   async_return_void.js:5:32
      5| async function foo2(): Promise<string> {
                                        ^^^^^^ [2]
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [3]


Error --------------------------------------------------------------------------------------- async_return_void.js:11:10

Cannot return `bar()` because undefined [1] is incompatible with string [2] in type argument `R` [3].
[incompatible-return]

   async_return_void.js:11:10
     11|   return bar();
                  ^^^^^

References:
   async_return_void.js:10:17
     10|   function bar() { }
                         ^ [1]
   async_return_void.js:9:32
      9| async function foo3(): Promise<string> {
                                        ^^^^^^ [2]
   <BUILTINS>/core.js:1972:24
   1972| declare class Promise<+R = mixed> {
                                ^ [3]


Error ---------------------------------------------------------------------------------------- await_not_in_async.js:5:9

Unexpected number, expected the end of an expression statement (`;`)

   5|   await 1;
              ^


Error --------------------------------------------------------------------------------------- await_not_in_async2.js:6:9

Unexpected number, expected the token `,`

   6| f(await 1);
              ^


Error --------------------------------------------------------------------------------------- await_not_in_async3.js:6:9

Unexpected number, expected the token `,`

   6| f(await 1);
              ^


Error ----------------------------------------------------------------------------------------------- generator.js:21:45

Cannot expect `AsyncGenerator` as the return type of async generator function because number [1] is incompatible with
string [2] in type argument `Yield` [3]. [incompatible-return]

   generator.js:21:45
     21| async function *genError1(): AsyncGenerator<number, void, void> {
                                                     ^^^^^^ [1]

References:
   <BUILTINS>/core.js:2035:58
   2035|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: Awaited<T[K]>} :
                                                                  ^^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1778:27
   1778| interface AsyncGenerator<+Yield,+Return,-Next> {
                                   ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- generator.js:21:30

string [1] is incompatible with number [2] in type argument `Yield` [3]. [incompatible-type-arg]

   generator.js:21:30
     21| async function *genError1(): AsyncGenerator<number, void, void> {
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:2035:58
   2035|       T extends $ReadOnlyArray<mixed> ? {[K in keyof T]: Awaited<T[K]>} :
                                                                  ^^^^^^^^^^^^^ [1]
   generator.js:21:45
     21| async function *genError1(): AsyncGenerator<number, void, void> {
                                                     ^^^^^^ [2]
   <BUILTINS>/core.js:1778:27
   1778| interface AsyncGenerator<+Yield,+Return,-Next> {
                                   ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- generator.js:26:12

Cannot yield `1` because number [1], a primitive, cannot be used as a subtype of `$Iterable` [2]. You can wrap it in
`new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   generator.js:26:12
     26|     yield* 1; // error non iterable
                    ^ [1]

References:
   <BUILTINS>/core.js:1789:7
   1789|     : $Iterable<Yield, Return, Next>;
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]



Found 18 errors
