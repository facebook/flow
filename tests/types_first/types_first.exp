Error ------------------------------------------------------------------------------------------------ component.js:1:63

Cannot resolve name `bar`. [cannot-resolve-name]

   1| export component ComponentWithTypeof(bar: string, baz: typeof bar, boz: {boz: typeof baz}) { return } // error: name-not-bound
                                                                    ^^^


Error ------------------------------------------------------------------------------------------------ component.js:1:86

Cannot resolve name `baz`. [cannot-resolve-name]

   1| export component ComponentWithTypeof(bar: string, baz: typeof bar, boz: {boz: typeof baz}) { return } // error: name-not-bound
                                                                                           ^^^


Error ------------------------------------------------------------------------------------------------- function.js:1:22

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Missing type
annotation at function return: [signature-verification-failure]

   1| export function foo() { return 1; } // missing annotation
                           


Error -------------------------------------------------------------------------------------------- import-value2.js:2:10

Cannot return `x` because number [1] is incompatible with string [2]. [incompatible-type]

   import-value2.js:2:10
   2|   return x;
               ^

References:
   import-value2.js:1:22
   1| export function f(x: number): string {
                           ^^^^^^ [1]
   import-value2.js:1:31
   1| export function f(x: number): string {
                                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- import_dynamic_dep.js:3:4

Cannot cast `y` to empty because module `./import-value1` [1] is incompatible with empty [2]. [incompatible-type]

   import_dynamic_dep.js:3:4
   3|   (y: empty); // error: number ~> empty
         ^

References:
   import-value1.js
   ^^^^^^^^^^^^^^^^ [1]
   import_dynamic_dep.js:3:7
   3|   (y: empty); // error: number ~> empty
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------ test-multiple-export-2.js:4:2

Cannot cast `a.f` to number because string [1] is incompatible with number [2]. [incompatible-type]

   test-multiple-export-2.js:4:2
   4| (a.f: number);
       ^^^

References:
   multiple-export-2.js:6:13
   6|   static f: string = ""
                  ^^^^^^ [1]
   test-multiple-export-2.js:4:7
   4| (a.f: number);
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:1:19

Cannot assign `require(...)` to `n` because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:1:19
   1| const n: string = require('./import-value1'); // error: number ~/~> string
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   import-value1.js:1:18
   1| module.exports = 0;
                       ^ [1]
   test.js:1:10
   1| const n: string = require('./import-value1'); // error: number ~/~> string
               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:8:2

Cannot cast `n` to `T` because string [1] is incompatible with number [2]. [incompatible-type]

   test.js:8:2
   8| (n: T); // error: string ~/~> number
       ^

References:
   test.js:1:10
   1| const n: string = require('./import-value1'); // error: number ~/~> string
               ^^^^^^ [1]
   test.js:8:5
   8| (n: T); // error: string ~/~> number
          ^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast `f(...)` to `S` because string [1] is incompatible with number [2]. [incompatible-type]

   test.js:9:2
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
       ^^^^^

References:
   import-value2.js:1:31
   1| export function f(x: number): string {
                                    ^^^^^^ [1]
   test.js:9:9
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
              ^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:4

Cannot call `f` with empty string bound to `x` because string [1] is incompatible with number [2]. [incompatible-type]

   test.js:9:4
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
         ^^ [1]

References:
   import-value2.js:1:22
   1| export function f(x: number): string {
                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:2

Cannot cast `o` to `O` because properties `x` and `y` of object literal [1] are not exactly the same as those of
`O` [2]. 

The above-mentioned two types must be the same because properties `x` and `y` are invariantly typed. To fix the error,
- Either annotate object literal [3] with `O` [4]
- Or make properties `x` and `y` in `O` [2] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   test.js:10:2
   10| (o: O); // error: number (property x) <~/~> string
        ^ [1]

References:
   test.js:10:5
   10| (o: O); // error: number (property x) <~/~> string
           ^ [2]
   import-value3.js:2:12
                  v
    2| const o2 = {
    3|   x: 0,
    4|   y: o1,
    5| };
       ^ [3]
   import-type5.js:3:17
                       v----------------------------------
    3| export type O = { // mutually recursive object type
    4|   x: string;
    5|   y: T;
    6| }
       ^ [4]


Error ----------------------------------------------------------------------------------------------------- test.js:11:2

Cannot cast `o.y` to `O` because properties `x` and `y` of object literal [1] are not exactly the same as those of
`O` [2]. 

The above-mentioned two types must be the same because properties `x` and `y` are invariantly typed. To fix the error,
- Either annotate object literal [3] with `O` [4]
- Or make properties `x` and `y` in `O` [2] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   test.js:11:2
   11| (o.y: O); // error: number (property x) <~/~> string
        ^^^ [1]

References:
   test.js:11:7
   11| (o.y: O); // error: number (property x) <~/~> string
             ^ [2]
   import-value3.js:2:12
                  v
    2| const o2 = {
    3|   x: 0,
    4|   y: o1,
    5| };
       ^ [3]
   import-type5.js:3:17
                       v----------------------------------
    3| export type O = { // mutually recursive object type
    4|   x: string;
    5|   y: T;
    6| }
       ^ [4]


Error ---------------------------------------------------------------------------------------------------- test.js:20:24

Cannot call `functionWithTypeof` with `3` bound to `baz` because number [1] is incompatible with string [2].
[incompatible-type]

   test.js:20:24
   20| functionWithTypeof('', 3, {boz: 3}); // error: number ~> string
                              ^ [1]

References:
   function.js:3:54
    3| export function functionWithTypeof(bar: string, baz: typeof bar, {boz}: {boz: typeof baz}) {}
                                                            ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:20:33

Cannot call `functionWithTypeof` with object literal bound to the third parameter because number [1] is incompatible
with string [2] in property `boz`. [incompatible-type]

   test.js:20:33
   20| functionWithTypeof('', 3, {boz: 3}); // error: number ~> string
                                       ^ [1]

References:
   function.js:3:79
    3| export function functionWithTypeof(bar: string, baz: typeof bar, {boz}: {boz: typeof baz}) {}
                                                                                     ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:21:52

Cannot call `functionWithTypeofAndDestructuring` with empty string bound to `y` because string [1] is incompatible with
number [2]. [incompatible-type]

   test.js:21:52
   21| functionWithTypeofAndDestructuring({x: [], y: ''}, '', 3); // error: number ~> string, string ~> number
                                                          ^^ [1]

References:
   function.js:7:6
    7|   y: typeof x1,
            ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:21:56

Cannot call `functionWithTypeofAndDestructuring` with `3` bound to `z` because number [1] is incompatible with
string [2]. [incompatible-type]

   test.js:21:56
   21| functionWithTypeofAndDestructuring({x: [], y: ''}, '', 3); // error: number ~> string, string ~> number
                                                              ^ [1]

References:
   function.js:8:6
    8|   z: typeof x2,
            ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:22:34

Cannot call `functionWithTypeofAndOptional` with empty string bound to `y` because string [1] is incompatible with
number [2]. [incompatible-type]

   test.js:22:34
   22| functionWithTypeofAndOptional(1, ''); // error: string, string ~> number
                                        ^^ [1]

References:
   function.js:11:66
   11| export function functionWithTypeofAndOptional(x?: number = 1, y: typeof x) {}
                                                                        ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:23:42

Cannot call `functionWithTypeofAndOptional` with empty string bound to `y` because string [1] is incompatible with
number [2]. [incompatible-type]

   test.js:23:42
   23| functionWithTypeofAndOptional(undefined, ''); // error: string, string ~> number
                                                ^^ [1]

References:
   function.js:11:66
   11| export function functionWithTypeofAndOptional(x?: number = 1, y: typeof x) {}
                                                                        ^^^^^^^^ [2]



Found 18 errors
