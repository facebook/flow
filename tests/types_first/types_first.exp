Error ------------------------------------------------------------------------------------------------ component.js:1:63

Cannot resolve name `bar`. [cannot-resolve-name]

   1| export component ComponentWithTypeof(bar: string, baz: typeof bar, boz: {boz: typeof baz}) { return } // error: name-not-bound
                                                                    ^^^


Error ------------------------------------------------------------------------------------------------ component.js:1:86

Cannot resolve name `baz`. [cannot-resolve-name]

   1| export component ComponentWithTypeof(bar: string, baz: typeof bar, boz: {boz: typeof baz}) { return } // error: name-not-bound
                                                                                           ^^^


Error ------------------------------------------------------------------------------------------------- function.js:1:22

Cannot build a typed interface for this module. You should annotate the exports of this module with types. Missing type
annotation at function return: [signature-verification-failure]

   1| export function foo() { return 1; } // missing annotation
                           


Error -------------------------------------------------------------------------------------------- import-value2.js:2:10

Cannot return `x` because number [1] is incompatible with string [2]. [incompatible-return]

   import-value2.js:2:10
   2|   return x;
               ^

References:
   import-value2.js:1:22
   1| export function f(x: number): string {
                           ^^^^^^ [1]
   import-value2.js:1:31
   1| export function f(x: number): string {
                                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- import_dynamic_dep.js:3:4

Cannot cast `y` to empty because module `./import-value1` [1] is incompatible with empty [2]. [incompatible-cast]

   import_dynamic_dep.js:3:4
   3|   (y: empty); // error: number ~> empty
         ^

References:
   import-value1.js
   ^^^^^^^^^^^^^^^^ [1]
   import_dynamic_dep.js:3:7
   3|   (y: empty); // error: number ~> empty
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------ test-multiple-export-2.js:4:2

Cannot cast `a.f` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test-multiple-export-2.js:4:2
   4| (a.f: number);
       ^^^

References:
   multiple-export-2.js:6:13
   6|   static f: string = ""
                  ^^^^^^ [1]
   test-multiple-export-2.js:4:7
   4| (a.f: number);
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- test-predicate.js:20:4

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test-predicate.js:20:4
   20|   (x: string); // error
          ^

References:
   exports-predicate.js:11:60
   11| declare function mono(x: mixed, y: mixed): boolean %checks(typeof x === "number");
                                                                  ^^^^^^^^^^^^^^^^^^^^^ [1]
   test-predicate.js:20:7
   20|   (x: string); // error
             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:1:19

Cannot assign `require(...)` to `n` because number [1] is incompatible with string [2]. [incompatible-type]

   test.js:1:19
   1| const n: string = require('./import-value1'); // error: number ~/~> string
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   import-value1.js:1:18
   1| module.exports = 0;
                       ^ [1]
   test.js:1:10
   1| const n: string = require('./import-value1'); // error: number ~/~> string
               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:8:2

Cannot cast `n` to `T` because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:8:2
   8| (n: T); // error: string ~/~> number
       ^

References:
   test.js:1:10
   1| const n: string = require('./import-value1'); // error: number ~/~> string
               ^^^^^^ [1]
   test.js:8:5
   8| (n: T); // error: string ~/~> number
          ^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast `f(...)` to `S` because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:9:2
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
       ^^^^^

References:
   import-value2.js:1:31
   1| export function f(x: number): string {
                                    ^^^^^^ [1]
   test.js:9:9
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
              ^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:4

Cannot call `f` with empty string bound to `x` because string [1] is incompatible with number [2]. [incompatible-call]

   test.js:9:4
   9| (f(""): S); // error: string (argument) ~/~> number, string (return) ~/~> number
         ^^ [1]

References:
   import-value2.js:1:22
   1| export function f(x: number): string {
                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:2

Cannot cast `o` to `O` because number [1] is incompatible with string [2] in property `x`. [incompatible-cast]

   test.js:10:2
   10| (o: O); // error: number (property x) <~/~> string
        ^

References:
   import-value3.js:3:6
    3|   x: 0,
            ^ [1]
   import-type5.js:4:6
    4|   x: string;
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:2

Cannot cast `o` to `O` because number [1] is incompatible with string [2] in property `y.x`. [incompatible-cast]

   test.js:10:2
   10| (o: O); // error: number (property x) <~/~> string
        ^

References:
   import-value3.js:3:6
    3|   x: 0,
            ^ [1]
   import-type4.js:4:6
    4|   x: string;
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:11:2

Cannot cast `o.y` to `O` because number [1] is incompatible with string [2] in property `x`. [incompatible-cast]

   test.js:11:2
   11| (o.y: O); // error: number (property x) <~/~> string
        ^^^

References:
   import-value3.js:3:6
    3|   x: 0,
            ^ [1]
   import-type5.js:4:6
    4|   x: string;
            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:11:2

Cannot cast `o.y` to `O` because number [1] is incompatible with string [2] in property `y.x`. [incompatible-cast]

   test.js:11:2
   11| (o.y: O); // error: number (property x) <~/~> string
        ^^^

References:
   import-value3.js:3:6
    3|   x: 0,
            ^ [1]
   import-type4.js:4:6
    4|   x: string;
            ^^^^^^ [2]



Found 15 errors
