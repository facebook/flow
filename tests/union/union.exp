Error ------------------------------------------------------------------------------------------------ issue-198.js:9:20

Cannot call `str.toFixed` because property `toFixed` is missing in `String` [1]. [prop-missing]

   issue-198.js:9:20
     9|         return str.toFixed();
                           ^^^^^^^

References:
   <BUILTINS>/core.js:469:39
   469|     toFixed(fractionDigits?: number): string;
                                              ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ issue-324.js:8:10

Cannot assign `barstr` to `foostr` because: [incompatible-type]
 - Either `Bar` [1] is incompatible with `Foo` [2].
 - Or `Bar` [1] is incompatible with string [3].

   issue-324.js:8:10
   8| foostr = barstr;
               ^^^^^^

References:
   issue-324.js:6:13
   6| var barstr: Bar | string = new Bar();
                  ^^^ [1]
   issue-324.js:5:13
   5| var foostr: Foo | string = new Foo();
                  ^^^ [2]
   issue-324.js:5:19
   5| var foostr: Foo | string = new Foo();
                        ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:20:2

Cannot cast `x.noReturn()` to number because undefined [1] is incompatible with number [2]. [incompatible-cast]

   issue-7322.js:20:2
   20| (x.noReturn(): number);
        ^^^^^^^^^^^^

References:
   issue-7322.js:2:13
    2|   noReturn() { }
                   ^ [1]
   issue-7322.js:20:16
   20| (x.noReturn(): number);
                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:21:2

Cannot cast `x.returnNoArg()` to number because undefined [1] is incompatible with number [2]. [incompatible-cast]

   issue-7322.js:21:2
   21| (x.returnNoArg(): number);
        ^^^^^^^^^^^^^^^

References:
   issue-7322.js:3:18
    3|   returnNoArg(): void {
                        ^^^^ [1]
   issue-7322.js:21:19
   21| (x.returnNoArg(): number);
                         ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-7322.js:22:2

Cannot cast `x.returnUndefined()` to number because undefined [1] is incompatible with number [2]. [incompatible-cast]

   issue-7322.js:22:2
   22| (x.returnUndefined(): number);
        ^^^^^^^^^^^^^^^^^^^

References:
   issue-7322.js:6:22
    6|   returnUndefined(): void {
                            ^^^^ [1]
   issue-7322.js:22:23
   22| (x.returnUndefined(): number);
                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:2:5

Cannot call `bar` with `0` bound to `x` because: [incompatible-call]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Document` [3].

   union.js:2:5
   2| bar(0);
          ^ [1]

References:
   union.js:1:28
   1| function bar(x: Document | string): void { }
                                 ^^^^^^ [2]
   union.js:1:17
   1| function bar(x: Document | string): void { }
                      ^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:8:13

Cannot assign `new E()` to `c` because `D` [1] is incompatible with `C` [2]. [incompatible-type]

   union.js:8:13
   8|   var c:C = new E(); // error, since E could be D, and D is not a subtype of C
                  ^^^^^^^ [1]

References:
   union.js:8:9
   8|   var c:C = new E(); // error, since E could be D, and D is not a subtype of C
              ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:9:19

`C` [1] is incompatible with `D` [2]. [incompatible-type]

   union.js:9:19
   9|   function qux(e: E) { } // this annotation is an error: is it C, or is it D?
                        ^

References:
   union.js:4:7
   4| class C { }
            ^ [1]
   union.js:5:7
   5| class D { }
            ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:9:19

`D` [1] is incompatible with `C` [2]. [incompatible-type]

   union.js:9:19
   9|   function qux(e: E) { } // this annotation is an error: is it C, or is it D?
                        ^

References:
   union.js:5:7
   5| class D { }
            ^ [1]
   union.js:4:7
   4| class C { }
            ^ [2]



Found 9 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
