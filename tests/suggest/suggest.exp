array.js
// @flow
function foo(): Array<number> {
  return [1, 2];
}

arrow-0.js
// @flow
const a = ((x: number): number => x + 1);
a(1);

arrow-1.js
// @flow
const b = (
  (x: (k: string, l: number) => string, y: string, z: {|f: number|}): string => x(
    y,
    z.f,
  )
);
b((k: string, l: number): string => l + k, "a", { f: 2 });

class-0.js
// @flow
class A {
  f = 1;
  m(x: string): number {
    return this.f + 1;
  }
}

new A().m("");

class-1.js
// @flow
class A {
  f = 1;
  m(): string {
    return "a";
  }
}

var a = new A();
function foo(x: Class<A>): Class<A> {
  return x;
}
foo(A);

class-2.js
// @flow
class A {
  m(): this {
    return this;
  }
}

comments-0.js
// @flow
// BEFORE FUNCTION
export function test(x: number): string {
  // ONE
const a = 4 + x;
  
  // END OF a = 4...
// TWO
return /* BETWEEEN */`${a}`;// END OF return ...

}// END


func-0.js
// @flow
function foo(x: number, y: string): string {
  return x + y;
}

foo(1, "");

func-1.js
// @flow
function foo(x: number, y: (z: number) => number): number {
  return x + y(x);
}

foo(1, (z: number): number => z + 1);

func-2.js
// @flow
function foo(x: number, y: number): void {
  function bar(z: number, w: number): number {
    return x + z + y + w;
  }
  bar(x, y);
}

foo(1, 1);

func-poly-0.js
// @flow
function outer<T>(y: T): void {
  function inner<T>(x: T, z: T): void {
    inner(x, x);
  }
}

object-0.js
// @flow
var obj = {
  n(y: number): string {
    return this.m(y);
  },
  m(x: number): string {
    return "";
  },
};

obj.n(0);

object-1.js
// @flow
var obj = {
  "n"(y: number): string {
    return this.m(y);
  },
  "m"(x: number): string {
    return "";
  },
};

obj["n"](0);

object-2.js
// @flow
function foo(x: {|l: () => void, m: () => number, n: () => number|}): void {}

foo(
  {
    m(): number {
      return 1;
    },
    
    n: (): number => 2,
    
    l: function bar(): void {},
  },
);

poly-0.js
// @flow
function foo<T>(x: T): {|f: T|} {
  return { f: x };
}

react-0.js
// @flow
import React from "react";
import ReactDOM from "react-dom";

function Clock(props): any {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick(): void {
  const element = document.getElementById("root");
  if (element) {
    ReactDOM.render(<Clock date={new Date()} />, element);
  }
}

setInterval(tick, 1000);

string-literal.js
// @flow
declare var a: "a";
declare var single_quote: "'";
declare var double_quote: '""';
declare var backslash: '\\';

function f1(): "a" {
  return a;
}
function f2(): "'" {
  return single_quote;
}
function f3(): '""' {
  return double_quote;
}
function f4(): "\\" {
  return backslash;
}

union-0.js
// @flow
function foo(x: (() => void) | string | number | void): void {}

foo(1);
foo("1");
foo(1);
foo(2);
foo((): void => foo());
foo();

Found 0 errors
err-infer-0.js
// @flow
"" + ((): number => 1);

err-infer-0.js (--fail-on-tc-errors)

Error ----------------------------------------------------------------------------------------------- err-infer-0.js:3:1

Cannot add empty string and function because function [1] is incompatible with string [2].

   err-infer-0.js:3:1
   3| "" + (() => 1);
      ^^^^^^^^^^^^^^

References:
   err-infer-0.js:3:7
   3| "" + (() => 1);
            ^^^^^^^ [1]
   err-infer-0.js:3:1
   3| "" + (() => 1);
      ^^ [2]


Found 1 error
err-parse-0.js

Error ----------------------------------------------------------------------------------------------- err-parse-0.js:3:4

Unexpected identifier

   3| va r x = 1;   // InferError
         ^


Found 1 error
err-parse-1.js

Error ----------------------------------------------------------------------------------------------- err-parse-1.js:3:2

Unexpected token @

   3| @@@1`   +\   aaa
       ^


Found 1 error
warn-empty-0.js
// @flow
function foo(x: number, y) {
  return x + y;
}

warn-empty-0.js (--fail-on-suggest-warnings)

Warning -------------------------------------------------------------------------------------------- warn-empty-0.js:3:1

Inferred type is empty.

      v---------------------------
   3| function foo(x: number, y) {
   4|   return x + y;
   5| }
      ^


Warning ------------------------------------------------------------------------------------------- warn-empty-0.js:3:25

Inferred type is empty.

   3| function foo(x: number, y) {
                              ^


Found 2 warnings
warn-empty-0.js (--fail-on-tc-errors)
// @flow
function foo(x: number, y) {
  return x + y;
}

warn-func-poly-0.js

Warning ---------------------------------------------------------------------------------------- warn-func-poly-0.js:4:3

Normalizer error:
[Shadowed type parameters] Raised on type: MixedT

        v---------------------------
   4|   function inner<T>(x: T, z) {
   5|     inner(x, y);
   6|   }
        ^


Warning --------------------------------------------------------------------------------------- warn-func-poly-0.js:4:27

Normalizer error:
[Shadowed type parameters] Raised on type: MixedT

   4|   function inner<T>(x: T, z) {
                                ^


Found 2 warnings
