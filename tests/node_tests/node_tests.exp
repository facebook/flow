buffer/buffer.js:57
 57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `from`. Function cannot be called on any member of intersection type
 57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
              ^^^^^^^^^^^ intersection
  Member 1:
  111:   static from(value: Buffer): Buffer;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/node.js:111
  Error:
   57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with the expected param type of
  111:   static from(value: Buffer): Buffer;
                            ^^^^^^ Buffer. See lib: <BUILTINS>/node.js:111
  Member 2:
  112:   static from(value: string, encoding?: buffer$Encoding): Buffer;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/node.js:112
  Error:
   57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with the expected param type of
  112:   static from(value: string, encoding?: buffer$Encoding): Buffer;
                            ^^^^^^ string. See lib: <BUILTINS>/node.js:112
  Member 3:
  113:   static from(value: ArrayBuffer, byteOffset?: number, length?: number): Buffer;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/node.js:113
  Error:
   57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with the expected param type of
  113:   static from(value: ArrayBuffer, byteOffset?: number, length?: number): Buffer;
                            ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/node.js:113
  Member 4:
  114:   static from(value: Iterable<number>): this;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/node.js:114
  Error:
   57: buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72], (a:number) => a + 1, {}); // error
                                                                  ^^^^^^^^^^^^^^^^^^^ unused function argument
    114:   static from(value: Iterable<number>): this;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type expects no more than 1 argument. See lib: <BUILTINS>/node.js:114

child_process/execSync.js:8
  8: (execSync('ls', {timeout: '250'})); // error, no signatures match
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call. Function cannot be called on any member of intersection type
  8: (execSync('ls', {timeout: '250'})); // error, no signatures match
      ^^^^^^^^ intersection
  Member 1:
                                  v
  263:   declare function execSync(
  264:     command: string,
  265:     options: {encoding: buffer$NonBufferEncoding} & child_process$execSyncOpts
  266:   ): string;
         --------^ function type. See lib: <BUILTINS>/node.js:263
  Error:
  265:     options: {encoding: buffer$NonBufferEncoding} & child_process$execSyncOpts
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `encoding`. Property not found in. See lib: <BUILTINS>/node.js:265
    8: (execSync('ls', {timeout: '250'})); // error, no signatures match
                       ^^^^^^^^^^^^^^^^ object literal
  Member 2:
                                  v
  268:   declare function execSync(
  269:     command: string,
  270:     options?: child_process$execSyncOpts
  271:   ): Buffer;
         --------^ function type. See lib: <BUILTINS>/node.js:268
  Error:
    8: (execSync('ls', {timeout: '250'})); // error, no signatures match
                       ^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
  270:     options?: child_process$execSyncOpts
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/node.js:270
    Property `timeout` is incompatible:
        8: (execSync('ls', {timeout: '250'})); // error, no signatures match
                                     ^^^^^ string. This type is incompatible with
      152:   timeout?: number;
                       ^^^^^^ number. See lib: <BUILTINS>/node.js:152

crypto/crypto.js:12
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
            ^^^^^^^^^^^ Buffer. This type is incompatible with
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
                         ^^^^^^ number

crypto/crypto.js:12
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
            ^^^^^^^^^^^ null. This type is incompatible with
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
                         ^^^^^^ number

crypto/crypto.js:12
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
            ^^^^^^^^^^^ string. This type is incompatible with
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
                         ^^^^^^ number

crypto/crypto.js:12
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
            ^^^^^^^^^^^ undefined. This type is incompatible with
 12:       (hmac.read(): number); // 4 errors: null, void, string, Buffer
                         ^^^^^^ number

crypto/crypto.js:16
 16:     hmac.write(123); // 2 errors: not a string or a Buffer
         ^^^^^^^^^^^^^^^ call of method `write`
 16:     hmac.write(123); // 2 errors: not a string or a Buffer
                    ^^^ number. This type is incompatible with
1329:     chunk: Buffer | string,
                 ^^^^^^^^^^^^^^^ union: Buffer | string. See lib: <BUILTINS>/node.js:1329
  Member 1:
  1329:     chunk: Buffer | string,
                   ^^^^^^ Buffer. See lib: <BUILTINS>/node.js:1329
  Error:
   16:     hmac.write(123); // 2 errors: not a string or a Buffer
                      ^^^ number. This type is incompatible with
  1329:     chunk: Buffer | string,
                   ^^^^^^ Buffer. See lib: <BUILTINS>/node.js:1329
  Member 2:
  1329:     chunk: Buffer | string,
                            ^^^^^^ string. See lib: <BUILTINS>/node.js:1329
  Error:
   16:     hmac.write(123); // 2 errors: not a string or a Buffer
                      ^^^ number. This type is incompatible with
  1329:     chunk: Buffer | string,
                            ^^^^^^ string. See lib: <BUILTINS>/node.js:1329

crypto/crypto.js:26
 26:     hmac.update('foo', 'bogus'); // 1 error
                            ^^^^^^^ string. This type is incompatible with the expected param type of
                                                      v----------------------------
442:   update(data: string | Buffer, input_encoding?: 'utf8' | 'ascii' | 'latin1' |
443:   'binary'): crypto$Hmac;
       -------^ string enum. See lib: <BUILTINS>/node.js:442

crypto/crypto.js:29
 29:     hmac.update(buf, 'bogus'); // 1 error
                          ^^^^^^^ string. This type is incompatible with the expected param type of
                                                      v----------------------------
442:   update(data: string | Buffer, input_encoding?: 'utf8' | 'ascii' | 'latin1' |
443:   'binary'): crypto$Hmac;
       -------^ string enum. See lib: <BUILTINS>/node.js:442

crypto/crypto.js:36
 36:     (hmac.digest('hex'): void); // 1 error
          ^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 36:     (hmac.digest('hex'): void); // 1 error
                              ^^^^ undefined

crypto/crypto.js:37
 37:     (hmac.digest(): void); // 1 error
          ^^^^^^^^^^^^^ Buffer. This type is incompatible with
 37:     (hmac.digest(): void); // 1 error
                         ^^^^ undefined

fs/fs.js:13
     v-----------------------------------------------------------
 13: fs.readFile("file.exp", { encoding: "blah" }, (_, data) => {
 14:   (data : string);
 15: });
     -^ call of method `readFile`. Could not decide which case to select
                                v
811:   declare function readFile(
812:     filename: string,
813:     callback: (err: ?ErrnoError, data: Buffer) => void
814:   ): void;
       ------^ intersection type. See lib: <BUILTINS>/node.js:811
  Case 3 may work:
                                  v
  820:   declare function readFile(
  821:     filename: string,
  822:     options: { encoding: string; flag?: string },
  823:     callback: (err: ?ErrnoError, data: string) => void
  824:   ): void;
         ------^ function type. See lib: <BUILTINS>/node.js:820
  But if it doesn't, case 4 looks promising too:
                                  v
  825:   declare function readFile(
  826:     filename: string,
  827:     options: { flag?: string },
  828:     callback: (err: ?ErrnoError, data: Buffer) => void
  829:   ): void;
         ------^ function type. See lib: <BUILTINS>/node.js:825
  Please provide additional annotation(s) to determine whether case 3 works (or consider merging it with case 4):
   13: fs.readFile("file.exp", { encoding: "blah" }, (_, data) => {
                                                      ^ parameter `_`
   13: fs.readFile("file.exp", { encoding: "blah" }, (_, data) => {
                                                         ^^^^ parameter `data`

fs/fs.js:24
 24: (fs.readFileSync("file.exp") : string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Buffer. This type is incompatible with
 24: (fs.readFileSync("file.exp") : string); // error
                                    ^^^^^^ string

fs/fs.js:27
 27: (fs.readFileSync("file.exp", "blah") : Buffer); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 27: (fs.readFileSync("file.exp", "blah") : Buffer); // error
                                            ^^^^^^ Buffer

fs/fs.js:30
 30: (fs.readFileSync("file.exp", { encoding: "blah" }) : Buffer); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 30: (fs.readFileSync("file.exp", { encoding: "blah" }) : Buffer); // error
                                                          ^^^^^^ Buffer

fs/fs.js:33
 33: (fs.readFileSync("file.exp", {}) : string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Buffer. This type is incompatible with
 33: (fs.readFileSync("file.exp", {}) : string); // error
                                        ^^^^^^ string

invalid_package_file/package.json:1
  1: 
     ^ Unexpected end of input

json_file/json_invalid.json:1
  1: :derp
     ^ Unexpected token :

json_file/test.js:4
  4: (data.foo: void); // error, should be object literal
      ^^^^^^^^ object literal. This type is incompatible with
  4: (data.foo: void); // error, should be object literal
                ^^^^ undefined

json_file/test.js:5
  5: (data.foo.bar: void); // error, should be boolean
      ^^^^^^^^^^^^ boolean. This type is incompatible with
  5: (data.foo.bar: void); // error, should be boolean
                    ^^^^ undefined

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ null. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ string. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ undefined. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:9
  9: (data2.baz: void); // error, should be string
      ^^^^^^^^^ string. This type is incompatible with
  9: (data2.baz: void); // error, should be string
                 ^^^^ undefined

json_file/test.js:12
 12: (data3.foo: void); // error, should be number (not string! index.js wins)
      ^^^^^^^^^ number. This type is incompatible with
 12: (data3.foo: void); // error, should be number (not string! index.js wins)
                 ^^^^ undefined

json_file/test.js:16
 16: (data4: void); // error, should be Array<number>
      ^^^^^ array literal. This type is incompatible with
 16: (data4: void); // error, should be Array<number>
             ^^^^ undefined

json_file/test.js:18
 18: (require('./json_string'): void); // error, should be string
      ^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 18: (require('./json_string'): void); // error, should be string
                                ^^^^ undefined

json_file/test.js:19
 19: (require('./json_number'): void); // error, should be number
      ^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 19: (require('./json_number'): void); // error, should be number
                                ^^^^ undefined

json_file/test.js:20
 20: (require('./json_true'): void); // error, should be true
      ^^^^^^^^^^^^^^^^^^^^^^ boolean. This type is incompatible with
 20: (require('./json_true'): void); // error, should be true
                              ^^^^ undefined

json_file/test.js:21
 21: (require('./json_false'): void); // error, should be false
      ^^^^^^^^^^^^^^^^^^^^^^^ boolean. This type is incompatible with
 21: (require('./json_false'): void); // error, should be false
                               ^^^^ undefined

json_file/test.js:22
 22: (require('./json_null'): void); // error, should be null
      ^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 22: (require('./json_null'): void); // error, should be null
                              ^^^^ undefined

os/userInfo.js:7
  7: (u1.username: Buffer); // error
      ^^^^^^^^^^^ string. This type is incompatible with
  7: (u1.username: Buffer); // error
                   ^^^^^^ Buffer

os/userInfo.js:11
 11: (u2.username: Buffer); // error
      ^^^^^^^^^^^ string. This type is incompatible with
 11: (u2.username: Buffer); // error
                   ^^^^^^ Buffer

os/userInfo.js:14
 14: (u3.username: string); // error
      ^^^^^^^^^^^ Buffer. This type is incompatible with
 14: (u3.username: string); // error
                   ^^^^^^ string

process/nextTick.js:14
 14:   0, // Error: number ~> string
       ^ number. This type is incompatible with the expected param type of
 13:   (a: string, b: number, c: boolean) => {},
           ^^^^^^ string

process/nextTick.js:16
 16:   null // Error: null ~> boolean
       ^^^^ null. This type is incompatible with the expected param type of
 13:   (a: string, b: number, c: boolean) => {},
                                 ^^^^^^^ boolean

process/nextTick.js:22
 22:   'y', // Error: string ~> number
       ^^^ string. This type is incompatible with the expected param type of
 20:   (a: string, b: number, c: boolean) => {},
                      ^^^^^^ number

process/nextTick.js:26
     v----------------
 26: process.nextTick(
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
 28: );
     ^ call of method `nextTick`
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
           ^^^^^^ string. This type is incompatible with
1779:   nextTick: <T>(cb: (...T) => mixed, ...T) => void;
                          ^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). See lib: <BUILTINS>/node.js:1779

process/nextTick.js:26
     v----------------
 26: process.nextTick(
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
 28: );
     ^ call of method `nextTick`
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
                      ^^^^^^ number. This type is incompatible with
1779:   nextTick: <T>(cb: (...T) => mixed, ...T) => void;
                          ^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). See lib: <BUILTINS>/node.js:1779

process/nextTick.js:26
     v----------------
 26: process.nextTick(
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
 28: );
     ^ call of method `nextTick`
 27:   (a: string, b: number, c: boolean) => {} // Error: too few arguments
                                 ^^^^^^^ boolean. This type is incompatible with
1779:   nextTick: <T>(cb: (...T) => mixed, ...T) => void;
                          ^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). See lib: <BUILTINS>/node.js:1779


Found 40 errors
