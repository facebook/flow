child_process/execSync.js:8
  8: (execSync('ls', {timeout: '250'})); // error, no signatures match
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call. Function cannot be called on any member of intersection type
  8: (execSync('ls', {timeout: '250'})); // error, no signatures match
      ^^^^^^^^ intersection
  Member 1:
  function type. See lib: node.js:190
  Error:
  property `encoding`. Property not found in. See lib: node.js:192
    8: (execSync('ls', {timeout: '250'})); // error, no signatures match
                       ^^^^^^^^^^^^^^^^ object literal
  Member 2:
  function type. See lib: node.js:195
  Error:
    8: (execSync('ls', {timeout: '250'})); // error, no signatures match
                                 ^^^^^ string. This type is incompatible with
  number. See lib: node.js:119

fs/fs.js:13
 13: fs.readFile("file.exp", { encoding: "blah" }, (_, data) => {
     ^ call of method `readFile`. Could not decide which case to select
intersection type. See lib: node.js:629
  Case 3 may work:
  function type. See lib: node.js:638
  But if it doesn't, case 4 looks promising too:
  function type. See lib: node.js:643
  Please provide additional annotation(s) to determine whether case 3 works (or consider merging it with case 4):
   13: fs.readFile("file.exp", { encoding: "blah" }, (_, data) => {
                                                         ^^^^ parameter `data`

fs/fs.js:24
 24: (fs.readFileSync("file.exp") : string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Buffer. This type is incompatible with
 24: (fs.readFileSync("file.exp") : string); // error
                                    ^^^^^^ string

fs/fs.js:27
 27: (fs.readFileSync("file.exp", "blah") : Buffer); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 27: (fs.readFileSync("file.exp", "blah") : Buffer); // error
                                            ^^^^^^ Buffer

fs/fs.js:30
 30: (fs.readFileSync("file.exp", { encoding: "blah" }) : Buffer); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 30: (fs.readFileSync("file.exp", { encoding: "blah" }) : Buffer); // error
                                                          ^^^^^^ Buffer

fs/fs.js:33
 33: (fs.readFileSync("file.exp", {}) : string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Buffer. This type is incompatible with
 33: (fs.readFileSync("file.exp", {}) : string); // error
                                        ^^^^^^ string

invalid_package_file/package.json:1
  1: 
     ^ Unexpected end of input

json_file/json_invalid.json:1
  1: :derp
     ^ Unexpected token :

json_file/test.js:4
  4: (data.foo: void); // error, should be object literal
      ^^^^^^^^ object literal. This type is incompatible with
  4: (data.foo: void); // error, should be object literal
                ^^^^ undefined

json_file/test.js:5
  5: (data.foo.bar: void); // error, should be boolean
      ^^^^^^^^^^^^ boolean. This type is incompatible with
  5: (data.foo.bar: void); // error, should be boolean
                    ^^^^ undefined

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ null. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ string. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:6
  6: (data.abc: boolean); // error, should be ?string
      ^^^^^^^^ undefined. This type is incompatible with
  6: (data.abc: boolean); // error, should be ?string
                ^^^^^^^ boolean

json_file/test.js:9
  9: (data2.baz: void); // error, should be string
      ^^^^^^^^^ string. This type is incompatible with
  9: (data2.baz: void); // error, should be string
                 ^^^^ undefined

json_file/test.js:12
 12: (data3.foo: void); // error, should be number (not string! index.js wins)
      ^^^^^^^^^ number. This type is incompatible with
 12: (data3.foo: void); // error, should be number (not string! index.js wins)
                 ^^^^ undefined

json_file/test.js:16
 16: (data4: void); // error, should be Array<number>
      ^^^^^ array literal. This type is incompatible with
 16: (data4: void); // error, should be Array<number>
             ^^^^ undefined

json_file/test.js:18
 18: (require('./json_string'): void); // error, should be string
      ^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 18: (require('./json_string'): void); // error, should be string
                                ^^^^ undefined

json_file/test.js:19
 19: (require('./json_number'): void); // error, should be number
      ^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 19: (require('./json_number'): void); // error, should be number
                                ^^^^ undefined

json_file/test.js:20
 20: (require('./json_true'): void); // error, should be true
      ^^^^^^^^^^^^^^^^^^^^^^ boolean. This type is incompatible with
 20: (require('./json_true'): void); // error, should be true
                              ^^^^ undefined

json_file/test.js:21
 21: (require('./json_false'): void); // error, should be false
      ^^^^^^^^^^^^^^^^^^^^^^^ boolean. This type is incompatible with
 21: (require('./json_false'): void); // error, should be false
                               ^^^^ undefined

json_file/test.js:22
 22: (require('./json_null'): void); // error, should be null
      ^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 22: (require('./json_null'): void); // error, should be null
                              ^^^^ undefined


Found 21 errors
