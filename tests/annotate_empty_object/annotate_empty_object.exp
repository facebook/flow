>>> test.js (#changes: 24)
//@flow

declare var key : string;

let x: { [string]: number } = {}; // should annot
x[key] = 3;

let y = {};
y.key = 4;

let z: { [string]: number } = {}; // should annot
z["key"] = 5;

let a: { [string]: number } = {};
a[key] = 3;
a.key = 4;


declare var arr : Array<string>;
arr.reduce<{ [string]: number }>(
  (acc, key) => {
    acc[key] = 4;
    return acc;
  },
  {},
) // annot on the targ to reduce

arr?.reduce<{ [string]: number }>(
  (acc, key) => {
    acc[key] = 4;
    return acc;
  },
  {},
) // annot on the targ to reduce w/ optional chaining

declare var maybe: ?{a: Array<string>};
maybe?.a.reduce<{ [string]: number }>(
  (acc, key) => {
    acc[key] = 4;
    return acc;
  },
  {},
) // annot on the targ to reduce w/ optional chaining


function foo(x) {
    x[key] = 3;
}

foo(({}: { [string]: number })); // annot

let b = { x : ({}: { [string]: number }) } // annot
b.x[key] = 3;

let first: { [string]: number } = {}; // annot
let second = first;
let third = true ? first : ({}: { [string]: number }); // annot
let fourth = third;
fourth[key] = 3;

let already_annotated : { [string] : number, ... } = {}; // should not change this

let written_twice: { [string]: string | number } = {}; // should be { [string] : string | number }
written_twice[key] = 3;
written_twice[key] = "foo";

let written_thrice: { [string]: number | string } = {}; // should be { [string] : string | number }
written_thrice[key] = 3;
written_thrice[key] = "foo";
written_thrice[key] = "bar";

function Crash<T>(value: T) {
  declare var props : Array<string>;

  declare var lastProp : string;
  const lastObj = props.reduce((obj, prop) => {
    let o = obj[prop];
    if (!o) {
      o = obj[prop] = ({}: { [string]: mixed }); // should not crash annotating this
    }
    return o;
  }, self);
  lastObj[lastProp] = value;
}

let z2 = {}; //should not annotate

declare var u : "A" | "B" | "C";
let o: { ["A" | "B" | "C"]: number } = {}; // should annot
o[u] = 3;

let arr2 = ["A", "B", "C"];
let x2: { [string]: number } = {}; // should annot

for (let k of arr2) {
    x2[k] = 3
}

arr2.reduce<{ [string]: number }>(
  (acc, key) => {
    acc[key] = 4;
    return acc;
  },
  {},
) // annot on the targ to reduce


function bar(x) {
  x[u] = 3;
}

bar(({}: { ["A" | "B" | "C"]: number })); // annot

type LargeEnum = 'a' | 'b' | 'c' | 'e' | 'f' | 'g' | 'h' | 'i';
function testLarge(xs: Array<LargeEnum>) {
  const o: { [LargeEnum]: Array<LargeEnum> } = {}; // Annotate
  xs.forEach(e => {
    o[e] = xs;
  });
  return o;
}

function tooBig(xs: Array<'a' | 'b' | 'c' | 'e' | 'f' | 'g' | 'h' | 'i'>) {
  const o = {}; // Skip - too big
  xs.forEach(e => {
    o[e] = xs;
  });
  return o;
}

function reduceLarge(xs: Array<LargeEnum>) {
  // Annotate on the targ to reduce
xs.reduce<{ [LargeEnum]: Array<LargeEnum> }>(
  (acc, key) => {
    acc[key] = xs;
    return acc;
  },
  {},
);
}

function reduceTooBig(xs: Array<'a' | 'b' | 'c' | 'e' | 'f' | 'g' | 'h' | 'i'>) {
  // Skip - too big
  xs.reduce(
    (acc, key) => { acc[key] = 1; return acc },
    {},
  );
}

>>> Launching report...

Stats:
  Files changed:                            1
  Number of annotations added:             19
  Total size of annotations:               69

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         3
  Import Error:
    Loc source none:                        0
    Parsing heaps get ast error:            0
    Indeterminate module type:              0
    No matching export:                     0
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            0
  Empty SomeKnownUpper:                     0

