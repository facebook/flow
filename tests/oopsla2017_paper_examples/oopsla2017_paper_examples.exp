Error: example1.js:6
  6: pipe("hello", null); // error
     ^^^^^^^^^^^^^^^^^^^ function call
  3: function pipe(x, f) { f(x); }
                           ^^^^ function call. Function cannot be called on possibly null value
  3: function pipe(x, f) { f(x); }
                           ^ null

Error: example5.js:12
 12:   return x.kind; // error
                ^^^^ property `kind`. Property cannot be accessed on possibly null value
 12:   return x.kind; // error
              ^ null

Error: example6.js:9
  9: onString(id);
              ^^ function. Could not decide which case to select
  7: function onString(f: Ambiguous) { f(""); }
                          ^^^^^^^^^ union type
  Case 1 may work:
    5: type Ambiguous = IDString | IDNullableString;
                        ^^^^^^^^ IDString
  But if it doesn't, case 2 looks promising too:
    5: type Ambiguous = IDString | IDNullableString;
                                   ^^^^^^^^^^^^^^^^ IDNullableString
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
    8: let id = (x) => x;
                       ^ return
    8: let id = (x) => x;
                 ^ parameter `x`

Error: example7.js:14
 14: stringIsString({ type: "string", val: 0 }); // error
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
  9: function stringIsString(x: Correlated) {
                                ^^^^^^^^^^ union: object type(s)
  Member 1:
    6:   | { type: "string", val: string }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   14: stringIsString({ type: "string", val: 0 }); // error
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    6:   | { type: "string", val: string }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
    Property `val` is incompatible:
       14: stringIsString({ type: "string", val: 0 }); // error
                                                 ^ number. This type is incompatible with
        6:   | { type: "string", val: string }
                                      ^^^^^^ string
  Member 2:
    7:   | { type: "number", val: number };
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Error:
   14: stringIsString({ type: "string", val: 0 }); // error
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    7:   | { type: "number", val: number };
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
    Property `type` is incompatible:
       14: stringIsString({ type: "string", val: 0 }); // error
                                  ^^^^^^^^ string. Expected string literal `number`, got `string` instead
        7:   | { type: "number", val: number };
                       ^^^^^^^^ string literal `number`


Found 4 errors
