Error ------------------------------------------------------------------------------------------------ Suspense.js:10:23

Cannot create `Suspense` element because in property `fallback`: [incompatible-type]
 - Either inexact function [1] is incompatible with exact `React.Element` [2].
 - Or function [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in function [1] but exists in `$Iterable` [4].

   Suspense.js:10:23
   10|   <Suspense fallback={Loading} /> // Error: function is incompatible with exact React.Element
                             ^^^^^^^

References:
   Suspense.js:5:1
    5| function Loading() {
       ^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------------- lazy.js:9:18

Cannot call `React.lazy` with function bound to `component` because function [1] is incompatible with `Promise` [2] in
the return value. [incompatible-call]

   lazy.js:9:18
     9| React.lazy(() => FunctionComponent); // Error incompatible with Promise
                         ^^^^^^^^^^^^^^^^^

References:
   lazy.js:6:1
     6| function FunctionComponent(x: Props): React.Node { return null }
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:297:22
   297|     component: () => Promise<{ default: React$AbstractComponent<Config, Instance, React$Node>, ... }>,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:10:18

Cannot call `React.lazy` with function bound to `component` because class `ClassComponent` [1] is incompatible with
`Promise` [2] in the return value. [incompatible-call]

   lazy.js:10:18
    10| React.lazy(() => ClassComponent); // Error incompatible with Promise
                         ^^^^^^^^^^^^^^

References:
   lazy.js:7:7
     7| class ClassComponent extends React.Component<Props> {}
              ^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:297:22
   297|     component: () => Promise<{ default: React$AbstractComponent<Config, Instance, React$Node>, ... }>,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:11:34

Cannot call `React.lazy` with function bound to `component` because property `default` is missing in function [1] but
exists in object type [2] in type argument `R` [3] of the return value. [prop-missing]

   lazy.js:11:34
     11| React.lazy(() => Promise.resolve(FunctionComponent)); // Error property default is missing
                                          ^^^^^^^^^^^^^^^^^

References:
   lazy.js:6:1
      6| function FunctionComponent(x: Props): React.Node { return null }
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:297:30
    297|     component: () => Promise<{ default: React$AbstractComponent<Config, Instance, React$Node>, ... }>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1907:24
   1907| declare class Promise<+R = mixed> {
                                ^ [3]


Error ---------------------------------------------------------------------------------------------------- lazy.js:12:34

Cannot call `React.lazy` with function bound to `component` because property `default` is missing in statics of
`ClassComponent` [1] but exists in object type [2] in type argument `R` [3] of the return value. [prop-missing]

   lazy.js:12:34
     12| React.lazy(() => Promise.resolve(ClassComponent)); // Error property default is missing
                                          ^^^^^^^^^^^^^^

References:
   lazy.js:7:7
      7| class ClassComponent extends React.Component<Props> {}
               ^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:297:30
    297|     component: () => Promise<{ default: React$AbstractComponent<Config, Instance, React$Node>, ... }>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/core.js:1907:24
   1907| declare class Promise<+R = mixed> {
                                ^ [3]


Error ---------------------------------------------------------------------------------------------------- lazy.js:19:13

Cannot create `LazyFunctionComponent` element because property `foo` is missing in props [1] but exists in `Props` [2].
[prop-missing]

   lazy.js:19:13
   19| const _b = <LazyFunctionComponent />; // Error missing foo
                   ^^^^^^^^^^^^^^^^^^^^^

References:
   lazy.js:19:12
   19| const _b = <LazyFunctionComponent />; // Error missing foo
                  ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   lazy.js:6:31
    6| function FunctionComponent(x: Props): React.Node { return null }
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:20:13

Cannot create `LazyFunctionComponent` element because property `bar` is missing in `Props` [1] but exists in props [2].
[prop-missing]

   lazy.js:20:13
   20| const _c = <LazyFunctionComponent foo={3} bar={3} />; // Error extra bar
                   ^^^^^^^^^^^^^^^^^^^^^

References:
   lazy.js:6:31
    6| function FunctionComponent(x: Props): React.Node { return null }
                                     ^^^^^ [1]
   lazy.js:20:12
   20| const _c = <LazyFunctionComponent foo={3} bar={3} />; // Error extra bar
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:21:39

Cannot create `LazyFunctionComponent` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   lazy.js:21:39
   21| const _d = <LazyFunctionComponent foo="string" />; // Error wrong type for foo
                                             ^^^^^^^^ [1]

References:
   lazy.js:5:22
    5| type Props = {| foo: number |};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:28:13

Cannot create `LazyClassComponent` element because property `foo` is missing in props [1] but exists in `Props` [2].
[prop-missing]

   lazy.js:28:13
   28| const _f = <LazyClassComponent />; // Error missing foo
                   ^^^^^^^^^^^^^^^^^^

References:
   lazy.js:28:12
   28| const _f = <LazyClassComponent />; // Error missing foo
                  ^^^^^^^^^^^^^^^^^^^^^^ [1]
   lazy.js:7:46
    7| class ClassComponent extends React.Component<Props> {}
                                                    ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:29:13

Cannot create `LazyClassComponent` element because property `bar` is missing in `Props` [1] but exists in props [2].
[prop-missing]

   lazy.js:29:13
   29| const _g = <LazyClassComponent foo={3} bar={3} />; // Error extra bar
                   ^^^^^^^^^^^^^^^^^^

References:
   lazy.js:7:46
    7| class ClassComponent extends React.Component<Props> {}
                                                    ^^^^^ [1]
   lazy.js:29:12
   29| const _g = <LazyClassComponent foo={3} bar={3} />; // Error extra bar
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- lazy.js:30:36

Cannot create `LazyClassComponent` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   lazy.js:30:36
   30| const _h = <LazyClassComponent foo="string" />; // Error wrong type for foo
                                          ^^^^^^^^ [1]

References:
   lazy.js:5:22
    5| type Props = {| foo: number |};
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ lazy_ref.js:22:40

Cannot call `ref.moo` with `0` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   lazy_ref.js:22:40
   22|       <Lazy ref={ref => ref && ref.moo(0)} />;
                                              ^ [1]

References:
   lazy_ref.js:6:18
    6| type T = {moo(x: string): void}
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:12:13

Cannot create `MemoComponent` element because property `foo` is missing in props [1] but exists in `Props` [2].
[prop-missing]

   memo.js:12:13
   12| const _b = <MemoComponent />; // Error missing foo
                   ^^^^^^^^^^^^^

References:
   memo.js:12:12
   12| const _b = <MemoComponent />; // Error missing foo
                  ^^^^^^^^^^^^^^^^^ [1]
   memo.js:7:23
    7| function Component(x: Props): React.Node { return null }
                             ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:13:13

Cannot create `MemoComponent` element because property `bar` is missing in `Props` [1] but exists in props [2].
[prop-missing]

   memo.js:13:13
   13| const _c = <MemoComponent foo={3} bar={3} />; // Error extra bar
                   ^^^^^^^^^^^^^

References:
   memo.js:7:23
    7| function Component(x: Props): React.Node { return null }
                             ^^^^^ [1]
   memo.js:13:12
   13| const _c = <MemoComponent foo={3} bar={3} />; // Error extra bar
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:14:31

Cannot create `MemoComponent` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   memo.js:14:31
   14| const _d = <MemoComponent foo="string" />; // Error wrong type for foo
                                     ^^^^^^^^ [1]

References:
   memo.js:5:22
    5| type Props = {| foo: number |};
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:19:13

Cannot create `MemoComponentWithEqual` element because property `foo` is missing in props [1] but exists in `Props` [2].
[prop-missing]

   memo.js:19:13
   19| const _f = <MemoComponentWithEqual />; // Error missing foo
                   ^^^^^^^^^^^^^^^^^^^^^^

References:
   memo.js:19:12
   19| const _f = <MemoComponentWithEqual />; // Error missing foo
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   memo.js:7:23
    7| function Component(x: Props): React.Node { return null }
                             ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:20:13

Cannot create `MemoComponentWithEqual` element because property `bar` is missing in `Props` [1] but exists in props [2].
[prop-missing]

   memo.js:20:13
   20| const _g = <MemoComponentWithEqual foo={3} bar={3} />; // Error extra bar
                   ^^^^^^^^^^^^^^^^^^^^^^

References:
   memo.js:7:23
    7| function Component(x: Props): React.Node { return null }
                             ^^^^^ [1]
   memo.js:20:12
   20| const _g = <MemoComponentWithEqual foo={3} bar={3} />; // Error extra bar
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- memo.js:21:40

Cannot create `MemoComponentWithEqual` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   memo.js:21:40
   21| const _h = <MemoComponentWithEqual foo="string" />; // Error wrong type for foo
                                              ^^^^^^^^ [1]

References:
   memo.js:5:22
    5| type Props = {| foo: number |};
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ memo_ref.js:18:43

Cannot call `ref.moo` with `0` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   memo_ref.js:18:43
   18|   return <Memo ref={ref => ref && ref.moo(0)} />;
                                                 ^ [1]

References:
   memo_ref.js:6:18
    6| type T = {moo(x: string): void}
                        ^^^^^^ [2]



Found 19 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
