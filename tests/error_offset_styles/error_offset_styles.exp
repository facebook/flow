
Invoking status with no offset-style argument:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking status with utf8-bytes offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking status with js-indices offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":111},
                "end":{"line":5,"column":21,"offset":112}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":102},
                "end":{"line":5,"column":17,"offset":108}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":111},
            "end":{"line":5,"column":21,"offset":112}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check with no offset-style argument:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check with utf8-bytes offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check with js-indices offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":111},
                "end":{"line":5,"column":21,"offset":112}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"foo.js",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":102},
                "end":{"line":5,"column":17,"offset":108}
              },
              "path":"foo.js",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"foo.js",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":111},
            "end":{"line":5,"column":21,"offset":112}
          },
          "path":"foo.js",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check-contents with no offset-style argument:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"-",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"-",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check-contents with utf8-bytes offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":113},
                "end":{"line":5,"column":21,"offset":114}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":104},
                "end":{"line":5,"column":17,"offset":110}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"-",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":113},
            "end":{"line":5,"column":21,"offset":114}
          },
          "path":"-",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}
Invoking check-contents with js-indices offset-style:
{
  "flowVersion":"<VERSION>",
  "jsonVersion":"1",
  "errors":[
    {
      "kind":"infer",
      "level":"error",
      "suppressions":[],
      "extra":[
        {
          "message":[
            {
              "context":null,
              "descr":"References:",
              "type":"Blame",
              "path":"",
              "line":0,
              "endline":0,
              "start":1,
              "end":0
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[1]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":21,"offset":111},
                "end":{"line":5,"column":21,"offset":112}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":21,
              "end":21
            }
          ]
        },
        {
          "message":[
            {
              "context":"const foo: string = 5;",
              "descr":"[2]",
              "type":"Blame",
              "loc":{
                "source":"-",
                "type":"SourceFile",
                "start":{"line":5,"column":12,"offset":102},
                "end":{"line":5,"column":17,"offset":108}
              },
              "path":"-",
              "line":5,
              "endline":5,
              "start":12,
              "end":17
            }
          ]
        }
      ],
      "message":[
        {
          "context":"const foo: string = 5;",
          "descr":"Cannot assign `5` to `foo` because number [1] is incompatible with string [2].",
          "type":"Blame",
          "loc":{
            "source":"-",
            "type":"SourceFile",
            "start":{"line":5,"column":21,"offset":111},
            "end":{"line":5,"column":21,"offset":112}
          },
          "path":"-",
          "line":5,
          "endline":5,
          "start":21,
          "end":21
        }
      ]
    }
  ],
  "passed":false
}