any.js:5
  5: const val: string = dict[k] // error: number incompatible with string
                         ^^^^^^^ number. This type is incompatible with
  5: const val: string = dict[k] // error: number incompatible with string
                ^^^^^^ string

dictionary.js:47
 47:   o.p = new A; // error, A ~> B
             ^^^^^ A. This type is incompatible with
 45:   o: {[k:string]:B},
                      ^ B

dictionary.js:58
 58:   (o.p: C); // error, C ~> B
        ^^^ B. This type is incompatible with
 58:   (o.p: C); // error, C ~> B
             ^ C

dictionary.js:66
 66:   o.prop = "err"; // error: string ~> number
       ^^^^^^ property `prop` is a string. This type is incompatible with
 64:   o: {[k:number]:any},
              ^^^^^^ number

dictionary.js:94
 94:   (o.toString(): boolean); // error: string ~> boolean
        ^^^^^^^^^^^^ string. This type is incompatible with
 94:   (o.toString(): boolean); // error: string ~> boolean
                      ^^^^^^^ boolean

dictionary.js:108
108:   x: Array<{[k:string]:B}>,
                            ^ B. This type is incompatible with
115:   let c: Array<{[k:string]:C}> = x; // error
                                ^ C

dictionary.js:110
110:   let a: Array<{[k:string]:A}> = x; // error
                                ^ A. This type is incompatible with
108:   x: Array<{[k:string]:B}>,
                            ^ B

dictionary.js:116
116:   (x[0].p: C); // not true
        ^^^^^^ B. This type is incompatible with
116:   (x[0].p: C); // not true
                ^ C

dictionary.js:120
120:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
127:   let c: {[k:string]:C} = x; // error
                          ^ C

dictionary.js:122
122:   let a: {[k:string]:A} = x; // error
                          ^ A. This type is incompatible with
120:   x: {[k:string]:B},
                      ^ B

dictionary.js:128
128:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
128:   (x.p: C); // not true
             ^ C

dictionary.js:139
139:     a: new A, // error, A not <: B
            ^^^^^ A. This type is incompatible with
138:   let b: {[k:string]:B} = {
                          ^ B

dictionary.js:145
145:     a: new A, // error, A not <: C
            ^^^^^ A. This type is incompatible with
144:   let c: {[k:string]:C} = {
                          ^ C

dictionary.js:146
146:     b: new B, // error, A not <: C
            ^^^^^ B. This type is incompatible with
144:   let c: {[k:string]:C} = {
                          ^ C

dictionary.js:157
157:   x: Array<{[k:B]:any}>,
                    ^ B. This type is incompatible with
161:   let c: Array<{[k:C]:any}> = x; // error
                        ^ C

dictionary.js:159
159:   let a: Array<{[k:A]:any}> = x; // error
                        ^ A. This type is incompatible with
157:   x: Array<{[k:B]:any}>,
                    ^ B

dictionary.js:165
165:   x: {[k:B]:any},
              ^ B. This type is incompatible with
169:   let c: {[k:C]:any} = x; // error
                  ^ C

dictionary.js:167
167:   let a: {[k:A]:any} = x; // error
                  ^ A. This type is incompatible with
165:   x: {[k:B]:any},
              ^ B

dictionary.js:173
173:   x: Array<{[k:string]:B}>,
                            ^ B. This type is incompatible with
180:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                     ^ C

dictionary.js:175
175:   let a: Array<{[k:string]:B, p:A}> = x; // error: A ~> B
                                     ^ A. This type is incompatible with
173:   x: Array<{[k:string]:B}>,
                            ^ B

dictionary.js:181
181:   (x[0].p: C); // not true
        ^^^^^^ B. This type is incompatible with
181:   (x[0].p: C); // not true
                ^ C

dictionary.js:187
187:   xc: Array<{[k:string]:C, p:B}>,
                                  ^ B. This type is incompatible with
194:   let c: Array<{[k:string]:C}> = xc; // error
                                ^ C

dictionary.js:189
189:   let a: Array<{[k:string]:A}> = xa; // error
                                ^ A. This type is incompatible with
185:   xa: Array<{[k:string]:A, p:B}>,
                                  ^ B

dictionary.js:195
195:   (xc[0].p: C); // not true
        ^^^^^^^ B. This type is incompatible with
195:   (xc[0].p: C); // not true
                 ^ C

dictionary.js:199
199:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
206:   let c: {[k:string]:B, p:C} = x; // error
                               ^ C

dictionary.js:201
201:   let a: {[k:string]:B, p:A} = x; // error: A ~> B
                               ^ A. This type is incompatible with
199:   x: {[k:string]:B},
                      ^ B

dictionary.js:207
207:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
207:   (x.p: C); // not true
             ^ C

dictionary.js:213
213:   xc: {[k:string]:C, p:B},
                            ^ B. This type is incompatible with
220:   let c: {[k:string]:C} = xc; // error
                          ^ C

dictionary.js:215
215:   let a: {[k:string]:A} = xa; // error
                          ^ A. This type is incompatible with
211:   xa: {[k:string]:A, p:B},
                            ^ B

dictionary.js:221
221:   (xc.p: C); // not true
        ^^^^ B. This type is incompatible with
221:   (xc.p: C); // not true
              ^ C

dictionary.js:225
225:   x: Array<{[k:string]:X}>,
                ^^^^^^^^^^^^^^ some property. Property not found in
226: ): Array<{p:X}> {
              ^^^^^ object type

dictionary.js:232
232: ): Array<{[k:string]:X}> {
              ^^^^^^^^^^^^^^ some property. Property not found in
231:   x: Array<{p:X}>,
                ^^^^^ object type

dictionary.js:237
237:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
244:   let c: {p:C} = x; // error
                 ^ C

dictionary.js:239
239:   let a: {p:A} = x; // error
                 ^ A. This type is incompatible with
237:   x: {[k:string]:B},
                      ^ B

dictionary.js:245
245:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
245:   (x.p: C); // not true
             ^ C

dictionary.js:249
249:   x: {p:B},
             ^ B. This type is incompatible with
256:   let c: {[k:string]:C} = x; // error
                          ^ C

dictionary.js:251
251:   let a: {[k:string]:A} = x; // error
                          ^ A. This type is incompatible with
249:   x: {p:B},
             ^ B

dictionary.js:257
257:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
257:   (x.p: C); // not true
             ^ C

dictionary.js:263
263:   x: {p:B, x:X},
             ^ B. This type is incompatible with
267:   let c: {[k:string]:C,x:X} = x; // error (as above), but exclusive of x
                          ^ C

dictionary.js:265
265:   let a: {[k:string]:A,x:X} = x; // error (as above), but exclusive of x
                          ^ A. This type is incompatible with
263:   x: {p:B, x:X},
             ^ B

dictionary.js:271
271:   x: Array<{[k:string]:B}>,
                            ^ B. This type is incompatible with
275:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                     ^ C

dictionary.js:273
273:   let a: Array<{[k:string]:B, p:A}> = x; // error
                                     ^ A. This type is incompatible with
271:   x: Array<{[k:string]:B}>,
                            ^ B

dictionary.js:279
279:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
283:   let c: {[k:string]:B, p:C} = x; // error
                               ^ C

dictionary.js:281
281:   let a: {[k:string]:B, p:A} = x; // error
                               ^ A. This type is incompatible with
279:   x: {[k:string]:B},
                      ^ B

dictionary.js:289
289:   let a: {p?:A} = x; // error
                  ^ A. This type is incompatible with
287:   x: {[k:string]:B},
                      ^ B

dictionary.js:299
299:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
301:   let c: {p?:C} = x; // error
                  ^ C

dictionary.js:305
305:   x: {p?:A},
              ^ A. This type is incompatible with
306: ): {[k:string]:B} { // error: A ~> B
                    ^ B

dictionary.js:318
318: ): {[k:string]:B} { // error: C ~> B
                    ^ B. This type is incompatible with
317:   x: {p?:C},
              ^ C

incompatible.js:3
  3: var x : {[key: string]: string} = {};
                    ^^^^^^ string. This type is incompatible with
  5: var z : {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                    ^^^^^^ number

incompatible.js:3
  3: var x : {[key: string]: string} = {};
                             ^^^^^^ string. This type is incompatible with
  4: var y : {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                             ^^^^^^ number

incompatible.js:4
  4: var y : {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                             ^^^^^^ number. This type is incompatible with
  3: var x : {[key: string]: string} = {};
                             ^^^^^^ string

incompatible.js:5
  5: var z : {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                    ^^^^^^ number. This type is incompatible with
  3: var x : {[key: string]: string} = {};
                    ^^^^^^ string

incompatible.js:7
  7: var a : {[key: string]: ?string} = {};
                              ^^^^^^ null. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

incompatible.js:7
  7: var a : {[key: string]: ?string} = {};
                              ^^^^^^ undefined. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

incompatible.js:9
  9: var c : {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                              ^^^^^^ null. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

incompatible.js:9
  9: var c : {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                              ^^^^^^ undefined. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

incompatible.js:12
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                            ^^^^^^ number. This type is incompatible with
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                                                             ^^^^^^ string

incompatible.js:12
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                                                             ^^^^^^ string. This type is incompatible with
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                            ^^^^^^ number

incompatible.js:18
 18:   x: Array<{[key: string]: number}>
                                ^^^^^^ number. This type is incompatible with
 19: ): Array<{[key: string]: number, fooBar: string}> {
                                              ^^^^^^ string

incompatible.js:19
 19: ): Array<{[key: string]: number, fooBar: string}> {
                                              ^^^^^^ string. This type is incompatible with
 18:   x: Array<{[key: string]: number}>
                                ^^^^^^ number

incompatible.js:24
 24:   x: Array<{[key: string]: mixed}>
                                ^^^^^ mixed. This type is incompatible with
 25: ): Array<{[key: string]: mixed, fooBar: string}> {
                                             ^^^^^^ string

incompatible.js:37
 37:   return x;
              ^ object type. This type is incompatible with the expected return type of
 36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                          ^^^^^^ number. This type is incompatible with
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                                                 ^^^^^^ string

incompatible.js:37
 37:   return x;
              ^ object type. This type is incompatible with the expected return type of
 36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                                                 ^^^^^^ string. This type is incompatible with
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                          ^^^^^^ number

incompatible.js:41
 41: function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                            ^^^^^^^^^^^^^^^^^^^^^^^ some property. Property not found in
 41: function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                                                             ^^^^^^^^^^^^^ object type

incompatible.js:46
 46: function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^ some property. Property not found in
 46: function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                            ^^^^^^^^^^^^^ object type

incompatible.js:55
 55:   (x.foo: string); // error
        ^^^^^ number. This type is incompatible with
 55:   (x.foo: string); // error
               ^^^^^^ string

test.js:4
  4: var o: { foo: QueryFunction } = {
                                     ^ object literal. This type is incompatible with
  4: var o: { foo: QueryFunction } = {
            ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      6:     return params.count; // error, number ~/~ string
                    ^^^^^^^^^^^^ number. This type is incompatible with
      2: type QueryFunction = (params: Params) => string;
                                                  ^^^^^^ string

test_client.js:4
  4:   return params.count; // error, number ~/~ string
              ^^^^^^^^^^^^ number. This type is incompatible with
  2: type QueryFunction = (params: Params) => string;
                                              ^^^^^^ string. See: test.js:2


Found 68 errors
