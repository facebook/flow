Error: any.js:5
  5: const val: string = dict[k] // error: number incompatible with string
                         ^^^^^^^ number. This type is incompatible with
  5: const val: string = dict[k] // error: number incompatible with string
                ^^^^^^ string

Error: dictionary.js:47
 47:   o.p = new A; // error, A ~> B
             ^^^^^ A. This type is incompatible with
 47:   o.p = new A; // error, A ~> B
       ^^^ B

Error: dictionary.js:58
 58:   (o.p: C); // error, C ~> B
        ^^^ B. This type is incompatible with
 58:   (o.p: C); // error, C ~> B
             ^ C

Error: dictionary.js:66
 66:   o.prop = "err"; // error: string ~> number
       ^^^^^^ property `prop` is a string. This type is incompatible with
 64:   o: {[k:number]:any},
              ^^^^^^ number

Error: dictionary.js:94
 94:   (o.toString(): boolean); // error: string ~> boolean
        ^^^^^^^^^^^^ string. This type is incompatible with
 94:   (o.toString(): boolean); // error: string ~> boolean
                      ^^^^^^^ boolean

Error: dictionary.js:108
108:   x: Array<{[k:string]:B}>,
                            ^ B. This type is incompatible with
115:   let c: Array<{[k:string]:C}> = x; // error
                                ^ C

Error: dictionary.js:110
110:   let a: Array<{[k:string]:A}> = x; // error
                                ^ A. This type is incompatible with
108:   x: Array<{[k:string]:B}>,
                            ^ B

Error: dictionary.js:116
116:   (x[0].p: C); // not true
        ^^^^^^ B. This type is incompatible with
116:   (x[0].p: C); // not true
                ^ C

Error: dictionary.js:120
120:   x: {[k:string]:B},
                      ^ B. This type is incompatible with
127:   let c: {[k:string]:C} = x; // error
                          ^ C

Error: dictionary.js:122
122:   let a: {[k:string]:A} = x; // error
                          ^ A. This type is incompatible with
120:   x: {[k:string]:B},
                      ^ B

Error: dictionary.js:128
128:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
128:   (x.p: C); // not true
             ^ C

Error: dictionary.js:139
139:     a: new A, // error, A not <: B
            ^^^^^ A. This type is incompatible with
138:   let b: {[k:string]:B} = {
                          ^ B

Error: dictionary.js:145
145:     a: new A, // error, A not <: C
            ^^^^^ A. This type is incompatible with
144:   let c: {[k:string]:C} = {
                          ^ C

Error: dictionary.js:146
146:     b: new B, // error, A not <: C
            ^^^^^ B. This type is incompatible with
144:   let c: {[k:string]:C} = {
                          ^ C

Error: dictionary.js:157
157:   x: Array<{[k:B]:any}>,
                    ^ B. This type is incompatible with
161:   let c: Array<{[k:C]:any}> = x; // error
                        ^ C

Error: dictionary.js:159
159:   let a: Array<{[k:A]:any}> = x; // error
                        ^ A. This type is incompatible with
157:   x: Array<{[k:B]:any}>,
                    ^ B

Error: dictionary.js:165
165:   x: {[k:B]:any},
              ^ B. This type is incompatible with
169:   let c: {[k:C]:any} = x; // error
                  ^ C

Error: dictionary.js:167
167:   let a: {[k:A]:any} = x; // error
                  ^ A. This type is incompatible with
165:   x: {[k:B]:any},
              ^ B

Error: dictionary.js:175
175:   let a: Array<{[k:string]:B, p:A}> = x; // error: A ~> B
                                           ^ array type. Has some incompatible type argument with
175:   let a: Array<{[k:string]:B, p:A}> = x; // error: A ~> B
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    175:   let a: Array<{[k:string]:B, p:A}> = x; // error: A ~> B
                        ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    173:   x: Array<{[k:string]:B}>,
                    ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        175:   let a: Array<{[k:string]:B, p:A}> = x; // error: A ~> B
                                             ^ A. This type is incompatible with
        173:   x: Array<{[k:string]:B}>,
                                    ^ B

Error: dictionary.js:180
180:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                           ^ array type. Has some incompatible type argument with
180:   let c: Array<{[k:string]:B, p:C}> = x; // error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    180:   let c: Array<{[k:string]:B, p:C}> = x; // error
                        ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    173:   x: Array<{[k:string]:B}>,
                    ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        173:   x: Array<{[k:string]:B}>,
                                    ^ B. This type is incompatible with
        180:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                             ^ C

Error: dictionary.js:181
181:   (x[0].p: C); // not true
        ^^^^^^ B. This type is incompatible with
181:   (x[0].p: C); // not true
                ^ C

Error: dictionary.js:189
189:   let a: Array<{[k:string]:A}> = xa; // error
                                      ^^ array type. Has some incompatible type argument with
189:   let a: Array<{[k:string]:A}> = xa; // error
              ^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    185:   xa: Array<{[k:string]:A, p:B}>,
                     ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    189:   let a: Array<{[k:string]:A}> = xa; // error
                        ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        189:   let a: Array<{[k:string]:A}> = xa; // error
                                        ^ A. This type is incompatible with
        185:   xa: Array<{[k:string]:A, p:B}>,
                                          ^ B

Error: dictionary.js:194
194:   let c: Array<{[k:string]:C}> = xc; // error
                                      ^^ array type. Has some incompatible type argument with
194:   let c: Array<{[k:string]:C}> = xc; // error
              ^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    187:   xc: Array<{[k:string]:C, p:B}>,
                     ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    194:   let c: Array<{[k:string]:C}> = xc; // error
                        ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        187:   xc: Array<{[k:string]:C, p:B}>,
                                          ^ B. This type is incompatible with
        194:   let c: Array<{[k:string]:C}> = xc; // error
                                        ^ C

Error: dictionary.js:195
195:   (xc[0].p: C); // not true
        ^^^^^^^ B. This type is incompatible with
195:   (xc[0].p: C); // not true
                 ^ C

Error: dictionary.js:201
201:   let a: {[k:string]:B, p:A} = x; // error: A ~> B
                                    ^ object type. This type is incompatible with
201:   let a: {[k:string]:B, p:A} = x; // error: A ~> B
              ^^^^^^^^^^^^^^^^^^^ object type
  Property `p` is incompatible:
    201:   let a: {[k:string]:B, p:A} = x; // error: A ~> B
                                   ^ A. This type is incompatible with
    199:   x: {[k:string]:B},
                          ^ B

Error: dictionary.js:206
206:   let c: {[k:string]:B, p:C} = x; // error
                                    ^ object type. This type is incompatible with
206:   let c: {[k:string]:B, p:C} = x; // error
              ^^^^^^^^^^^^^^^^^^^ object type
  Property `p` is incompatible:
    199:   x: {[k:string]:B},
                          ^ B. This type is incompatible with
    206:   let c: {[k:string]:B, p:C} = x; // error
                                   ^ C

Error: dictionary.js:207
207:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
207:   (x.p: C); // not true
             ^ C

Error: dictionary.js:213
213:   xc: {[k:string]:C, p:B},
                            ^ B. This type is incompatible with
220:   let c: {[k:string]:C} = xc; // error
                          ^ C

Error: dictionary.js:215
215:   let a: {[k:string]:A} = xa; // error
                          ^ A. This type is incompatible with
211:   xa: {[k:string]:A, p:B},
                            ^ B

Error: dictionary.js:221
221:   (xc.p: C); // not true
        ^^^^ B. This type is incompatible with
221:   (xc.p: C); // not true
              ^ C

Error: dictionary.js:227
227:   return x; // error: if allowed, could write {p:X,q:Y} into `x`
              ^ array type. This type is incompatible with the expected return type of
226: ): Array<{p:X}> {
        ^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    225:   x: Array<{[k:string]:X}>,
                    ^^^^^^^^^^^^^^ some property. Property not found in
    226: ): Array<{p:X}> {
                  ^^^^^ object type

Error: dictionary.js:233
233:   return x; // error: if allowed, could write {p:X,q:Y} into returned array
              ^ array type. This type is incompatible with the expected return type of
232: ): Array<{[k:string]:X}> {
        ^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    232: ): Array<{[k:string]:X}> {
                  ^^^^^^^^^^^^^^ some property. Property not found in
    231:   x: Array<{p:X}>,
                    ^^^^^ object type

Error: dictionary.js:239
239:   let a: {p:A} = x; // error
                      ^ object type. This type is incompatible with
239:   let a: {p:A} = x; // error
              ^^^^^ object type
  Property `p` is incompatible:
    239:   let a: {p:A} = x; // error
                     ^ A. This type is incompatible with
    237:   x: {[k:string]:B},
                          ^ B

Error: dictionary.js:244
244:   let c: {p:C} = x; // error
                      ^ object type. This type is incompatible with
244:   let c: {p:C} = x; // error
              ^^^^^ object type
  Property `p` is incompatible:
    237:   x: {[k:string]:B},
                          ^ B. This type is incompatible with
    244:   let c: {p:C} = x; // error
                     ^ C

Error: dictionary.js:245
245:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
245:   (x.p: C); // not true
             ^ C

Error: dictionary.js:249
249:   x: {p:B},
             ^ B. This type is incompatible with
256:   let c: {[k:string]:C} = x; // error
                          ^ C

Error: dictionary.js:251
251:   let a: {[k:string]:A} = x; // error
                          ^ A. This type is incompatible with
249:   x: {p:B},
             ^ B

Error: dictionary.js:257
257:   (x.p: C); // not true
        ^^^ B. This type is incompatible with
257:   (x.p: C); // not true
             ^ C

Error: dictionary.js:263
263:   x: {p:B, x:X},
             ^ B. This type is incompatible with
267:   let c: {[k:string]:C,x:X} = x; // error (as above), but exclusive of x
                          ^ C

Error: dictionary.js:265
265:   let a: {[k:string]:A,x:X} = x; // error (as above), but exclusive of x
                          ^ A. This type is incompatible with
263:   x: {p:B, x:X},
             ^ B

Error: dictionary.js:273
273:   let a: Array<{[k:string]:B, p:A}> = x; // error
                                           ^ array type. Has some incompatible type argument with
273:   let a: Array<{[k:string]:B, p:A}> = x; // error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    273:   let a: Array<{[k:string]:B, p:A}> = x; // error
                        ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    271:   x: Array<{[k:string]:B}>,
                    ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        273:   let a: Array<{[k:string]:B, p:A}> = x; // error
                                             ^ A. This type is incompatible with
        271:   x: Array<{[k:string]:B}>,
                                    ^ B

Error: dictionary.js:275
275:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                           ^ array type. Has some incompatible type argument with
275:   let c: Array<{[k:string]:B, p:C}> = x; // error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
    275:   let c: Array<{[k:string]:B, p:C}> = x; // error
                        ^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
    271:   x: Array<{[k:string]:B}>,
                    ^^^^^^^^^^^^^^ object type
      Property `p` is incompatible:
        271:   x: Array<{[k:string]:B}>,
                                    ^ B. This type is incompatible with
        275:   let c: Array<{[k:string]:B, p:C}> = x; // error
                                             ^ C

Error: dictionary.js:281
281:   let a: {[k:string]:B, p:A} = x; // error
                                    ^ object type. This type is incompatible with
281:   let a: {[k:string]:B, p:A} = x; // error
              ^^^^^^^^^^^^^^^^^^^ object type
  Property `p` is incompatible:
    281:   let a: {[k:string]:B, p:A} = x; // error
                                   ^ A. This type is incompatible with
    279:   x: {[k:string]:B},
                          ^ B

Error: dictionary.js:283
283:   let c: {[k:string]:B, p:C} = x; // error
                                    ^ object type. This type is incompatible with
283:   let c: {[k:string]:B, p:C} = x; // error
              ^^^^^^^^^^^^^^^^^^^ object type
  Property `p` is incompatible:
    279:   x: {[k:string]:B},
                          ^ B. This type is incompatible with
    283:   let c: {[k:string]:B, p:C} = x; // error
                                   ^ C

Error: dictionary.js:289
289:   let a: {p?:A} = x; // error
                       ^ object type. This type is incompatible with
289:   let a: {p?:A} = x; // error
              ^^^^^^ object type
  Property `p` is incompatible:
    289:   let a: {p?:A} = x; // error
                      ^ A. This type is incompatible with
    287:   x: {[k:string]:B},
                          ^ B

Error: dictionary.js:301
301:   let c: {p?:C} = x; // error
                       ^ object type. This type is incompatible with
301:   let c: {p?:C} = x; // error
              ^^^^^^ object type
  Property `p` is incompatible:
    299:   x: {[k:string]:B},
                          ^ B. This type is incompatible with
    301:   let c: {p?:C} = x; // error
                      ^ C

Error: dictionary.js:305
305:   x: {p?:A},
              ^ A. This type is incompatible with the expected return type of
306: ): {[k:string]:B} { // error: A ~> B
                    ^ B

Error: dictionary.js:318
318: ): {[k:string]:B} { // error: C ~> B
                    ^ B. This type is incompatible with the expected return type of
317:   x: {p?:C},
              ^ C

Error: incompatible.js:3
  3: var x : {[key: string]: string} = {};
                    ^^^^^^ string. This type is incompatible with
  5: var z : {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                    ^^^^^^ number

Error: incompatible.js:3
  3: var x : {[key: string]: string} = {};
                             ^^^^^^ string. This type is incompatible with
  4: var y : {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                             ^^^^^^ number

Error: incompatible.js:4
  4: var y : {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                             ^^^^^^ number. This type is incompatible with
  3: var x : {[key: string]: string} = {};
                             ^^^^^^ string

Error: incompatible.js:5
  5: var z : {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                    ^^^^^^ number. This type is incompatible with
  3: var x : {[key: string]: string} = {};
                    ^^^^^^ string

Error: incompatible.js:7
  7: var a : {[key: string]: ?string} = {};
                             ^^^^^^^ null. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

Error: incompatible.js:7
  7: var a : {[key: string]: ?string} = {};
                             ^^^^^^^ undefined. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

Error: incompatible.js:9
  9: var c : {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                             ^^^^^^^ null. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

Error: incompatible.js:9
  9: var c : {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                             ^^^^^^^ undefined. This type is incompatible with
  8: var b : {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ string

Error: incompatible.js:12
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                            ^^^^^^ number. This type is incompatible with
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                                                             ^^^^^^ string

Error: incompatible.js:12
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                                                             ^^^^^^ string. This type is incompatible with
 12: function foo0(x: Array<{[key: string]: number}>): Array<{[key: string]: string}> {
                                            ^^^^^^ number

Error: incompatible.js:20
 20:   return x;
              ^ array type. This type is incompatible with the expected return type of
 19: ): Array<{[key: string]: number, fooBar: string}> {
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     19: ): Array<{[key: string]: number, fooBar: string}> {
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     18:   x: Array<{[key: string]: number}>
                    ^^^^^^^^^^^^^^^^^^^^^^^ object type
      Property `fooBar` is incompatible:
         18:   x: Array<{[key: string]: number}>
                                        ^^^^^^ number. This type is incompatible with
         19: ): Array<{[key: string]: number, fooBar: string}> {
                                                      ^^^^^^ string

Error: incompatible.js:20
 20:   return x;
              ^ array type. This type is incompatible with the expected return type of
 19: ): Array<{[key: string]: number, fooBar: string}> {
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     19: ): Array<{[key: string]: number, fooBar: string}> {
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     18:   x: Array<{[key: string]: number}>
                    ^^^^^^^^^^^^^^^^^^^^^^^ object type
      Property `fooBar` is incompatible:
         19: ): Array<{[key: string]: number, fooBar: string}> {
                                                      ^^^^^^ string. This type is incompatible with
         18:   x: Array<{[key: string]: number}>
                                        ^^^^^^ number

Error: incompatible.js:27
 27:   return x; // error: mixed ~> string
              ^ array type. This type is incompatible with the expected return type of
 25: ): Array<{[key: string]: mixed, fooBar: string}> {
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     25: ): Array<{[key: string]: mixed, fooBar: string}> {
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
     24:   x: Array<{[key: string]: mixed}>
                    ^^^^^^^^^^^^^^^^^^^^^^ object type
      Property `fooBar` is incompatible:
         24:   x: Array<{[key: string]: mixed}>
                                        ^^^^^ mixed. This type is incompatible with
         25: ): Array<{[key: string]: mixed, fooBar: string}> {
                                                     ^^^^^^ string

Error: incompatible.js:37
 37:   return x;
              ^ object type. This type is incompatible with the expected return type of
 36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                          ^^^^^^ number. This type is incompatible with
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                                                 ^^^^^^ string

Error: incompatible.js:37
 37:   return x;
              ^ object type. This type is incompatible with the expected return type of
 36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                                                                 ^^^^^^ string. This type is incompatible with
     36: function foo4(x: {[key: string]: number}): {[key: string]: number, foo: string} {
                                          ^^^^^^ number

Error: incompatible.js:42
 42:   return x;
              ^ array type. This type is incompatible with the expected return type of
 41: function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                                                       ^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     41: function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                                ^^^^^^^^^^^^^^^^^^^^^^^ some property. Property not found in
     41: function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                                                                 ^^^^^^^^^^^^^ object type

Error: incompatible.js:47
 47:   return x;
              ^ array type. This type is incompatible with the expected return type of
 46: function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     46: function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                                                       ^^^^^^^^^^^^^^^^^^^^^^^ some property. Property not found in
     46: function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                                ^^^^^^^^^^^^^ object type

Error: incompatible.js:55
 55:   (x.foo: string); // error
        ^^^^^ number. This type is incompatible with
 55:   (x.foo: string); // error
               ^^^^^^ string

Error: test.js:4
                                     v
  4: var o: { foo: QueryFunction } = {
  5:   foo(params) {
  6:     return params.count; // error, number ~/~ string
  7:   }
  8: };
     ^ object literal. This type is incompatible with
  4: var o: { foo: QueryFunction } = {
            ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `foo` is incompatible:
      5:   foo(params) {
              ^^^^^^^^ function. This type is incompatible with
      4: var o: { foo: QueryFunction } = {
                       ^^^^^^^^^^^^^ function type
      This parameter is incompatible:
          6:     return params.count; // error, number ~/~ string
                        ^^^^^^^^^^^^ number. This type is incompatible with
          2: type QueryFunction = (params: Params) => string;
                                                      ^^^^^^ string

Error: test_client.js:3
  3: o.foo = function (params) {
             ^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  3: o.foo = function (params) {
     ^^^^^ function type
  This parameter is incompatible:
      4:   return params.count; // error, number ~/~ string
                  ^^^^^^^^^^^^ number. This type is incompatible with
      2: type QueryFunction = (params: Params) => string;
                                                  ^^^^^^ string. See: test.js:2


Found 68 errors
