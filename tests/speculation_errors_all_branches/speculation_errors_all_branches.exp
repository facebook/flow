Error ------------------------------------------------------------------------------------ intersection-function.js:19:1

Cannot call `a` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   intersection-function.js:19:1
   19| a(true);
       ^^^^^^^

References:
   intersection-function.js:19:3
   19| a(true);
         ^^^^ [1]
   intersection-function.js:17:23
   17| declare function a(x: number): void;
                             ^^^^^^ [2]
   intersection-function.js:18:23
   18| declare function a(x: string): void;
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:23:1

Cannot call `b` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   intersection-function.js:23:1
   23| b(42);
       ^^^^^

References:
   intersection-function.js:23:3
   23| b(42);
         ^^ [1]
   intersection-function.js:21:23
   21| declare function b(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:22:23
   22| declare function b(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:24:1

Cannot call `b` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `p`.

   intersection-function.js:24:1
   24| b({p: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:24:3
   24| b({p: 42});
         ^^^^^^^ [1]
   intersection-function.js:21:23
   21| declare function b(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:24:7
   24| b({p: 42});
             ^^ [3]
   intersection-function.js:22:27
   22| declare function b(x: {p: string}): void;
                                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:30:1

Cannot call `c` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].
 - Or number [1] is incompatible with boolean [4].
 - Or number [1] is incompatible with object type [5].

   intersection-function.js:30:1
   30| c(42);
       ^^^^^

References:
   intersection-function.js:30:3
   30| c(42);
         ^^ [1]
   intersection-function.js:26:23
   26| declare function c(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:27:23
   27| declare function c(x: {a: {b: string}}): void;
                             ^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:28:23
   28| declare function c(x: boolean): void;
                             ^^^^^^^ [4]
   intersection-function.js:29:23
   29| declare function c(x: {a: {b: boolean}}): void;
                             ^^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:31:1

Cannot call `c` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `a.b`.
 - Or object literal [1] is incompatible with boolean [5].
 - Or number [3] is incompatible with boolean [6] in property `a.b`.

   intersection-function.js:31:1
   31| c({a: {b: 42}});
       ^^^^^^^^^^^^^^^

References:
   intersection-function.js:31:3
   31| c({a: {b: 42}});
         ^^^^^^^^^^^^ [1]
   intersection-function.js:26:23
   26| declare function c(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:31:11
   31| c({a: {b: 42}});
                 ^^ [3]
   intersection-function.js:27:31
   27| declare function c(x: {a: {b: string}}): void;
                                     ^^^^^^ [4]
   intersection-function.js:28:23
   28| declare function c(x: boolean): void;
                             ^^^^^^^ [5]
   intersection-function.js:29:31
   29| declare function c(x: {a: {b: boolean}}): void;
                                     ^^^^^^^ [6]


Error ------------------------------------------------------------------------------------ intersection-function.js:36:1

Cannot call `d` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].
 - Or number [1] is incompatible with object type [4].

   intersection-function.js:36:1
   36| d(42);
       ^^^^^

References:
   intersection-function.js:36:3
   36| d(42);
         ^^ [1]
   intersection-function.js:33:23
   33| declare function d(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:34:23
   34| declare function d(x: {a: string}): void;
                             ^^^^^^^^^^^ [3]
   intersection-function.js:35:23
   35| declare function d(x: {a: {b: string}}): void;
                             ^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:37:1

Cannot call `d` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `a`.
 - Or number [3] is incompatible with object type [5] in property `a`.

   intersection-function.js:37:1
   37| d({a: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:37:3
   37| d({a: 42});
         ^^^^^^^ [1]
   intersection-function.js:33:23
   33| declare function d(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:37:7
   37| d({a: 42});
             ^^ [3]
   intersection-function.js:34:27
   34| declare function d(x: {a: string}): void;
                                 ^^^^^^ [4]
   intersection-function.js:35:27
   35| declare function d(x: {a: {b: string}}): void;
                                 ^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:38:1

Cannot call `d` because:
 - Either object literal [1] is incompatible with string [2].
 - Or object literal [3] is incompatible with string [4] in property `a`.
 - Or number [5] is incompatible with string [6] in property `a.b`.

   intersection-function.js:38:1
   38| d({a: {b: 42}});
       ^^^^^^^^^^^^^^^

References:
   intersection-function.js:38:3
   38| d({a: {b: 42}});
         ^^^^^^^^^^^^ [1]
   intersection-function.js:33:23
   33| declare function d(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:38:7
   38| d({a: {b: 42}});
             ^^^^^^^ [3]
   intersection-function.js:34:27
   34| declare function d(x: {a: string}): void;
                                 ^^^^^^ [4]
   intersection-function.js:38:11
   38| d({a: {b: 42}});
                 ^^ [5]
   intersection-function.js:35:31
   35| declare function d(x: {a: {b: string}}): void;
                                     ^^^^^^ [6]


Error ------------------------------------------------------------------------------------ intersection-function.js:42:1

Cannot call `e` because:
 - Either number [1] is incompatible with `X` [2].
 - Or number [1] is incompatible with object type [3].

   intersection-function.js:42:1
   42| e(42);
       ^^^^^

References:
   intersection-function.js:42:3
   42| e(42);
         ^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:41:23
   41| declare function e(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:44:1

Cannot call `e` because:
 - Either `Y` [1] is incompatible with `X` [2].
 - Or number [3] is incompatible with string [4] in property `p`.

   intersection-function.js:44:1
   44| e(new Y());
       ^^^^^^^^^^

References:
   intersection-function.js:44:3
   44| e(new Y());
         ^^^^^^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [3]
   intersection-function.js:41:27
   41| declare function e(x: {p: string}): void;
                                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:45:1

Cannot call `e` because:
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in object type [3].

   intersection-function.js:45:1
   45| e(new Z());
       ^^^^^^^^^^

References:
   intersection-function.js:45:3
   45| e(new Z());
         ^^^^^^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:41:23
   41| declare function e(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:46:1

Cannot call `e` because:
 - Either object literal [1] is incompatible with `X` [2].
 - Or boolean [3] is incompatible with string [4] in property `p`.

   intersection-function.js:46:1
   46| e({p: true});
       ^^^^^^^^^^^^

References:
   intersection-function.js:46:3
   46| e({p: true});
         ^^^^^^^^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:46:7
   46| e({p: true});
             ^^^^ [3]
   intersection-function.js:41:27
   41| declare function e(x: {p: string}): void;
                                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:51:1

Cannot call `f` because:
 - Either number [1] is incompatible with object type [2].
 - Or number [1] is incompatible with read-only array type [3].
 - Or number [1] is incompatible with tuple type [4].

   intersection-function.js:51:1
   51| f(42);
       ^^^^^

References:
   intersection-function.js:51:3
   51| f(42);
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:52:1

Cannot call `f` because:
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with read-only array type [4].
 - Or object literal [3] is incompatible with tuple type [5].

   intersection-function.js:52:1
   52| f({p: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:52:7
   52| f({p: 42});
             ^^ [1]
   intersection-function.js:48:27
   48| declare function f(x: {p: string}): void;
                                 ^^^^^^ [2]
   intersection-function.js:52:3
   52| f({p: 42});
         ^^^^^^^ [3]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [4]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:53:1

Cannot call `f` because:
 - Either property `p` is missing in object literal [1] but exists in object type [2].
 - Or object literal [1] is incompatible with read-only array type [3].
 - Or object literal [1] is incompatible with tuple type [4].

   intersection-function.js:53:1
   53| f({});
       ^^^^^

References:
   intersection-function.js:53:3
   53| f({});
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:54:1

Cannot call `f` because:
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with read-only array type [4].
 - Or `Y` [3] is incompatible with tuple type [5].

   intersection-function.js:54:1
   54| f(new Y());
       ^^^^^^^^^^

References:
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   intersection-function.js:48:27
   48| declare function f(x: {p: string}): void;
                                 ^^^^^^ [2]
   intersection-function.js:54:3
   54| f(new Y());
         ^^^^^^^ [3]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [4]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:55:1

Cannot call `f` because:
 - Either property `p` is missing in `Z` [1] but exists in object type [2].
 - Or `Z` [1] is incompatible with read-only array type [3].
 - Or `Z` [1] is incompatible with tuple type [4].

   intersection-function.js:55:1
   55| f(new Z());
       ^^^^^^^^^^

References:
   intersection-function.js:55:3
   55| f(new Z());
         ^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:56:1

Cannot call `f` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or tuple type [1] has an arity of 1 but tuple type [5] has an arity of 2.

   intersection-function.js:56:1
   56| f(([1]: [number]));
       ^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:56:9
   56| f(([1]: [number]));
               ^^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:56:10
   56| f(([1]: [number]));
                ^^^^^^ [3]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [4]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:57:1

Cannot call `f` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or number [3] is incompatible with string [5] in index 0.

   intersection-function.js:57:1
   57| f(([1, 2]: [number, number]));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:57:12
   57| f(([1, 2]: [number, number]));
                  ^^^^^^^^^^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:57:13
   57| f(([1, 2]: [number, number]));
                   ^^^^^^ [3]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [4]
   intersection-function.js:50:24
   50| declare function f(x: [string, string]): void;
                              ^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:58:1

Cannot call `f` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or tuple type [1] has an arity of 3 but tuple type [5] has an arity of 2.

   intersection-function.js:58:1
   58| f(([1, 2, 3]: [number, number, number]));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:58:15
   58| f(([1, 2, 3]: [number, number, number]));
                     ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:58:16
   58| f(([1, 2, 3]: [number, number, number]));
                      ^^^^^^ [3]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [4]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [5]


Error ------------------------------------------------------------------------------------ intersection-function.js:59:1

Cannot call `f` because:
 - Either array type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in property `p`.
 - Or number [5] is incompatible with string [6] in array element.
 - Or object type [7] is incompatible with read-only array type [8].
 - Or array type [1] has an unknown number of elements, so is incompatible with tuple type [9].
 - Or object type [7] is incompatible with tuple type [9].

   intersection-function.js:59:1
   59| f(((null: any): Array<number> & {p: number}));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:59:17
   59| f(((null: any): Array<number> & {p: number}));
                       ^^^^^^^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:59:37
   59| f(((null: any): Array<number> & {p: number}));
                                           ^^^^^^ [3]
   intersection-function.js:48:27
   48| declare function f(x: {p: string}): void;
                                 ^^^^^^ [4]
   intersection-function.js:59:23
   59| f(((null: any): Array<number> & {p: number}));
                             ^^^^^^ [5]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [6]
   intersection-function.js:59:33
   59| f(((null: any): Array<number> & {p: number}));
                                       ^^^^^^^^^^^ [7]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [8]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [9]


Error ------------------------------------------------------------------------------------ intersection-function.js:63:1

Cannot call `g` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Z` [3].

   intersection-function.js:63:1
   63| g(42);
       ^^^^^

References:
   intersection-function.js:63:3
   63| g(42);
         ^^ [1]
   intersection-function.js:61:23
   61| declare function g(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:62:23
   62| declare function g(x: Z): void;
                             ^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:64:1

Cannot call `g` because:
 - Either object literal [1] is incompatible with string [2].
 - Or object literal [1] is incompatible with `Z` [3].

   intersection-function.js:64:1
   64| g({});
       ^^^^^

References:
   intersection-function.js:64:3
   64| g({});
         ^^ [1]
   intersection-function.js:61:23
   61| declare function g(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:62:23
   62| declare function g(x: Z): void;
                             ^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:68:1

Cannot call `h` because:
 - Either no more than 2 arguments are expected by function type [1].
 - Or number [2] is incompatible with object type [3].

   intersection-function.js:68:1
   68| h(1, 2, 3);
       ^^^^^^^^^^

References:
   intersection-function.js:66:19
   66| declare function h(a: string, b: string): void;
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   intersection-function.js:68:6
   68| h(1, 2, 3);
            ^ [2]
   intersection-function.js:67:34
   67| declare function h(a: number, b: {}, c: string): void;
                                        ^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:72:1

Cannot call `i` because:
 - Either number [1] is incompatible with string [2].
 - Or `Y` [3] is incompatible with `X` [4].

   intersection-function.js:72:1
   72| i(new Y(), 42);
       ^^^^^^^^^^^^^^

References:
   intersection-function.js:72:12
   72| i(new Y(), 42);
                  ^^ [1]
   intersection-function.js:70:29
   70| declare function i(a: Y, b: string): void;
                                   ^^^^^^ [2]
   intersection-function.js:72:3
   72| i(new Y(), 42);
         ^^^^^^^ [3]
   intersection-function.js:71:23
   71| declare function i(a: X, b: number): void;
                             ^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:76:1

Cannot call `j` because:
 - Either number [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4].

   intersection-function.js:76:1
   76| j(1, 2);
       ^^^^^^^

References:
   intersection-function.js:76:6
   76| j(1, 2);
            ^ [1]
   intersection-function.js:74:34
   74| declare function j(a: number, b: string): void;
                                        ^^^^^^ [2]
   intersection-function.js:76:3
   76| j(1, 2);
         ^ [3]
   intersection-function.js:75:23
   75| declare function j(a: string, b: number): void;
                             ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:80:1

Cannot call `k` because:
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or number [3] is incompatible with string [4].

   intersection-function.js:80:1
   80| k(1, {p: 2});
       ^^^^^^^^^^^^

References:
   intersection-function.js:80:10
   80| k(1, {p: 2});
                ^ [1]
   intersection-function.js:78:38
   78| declare function k(a: number, b: {p: string}): void;
                                            ^^^^^^ [2]
   intersection-function.js:80:3
   80| k(1, {p: 2});
         ^ [3]
   intersection-function.js:79:23
   79| declare function k(a: string, b: {p: number}): void;
                             ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:84:1

Cannot call `m` because:
 - Either number [1] is incompatible with string [2] in type argument `T` [3].
 - Or number [1] is incompatible with string [4] in property `p`.

   intersection-function.js:84:1
   84| m((new W(): W<number>));
       ^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:84:15
   84| m((new W(): W<number>));
                     ^^^^^^ [1]
   intersection-function.js:82:25
   82| declare function m(x: W<string>): void;
                               ^^^^^^ [2]
   intersection-function.js:13:9
   13| class W<T> {
               ^ [3]
   intersection-function.js:83:27
   83| declare function m(x: {p: string}): void;
                                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------------------- sentinel.js:11:2

Cannot cast object literal to `X` because string [1] is incompatible with number [2] in property `p`.

   sentinel.js:11:2
   11| ({type: 'A', p: 'foo'}: X);
        ^^^^^^^^^^^^^^^^^^^^^

References:
   sentinel.js:11:17
   11| ({type: 'A', p: 'foo'}: X);
                       ^^^^^ [1]
   sentinel.js:7:20
    7|   | {type: 'A', p: number}
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- sentinel.js:12:2

Cannot cast object literal to `X` because object literal [1] is incompatible with `X` [2].

   sentinel.js:12:2
   12| ({type: 'D'}: X);
        ^^^^^^^^^^^ [1]

References:
   sentinel.js:12:15
   12| ({type: 'D'}: X);
                     ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:18:2

Cannot cast `true` to `A` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   union.js:18:2
   18| (true: A);
        ^^^^ [1]

References:
   union.js:17:10
   17| type A = number | string;
                ^^^^^^ [2]
   union.js:17:19
   17| type A = number | string;
                         ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:21:2

Cannot cast `42` to `B` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   union.js:21:2
   21| (42: B);
        ^^ [1]

References:
   union.js:20:10
   20| type B = string | {p: string};
                ^^^^^^ [2]
   union.js:20:19
   20| type B = string | {p: string};
                         ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:22:2

Cannot cast object literal to `B` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `p`.

   union.js:22:2
   22| ({p: 42}: B);
        ^^^^^^^ [1]

References:
   union.js:20:10
   20| type B = string | {p: string};
                ^^^^^^ [2]
   union.js:22:6
   22| ({p: 42}: B);
            ^^ [3]
   union.js:20:23
   20| type B = string | {p: string};
                             ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:25:2

Cannot cast `42` to `C` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].
 - Or number [1] is incompatible with boolean [4].
 - Or number [1] is incompatible with object type [5].

   union.js:25:2
   25| (42: C);
        ^^ [1]

References:
   union.js:24:10
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                ^^^^^^ [2]
   union.js:24:19
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                         ^^^^^^^^^^^^^^^^ [3]
   union.js:24:38
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                            ^^^^^^^ [4]
   union.js:24:48
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                                      ^^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:26:2

Cannot cast object literal to `C` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `a.b`.
 - Or object literal [1] is incompatible with boolean [5].
 - Or number [3] is incompatible with boolean [6] in property `a.b`.

   union.js:26:2
   26| ({a: {b: 42}}: C);
        ^^^^^^^^^^^^ [1]

References:
   union.js:24:10
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                ^^^^^^ [2]
   union.js:26:10
   26| ({a: {b: 42}}: C);
                ^^ [3]
   union.js:24:27
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                 ^^^^^^ [4]
   union.js:24:38
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                            ^^^^^^^ [5]
   union.js:24:56
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                                              ^^^^^^^ [6]


Error ---------------------------------------------------------------------------------------------------- union.js:29:2

Cannot cast `42` to `D` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].
 - Or number [1] is incompatible with object type [4].

   union.js:29:2
   29| (42: D);
        ^^ [1]

References:
   union.js:28:10
   28| type D = string | {a: string} | {a: {b: string}};
                ^^^^^^ [2]
   union.js:28:19
   28| type D = string | {a: string} | {a: {b: string}};
                         ^^^^^^^^^^^ [3]
   union.js:28:33
   28| type D = string | {a: string} | {a: {b: string}};
                                       ^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:30:2

Cannot cast object literal to `D` because:
 - Either object literal [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4] in property `a`.
 - Or number [3] is incompatible with object type [5] in property `a`.

   union.js:30:2
   30| ({a: 42}: D);
        ^^^^^^^ [1]

References:
   union.js:28:10
   28| type D = string | {a: string} | {a: {b: string}};
                ^^^^^^ [2]
   union.js:30:6
   30| ({a: 42}: D);
            ^^ [3]
   union.js:28:23
   28| type D = string | {a: string} | {a: {b: string}};
                             ^^^^^^ [4]
   union.js:28:37
   28| type D = string | {a: string} | {a: {b: string}};
                                           ^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:31:2

Cannot cast object literal to `D` because:
 - Either object literal [1] is incompatible with string [2].
 - Or object literal [3] is incompatible with string [4] in property `a`.
 - Or number [5] is incompatible with string [6] in property `a.b`.

   union.js:31:2
   31| ({a: {b: 42}}: D);
        ^^^^^^^^^^^^ [1]

References:
   union.js:28:10
   28| type D = string | {a: string} | {a: {b: string}};
                ^^^^^^ [2]
   union.js:31:6
   31| ({a: {b: 42}}: D);
            ^^^^^^^ [3]
   union.js:28:23
   28| type D = string | {a: string} | {a: {b: string}};
                             ^^^^^^ [4]
   union.js:31:10
   31| ({a: {b: 42}}: D);
                ^^ [5]
   union.js:28:41
   28| type D = string | {a: string} | {a: {b: string}};
                                               ^^^^^^ [6]


Error ---------------------------------------------------------------------------------------------------- union.js:34:2

Cannot cast `42` to `E` because:
 - Either number [1] is incompatible with `X` [2].
 - Or number [1] is incompatible with object type [3].

   union.js:34:2
   34| (42: E);
        ^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:33:14
   33| type E = X | {p: string};
                    ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:36:2

Cannot cast `new Y()` to `E` because:
 - Either `Y` [1] is incompatible with `X` [2].
 - Or number [3] is incompatible with string [4] in property `p`.

   union.js:36:2
   36| (new Y(): E);
        ^^^^^^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:10:6
   10|   p: number;
            ^^^^^^ [3]
   union.js:33:18
   33| type E = X | {p: string};
                        ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:37:2

Cannot cast `new Z()` to `E` because:
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in object type [3].

   union.js:37:2
   37| (new Z(): E);
        ^^^^^^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:33:14
   33| type E = X | {p: string};
                    ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:38:2

Cannot cast object literal to `E` because:
 - Either object literal [1] is incompatible with `X` [2].
 - Or boolean [3] is incompatible with string [4] in property `p`.

   union.js:38:2
   38| ({p: true}: E);
        ^^^^^^^^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:38:6
   38| ({p: true}: E);
            ^^^^ [3]
   union.js:33:18
   33| type E = X | {p: string};
                        ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:41:2

Cannot cast `42` to `F` because:
 - Either number [1] is incompatible with object type [2].
 - Or number [1] is incompatible with read-only array type [3].
 - Or number [1] is incompatible with tuple type [4].

   union.js:41:2
   41| (42: F);
        ^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [3]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:42:2

Cannot cast object literal to `F` because:
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with read-only array type [4].
 - Or object literal [3] is incompatible with tuple type [5].

   union.js:42:2
   42| ({p: 42}: F);
        ^^^^^^^ [3]

References:
   union.js:42:6
   42| ({p: 42}: F);
            ^^ [1]
   union.js:40:14
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                    ^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [4]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:43:2

Cannot cast object literal to `F` because:
 - Either property `p` is missing in object literal [1] but exists in object type [2].
 - Or object literal [1] is incompatible with read-only array type [3].
 - Or object literal [1] is incompatible with tuple type [4].

   union.js:43:2
   43| ({}: F);
        ^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [3]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:44:2

Cannot cast `new Y()` to `F` because:
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with read-only array type [4].
 - Or `Y` [3] is incompatible with tuple type [5].

   union.js:44:2
   44| (new Y(): F);
        ^^^^^^^ [3]

References:
   union.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   union.js:40:14
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                    ^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [4]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:45:2

Cannot cast `new Z()` to `F` because:
 - Either property `p` is missing in `Z` [1] but exists in object type [2].
 - Or `Z` [1] is incompatible with read-only array type [3].
 - Or `Z` [1] is incompatible with tuple type [4].

   union.js:45:2
   45| (new Z(): F);
        ^^^^^^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [3]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:46:3

Cannot cast array literal to `F` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or tuple type [1] has an arity of 1 but tuple type [5] has an arity of 2.

   union.js:46:3
   46| (([1]: [number]): F);
         ^^^^^^^^^^^^^

References:
   union.js:46:8
   46| (([1]: [number]): F);
              ^^^^^^^^ [1]
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:46:9
   46| (([1]: [number]): F);
               ^^^^^^ [3]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [4]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:47:3

Cannot cast array literal to `F` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or number [3] is incompatible with string [5] in index 0.

   union.js:47:3
   47| (([1, 2]: [number, number]): F);
         ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:47:11
   47| (([1, 2]: [number, number]): F);
                 ^^^^^^^^^^^^^^^^ [1]
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:47:12
   47| (([1, 2]: [number, number]): F);
                  ^^^^^^ [3]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [4]
   union.js:40:50
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                        ^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:48:3

Cannot cast array literal to `F` because:
 - Either tuple type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in array element.
 - Or tuple type [1] has an arity of 3 but tuple type [5] has an arity of 2.

   union.js:48:3
   48| (([1, 2, 3]: [number, number, number]): F);
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:48:14
   48| (([1, 2, 3]: [number, number, number]): F);
                    ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:48:15
   48| (([1, 2, 3]: [number, number, number]): F);
                     ^^^^^^ [3]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [4]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [5]


Error ---------------------------------------------------------------------------------------------------- union.js:49:4

Cannot cast `null` to `F` because:
 - Either array type [1] is incompatible with object type [2].
 - Or number [3] is incompatible with string [4] in property `p`.
 - Or number [5] is incompatible with string [6] in array element.
 - Or object type [7] is incompatible with read-only array type [8].
 - Or array type [1] has an unknown number of elements, so is incompatible with tuple type [9].
 - Or object type [7] is incompatible with tuple type [9].

   union.js:49:4
   49| (((null: any): Array<number> & {p: number}): F);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:49:16
   49| (((null: any): Array<number> & {p: number}): F);
                      ^^^^^^^^^^^^^ [1]
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:49:36
   49| (((null: any): Array<number> & {p: number}): F);
                                          ^^^^^^ [3]
   union.js:40:14
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                    ^^^^^^ [4]
   union.js:49:22
   49| (((null: any): Array<number> & {p: number}): F);
                            ^^^^^^ [5]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [6]
   union.js:49:32
   49| (((null: any): Array<number> & {p: number}): F);
                                      ^^^^^^^^^^^ [7]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [8]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [9]


Error ---------------------------------------------------------------------------------------------------- union.js:52:2

Cannot cast `42` to `G` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Z` [3].

   union.js:52:2
   52| (42: G);
        ^^ [1]

References:
   union.js:51:10
   51| type G = string | Z;
                ^^^^^^ [2]
   union.js:51:19
   51| type G = string | Z;
                         ^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:53:2

Cannot cast object literal to `G` because:
 - Either object literal [1] is incompatible with string [2].
 - Or object literal [1] is incompatible with `Z` [3].

   union.js:53:2
   53| ({}: G);
        ^^ [1]

References:
   union.js:51:10
   51| type G = string | Z;
                ^^^^^^ [2]
   union.js:51:19
   51| type G = string | Z;
                         ^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:56:3

Cannot cast `new W()` to `M` because:
 - Either number [1] is incompatible with string [2] in type argument `T` [3].
 - Or number [1] is incompatible with string [4] in property `p`.

   union.js:56:3
   56| ((new W(): W<number>): M);
         ^^^^^^^^^^^^^^^^^^

References:
   union.js:56:14
   56| ((new W(): W<number>): M);
                    ^^^^^^ [1]
   union.js:55:12
   55| type M = W<string> | {p: string};
                  ^^^^^^ [2]
   union.js:13:9
   13| class W<T> {
               ^ [3]
   union.js:55:26
   55| type M = W<string> | {p: string};
                                ^^^^^^ [4]



Found 54 errors
