>>> function.js (#changes: 6)
//@flow

function fn(a: mixed): number {
  return a + 1;
}

function fn1(a: number): number {
  return a + 1;
}
fn1(1);

function fn2(a: number): number {
  return a + 1;
}

function fn3<T: {x: number, ...}>(a: T): boolean {
  return a.x > 3
}
fn3<{| x: number, y: number |}>({x: 0, y: 1});

function fn4<T>(x: T): T {
  return x;
}

function unknown(x: any): number {
  return 1;
}


>>> general.js (#changes: 5)
//@flow
const x: number = 1;

const arr: Array<string> = [];
arr.push('test');

const arr2: Array<number | string> = [1, 'test'];

class TestClass {
  x: number;
  constructor() {
    this.x = 1;
  }
}

// $FlowFixMe[cannot-resolve-name]
function search(entry: SearchableEntry<any>): void{
}


>>> generic.js (#changes: 1)
// @flow

class C<X> { f: X }

class D extends C<string> {
    m() {
        this.f = "";
    }
}

>>> react.js (#changes: 2)
//@flow

import React from 'React';

function Test(): React.MixedElement {
  return <div>test</div>
}

class TestComponent {
  render(): React.MixedElement {
    return <div>test</div>
  }
}


>>> Launching report...

Stats:
  Files changed:                            4
  Number of annotations added:             12
  Total size of annotations:               17
  Number of mixed added:                    0

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         0
  Import Error:
    Loc source none:                        0
    Parsing heaps get ast error:            0
    Indeterminate module type:              0
    No matching export:                     0
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            2
  Empty SomeKnownUpper:                     1

