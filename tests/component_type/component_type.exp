Error ---------------------------------------------------------------------- abstract_component_to_component_type.js:6:1

Cannot cast `Foo` to component because number [1] is incompatible with string [2] in property `bar`. [incompatible-cast]

   abstract_component_to_component_type.js:6:1
   6| Foo as component(bar: number, ref: React.RefSetter<Instance>); // error: number ~> string
      ^^^

References:
   abstract_component_to_component_type.js:6:23
   6| Foo as component(bar: number, ref: React.RefSetter<Instance>); // error: number ~> string
                            ^^^^^^ [1]
   abstract_component_to_component_type.js:1:51
   1| declare const Foo: React$AbstractComponent<{+bar: string}, Instance>;
                                                        ^^^^^^ [2]


Error ---------------------------------------------------------------------- abstract_component_to_component_type.js:7:1

Cannot cast `Foo` to component because number [1] is incompatible with string [2] in property `bar`. [incompatible-cast]

   abstract_component_to_component_type.js:7:1
   7| Foo as component(ref: React.RefSetter<Instance>, ...{bar: number}); // error: number ~> string
      ^^^

References:
   abstract_component_to_component_type.js:7:59
   7| Foo as component(ref: React.RefSetter<Instance>, ...{bar: number}); // error: number ~> string
                                                                ^^^^^^ [1]
   abstract_component_to_component_type.js:1:51
   1| declare const Foo: React$AbstractComponent<{+bar: string}, Instance>;
                                                        ^^^^^^ [2]


Error ---------------------------------------------------------------------- abstract_component_to_component_type.js:8:1

Cannot cast `Foo` to component because `Instance` [1] is incompatible with string [2]. [incompatible-cast]

   abstract_component_to_component_type.js:8:1
    8| Foo as component( // error: Instance ~> string
       ^^^

References:
   abstract_component_to_component_type.js:1:60
    1| declare const Foo: React$AbstractComponent<{+bar: string}, Instance>;
                                                                  ^^^^^^^^ [1]
   abstract_component_to_component_type.js:10:26
   10|     ref: React.RefSetter<string>
                                ^^^^^^ [2]


Error --------------------------------------------------------------------- abstract_component_to_component_type.js:12:1

Cannot cast `Foo` to component because: [incompatible-cast]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

   abstract_component_to_component_type.js:12:1
    12| Foo as component( // error again due to bad ref
        ^^^

References:
   abstract_component_to_component_type.js:14:10
    14|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------- abstract_component_to_component_type.js:14:5

Cannot declare ref because: [incompatible-type]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

The `ref` parameter must be a subtype of `React.RefSetter`.

   abstract_component_to_component_type.js:14:5
    14|     ref: ImNotARefSetter // error: bad ref
            ^^^

References:
   abstract_component_to_component_type.js:14:10
    14|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------- class_to_component_type.js:5:1

Cannot cast `Foo` to component because string [1] is incompatible with number [2] in property `bar`. [incompatible-cast]

   class_to_component_type.js:5:1
   5| Foo as component(bar: number, ref: React.RefSetter<Foo>); // error: number ~> string
      ^^^

References:
   class_to_component_type.js:1:49
   1| declare class Foo extends React$Component<{bar: string}> {}
                                                      ^^^^^^ [1]
   class_to_component_type.js:5:23
   5| Foo as component(bar: number, ref: React.RefSetter<Foo>); // error: number ~> string
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------- class_to_component_type.js:6:1

Cannot cast `Foo` to component because string [1] is incompatible with number [2] in property `bar`. [incompatible-cast]

   class_to_component_type.js:6:1
   6| Foo as component(ref: React.RefSetter<Foo>, ...{bar: number}); // error: number ~> string
      ^^^

References:
   class_to_component_type.js:1:49
   1| declare class Foo extends React$Component<{bar: string}> {}
                                                      ^^^^^^ [1]
   class_to_component_type.js:6:54
   6| Foo as component(ref: React.RefSetter<Foo>, ...{bar: number}); // error: number ~> string
                                                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------- class_to_component_type.js:7:1

Cannot cast `Foo` to component because `Foo` [1] is incompatible with string [2]. [incompatible-cast]

   class_to_component_type.js:7:1
   7| Foo as component( // error: Foo ~> string
      ^^^

References:
   class_to_component_type.js:1:15
   1| declare class Foo extends React$Component<{bar: string}> {}
                    ^^^ [1]
   class_to_component_type.js:9:26
   9|     ref: React.RefSetter<string>
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- class_to_component_type.js:11:1

Cannot cast `Foo` to component because: [incompatible-cast]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

   class_to_component_type.js:11:1
    11| Foo as component( // error again due to bad ref
        ^^^

References:
   class_to_component_type.js:13:10
    13|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------- class_to_component_type.js:13:5

Cannot declare ref because: [incompatible-type]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

The `ref` parameter must be a subtype of `React.RefSetter`.

   class_to_component_type.js:13:5
    13|     ref: ImNotARefSetter // error: bad ref
            ^^^

References:
   class_to_component_type.js:13:10
    13|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------- component_type_to_abstract_component.js:4:42

Cannot declare ref because: [incompatible-type]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

The `ref` parameter must be a subtype of `React.RefSetter`.

   component_type_to_abstract_component.js:4:42
     4| declare const C3: component(bar: string, ref: ImNotARefSetter); // error: bad ref
                                                 ^^^

References:
   component_type_to_abstract_component.js:4:47
     4| declare const C3: component(bar: string, ref: ImNotARefSetter); // error: bad ref
                                                      ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------- component_type_to_abstract_component.js:12:1

Cannot cast `C1` to AbstractComponent because number [1] is incompatible with string [2] in property `bar`.
[incompatible-cast]

   component_type_to_abstract_component.js:12:1
   12| C1 as React$AbstractComponent<{+bar: number}, Instance>; // error: number ~> string
       ^^

References:
   component_type_to_abstract_component.js:12:38
   12| C1 as React$AbstractComponent<{+bar: number}, Instance>; // error: number ~> string
                                            ^^^^^^ [1]
   component_type_to_abstract_component.js:2:34
    2| declare const C1: component(bar: string, ref: React.RefSetter<Instance>);
                                        ^^^^^^ [2]


Error --------------------------------------------------------------------- component_type_to_abstract_component.js:13:1

Cannot cast `C2` to AbstractComponent because number [1] is incompatible with string [2] in property `bar`.
[incompatible-cast]

   component_type_to_abstract_component.js:13:1
   13| C2 as React$AbstractComponent<{+bar: number}, Instance>; // error: number ~> string
       ^^

References:
   component_type_to_abstract_component.js:13:38
   13| C2 as React$AbstractComponent<{+bar: number}, Instance>; // error: number ~> string
                                            ^^^^^^ [1]
   component_type_to_abstract_component.js:3:70
    3| declare const C2: component(ref: React.RefSetter<Instance>, ...{bar: string})
                                                                            ^^^^^^ [2]


Error --------------------------------------------------------------------- component_type_to_abstract_component.js:14:1

Cannot cast `C1` to AbstractComponent because `Instance` [1] is incompatible with string [2]. [incompatible-cast]

   component_type_to_abstract_component.js:14:1
   14| C1 as React$AbstractComponent<{+bar: string}, string>; // error: Instance ~> string
       ^^

References:
   component_type_to_abstract_component.js:2:63
    2| declare const C1: component(bar: string, ref: React.RefSetter<Instance>);
                                                                     ^^^^^^^^ [1]
   component_type_to_abstract_component.js:14:47
   14| C1 as React$AbstractComponent<{+bar: string}, string>; // error: Instance ~> string
                                                     ^^^^^^ [2]


Error --------------------------------------------------------------------- component_type_to_abstract_component.js:15:1

Cannot cast `C3` to AbstractComponent because `React.RefSetter` [1] is incompatible with `ImNotARefSetter` [2].
[incompatible-cast]

   component_type_to_abstract_component.js:15:1
   15| C3 as React$AbstractComponent<{+bar: string}, Instance>; // error: ImNotARefSetter ~> React.RefSetter<...>
       ^^

References:
   component_type_to_abstract_component.js:15:47
   15| C3 as React$AbstractComponent<{+bar: string}, Instance>; // error: ImNotARefSetter ~> React.RefSetter<...>
                                                     ^^^^^^^^ [1]
   component_type_to_abstract_component.js:4:47
    4| declare const C3: component(bar: string, ref: ImNotARefSetter); // error: bad ref
                                                     ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ everything_implicit_instantiation.js:10:1

Cannot cast `C` to component because string [1] is incompatible with number [2] in property `bar`. [incompatible-cast]

   everything_implicit_instantiation.js:10:1
   10| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: string); // error
       ^

References:
   everything_implicit_instantiation.js:10:69
   10| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: string); // error
                                                                           ^^^^^^ [1]
   everything_implicit_instantiation.js:6:74
    6| declare component B(ref: React.RefSetter<Set<string>>, foo: string, bar: number) renders? A;
                                                                                ^^^^^^ [2]


Error ------------------------------------------------------------------------ everything_implicit_instantiation.js:11:1

Cannot cast `C` to component because number [1] is incompatible with string [2] in type argument `T` [3] of type
argument `T` [4]. [incompatible-cast]

   everything_implicit_instantiation.js:11:1
     11| C as component(ref: React.RefSetter<Set<number>>, foo: string, bar: number); // error
         ^

References:
   everything_implicit_instantiation.js:11:41
     11| C as component(ref: React.RefSetter<Set<number>>, foo: string, bar: number); // error
                                                 ^^^^^^ [1]
   everything_implicit_instantiation.js:6:46
      6| declare component B(ref: React.RefSetter<Set<string>>, foo: string, bar: number) renders? A;
                                                      ^^^^^^ [2]
   <BUILTINS>/core.js:1930:19
   1930| declare class Set<T> extends $ReadOnlySet<T> {
                           ^ [3]
   <BUILTINS>/react.js:230:19
    230|   type RefSetter<-T> = React$RefSetter<T>;
                           ^ [4]


Error ------------------------------------------------------------------------ everything_implicit_instantiation.js:12:1

Cannot cast `C` to component because a value that renders nothing [1] does not render `A` [2]. [incompatible-cast]

   everything_implicit_instantiation.js:12:1
   12| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: number) renders A; // error
       ^

References:
   everything_implicit_instantiation.js:8:23
    8| const C = idComponent(B);
                             ^ [1]
   everything_implicit_instantiation.js:12:77
   12| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: number) renders A; // error
                                                                                   ^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- function_to_component_type.js:5:1

Cannot cast `Foo` to component because number [1] is incompatible with string [2] in property `bar`. [incompatible-cast]

   function_to_component_type.js:5:1
   5| Foo as component(bar: number); // error: number ~> string
      ^^^

References:
   function_to_component_type.js:5:23
   5| Foo as component(bar: number); // error: number ~> string
                            ^^^^^^ [1]
   function_to_component_type.js:1:35
   1| declare function Foo(props: {bar: string}): void;
                                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------- function_to_component_type.js:6:1

Cannot cast `Foo` to component because number [1] is incompatible with string [2] in property `bar`. [incompatible-cast]

   function_to_component_type.js:6:1
   6| Foo as component(...{bar: number}); // error: number ~> string
      ^^^

References:
   function_to_component_type.js:6:27
   6| Foo as component(...{bar: number}); // error: number ~> string
                                ^^^^^^ [1]
   function_to_component_type.js:1:35
   1| declare function Foo(props: {bar: string}): void;
                                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------- function_to_component_type.js:8:1

Cannot cast `Foo` to component because undefined [1] is incompatible with string [2]. [incompatible-cast]

   function_to_component_type.js:8:1
    8| Foo as component( // error: void ~> string
       ^^^ [1]

References:
   function_to_component_type.js:10:26
   10|     ref: React.RefSetter<string>
                                ^^^^^^ [2]


Error ------------------------------------------------------------------------------- function_to_component_type.js:12:1

Cannot cast `Foo` to component because: [incompatible-cast]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

   function_to_component_type.js:12:1
    12| Foo as component( // error again due to bad ref
        ^^^

References:
   function_to_component_type.js:14:10
    14|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------- function_to_component_type.js:14:5

Cannot declare ref because: [incompatible-type]
 - Either `ImNotARefSetter` [1] is not a subtype of object type [2]. Class instances are not subtypes of object types;
   consider rewriting object type [2] as an interface.
 - Or a call signature declaring the expected parameter / return type is missing in `ImNotARefSetter` [1] but exists in
   function type [3].

The `ref` parameter must be a subtype of `React.RefSetter`.

   function_to_component_type.js:14:5
    14|     ref: ImNotARefSetter // error: bad ref
            ^^^

References:
   function_to_component_type.js:14:10
    14|     ref: ImNotARefSetter // error: bad ref
                 ^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------- props_implicit_instantiation.js:11:1

Cannot cast `C` to component because string [1] is incompatible with number [2] in property `bar`. [incompatible-cast]

   props_implicit_instantiation.js:11:1
   11| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: string); // error: string ~> number
       ^

References:
   props_implicit_instantiation.js:11:69
   11| C as component(ref: React.RefSetter<Set<string>>, foo: string, bar: string); // error: string ~> number
                                                                           ^^^^^^ [1]
   props_implicit_instantiation.js:7:74
    7| declare component A(ref: React.RefSetter<Set<string>>, foo: string, bar: number);
                                                                                ^^^^^^ [2]


Error ----------------------------------------------------------------------------- props_implicit_instantiation.js:12:1

Cannot cast `C` to component because number [1] is incompatible with string [2] in type argument `T` [3] of type
argument `T` [4]. [incompatible-cast]

   props_implicit_instantiation.js:12:1
     12| C as component(ref: React.RefSetter<Set<number>>, foo: string, bar: number); // error: number ~> string
         ^

References:
   props_implicit_instantiation.js:12:41
     12| C as component(ref: React.RefSetter<Set<number>>, foo: string, bar: number); // error: number ~> string
                                                 ^^^^^^ [1]
   props_implicit_instantiation.js:7:46
      7| declare component A(ref: React.RefSetter<Set<string>>, foo: string, bar: number);
                                                      ^^^^^^ [2]
   <BUILTINS>/core.js:1930:19
   1930| declare class Set<T> extends $ReadOnlySet<T> {
                           ^ [3]
   <BUILTINS>/react.js:230:19
    230|   type RefSetter<-T> = React$RefSetter<T>;
                           ^ [4]


Error ----------------------------------------------------------------------------- props_implicit_instantiation.js:16:1

Cannot cast `props1` to object type because number [1] is incompatible with string [2] in property `bar`.
[incompatible-cast]

   props_implicit_instantiation.js:16:1
   16| props1 as {+foo: number, +bar: string}; // error: string != number
       ^^^^^^

References:
   props_implicit_instantiation.js:14:39
   14| declare component B(foo: string, bar: number);
                                             ^^^^^^ [1]
   props_implicit_instantiation.js:16:32
   16| props1 as {+foo: number, +bar: string}; // error: string != number
                                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------- props_implicit_instantiation.js:16:1

Cannot cast `props1` to object type because string [1] is incompatible with number [2] in property `foo`.
[incompatible-cast]

   props_implicit_instantiation.js:16:1
   16| props1 as {+foo: number, +bar: string}; // error: string != number
       ^^^^^^

References:
   props_implicit_instantiation.js:14:26
   14| declare component B(foo: string, bar: number);
                                ^^^^^^ [1]
   props_implicit_instantiation.js:16:18
   16| props1 as {+foo: number, +bar: string}; // error: string != number
                        ^^^^^^ [2]


Error ----------------------------------------------------------------------------- props_implicit_instantiation.js:21:1

Cannot cast `props2` to empty because props of component B [1] is incompatible with empty [2]. [incompatible-cast]

   props_implicit_instantiation.js:21:1
   21| props2 as empty; // error
       ^^^^^^

References:
   props_implicit_instantiation.js:14:1
   14| declare component B(foo: string, bar: number);
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   props_implicit_instantiation.js:21:11
   21| props2 as empty; // error
                 ^^^^^ [2]


Error --------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:6:1

Cannot cast `instance` to empty because `Promise` [1] is incompatible with empty [2]. [incompatible-cast]

   ref_prop_implicit_instantiation.js:6:1
   6| instance as empty; // error
      ^^^^^^^^

References:
   ref_prop_implicit_instantiation.js:1:49
   1| declare const C: component(ref: React.RefSetter<Promise<string>>);
                                                      ^^^^^^^^^^^^^^^ [1]
   ref_prop_implicit_instantiation.js:6:13
   6| instance as empty; // error
                  ^^^^^ [2]


Error -------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:8:51

Cannot declare ref because: [incompatible-type]
 - Either mixed [1] is incompatible with object type [2].
 - Or mixed [1] is incompatible with function type [3].

The `ref` parameter must be a subtype of `React.RefSetter`.

   ref_prop_implicit_instantiation.js:8:51
     8| declare function extractRefSetter<S>(c: component(ref: S)): S; // error: bad ref
                                                          ^^^

References:
   ref_prop_implicit_instantiation.js:8:56
     8| declare function extractRefSetter<S>(c: component(ref: S)): S; // error: bad ref
                                                               ^ [1]
   <BUILTINS>/react.js:181:5
   181|   | { -current: T | null, ... }
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:182:6
   182|   | ((T | null) => mixed)
             ^^^^^^^^^^^^^^^^^^^ [3]


Error -------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:11:1

Cannot cast `refSetter` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   ref_prop_implicit_instantiation.js:11:1
   11| refSetter as empty; // error
       ^^^^^^^^^

References:
   ref_prop_implicit_instantiation.js:1:33
    1| declare const C: component(ref: React.RefSetter<Promise<string>>);
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   ref_prop_implicit_instantiation.js:11:14
   11| refSetter as empty; // error
                    ^^^^^ [2]


Error -------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:11:1

Cannot cast `refSetter` to empty because null [1] is incompatible with empty [2]. [incompatible-cast]

   ref_prop_implicit_instantiation.js:11:1
   11| refSetter as empty; // error
       ^^^^^^^^^

References:
   ref_prop_implicit_instantiation.js:1:33
    1| declare const C: component(ref: React.RefSetter<Promise<string>>);
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   ref_prop_implicit_instantiation.js:11:14
   11| refSetter as empty; // error
                    ^^^^^ [2]


Error -------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:11:1

Cannot cast `refSetter` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   ref_prop_implicit_instantiation.js:11:1
   11| refSetter as empty; // error
       ^^^^^^^^^

References:
   ref_prop_implicit_instantiation.js:1:33
    1| declare const C: component(ref: React.RefSetter<Promise<string>>);
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   ref_prop_implicit_instantiation.js:11:14
   11| refSetter as empty; // error
                    ^^^^^ [2]


Error -------------------------------------------------------------------------- ref_prop_implicit_instantiation.js:11:1

Cannot cast `refSetter` to empty because undefined [1] is incompatible with empty [2]. [incompatible-cast]

   ref_prop_implicit_instantiation.js:11:1
   11| refSetter as empty; // error
       ^^^^^^^^^

References:
   ref_prop_implicit_instantiation.js:1:33
    1| declare const C: component(ref: React.RefSetter<Promise<string>>);
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   ref_prop_implicit_instantiation.js:11:14
   11| refSetter as empty; // error
                    ^^^^^ [2]


Error --------------------------------------------------------------------------- renders_implicit_instantiation.js:12:1

Cannot cast `C` to component because a value that renders nothing [1] does not render `A` [2]. [incompatible-cast]

   renders_implicit_instantiation.js:12:1
   12| C as component() renders A; // error: renders A ~> renders? A
       ^

References:
   renders_implicit_instantiation.js:9:23
    9| const C = idComponent(B);
                             ^ [1]
   renders_implicit_instantiation.js:12:18
   12| C as component() renders A; // error: renders A ~> renders? A
                        ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------- renders_implicit_instantiation.js:13:1

Cannot cast `C` to component because component B [1] does not render `A2` [2]. [incompatible-cast]

   renders_implicit_instantiation.js:13:1
   13| C as component() renders? A2; // error: renders? A2 ~> renders? A
       ^

References:
   renders_implicit_instantiation.js:9:23
    9| const C = idComponent(B);
                             ^ [1]
   renders_implicit_instantiation.js:13:18
   13| C as component() renders? A2; // error: renders? A2 ~> renders? A
                        ^^^^^^^^^^^ [2]



Found 36 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
