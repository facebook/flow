Error -------------------------------------------------------------------------------------- errors_intersection.js:13:3

Cannot cast `any` to object type because:
 - boolean [1] is incompatible with number literal `2` [2] in property `b`.
 - boolean [3] is incompatible with number literal `1` [4] in property `a`.
 - boolean [5] is incompatible with number literal `3` [6] in property `c`.

   errors_intersection.js:13:3
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:13:13
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                   ^^^^^^^ [1]
   errors_intersection.js:13:55
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                                                             ^ [2]
   errors_intersection.js:13:26
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                                ^^^^^^^ [3]
   errors_intersection.js:13:62
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                                                                    ^ [4]
   errors_intersection.js:13:39
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                                             ^^^^^^^ [5]
   errors_intersection.js:13:69
   13| ((any: {+b: boolean, +a: boolean, +c: boolean}): {+b: 2, +a: 1, +c: 3});
                                                                           ^ [6]


Error -------------------------------------------------------------------------------------- errors_intersection.js:16:3

Cannot cast `any` to object type because:
 - in property `a`:
    - Either boolean [1] is incompatible with number literal `1` [2].
    - Or string [3] is incompatible with number literal `1` [2].
 - in property `b`:
    - Either boolean [4] is incompatible with number literal `2` [5].
    - Or string [6] is incompatible with number literal `2` [5].
 - in property `c`:
    - Either boolean [7] is incompatible with number literal `3` [8].
    - Or string [9] is incompatible with number literal `3` [8].

   errors_intersection.js:16:3
         v-----
   16| ((any: {
   17|   +b: boolean & string,
   18|   +a: boolean & string,
   19|   +c: boolean & string,
   20| }): {+b: 2, +a: 1, +c: 3});
       ^

References:
   errors_intersection.js:18:7
   18|   +a: boolean & string,
             ^^^^^^^ [1]
   errors_intersection.js:20:17
   20| }): {+b: 2, +a: 1, +c: 3});
                       ^ [2]
   errors_intersection.js:18:17
   18|   +a: boolean & string,
                       ^^^^^^ [3]
   errors_intersection.js:17:7
   17|   +b: boolean & string,
             ^^^^^^^ [4]
   errors_intersection.js:20:10
   20| }): {+b: 2, +a: 1, +c: 3});
                ^ [5]
   errors_intersection.js:17:17
   17|   +b: boolean & string,
                       ^^^^^^ [6]
   errors_intersection.js:19:7
   19|   +c: boolean & string,
             ^^^^^^^ [7]
   errors_intersection.js:20:24
   20| }): {+b: 2, +a: 1, +c: 3});
                              ^ [8]
   errors_intersection.js:19:17
   19|   +c: boolean & string,
                       ^^^^^^ [9]


Error -------------------------------------------------------------------------------------- errors_intersection.js:23:3

Cannot cast `any` to object type because:
 - in property `a`:
    - Either boolean [1] is incompatible with number literal `1` [2].
    - Or string [3] is incompatible with number literal `1` [2].
 - boolean [4] is incompatible with number literal `2` [5] in property `b`.
 - boolean [6] is incompatible with number literal `3` [7] in property `c`.

   errors_intersection.js:23:3
   23| ((any: {+b: boolean, +a: boolean & string, +c: boolean}): {
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:23:26
   23| ((any: {+b: boolean, +a: boolean & string, +c: boolean}): {
                                ^^^^^^^ [1]
   errors_intersection.js:25:7
   25|   +a: 1,
             ^ [2]
   errors_intersection.js:23:36
   23| ((any: {+b: boolean, +a: boolean & string, +c: boolean}): {
                                          ^^^^^^ [3]
   errors_intersection.js:23:13
   23| ((any: {+b: boolean, +a: boolean & string, +c: boolean}): {
                   ^^^^^^^ [4]
   errors_intersection.js:24:7
   24|   +b: 2,
             ^ [5]
   errors_intersection.js:23:48
   23| ((any: {+b: boolean, +a: boolean & string, +c: boolean}): {
                                                      ^^^^^^^ [6]
   errors_intersection.js:26:7
   26|   +c: 3,
             ^ [7]


Error -------------------------------------------------------------------------------------- errors_intersection.js:30:3

Cannot cast `any` to object type because:
 - in property `b`:
    - Either boolean [1] is incompatible with number literal `2` [2].
    - Or string [3] is incompatible with number literal `2` [2].
 - boolean [4] is incompatible with number literal `1` [5] in property `a`.
 - boolean [6] is incompatible with number literal `3` [7] in property `c`.

   errors_intersection.js:30:3
   30| ((any: {+b: boolean & string, +a: boolean, +c: boolean}): {
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:30:13
   30| ((any: {+b: boolean & string, +a: boolean, +c: boolean}): {
                   ^^^^^^^ [1]
   errors_intersection.js:31:7
   31|   +b: 2,
             ^ [2]
   errors_intersection.js:30:23
   30| ((any: {+b: boolean & string, +a: boolean, +c: boolean}): {
                             ^^^^^^ [3]
   errors_intersection.js:30:35
   30| ((any: {+b: boolean & string, +a: boolean, +c: boolean}): {
                                         ^^^^^^^ [4]
   errors_intersection.js:32:7
   32|   +a: 1,
             ^ [5]
   errors_intersection.js:30:48
   30| ((any: {+b: boolean & string, +a: boolean, +c: boolean}): {
                                                      ^^^^^^^ [6]
   errors_intersection.js:33:7
   33|   +c: 3,
             ^ [7]


Error -------------------------------------------------------------------------------------- errors_intersection.js:37:3

Cannot cast `any` to object type because:
 - in property `c`:
    - Either boolean [1] is incompatible with number literal `3` [2].
    - Or string [3] is incompatible with number literal `3` [2].
 - boolean [4] is incompatible with number literal `2` [5] in property `b`.
 - boolean [6] is incompatible with number literal `1` [7] in property `a`.

   errors_intersection.js:37:3
   37| ((any: {+b: boolean, +a: boolean, +c: boolean & string}): {
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:37:39
   37| ((any: {+b: boolean, +a: boolean, +c: boolean & string}): {
                                             ^^^^^^^ [1]
   errors_intersection.js:40:7
   40|   +c: 3,
             ^ [2]
   errors_intersection.js:37:49
   37| ((any: {+b: boolean, +a: boolean, +c: boolean & string}): {
                                                       ^^^^^^ [3]
   errors_intersection.js:37:13
   37| ((any: {+b: boolean, +a: boolean, +c: boolean & string}): {
                   ^^^^^^^ [4]
   errors_intersection.js:38:7
   38|   +b: 2,
             ^ [5]
   errors_intersection.js:37:26
   37| ((any: {+b: boolean, +a: boolean, +c: boolean & string}): {
                                ^^^^^^^ [6]
   errors_intersection.js:39:7
   39|   +a: 1,
             ^ [7]


Error -------------------------------------------------------------------------------------- errors_intersection.js:44:3

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `42` [2] in property `a.b`.

   errors_intersection.js:44:3
   44| ((any: {+a: {+b: boolean}}): {+a: {+b: 42}});
         ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:44:18
   44| ((any: {+a: {+b: boolean}}): {+a: {+b: 42}});
                        ^^^^^^^ [1]
   errors_intersection.js:44:40
   44| ((any: {+a: {+b: boolean}}): {+a: {+b: 42}});
                                              ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:48:3

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `42` [2] in property `a` of
property `b`.

   errors_intersection.js:48:3
   48| ((any: {+a: boolean & {+b: boolean & {}}}): {+a: {+b: 42}});
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:48:28
   48| ((any: {+a: boolean & {+b: boolean & {}}}): {+a: {+b: 42}});
                                  ^^^^^^^ [1]
   errors_intersection.js:48:55
   48| ((any: {+a: boolean & {+b: boolean & {}}}): {+a: {+b: 42}});
                                                             ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:50:3

Cannot cast `any` to number literal `42` because boolean [1] is incompatible with number literal `42` [2].

   errors_intersection.js:50:3
   50| ((any: boolean): 42); // Error: number ~> boolean
         ^^^^^^^^^^^^

References:
   errors_intersection.js:50:8
   50| ((any: boolean): 42); // Error: number ~> boolean
              ^^^^^^^ [1]
   errors_intersection.js:50:18
   50| ((any: boolean): 42); // Error: number ~> boolean
                        ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:51:3

Cannot cast `any` to number literal `42` because boolean [1] is incompatible with number literal `42` [2].

   errors_intersection.js:51:3
   51| ((any: {} & {} & {} & boolean): 42); // Error: number ~> boolean
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:51:23
   51| ((any: {} & {} & {} & boolean): 42); // Error: number ~> boolean
                             ^^^^^^^ [1]
   errors_intersection.js:51:33
   51| ((any: {} & {} & {} & boolean): 42); // Error: number ~> boolean
                                       ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:52:3

Cannot cast `any` to number literal `42` because boolean [1] is incompatible with number literal `42` [2].

   errors_intersection.js:52:3
   52| ((any: {} & ({} & ({} & boolean))): 42); // Error: number ~> boolean
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:52:25
   52| ((any: {} & ({} & ({} & boolean))): 42); // Error: number ~> boolean
                               ^^^^^^^ [1]
   errors_intersection.js:52:37
   52| ((any: {} & ({} & ({} & boolean))): 42); // Error: number ~> boolean
                                           ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:54:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:54:3
   54| ((any: number & string): true); // Error
         ^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:54:8
   54| ((any: number & string): true); // Error
              ^^^^^^ [1]
   errors_intersection.js:54:26
   54| ((any: number & string): true); // Error
                                ^^^^ [2]
   errors_intersection.js:54:17
   54| ((any: number & string): true); // Error
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:55:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:55:3
   55| ((any: number & string & {}): true); // Error: should not show the {} branch
         ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:55:8
   55| ((any: number & string & {}): true); // Error: should not show the {} branch
              ^^^^^^ [1]
   errors_intersection.js:55:31
   55| ((any: number & string & {}): true); // Error: should not show the {} branch
                                     ^^^^ [2]
   errors_intersection.js:55:17
   55| ((any: number & string & {}): true); // Error: should not show the {} branch
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:56:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:56:3
   56| ((any: {} & number & string): true); // Error: should not show the {} branch
         ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:56:13
   56| ((any: {} & number & string): true); // Error: should not show the {} branch
                   ^^^^^^ [1]
   errors_intersection.js:56:31
   56| ((any: {} & number & string): true); // Error: should not show the {} branch
                                     ^^^^ [2]
   errors_intersection.js:56:22
   56| ((any: {} & number & string): true); // Error: should not show the {} branch
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:57:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:57:3
   57| ((any: number & {} & string): true); // Error: should not show the {} branch
         ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:57:8
   57| ((any: number & {} & string): true); // Error: should not show the {} branch
              ^^^^^^ [1]
   errors_intersection.js:57:31
   57| ((any: number & {} & string): true); // Error: should not show the {} branch
                                     ^^^^ [2]
   errors_intersection.js:57:22
   57| ((any: number & {} & string): true); // Error: should not show the {} branch
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:59:3

Cannot cast `any` to object type because in property `a`:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:59:3
   59| ((any: {+a: number & string}): {+a: true}); // Error
         ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:59:13
   59| ((any: {+a: number & string}): {+a: true}); // Error
                   ^^^^^^ [1]
   errors_intersection.js:59:37
   59| ((any: {+a: number & string}): {+a: true}); // Error
                                           ^^^^ [2]
   errors_intersection.js:59:22
   59| ((any: {+a: number & string}): {+a: true}); // Error
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:61:3

Cannot cast `any` to object type because:
 - in property `a`:
    - Either number [1] is incompatible with boolean literal `true` [2].
    - Or string [3] is incompatible with boolean literal `true` [2].
 - in property `b`:
    - Either number [4] is incompatible with boolean literal `true` [5].
    - Or string [6] is incompatible with boolean literal `true` [5].
 - in property `c`:
    - Either number [7] is incompatible with boolean literal `true` [8].
    - Or string [9] is incompatible with boolean literal `true` [8].
 - in property `d`:
    - Either number [10] is incompatible with boolean literal `true` [11].
    - Or string [12] is incompatible with boolean literal `true` [11].

   errors_intersection.js:61:3
         v-----
   61| ((any: {
   62|   +a: number & string,
   63|   +b: {} & number & string,
   64|   +c: number & {} & string,
   65|   +d: number & string & {},
   66| }): {
       ^

References:
   errors_intersection.js:62:7
   62|   +a: number & string,
             ^^^^^^ [1]
   errors_intersection.js:67:7
   67|   +a: true, // Error: should be grouped
             ^^^^ [2]
   errors_intersection.js:62:16
   62|   +a: number & string,
                      ^^^^^^ [3]
   errors_intersection.js:63:12
   63|   +b: {} & number & string,
                  ^^^^^^ [4]
   errors_intersection.js:68:7
   68|   +b: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [5]
   errors_intersection.js:63:21
   63|   +b: {} & number & string,
                           ^^^^^^ [6]
   errors_intersection.js:64:7
   64|   +c: number & {} & string,
             ^^^^^^ [7]
   errors_intersection.js:69:7
   69|   +c: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [8]
   errors_intersection.js:64:21
   64|   +c: number & {} & string,
                           ^^^^^^ [9]
   errors_intersection.js:65:7
   65|   +d: number & string & {},
             ^^^^^^ [10]
   errors_intersection.js:70:7
   70|   +d: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [11]
   errors_intersection.js:65:16
   65|   +d: number & string & {},
                      ^^^^^^ [12]


Error -------------------------------------------------------------------------------------- errors_intersection.js:74:3

Cannot cast `any` to object type because:
 - in property `a`:
    - Either number [1] is incompatible with boolean literal `true` [2] in index 0.
    - Or string [3] is incompatible with boolean literal `true` [2] in index 0.
 - in property `b`:
    - Either number [4] is incompatible with boolean literal `true` [5] in index 0.
    - Or string [6] is incompatible with boolean literal `true` [5] in index 0.
 - in property `c`:
    - Either number [7] is incompatible with boolean literal `true` [8] in index 0.
    - Or string [9] is incompatible with boolean literal `true` [8] in index 0.
 - in property `d`:
    - Either number [10] is incompatible with boolean literal `true` [11] in index 0.
    - Or string [12] is incompatible with boolean literal `true` [11] in index 0.

   errors_intersection.js:74:3
         v-----
   74| ((any: {
   75|   +a: [number] & [string],
   76|   +b: [{}] & [number] & [string],
   77|   +c: [number] & [{}] & [string],
   78|   +d: [number] & [string] & [{}],
   79| }): {
       ^

References:
   errors_intersection.js:75:8
   75|   +a: [number] & [string],
              ^^^^^^ [1]
   errors_intersection.js:80:8
   80|   +a: [true], // Error: should be grouped
              ^^^^ [2]
   errors_intersection.js:75:19
   75|   +a: [number] & [string],
                         ^^^^^^ [3]
   errors_intersection.js:76:15
   76|   +b: [{}] & [number] & [string],
                     ^^^^^^ [4]
   errors_intersection.js:81:8
   81|   +b: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [5]
   errors_intersection.js:76:26
   76|   +b: [{}] & [number] & [string],
                                ^^^^^^ [6]
   errors_intersection.js:77:8
   77|   +c: [number] & [{}] & [string],
              ^^^^^^ [7]
   errors_intersection.js:82:8
   82|   +c: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [8]
   errors_intersection.js:77:26
   77|   +c: [number] & [{}] & [string],
                                ^^^^^^ [9]
   errors_intersection.js:78:8
   78|   +d: [number] & [string] & [{}],
              ^^^^^^ [10]
   errors_intersection.js:83:8
   83|   +d: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [11]
   errors_intersection.js:78:19
   78|   +d: [number] & [string] & [{}],
                         ^^^^^^ [12]


Error -------------------------------------------------------------------------------------- errors_intersection.js:86:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:86:3
   86| ((any: number & (string & false)): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:86:8
   86| ((any: number & (string & false)): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:86:36
   86| ((any: number & (string & false)): true); // Error: should be flattened
                                          ^^^^ [2]
   errors_intersection.js:86:18
   86| ((any: number & (string & false)): true); // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:86:27
   86| ((any: number & (string & false)): true); // Error: should be flattened
                                 ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:87:3

Cannot cast `any` to boolean literal `true` because:
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:87:3
   87| ((any: (string & false) & number): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:87:9
   87| ((any: (string & false) & number): true); // Error: should be flattened
               ^^^^^^ [1]
   errors_intersection.js:87:36
   87| ((any: (string & false) & number): true); // Error: should be flattened
                                          ^^^^ [2]
   errors_intersection.js:87:18
   87| ((any: (string & false) & number): true); // Error: should be flattened
                        ^^^^^ [3]
   errors_intersection.js:87:27
   87| ((any: (string & false) & number): true); // Error: should be flattened
                                 ^^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:88:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:88:3
   88| ((any: {} & number & (string & false)): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:88:13
   88| ((any: {} & number & (string & false)): true); // Error: should be flattened
                   ^^^^^^ [1]
   errors_intersection.js:88:41
   88| ((any: {} & number & (string & false)): true); // Error: should be flattened
                                               ^^^^ [2]
   errors_intersection.js:88:23
   88| ((any: {} & number & (string & false)): true); // Error: should be flattened
                             ^^^^^^ [3]
   errors_intersection.js:88:32
   88| ((any: {} & number & (string & false)): true); // Error: should be flattened
                                      ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:89:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:89:3
   89| ((any: number & (string & false) & {}): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:89:8
   89| ((any: number & (string & false) & {}): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:89:41
   89| ((any: number & (string & false) & {}): true); // Error: should be flattened
                                               ^^^^ [2]
   errors_intersection.js:89:18
   89| ((any: number & (string & false) & {}): true); // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:89:27
   89| ((any: number & (string & false) & {}): true); // Error: should be flattened
                                 ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:90:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:90:3
   90| ((any: number & (string & {} & false)): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:90:8
   90| ((any: number & (string & {} & false)): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:90:41
   90| ((any: number & (string & {} & false)): true); // Error: should be flattened
                                               ^^^^ [2]
   errors_intersection.js:90:18
   90| ((any: number & (string & {} & false)): true); // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:90:32
   90| ((any: number & (string & {} & false)): true); // Error: should be flattened
                                      ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:92:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:92:3
   92| ((any: number & number & number & string): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:92:8
   92| ((any: number & number & number & string): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:92:44
   92| ((any: number & number & number & string): true); // Error: should be flattened
                                                  ^^^^ [2]
   errors_intersection.js:92:17
   92| ((any: number & number & number & string): true); // Error: should be flattened
                       ^^^^^^ [3]
   errors_intersection.js:92:26
   92| ((any: number & number & number & string): true); // Error: should be flattened
                                ^^^^^^ [4]
   errors_intersection.js:92:35
   92| ((any: number & number & number & string): true); // Error: should be flattened
                                         ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:93:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:93:3
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:93:8
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:93:46
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
                                                    ^^^^ [2]
   errors_intersection.js:93:17
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
                       ^^^^^^ [3]
   errors_intersection.js:93:27
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
                                 ^^^^^^ [4]
   errors_intersection.js:93:36
   93| ((any: number & number & (number & string)): true); // Error: should be flattened
                                          ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:94:3

Cannot cast `any` to boolean literal `true` because:
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:94:3
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:94:8
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:94:48
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
                                                      ^^^^ [2]
   errors_intersection.js:94:18
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:94:28
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
                                  ^^^^^^ [4]
   errors_intersection.js:94:37
   94| ((any: number & (number & (number & string))): true); // Error: should be flattened
                                           ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:95:3

Cannot cast `any` to boolean literal `true` because:
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or number [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:95:3
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:95:9
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
               ^^^^^^ [1]
   errors_intersection.js:95:46
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
                                                    ^^^^ [2]
   errors_intersection.js:95:18
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:95:28
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
                                  ^^^^^^ [4]
   errors_intersection.js:95:37
   95| ((any: (string & number) & number & number): true); // Error: should be flattened
                                           ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:96:3

Cannot cast `any` to boolean literal `true` because:
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or number [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:96:3
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:96:10
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
                ^^^^^^ [1]
   errors_intersection.js:96:48
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
                                                      ^^^^ [2]
   errors_intersection.js:96:19
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
                         ^^^^^^ [3]
   errors_intersection.js:96:29
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
                                   ^^^^^^ [4]
   errors_intersection.js:96:39
   96| ((any: ((string & number) & number) & number): true); // Error: should be flattened
                                             ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:98:3

Cannot cast `any` to boolean literal `true` because number [1] is incompatible with boolean literal `true` [2].

   errors_intersection.js:98:3
   98| ((any: number & {}): true); // Error
         ^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:98:8
   98| ((any: number & {}): true); // Error
              ^^^^^^ [1]
   errors_intersection.js:98:22
   98| ((any: number & {}): true); // Error
                            ^^^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:99:3

Cannot cast `any` to object type because:
 - number [1] is incompatible with boolean literal `true` [2] in property `a`.
 - number [3] is incompatible with boolean literal `true` [4] in property `b`.

   errors_intersection.js:99:3
   99| ((any: {+a: number & {}, +b: number & {}}): {+a: true, +b: true}); // Error
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:99:13
   99| ((any: {+a: number & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                   ^^^^^^ [1]
   errors_intersection.js:99:50
   99| ((any: {+a: number & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                                        ^^^^ [2]
   errors_intersection.js:99:30
   99| ((any: {+a: number & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                    ^^^^^^ [3]
   errors_intersection.js:99:60
   99| ((any: {+a: number & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                                                  ^^^^ [4]


Error ------------------------------------------------------------------------------------- errors_intersection.js:100:3

Cannot cast `any` to object type because:
 - in property `a`:
    - Either number [1] is incompatible with boolean literal `true` [2].
    - Or string [3] is incompatible with boolean literal `true` [2].
 - number [4] is incompatible with boolean literal `true` [5] in property `b`.

   errors_intersection.js:100:3
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:100:13
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                    ^^^^^^ [1]
   errors_intersection.js:100:59
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                                                  ^^^^ [2]
   errors_intersection.js:100:22
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                             ^^^^^^ [3]
   errors_intersection.js:100:39
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                              ^^^^^^ [4]
   errors_intersection.js:100:69
   100| ((any: {+a: number & string & {}, +b: number & {}}): {+a: true, +b: true}); // Error
                                                                            ^^^^ [5]


Error ------------------------------------------------------------------------------------- errors_intersection.js:103:3

Cannot cast `any` to tuple type because:
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `B` [3] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [4] is incompatible with number [2] in index 1 of index 0.
 - Or `D` [5] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:103:3
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:103:16
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
                       ^ [1]
   errors_intersection.js:103:68
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
                                                                           ^^^^^^ [2]
   errors_intersection.js:103:28
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
                                   ^ [3]
   errors_intersection.js:103:42
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
                                                 ^ [4]
   errors_intersection.js:103:54
   103| ((any: [[null, A] & [null, B]] & [[null, C] & [null, D]]): [[null, number]]);
                                                             ^ [5]


Error ------------------------------------------------------------------------------------- errors_intersection.js:106:3

Cannot cast `any` to tuple type because:
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [3] is incompatible with number [2] in index 1 of index 0.
 - Or `D` [4] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:106:3
   106| ((any: [[null, A] & {}] & [[null, C] & [null, D]]): [[null, number]]);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:106:16
   106| ((any: [[null, A] & {}] & [[null, C] & [null, D]]): [[null, number]]);
                       ^ [1]
   errors_intersection.js:106:61
   106| ((any: [[null, A] & {}] & [[null, C] & [null, D]]): [[null, number]]);
                                                                    ^^^^^^ [2]
   errors_intersection.js:106:35
   106| ((any: [[null, A] & {}] & [[null, C] & [null, D]]): [[null, number]]);
                                          ^ [3]
   errors_intersection.js:106:47
   106| ((any: [[null, A] & {}] & [[null, C] & [null, D]]): [[null, number]]);
                                                      ^ [4]


Error ------------------------------------------------------------------------------------- errors_intersection.js:109:3

Cannot cast `any` to tuple type because:
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [3] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:109:3
   109| ((any: [[null, A] & {}] & [[null, C] & {}]): [[null, number]]);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:109:16
   109| ((any: [[null, A] & {}] & [[null, C] & {}]): [[null, number]]);
                       ^ [1]
   errors_intersection.js:109:54
   109| ((any: [[null, A] & {}] & [[null, C] & {}]): [[null, number]]);
                                                             ^^^^^^ [2]
   errors_intersection.js:109:35
   109| ((any: [[null, A] & {}] & [[null, C] & {}]): [[null, number]]);
                                          ^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:112:3

Cannot cast `any` to tuple type because `C` [1] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:112:3
   112| ((any: {} & [[null, C] & {}]): [[null, number]]);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:112:21
   112| ((any: {} & [[null, C] & {}]): [[null, number]]);
                            ^ [1]
   errors_intersection.js:112:40
   112| ((any: {} & [[null, C] & {}]): [[null, number]]);
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:115:1

Cannot call `f1` because:
 - `A` [1] is not a function.
 - `B` [2] is not a function.

   errors_intersection.js:115:1
   115| f1(); // Error
        ^^^^

References:
   errors_intersection.js:114:17
   114| declare var f1: A | B;
                        ^ [1]
   errors_intersection.js:114:21
   114| declare var f1: A | B;
                            ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:118:1

Cannot call `f2` because:
 - `A` [1] is not a function.
 - `B` [2] is not a function.
 - `C` [3] is not a function.

   errors_intersection.js:118:1
   118| f2(); // Error
        ^^^^

References:
   errors_intersection.js:117:17
   117| declare var f2: A | (B | C);
                        ^ [1]
   errors_intersection.js:117:22
   117| declare var f2: A | (B | C);
                             ^ [2]
   errors_intersection.js:117:26
   117| declare var f2: A | (B | C);
                                 ^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:121:1

Cannot call `f3` because:
 - `A` [1] is not a function.
 - `B` [2] is not a function.
 - `C` [3] is not a function.
 - `D` [4] is not a function.

   errors_intersection.js:121:1
   121| f3(); // Error
        ^^^^

References:
   errors_intersection.js:120:17
   120| declare var f3: A | (B | (C | D));
                        ^ [1]
   errors_intersection.js:120:22
   120| declare var f3: A | (B | (C | D));
                             ^ [2]
   errors_intersection.js:120:27
   120| declare var f3: A | (B | (C | D));
                                  ^ [3]
   errors_intersection.js:120:31
   120| declare var f3: A | (B | (C | D));
                                      ^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:13:2

Cannot cast object literal to object type because:
 - number [1] is incompatible with boolean [2] in property `b`.
 - number [3] is incompatible with boolean [4] in property `a`.
 - number [5] is incompatible with boolean [6] in property `c`.

   errors_union.js:13:2
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:13:6
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
            ^ [1]
   errors_union.js:13:38
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
                                            ^^^^^^^ [2]
   errors_union.js:13:12
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
                  ^ [3]
   errors_union.js:13:26
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
                                ^^^^^^^ [4]
   errors_union.js:13:18
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
                        ^ [5]
   errors_union.js:13:50
   13| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean});
                                                        ^^^^^^^ [6]


Error --------------------------------------------------------------------------------------------- errors_union.js:16:2

Cannot cast object literal to object type because:
 - in property `b`:
    - Either number [1] is incompatible with boolean [2].
    - Or number [1] is incompatible with string [3].
 - in property `a`:
    - Either number [4] is incompatible with boolean [5].
    - Or number [4] is incompatible with string [6].
 - in property `c`:
    - Either number [7] is incompatible with boolean [8].
    - Or number [7] is incompatible with string [9].

   errors_union.js:16:2
   16| ({b: 2, a: 1, c: 3}: {
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:16:6
   16| ({b: 2, a: 1, c: 3}: {
            ^ [1]
   errors_union.js:18:6
   18|   b: boolean | string,
            ^^^^^^^ [2]
   errors_union.js:18:16
   18|   b: boolean | string,
                      ^^^^^^ [3]
   errors_union.js:16:12
   16| ({b: 2, a: 1, c: 3}: {
                  ^ [4]
   errors_union.js:17:6
   17|   a: boolean | string,
            ^^^^^^^ [5]
   errors_union.js:17:16
   17|   a: boolean | string,
                      ^^^^^^ [6]
   errors_union.js:16:18
   16| ({b: 2, a: 1, c: 3}: {
                        ^ [7]
   errors_union.js:19:6
   19|   c: boolean | string,
            ^^^^^^^ [8]
   errors_union.js:19:16
   19|   c: boolean | string,
                      ^^^^^^ [9]


Error --------------------------------------------------------------------------------------------- errors_union.js:23:2

Cannot cast object literal to object type because:
 - number [1] is incompatible with boolean [2] in property `b`.
 - in property `a`:
    - Either number [3] is incompatible with boolean [4].
    - Or number [3] is incompatible with string [5].
 - number [6] is incompatible with boolean [7] in property `c`.

   errors_union.js:23:2
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:23:6
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
            ^ [1]
   errors_union.js:23:47
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                                                     ^^^^^^^ [2]
   errors_union.js:23:12
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                  ^ [3]
   errors_union.js:23:26
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                                ^^^^^^^ [4]
   errors_union.js:23:36
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                                          ^^^^^^ [5]
   errors_union.js:23:18
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                        ^ [6]
   errors_union.js:23:59
   23| ({b: 2, a: 1, c: 3}: {a: boolean | string, b: boolean, c: boolean});
                                                                 ^^^^^^^ [7]


Error --------------------------------------------------------------------------------------------- errors_union.js:26:2

Cannot cast object literal to object type because:
 - in property `b`:
    - Either number [1] is incompatible with boolean [2].
    - Or number [1] is incompatible with string [3].
 - number [4] is incompatible with boolean [5] in property `a`.
 - number [6] is incompatible with boolean [7] in property `c`.

   errors_union.js:26:2
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:26:6
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
            ^ [1]
   errors_union.js:26:38
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                                            ^^^^^^^ [2]
   errors_union.js:26:48
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                                                      ^^^^^^ [3]
   errors_union.js:26:12
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                  ^ [4]
   errors_union.js:26:26
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                                ^^^^^^^ [5]
   errors_union.js:26:18
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                        ^ [6]
   errors_union.js:26:59
   26| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean | string, c: boolean});
                                                                 ^^^^^^^ [7]


Error --------------------------------------------------------------------------------------------- errors_union.js:29:2

Cannot cast object literal to object type because:
 - number [1] is incompatible with boolean [2] in property `b`.
 - number [3] is incompatible with boolean [4] in property `a`.
 - in property `c`:
    - Either number [5] is incompatible with boolean [6].
    - Or number [5] is incompatible with string [7].

   errors_union.js:29:2
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:29:6
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
            ^ [1]
   errors_union.js:29:38
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                                            ^^^^^^^ [2]
   errors_union.js:29:12
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                  ^ [3]
   errors_union.js:29:26
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                                ^^^^^^^ [4]
   errors_union.js:29:18
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                        ^ [5]
   errors_union.js:29:50
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                                                        ^^^^^^^ [6]
   errors_union.js:29:60
   29| ({b: 2, a: 1, c: 3}: {a: boolean, b: boolean, c: boolean | string});
                                                                  ^^^^^^ [7]


Error --------------------------------------------------------------------------------------------- errors_union.js:32:2

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a.b`.

   errors_union.js:32:2
   32| ({a: {b: 42}}: {a: {b: boolean}});
        ^^^^^^^^^^^^

References:
   errors_union.js:32:10
   32| ({a: {b: 42}}: {a: {b: boolean}});
                ^^ [1]
   errors_union.js:32:24
   32| ({a: {b: 42}}: {a: {b: boolean}});
                              ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:36:2

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a` of
property `b`.

   errors_union.js:36:2
   36| ({a: {b: 42}}: {a: boolean | {b: boolean | {}}});
        ^^^^^^^^^^^^

References:
   errors_union.js:36:10
   36| ({a: {b: 42}}: {a: boolean | {b: boolean | {}}});
                ^^ [1]
   errors_union.js:36:34
   36| ({a: {b: 42}}: {a: boolean | {b: boolean | {}}});
                                        ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:38:2

Cannot cast `42` to boolean because number [1] is incompatible with boolean [2].

   errors_union.js:38:2
   38| (42: boolean); // Error: number ~> boolean
        ^^ [1]

References:
   errors_union.js:38:6
   38| (42: boolean); // Error: number ~> boolean
            ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:39:2

Cannot cast `42` to union type because number [1] is incompatible with boolean [2].

   errors_union.js:39:2
   39| (42: {} | {} | {} | boolean); // Error: number ~> boolean
        ^^ [1]

References:
   errors_union.js:39:21
   39| (42: {} | {} | {} | boolean); // Error: number ~> boolean
                           ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:40:2

Cannot cast `42` to union type because number [1] is incompatible with boolean [2].

   errors_union.js:40:2
   40| (42: {} | ({} | ({} | boolean))); // Error: number ~> boolean
        ^^ [1]

References:
   errors_union.js:40:23
   40| (42: {} | ({} | ({} | boolean))); // Error: number ~> boolean
                             ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:43:2

Cannot cast object literal to union type because:
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:43:2
   43| ({x: 123, y: 'abc'}: {x: number, y: number} | {x: string, y: string}); // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:43:14
   43| ({x: 123, y: 'abc'}: {x: number, y: number} | {x: string, y: string}); // Error
                    ^^^^^ [1]
   errors_union.js:43:37
   43| ({x: 123, y: 'abc'}: {x: number, y: number} | {x: string, y: string}); // Error
                                           ^^^^^^ [2]
   errors_union.js:43:6
   43| ({x: 123, y: 'abc'}: {x: number, y: number} | {x: string, y: string}); // Error
            ^^^ [3]
   errors_union.js:43:51
   43| ({x: 123, y: 'abc'}: {x: number, y: number} | {x: string, y: string}); // Error
                                                         ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:48:2

Cannot cast object literal to union type because:
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:48:2
   48| ({x: 123, y: 'abc'}: number | NumberPoint | StringPoint); // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:48:14
   48| ({x: 123, y: 'abc'}: number | NumberPoint | StringPoint); // Error
                    ^^^^^ [1]
   errors_union.js:46:35
   46| type NumberPoint = {x: number, y: number};
                                         ^^^^^^ [2]
   errors_union.js:48:6
   48| ({x: 123, y: 'abc'}: number | NumberPoint | StringPoint); // Error
            ^^^ [3]
   errors_union.js:47:24
   47| type StringPoint = {x: string, y: string};
                              ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:52:2

Cannot cast object literal to `Point` because:
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:52:2
   52| ({x: 123, y: 'abc'}: Point); // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:52:14
   52| ({x: 123, y: 'abc'}: Point); // Error
                    ^^^^^ [1]
   errors_union.js:46:35
   46| type NumberPoint = {x: number, y: number};
                                         ^^^^^^ [2]
   errors_union.js:52:6
   52| ({x: 123, y: 'abc'}: Point); // Error
            ^^^ [3]
   errors_union.js:47:24
   47| type StringPoint = {x: string, y: string};
                              ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:54:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:54:2
   54| (true: number | string); // Error
        ^^^^ [1]

References:
   errors_union.js:54:8
   54| (true: number | string); // Error
              ^^^^^^ [2]
   errors_union.js:54:17
   54| (true: number | string); // Error
                       ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:55:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:55:2
   55| (true: number | string | {}); // Error: should not show the {} branch
        ^^^^ [1]

References:
   errors_union.js:55:8
   55| (true: number | string | {}); // Error: should not show the {} branch
              ^^^^^^ [2]
   errors_union.js:55:17
   55| (true: number | string | {}); // Error: should not show the {} branch
                       ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:56:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:56:2
   56| (true: {} | number | string); // Error: should not show the {} branch
        ^^^^ [1]

References:
   errors_union.js:56:13
   56| (true: {} | number | string); // Error: should not show the {} branch
                   ^^^^^^ [2]
   errors_union.js:56:22
   56| (true: {} | number | string); // Error: should not show the {} branch
                            ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:57:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:57:2
   57| (true: number | {} | string); // Error: should not show the {} branch
        ^^^^ [1]

References:
   errors_union.js:57:8
   57| (true: number | {} | string); // Error: should not show the {} branch
              ^^^^^^ [2]
   errors_union.js:57:22
   57| (true: number | {} | string); // Error: should not show the {} branch
                            ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:59:2

Cannot cast object literal to object type because in property `a`:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:59:2
   59| ({a: true}: {a: number | string}); // Error
        ^^^^^^^^^

References:
   errors_union.js:59:6
   59| ({a: true}: {a: number | string}); // Error
            ^^^^ [1]
   errors_union.js:59:17
   59| ({a: true}: {a: number | string}); // Error
                       ^^^^^^ [2]
   errors_union.js:59:26
   59| ({a: true}: {a: number | string}); // Error
                                ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:61:2

Cannot cast object literal to object type because:
 - in property `a`:
    - Either boolean [1] is incompatible with number [2].
    - Or boolean [1] is incompatible with string [3].
 - in property `b`:
    - Either boolean [4] is incompatible with number [5].
    - Or boolean [4] is incompatible with string [6].
 - in property `c`:
    - Either boolean [7] is incompatible with number [8].
    - Or boolean [7] is incompatible with string [9].
 - in property `d`:
    - Either boolean [10] is incompatible with number [11].
    - Or boolean [10] is incompatible with string [12].

   errors_union.js:61:2
        v
   61| ({
   62|   a: true, // Error: should be grouped
   63|   b: true, // Error: should be grouped, should not show the {} branch
   64|   c: true, // Error: should be grouped, should not show the {} branch
   65|   d: true, // Error: should be grouped, should not show the {} branch
   66| }: {
       ^

References:
   errors_union.js:62:6
   62|   a: true, // Error: should be grouped
            ^^^^ [1]
   errors_union.js:67:6
   67|   a: number | string,
            ^^^^^^ [2]
   errors_union.js:67:15
   67|   a: number | string,
                     ^^^^^^ [3]
   errors_union.js:63:6
   63|   b: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [4]
   errors_union.js:68:11
   68|   b: {} | number | string,
                 ^^^^^^ [5]
   errors_union.js:68:20
   68|   b: {} | number | string,
                          ^^^^^^ [6]
   errors_union.js:64:6
   64|   c: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [7]
   errors_union.js:69:6
   69|   c: number | {} | string,
            ^^^^^^ [8]
   errors_union.js:69:20
   69|   c: number | {} | string,
                          ^^^^^^ [9]
   errors_union.js:65:6
   65|   d: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [10]
   errors_union.js:70:6
   70|   d: number | string | {},
            ^^^^^^ [11]
   errors_union.js:70:15
   70|   d: number | string | {},
                     ^^^^^^ [12]


Error --------------------------------------------------------------------------------------------- errors_union.js:74:2

Cannot cast object literal to object type because:
 - in property `a`:
    - Either boolean [1] is incompatible with number [2] in index 0.
    - Or boolean [1] is incompatible with string [3] in index 0.
 - in property `b`:
    - Either boolean [4] is incompatible with number [5] in index 0.
    - Or boolean [4] is incompatible with string [6] in index 0.
 - in property `c`:
    - Either boolean [7] is incompatible with number [8] in index 0.
    - Or boolean [7] is incompatible with string [9] in index 0.
 - in property `d`:
    - Either boolean [10] is incompatible with number [11] in index 0.
    - Or boolean [10] is incompatible with string [12] in index 0.

   errors_union.js:74:2
        v
   74| ({
   75|   a: [true], // Error: should be grouped
   76|   b: [true], // Error: should be grouped, should not show the [{}] branch
   77|   c: [true], // Error: should be grouped, should not show the [{}] branch
   78|   d: [true], // Error: should be grouped, should not show the [{}] branch
   79| }: {
       ^

References:
   errors_union.js:75:7
   75|   a: [true], // Error: should be grouped
             ^^^^ [1]
   errors_union.js:80:7
   80|   a: [number] | [string],
             ^^^^^^ [2]
   errors_union.js:80:18
   80|   a: [number] | [string],
                        ^^^^^^ [3]
   errors_union.js:76:7
   76|   b: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [4]
   errors_union.js:81:14
   81|   b: [{}] | [number] | [string],
                    ^^^^^^ [5]
   errors_union.js:81:25
   81|   b: [{}] | [number] | [string],
                               ^^^^^^ [6]
   errors_union.js:77:7
   77|   c: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [7]
   errors_union.js:82:7
   82|   c: [number] | [{}] | [string],
             ^^^^^^ [8]
   errors_union.js:82:25
   82|   c: [number] | [{}] | [string],
                               ^^^^^^ [9]
   errors_union.js:78:7
   78|   d: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [10]
   errors_union.js:83:7
   83|   d: [number] | [string] | [{}],
             ^^^^^^ [11]
   errors_union.js:83:18
   83|   d: [number] | [string] | [{}],
                        ^^^^^^ [12]


Error --------------------------------------------------------------------------------------------- errors_union.js:86:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean [1] is incompatible with boolean literal `false` [4].

   errors_union.js:86:2
   86| (true: number | (string | false)); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:86:8
   86| (true: number | (string | false)); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:86:18
   86| (true: number | (string | false)); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:86:27
   86| (true: number | (string | false)); // Error: should be flattened
                                 ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:87:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with string [2].
 - Or boolean [1] is incompatible with boolean literal `false` [3].
 - Or boolean [1] is incompatible with number [4].

   errors_union.js:87:2
   87| (true: (string | false) | number); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:87:9
   87| (true: (string | false) | number); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:87:18
   87| (true: (string | false) | number); // Error: should be flattened
                        ^^^^^ [3]
   errors_union.js:87:27
   87| (true: (string | false) | number); // Error: should be flattened
                                 ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:88:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean [1] is incompatible with boolean literal `false` [4].

   errors_union.js:88:2
   88| (true: {} | number | (string | false)); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:88:13
   88| (true: {} | number | (string | false)); // Error: should be flattened
                   ^^^^^^ [2]
   errors_union.js:88:23
   88| (true: {} | number | (string | false)); // Error: should be flattened
                             ^^^^^^ [3]
   errors_union.js:88:32
   88| (true: {} | number | (string | false)); // Error: should be flattened
                                      ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:89:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean [1] is incompatible with boolean literal `false` [4].

   errors_union.js:89:2
   89| (true: number | (string | false) | {}); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:89:8
   89| (true: number | (string | false) | {}); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:89:18
   89| (true: number | (string | false) | {}); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:89:27
   89| (true: number | (string | false) | {}); // Error: should be flattened
                                 ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:90:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean [1] is incompatible with boolean literal `false` [4].

   errors_union.js:90:2
   90| (true: number | (string | {} | false)); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:90:8
   90| (true: number | (string | {} | false)); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:90:18
   90| (true: number | (string | {} | false)); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:90:32
   90| (true: number | (string | {} | false)); // Error: should be flattened
                                      ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:92:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:92:2
   92| (true: number | number | number | string); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:92:8
   92| (true: number | number | number | string); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:92:17
   92| (true: number | number | number | string); // Error: should be flattened
                       ^^^^^^ [3]
   errors_union.js:92:26
   92| (true: number | number | number | string); // Error: should be flattened
                                ^^^^^^ [4]
   errors_union.js:92:35
   92| (true: number | number | number | string); // Error: should be flattened
                                         ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:93:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:93:2
   93| (true: number | number | (number | string)); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:93:8
   93| (true: number | number | (number | string)); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:93:17
   93| (true: number | number | (number | string)); // Error: should be flattened
                       ^^^^^^ [3]
   errors_union.js:93:27
   93| (true: number | number | (number | string)); // Error: should be flattened
                                 ^^^^^^ [4]
   errors_union.js:93:36
   93| (true: number | number | (number | string)); // Error: should be flattened
                                          ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:94:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:94:2
   94| (true: number | (number | (number | string))); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:94:8
   94| (true: number | (number | (number | string))); // Error: should be flattened
              ^^^^^^ [2]
   errors_union.js:94:18
   94| (true: number | (number | (number | string))); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:94:28
   94| (true: number | (number | (number | string))); // Error: should be flattened
                                  ^^^^^^ [4]
   errors_union.js:94:37
   94| (true: number | (number | (number | string))); // Error: should be flattened
                                           ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:95:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with string [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with number [5].

   errors_union.js:95:2
   95| (true: (string | number) | number | number); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:95:9
   95| (true: (string | number) | number | number); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:95:18
   95| (true: (string | number) | number | number); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:95:28
   95| (true: (string | number) | number | number); // Error: should be flattened
                                  ^^^^^^ [4]
   errors_union.js:95:37
   95| (true: (string | number) | number | number); // Error: should be flattened
                                           ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:96:2

Cannot cast `true` to union type because:
 - Either boolean [1] is incompatible with string [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with number [5].

   errors_union.js:96:2
   96| (true: ((string | number) | number) | number); // Error: should be flattened
        ^^^^ [1]

References:
   errors_union.js:96:10
   96| (true: ((string | number) | number) | number); // Error: should be flattened
                ^^^^^^ [2]
   errors_union.js:96:19
   96| (true: ((string | number) | number) | number); // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:96:29
   96| (true: ((string | number) | number) | number); // Error: should be flattened
                                   ^^^^^^ [4]
   errors_union.js:96:39
   96| (true: ((string | number) | number) | number); // Error: should be flattened
                                             ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:98:2

Cannot cast `true` to union type because boolean [1] is incompatible with number [2].

   errors_union.js:98:2
   98| (true: number | {}); // Error
        ^^^^ [1]

References:
   errors_union.js:98:8
   98| (true: number | {}); // Error
              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:99:2

Cannot cast object literal to object type because:
 - boolean [1] is incompatible with number [2] in property `a`.
 - boolean [3] is incompatible with number [4] in property `b`.

   errors_union.js:99:2
   99| ({a: true, b: true}: {a: number | {}, b: number | {}}); // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:99:6
   99| ({a: true, b: true}: {a: number | {}, b: number | {}}); // Error
            ^^^^ [1]
   errors_union.js:99:26
   99| ({a: true, b: true}: {a: number | {}, b: number | {}}); // Error
                                ^^^^^^ [2]
   errors_union.js:99:15
   99| ({a: true, b: true}: {a: number | {}, b: number | {}}); // Error
                     ^^^^ [3]
   errors_union.js:99:42
   99| ({a: true, b: true}: {a: number | {}, b: number | {}}); // Error
                                                ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------- errors_union.js:100:2

Cannot cast object literal to object type because:
 - in property `a`:
    - Either boolean [1] is incompatible with number [2].
    - Or boolean [1] is incompatible with string [3].
 - boolean [4] is incompatible with number [5] in property `b`.

   errors_union.js:100:2
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
         ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:100:6
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
             ^^^^ [1]
   errors_union.js:100:26
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
                                 ^^^^^^ [2]
   errors_union.js:100:35
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
                                          ^^^^^^ [3]
   errors_union.js:100:15
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
                      ^^^^ [4]
   errors_union.js:100:51
   100| ({a: true, b: true}: {a: number | string | {}, b: number | {}}); // Error
                                                          ^^^^^^ [5]


Error -------------------------------------------------------------------------------------------- errors_union.js:103:3

Cannot cast `any` to union type because:
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `B` [3] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [4] in index 1 of index 0.
 - Or number [1] is incompatible with `D` [5] in index 1 of index 0.

   errors_union.js:103:3
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
          ^^^^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:103:16
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
                       ^^^^^^ [1]
   errors_union.js:103:35
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
                                          ^ [2]
   errors_union.js:103:47
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
                                                      ^ [3]
   errors_union.js:103:61
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
                                                                    ^ [4]
   errors_union.js:103:73
   103| ((any: [[null, number]]): [[null, A] | [null, B]] | [[null, C] | [null, D]]);
                                                                                ^ [5]


Error -------------------------------------------------------------------------------------------- errors_union.js:106:3

Cannot cast `any` to union type because:
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [3] in index 1 of index 0.
 - Or number [1] is incompatible with `D` [4] in index 1 of index 0.

   errors_union.js:106:3
   106| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | [null, D]]);
          ^^^^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:106:16
   106| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | [null, D]]);
                       ^^^^^^ [1]
   errors_union.js:106:35
   106| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | [null, D]]);
                                          ^ [2]
   errors_union.js:106:54
   106| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | [null, D]]);
                                                             ^ [3]
   errors_union.js:106:66
   106| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | [null, D]]);
                                                                         ^ [4]


Error -------------------------------------------------------------------------------------------- errors_union.js:109:3

Cannot cast `any` to union type because:
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [3] in index 1 of index 0.

   errors_union.js:109:3
   109| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | {}]);
          ^^^^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:109:16
   109| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | {}]);
                       ^^^^^^ [1]
   errors_union.js:109:35
   109| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | {}]);
                                          ^ [2]
   errors_union.js:109:54
   109| ((any: [[null, number]]): [[null, A] | {}] | [[null, C] | {}]);
                                                             ^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:112:3

Cannot cast `any` to union type because number [1] is incompatible with `C` [2] in index 1 of index 0.

   errors_union.js:112:3
   112| ((any: [[null, number]]): {} | [[null, C] | {}]);
          ^^^^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:112:16
   112| ((any: [[null, number]]): {} | [[null, C] | {}]);
                       ^^^^^^ [1]
   errors_union.js:112:40
   112| ((any: [[null, number]]): {} | [[null, C] | {}]);
                                               ^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:19:1

Cannot call `a` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   intersection-function.js:19:1
   19| a(true);
       ^^^^^^^

References:
   intersection-function.js:19:3
   19| a(true);
         ^^^^ [1]
   intersection-function.js:17:23
   17| declare function a(x: number): void;
                             ^^^^^^ [2]
   intersection-function.js:18:23
   18| declare function a(x: string): void;
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:23:1

Cannot call `b` because number [1] is incompatible with string [2].

   intersection-function.js:23:1
   23| b(42);
       ^^^^^

References:
   intersection-function.js:23:3
   23| b(42);
         ^^ [1]
   intersection-function.js:21:23
   21| declare function b(x: string): void;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:24:1

Cannot call `b` because number [1] is incompatible with string [2] in property `p`.

   intersection-function.js:24:1
   24| b({p: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:24:7
   24| b({p: 42});
             ^^ [1]
   intersection-function.js:22:27
   22| declare function b(x: {p: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:30:1

Cannot call `c` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   intersection-function.js:30:1
   30| c(42);
       ^^^^^

References:
   intersection-function.js:30:3
   30| c(42);
         ^^ [1]
   intersection-function.js:26:23
   26| declare function c(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:28:23
   28| declare function c(x: boolean): void;
                             ^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:31:1

Cannot call `c` because:
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or number [1] is incompatible with boolean [3] in property `a.b`.

   intersection-function.js:31:1
   31| c({a: {b: 42}});
       ^^^^^^^^^^^^^^^

References:
   intersection-function.js:31:11
   31| c({a: {b: 42}});
                 ^^ [1]
   intersection-function.js:27:31
   27| declare function c(x: {a: {b: string}}): void;
                                     ^^^^^^ [2]
   intersection-function.js:29:31
   29| declare function c(x: {a: {b: boolean}}): void;
                                     ^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:36:1

Cannot call `d` because number [1] is incompatible with string [2].

   intersection-function.js:36:1
   36| d(42);
       ^^^^^

References:
   intersection-function.js:36:3
   36| d(42);
         ^^ [1]
   intersection-function.js:33:23
   33| declare function d(x: string): void;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:37:1

Cannot call `d` because number [1] is incompatible with string [2] in property `a`.

   intersection-function.js:37:1
   37| d({a: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:37:7
   37| d({a: 42});
             ^^ [1]
   intersection-function.js:34:27
   34| declare function d(x: {a: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:38:1

Cannot call `d` because number [1] is incompatible with string [2] in property `a.b`.

   intersection-function.js:38:1
   38| d({a: {b: 42}});
       ^^^^^^^^^^^^^^^

References:
   intersection-function.js:38:11
   38| d({a: {b: 42}});
                 ^^ [1]
   intersection-function.js:35:31
   35| declare function d(x: {a: {b: string}}): void;
                                     ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:42:1

Cannot call `e` because:
 - Either number [1] is incompatible with `X` [2].
 - Or number [1] is incompatible with object type [3].

   intersection-function.js:42:1
   42| e(42);
       ^^^^^

References:
   intersection-function.js:42:3
   42| e(42);
         ^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:41:23
   41| declare function e(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:44:1

Cannot call `e` because number [1] is incompatible with string [2] in property `p`.

   intersection-function.js:44:1
   44| e(new Y());
       ^^^^^^^^^^

References:
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   intersection-function.js:41:27
   41| declare function e(x: {p: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:45:1

Cannot call `e` because:
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in object type [3].

   intersection-function.js:45:1
   45| e(new Z());
       ^^^^^^^^^^

References:
   intersection-function.js:45:3
   45| e(new Z());
         ^^^^^^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:41:23
   41| declare function e(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:46:1

Cannot call `e` because boolean [1] is incompatible with string [2] in property `p`.

   intersection-function.js:46:1
   46| e({p: true});
       ^^^^^^^^^^^^

References:
   intersection-function.js:46:7
   46| e({p: true});
             ^^^^ [1]
   intersection-function.js:41:27
   41| declare function e(x: {p: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:51:1

Cannot call `f` because:
 - Either number [1] is incompatible with object type [2].
 - Or number [1] is incompatible with read-only array type [3].
 - Or number [1] is incompatible with tuple type [4].

   intersection-function.js:51:1
   51| f(42);
       ^^^^^

References:
   intersection-function.js:51:3
   51| f(42);
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:50:23
   50| declare function f(x: [string, string]): void;
                             ^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:52:1

Cannot call `f` because number [1] is incompatible with string [2] in property `p`.

   intersection-function.js:52:1
   52| f({p: 42});
       ^^^^^^^^^^

References:
   intersection-function.js:52:7
   52| f({p: 42});
             ^^ [1]
   intersection-function.js:48:27
   48| declare function f(x: {p: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:53:1

Cannot call `f` because property `p` is missing in object literal [1] but exists in object type [2].

   intersection-function.js:53:1
   53| f({});
       ^^^^^

References:
   intersection-function.js:53:3
   53| f({});
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:54:1

Cannot call `f` because number [1] is incompatible with string [2] in property `p`.

   intersection-function.js:54:1
   54| f(new Y());
       ^^^^^^^^^^

References:
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   intersection-function.js:48:27
   48| declare function f(x: {p: string}): void;
                                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:55:1

Cannot call `f` because property `p` is missing in `Z` [1] but exists in object type [2].

   intersection-function.js:55:1
   55| f(new Z());
       ^^^^^^^^^^

References:
   intersection-function.js:55:3
   55| f(new Z());
         ^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: {p: string}): void;
                             ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:56:1

Cannot call `f` because number [1] is incompatible with string [2] in array element.

   intersection-function.js:56:1
   56| f(([1]: [number]));
       ^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:56:10
   56| f(([1]: [number]));
                ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:57:1

Cannot call `f` because number [1] is incompatible with string [2] in index 0.

   intersection-function.js:57:1
   57| f(([1, 2]: [number, number]));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:57:13
   57| f(([1, 2]: [number, number]));
                   ^^^^^^ [1]
   intersection-function.js:50:24
   50| declare function f(x: [string, string]): void;
                              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:58:1

Cannot call `f` because number [1] is incompatible with string [2] in array element.

   intersection-function.js:58:1
   58| f(([1, 2, 3]: [number, number, number]));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:58:16
   58| f(([1, 2, 3]: [number, number, number]));
                      ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:59:1

Cannot call `f` because number [1] is incompatible with string [2] in array element.

   intersection-function.js:59:1
   59| f(((null: any): Array<number> & {p: number}));
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:59:23
   59| f(((null: any): Array<number> & {p: number}));
                             ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:63:1

Cannot call `g` because number [1] is incompatible with string [2].

   intersection-function.js:63:1
   63| g(42);
       ^^^^^

References:
   intersection-function.js:63:3
   63| g(42);
         ^^ [1]
   intersection-function.js:61:23
   61| declare function g(x: string): void;
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:64:1

Cannot call `g` because object literal [1] is incompatible with `Z` [2].

   intersection-function.js:64:1
   64| g({});
       ^^^^^

References:
   intersection-function.js:64:3
   64| g({});
         ^^ [1]
   intersection-function.js:62:23
   62| declare function g(x: Z): void;
                             ^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:68:1

Cannot call `h` because number [1] is incompatible with object type [2].

   intersection-function.js:68:1
   68| h(1, 2, 3);
       ^^^^^^^^^^

References:
   intersection-function.js:68:6
   68| h(1, 2, 3);
            ^ [1]
   intersection-function.js:67:34
   67| declare function h(a: number, b: {}, c: string): void;
                                        ^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:72:1

Cannot call `i` because number [1] is incompatible with string [2].

   intersection-function.js:72:1
   72| i(new Y(), 42);
       ^^^^^^^^^^^^^^

References:
   intersection-function.js:72:12
   72| i(new Y(), 42);
                  ^^ [1]
   intersection-function.js:70:29
   70| declare function i(a: Y, b: string): void;
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:76:1

Cannot call `j` because number [1] is incompatible with string [2].

   intersection-function.js:76:1
   76| j(1, 2);
       ^^^^^^^

References:
   intersection-function.js:76:6
   76| j(1, 2);
            ^ [1]
   intersection-function.js:74:34
   74| declare function j(a: number, b: string): void;
                                        ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:80:1

Cannot call `k` because number [1] is incompatible with string [2] in property `p`.

   intersection-function.js:80:1
   80| k(1, {p: 2});
       ^^^^^^^^^^^^

References:
   intersection-function.js:80:10
   80| k(1, {p: 2});
                ^ [1]
   intersection-function.js:78:38
   78| declare function k(a: number, b: {p: string}): void;
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ intersection-function.js:84:1

Cannot call `m` because number [1] is incompatible with string [2] in type argument `T` [3].

   intersection-function.js:84:1
   84| m((new W(): W<number>));
       ^^^^^^^^^^^^^^^^^^^^^^^

References:
   intersection-function.js:84:15
   84| m((new W(): W<number>));
                     ^^^^^^ [1]
   intersection-function.js:82:25
   82| declare function m(x: W<string>): void;
                               ^^^^^^ [2]
   intersection-function.js:13:9
   13| class W<T> {
               ^ [3]


Error --------------------------------------------------------------------------------------------------- nullish.js:6:2

Cannot cast `42` to union type because number [1] is incompatible with string [2].

   nullish.js:6:2
   6| (42: string | null | void); // Error: should only show string
       ^^ [1]

References:
   nullish.js:6:6
   6| (42: string | null | void); // Error: should only show string
           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- nullish.js:7:2

Cannot cast `42` to union type because number [1] is incompatible with object type [2].

   nullish.js:7:2
   7| (42: {} | null | void); // Error: should only show object
       ^^ [1]

References:
   nullish.js:7:6
   7| (42: {} | null | void); // Error: should only show object
           ^^ [2]


Error --------------------------------------------------------------------------------------------------- nullish.js:8:2

Cannot cast `42` to union type because number [1] is incompatible with tuple type [2].

   nullish.js:8:2
   8| (42: [] | null | void); // Error: should only show array
       ^^ [1]

References:
   nullish.js:8:6
   8| (42: [] | null | void); // Error: should only show array
           ^^ [2]


Error --------------------------------------------------------------------------------------------------- nullish.js:9:2

Cannot cast object literal to union type because object literal [1] is incompatible with string [2].

   nullish.js:9:2
   9| ({}: string | null | void); // Error: should only show string
       ^^ [1]

References:
   nullish.js:9:6
   9| ({}: string | null | void); // Error: should only show string
           ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- nullish.js:10:2

Cannot cast object literal to union type because property `p` is missing in object literal [1] but exists in object
type [2].

   nullish.js:10:2
   10| ({}: {p: empty} | null | void); // Error: should only show object
        ^^ [1]

References:
   nullish.js:10:6
   10| ({}: {p: empty} | null | void); // Error: should only show object
            ^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- nullish.js:11:2

Cannot cast object literal to union type because object literal [1] is incompatible with tuple type [2].

   nullish.js:11:2
   11| ({}: [] | null | void); // Error: should only show array
        ^^ [1]

References:
   nullish.js:11:6
   11| ({}: [] | null | void); // Error: should only show array
            ^^ [2]


Error -------------------------------------------------------------------------------------------------- nullish.js:12:2

Cannot cast array literal to union type because empty array literal [1] is incompatible with string [2].

   nullish.js:12:2
   12| ([]: string | null | void); // Error: should only show string
        ^^ [1]

References:
   nullish.js:12:6
   12| ([]: string | null | void); // Error: should only show string
            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- nullish.js:13:2

Cannot cast array literal to union type because empty array literal [1] is incompatible with object type [2].

   nullish.js:13:2
   13| ([]: {} | null | void); // Error: should only show object
        ^^ [1]

References:
   nullish.js:13:6
   13| ([]: {} | null | void); // Error: should only show object
            ^^ [2]


Error -------------------------------------------------------------------------------------------------- nullish.js:14:2

Cannot cast array literal to union type because empty array literal [1] has an arity of 0 but tuple type [2] has an
arity of 1.

   nullish.js:14:2
   14| ([]: [empty] | null | void); // Error: should only show array
        ^^ [1]

References:
   nullish.js:14:6
   14| ([]: [empty] | null | void); // Error: should only show array
            ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- sentinel.js:11:2

Cannot cast object literal to `X` because string [1] is incompatible with number [2] in property `p`.

   sentinel.js:11:2
   11| ({type: 'A', p: 'foo'}: X);
        ^^^^^^^^^^^^^^^^^^^^^

References:
   sentinel.js:11:17
   11| ({type: 'A', p: 'foo'}: X);
                       ^^^^^ [1]
   sentinel.js:7:20
    7|   | {type: 'A', p: number}
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- sentinel.js:12:2

Cannot cast object literal to `X` because object literal [1] is incompatible with `X` [2].

   sentinel.js:12:2
   12| ({type: 'D'}: X);
        ^^^^^^^^^^^ [1]

References:
   sentinel.js:12:15
   12| ({type: 'D'}: X);
                     ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:18:2

Cannot cast `true` to `A` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   union.js:18:2
   18| (true: A);
        ^^^^ [1]

References:
   union.js:17:10
   17| type A = number | string;
                ^^^^^^ [2]
   union.js:17:19
   17| type A = number | string;
                         ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:21:2

Cannot cast `42` to `B` because number [1] is incompatible with string [2].

   union.js:21:2
   21| (42: B);
        ^^ [1]

References:
   union.js:20:10
   20| type B = string | {p: string};
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:22:2

Cannot cast object literal to `B` because number [1] is incompatible with string [2] in property `p`.

   union.js:22:2
   22| ({p: 42}: B);
        ^^^^^^^

References:
   union.js:22:6
   22| ({p: 42}: B);
            ^^ [1]
   union.js:20:23
   20| type B = string | {p: string};
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:25:2

Cannot cast `42` to `C` because:
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   union.js:25:2
   25| (42: C);
        ^^ [1]

References:
   union.js:24:10
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                ^^^^^^ [2]
   union.js:24:38
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                            ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:26:2

Cannot cast object literal to `C` because:
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or number [1] is incompatible with boolean [3] in property `a.b`.

   union.js:26:2
   26| ({a: {b: 42}}: C);
        ^^^^^^^^^^^^

References:
   union.js:26:10
   26| ({a: {b: 42}}: C);
                ^^ [1]
   union.js:24:27
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                 ^^^^^^ [2]
   union.js:24:56
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                                              ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:29:2

Cannot cast `42` to `D` because number [1] is incompatible with string [2].

   union.js:29:2
   29| (42: D);
        ^^ [1]

References:
   union.js:28:10
   28| type D = string | {a: string} | {a: {b: string}};
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:30:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a`.

   union.js:30:2
   30| ({a: 42}: D);
        ^^^^^^^

References:
   union.js:30:6
   30| ({a: 42}: D);
            ^^ [1]
   union.js:28:23
   28| type D = string | {a: string} | {a: {b: string}};
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:31:2

Cannot cast object literal to `D` because number [1] is incompatible with string [2] in property `a.b`.

   union.js:31:2
   31| ({a: {b: 42}}: D);
        ^^^^^^^^^^^^

References:
   union.js:31:10
   31| ({a: {b: 42}}: D);
                ^^ [1]
   union.js:28:41
   28| type D = string | {a: string} | {a: {b: string}};
                                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:34:2

Cannot cast `42` to `E` because:
 - Either number [1] is incompatible with `X` [2].
 - Or number [1] is incompatible with object type [3].

   union.js:34:2
   34| (42: E);
        ^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:33:14
   33| type E = X | {p: string};
                    ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:36:2

Cannot cast `new Y()` to `E` because number [1] is incompatible with string [2] in property `p`.

   union.js:36:2
   36| (new Y(): E);
        ^^^^^^^

References:
   union.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   union.js:33:18
   33| type E = X | {p: string};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:37:2

Cannot cast `new Z()` to `E` because:
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in object type [3].

   union.js:37:2
   37| (new Z(): E);
        ^^^^^^^ [1]

References:
   union.js:33:10
   33| type E = X | {p: string};
                ^ [2]
   union.js:33:14
   33| type E = X | {p: string};
                    ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:38:2

Cannot cast object literal to `E` because boolean [1] is incompatible with string [2] in property `p`.

   union.js:38:2
   38| ({p: true}: E);
        ^^^^^^^^^

References:
   union.js:38:6
   38| ({p: true}: E);
            ^^^^ [1]
   union.js:33:18
   33| type E = X | {p: string};
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:41:2

Cannot cast `42` to `F` because:
 - Either number [1] is incompatible with object type [2].
 - Or number [1] is incompatible with read-only array type [3].
 - Or number [1] is incompatible with tuple type [4].

   union.js:41:2
   41| (42: F);
        ^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]
   union.js:40:24
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^^^^^^^^^^^^^^^^^ [3]
   union.js:40:49
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:42:2

Cannot cast object literal to `F` because number [1] is incompatible with string [2] in property `p`.

   union.js:42:2
   42| ({p: 42}: F);
        ^^^^^^^

References:
   union.js:42:6
   42| ({p: 42}: F);
            ^^ [1]
   union.js:40:14
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:43:2

Cannot cast object literal to `F` because property `p` is missing in object literal [1] but exists in object type [2].

   union.js:43:2
   43| ({}: F);
        ^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:44:2

Cannot cast `new Y()` to `F` because number [1] is incompatible with string [2] in property `p`.

   union.js:44:2
   44| (new Y(): F);
        ^^^^^^^

References:
   union.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   union.js:40:14
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:45:2

Cannot cast `new Z()` to `F` because property `p` is missing in `Z` [1] but exists in object type [2].

   union.js:45:2
   45| (new Z(): F);
        ^^^^^^^ [1]

References:
   union.js:40:10
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:46:3

Cannot cast array literal to `F` because number [1] is incompatible with string [2] in array element.

   union.js:46:3
   46| (([1]: [number]): F);
         ^^^^^^^^^^^^^

References:
   union.js:46:9
   46| (([1]: [number]): F);
               ^^^^^^ [1]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:47:3

Cannot cast array literal to `F` because number [1] is incompatible with string [2] in index 0.

   union.js:47:3
   47| (([1, 2]: [number, number]): F);
         ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:47:12
   47| (([1, 2]: [number, number]): F);
                  ^^^^^^ [1]
   union.js:40:50
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:48:3

Cannot cast array literal to `F` because number [1] is incompatible with string [2] in array element.

   union.js:48:3
   48| (([1, 2, 3]: [number, number, number]): F);
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:48:15
   48| (([1, 2, 3]: [number, number, number]): F);
                     ^^^^^^ [1]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:49:4

Cannot cast `null` to `F` because number [1] is incompatible with string [2] in array element.

   union.js:49:4
   49| (((null: any): Array<number> & {p: number}): F);
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:49:22
   49| (((null: any): Array<number> & {p: number}): F);
                            ^^^^^^ [1]
   union.js:40:39
   40| type F = {p: string} | $ReadOnlyArray<string> | [string, string];
                                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:52:2

Cannot cast `42` to `G` because number [1] is incompatible with string [2].

   union.js:52:2
   52| (42: G);
        ^^ [1]

References:
   union.js:51:10
   51| type G = string | Z;
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:53:2

Cannot cast object literal to `G` because object literal [1] is incompatible with `Z` [2].

   union.js:53:2
   53| ({}: G);
        ^^ [1]

References:
   union.js:51:19
   51| type G = string | Z;
                         ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:56:3

Cannot cast `new W()` to `M` because number [1] is incompatible with string [2] in type argument `T` [3].

   union.js:56:3
   56| ((new W(): W<number>): M);
         ^^^^^^^^^^^^^^^^^^

References:
   union.js:56:14
   56| ((new W(): W<number>): M);
                    ^^^^^^ [1]
   union.js:55:12
   55| type M = W<string> | {p: string};
                  ^^^^^^ [2]
   union.js:13:9
   13| class W<T> {
               ^ [3]



Found 179 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
