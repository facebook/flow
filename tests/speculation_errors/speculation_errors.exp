Error -------------------------------------------------------------------------------- bad_interaction_with_evalt.js:4:5

Cannot call `bad.get` because: [incompatible-type]
 - Either cannot access object with computed property using string [1].
 - Or function type [2] requires another argument from call of method `get` [3].

   bad_interaction_with_evalt.js:4:5
   4| bad.get() as Obj2; // error: TODO should not error here, since annotation error should be non-speculative
          ^^^

References:
   exported_bad_evalt.js:8:26
   8| export type Bad = C<Obj2[string]>;
                               ^^^^^^ [1]
   exported_bad_evalt.js:3:3
   3|   get(v: T): T;
        ^^^^^^^^^^^^ [2]
   bad_interaction_with_evalt.js:4:1
   4| bad.get() as Obj2; // error: TODO should not error here, since annotation error should be non-speculative
      ^^^^^^^^^ [3]


Error -------------------------------------------------------------------------------- bad_interaction_with_evalt.js:5:5

Cannot call `bad.get` because: [incompatible-type]
 - Either number [1] is incompatible with empty [2].
 - Or no arguments are expected by function type [3].

   bad_interaction_with_evalt.js:5:5
   5| bad.get(1) as Obj2; // error: TODO spurious incompatible with empty
          ^^^

References:
   bad_interaction_with_evalt.js:5:9
   5| bad.get(1) as Obj2; // error: TODO spurious incompatible with empty
              ^ [1]
   exported_bad_evalt.js:8:21
   8| export type Bad = C<Obj2[string]>;
                          ^^^^^^^^^^^^ [2]
   exported_bad_evalt.js:2:3
   2|   get(): T | null;
        ^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:13:13

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `2` [2] in property `b`.
[incompatible-type]

   errors_intersection.js:13:13
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                   ^^^^^^^ [1]

References:
   errors_intersection.js:13:56
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                                                              ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:13:26

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `1` [2] in property `a`.
[incompatible-type]

   errors_intersection.js:13:26
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                                ^^^^^^^ [1]

References:
   errors_intersection.js:13:63
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                                                                     ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:13:39

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `3` [2] in property `c`.
[incompatible-type]

   errors_intersection.js:13:39
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                                             ^^^^^^^ [1]

References:
   errors_intersection.js:13:70
   13| any as {+b: boolean, +a: boolean, +c: boolean} as {+b: 2, +a: 1, +c: 3};
                                                                            ^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:16:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `1` [2].
 - Or string [3] is incompatible with number literal `1` [2].

   errors_intersection.js:16:8
              v
   16| any as {
   17|   +b: boolean & string,
   18|   +a: boolean & string,
   19|   +c: boolean & string,
   20| } as {+b: 2, +a: 1, +c: 3};
       ^

References:
   errors_intersection.js:18:7
   18|   +a: boolean & string,
             ^^^^^^^ [1]
   errors_intersection.js:20:18
   20| } as {+b: 2, +a: 1, +c: 3};
                        ^ [2]
   errors_intersection.js:18:17
   18|   +a: boolean & string,
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:16:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `2` [2].
 - Or string [3] is incompatible with number literal `2` [2].

   errors_intersection.js:16:8
              v
   16| any as {
   17|   +b: boolean & string,
   18|   +a: boolean & string,
   19|   +c: boolean & string,
   20| } as {+b: 2, +a: 1, +c: 3};
       ^

References:
   errors_intersection.js:17:7
   17|   +b: boolean & string,
             ^^^^^^^ [1]
   errors_intersection.js:20:11
   20| } as {+b: 2, +a: 1, +c: 3};
                 ^ [2]
   errors_intersection.js:17:17
   17|   +b: boolean & string,
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:16:8

Cannot cast `any` to object type because in property `c`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `3` [2].
 - Or string [3] is incompatible with number literal `3` [2].

   errors_intersection.js:16:8
              v
   16| any as {
   17|   +b: boolean & string,
   18|   +a: boolean & string,
   19|   +c: boolean & string,
   20| } as {+b: 2, +a: 1, +c: 3};
       ^

References:
   errors_intersection.js:19:7
   19|   +c: boolean & string,
             ^^^^^^^ [1]
   errors_intersection.js:20:25
   20| } as {+b: 2, +a: 1, +c: 3};
                               ^ [2]
   errors_intersection.js:19:17
   19|   +c: boolean & string,
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:23:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `1` [2].
 - Or string [3] is incompatible with number literal `1` [2].

   errors_intersection.js:23:8
   23| any as {+b: boolean, +a: boolean & string, +c: boolean} as {
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:23:26
   23| any as {+b: boolean, +a: boolean & string, +c: boolean} as {
                                ^^^^^^^ [1]
   errors_intersection.js:25:7
   25|   +a: 1,
             ^ [2]
   errors_intersection.js:23:36
   23| any as {+b: boolean, +a: boolean & string, +c: boolean} as {
                                          ^^^^^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:23:13

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `2` [2] in property `b`.
[incompatible-type]

   errors_intersection.js:23:13
   23| any as {+b: boolean, +a: boolean & string, +c: boolean} as {
                   ^^^^^^^ [1]

References:
   errors_intersection.js:24:7
   24|   +b: 2,
             ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:23:48

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `3` [2] in property `c`.
[incompatible-type]

   errors_intersection.js:23:48
   23| any as {+b: boolean, +a: boolean & string, +c: boolean} as {
                                                      ^^^^^^^ [1]

References:
   errors_intersection.js:26:7
   26|   +c: 3,
             ^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:30:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `2` [2].
 - Or string [3] is incompatible with number literal `2` [2].

   errors_intersection.js:30:8
   30| any as {+b: boolean & string, +a: boolean, +c: boolean} as {
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:30:13
   30| any as {+b: boolean & string, +a: boolean, +c: boolean} as {
                   ^^^^^^^ [1]
   errors_intersection.js:31:7
   31|   +b: 2,
             ^ [2]
   errors_intersection.js:30:23
   30| any as {+b: boolean & string, +a: boolean, +c: boolean} as {
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:30:35

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `1` [2] in property `a`.
[incompatible-type]

   errors_intersection.js:30:35
   30| any as {+b: boolean & string, +a: boolean, +c: boolean} as {
                                         ^^^^^^^ [1]

References:
   errors_intersection.js:32:7
   32|   +a: 1,
             ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:30:48

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `3` [2] in property `c`.
[incompatible-type]

   errors_intersection.js:30:48
   30| any as {+b: boolean & string, +a: boolean, +c: boolean} as {
                                                      ^^^^^^^ [1]

References:
   errors_intersection.js:33:7
   33|   +c: 3,
             ^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:37:8

Cannot cast `any` to object type because in property `c`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `3` [2].
 - Or string [3] is incompatible with number literal `3` [2].

   errors_intersection.js:37:8
   37| any as {+b: boolean, +a: boolean, +c: boolean & string} as {
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:37:39
   37| any as {+b: boolean, +a: boolean, +c: boolean & string} as {
                                             ^^^^^^^ [1]
   errors_intersection.js:40:7
   40|   +c: 3,
             ^ [2]
   errors_intersection.js:37:49
   37| any as {+b: boolean, +a: boolean, +c: boolean & string} as {
                                                       ^^^^^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:37:13

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `2` [2] in property `b`.
[incompatible-type]

   errors_intersection.js:37:13
   37| any as {+b: boolean, +a: boolean, +c: boolean & string} as {
                   ^^^^^^^ [1]

References:
   errors_intersection.js:38:7
   38|   +b: 2,
             ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:37:26

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `1` [2] in property `a`.
[incompatible-type]

   errors_intersection.js:37:26
   37| any as {+b: boolean, +a: boolean, +c: boolean & string} as {
                                ^^^^^^^ [1]

References:
   errors_intersection.js:39:7
   39|   +a: 1,
             ^ [2]


Error ------------------------------------------------------------------------------------- errors_intersection.js:44:18

Cannot cast `any` to object type because boolean [1] is incompatible with number literal `42` [2] in property `a.b`.
[incompatible-type]

   errors_intersection.js:44:18
   44| any as {+a: {+b: boolean}} as {+a: {+b: 42}};
                        ^^^^^^^ [1]

References:
   errors_intersection.js:44:41
   44| any as {+a: {+b: boolean}} as {+a: {+b: 42}};
                                               ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:48:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `42` [2] in property `b`.
 - Or object type [3] is incompatible with number literal `42` [2] in property `b`.

   errors_intersection.js:48:8
   48| any as {+a: boolean & {+b: boolean & {}}} as {+a: {+b: 42}};
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:48:28
   48| any as {+a: boolean & {+b: boolean & {}}} as {+a: {+b: 42}};
                                  ^^^^^^^ [1]
   errors_intersection.js:48:56
   48| any as {+a: boolean & {+b: boolean & {}}} as {+a: {+b: 42}};
                                                              ^^ [2]
   errors_intersection.js:48:38
   48| any as {+a: boolean & {+b: boolean & {}}} as {+a: {+b: 42}};
                                            ^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:50:8

Cannot cast `any` to number literal `42` because boolean [1] is incompatible with number literal `42` [2].
[incompatible-type]

   errors_intersection.js:50:8
   50| any as boolean as 42; // Error: number ~> boolean
              ^^^^^^^ [1]

References:
   errors_intersection.js:50:19
   50| any as boolean as 42; // Error: number ~> boolean
                         ^^ [2]


Error -------------------------------------------------------------------------------------- errors_intersection.js:51:1

Cannot cast `any` to number literal `42` because: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `42` [2].
 - Or object type [3] is incompatible with number literal `42` [2].

   errors_intersection.js:51:1
   51| any as {} & {} & {} & boolean as 42; // Error: number ~> boolean
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:51:23
   51| any as {} & {} & {} & boolean as 42; // Error: number ~> boolean
                             ^^^^^^^ [1]
   errors_intersection.js:51:34
   51| any as {} & {} & {} & boolean as 42; // Error: number ~> boolean
                                        ^^ [2]
   errors_intersection.js:51:8
   51| any as {} & {} & {} & boolean as 42; // Error: number ~> boolean
              ^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:52:1

Cannot cast `any` to number literal `42` because: [incompatible-type]
 - Either boolean [1] is incompatible with number literal `42` [2].
 - Or object type [3] is incompatible with number literal `42` [2].

   errors_intersection.js:52:1
   52| any as {} & ({} & ({} & boolean)) as 42; // Error: number ~> boolean
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:52:25
   52| any as {} & ({} & ({} & boolean)) as 42; // Error: number ~> boolean
                               ^^^^^^^ [1]
   errors_intersection.js:52:38
   52| any as {} & ({} & ({} & boolean)) as 42; // Error: number ~> boolean
                                            ^^ [2]
   errors_intersection.js:52:8
   52| any as {} & ({} & ({} & boolean)) as 42; // Error: number ~> boolean
              ^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:54:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:54:1
   54| any as number & string as true; // Error
       ^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:54:8
   54| any as number & string as true; // Error
              ^^^^^^ [1]
   errors_intersection.js:54:27
   54| any as number & string as true; // Error
                                 ^^^^ [2]
   errors_intersection.js:54:17
   54| any as number & string as true; // Error
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:55:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:55:1
   55| any as number & string & {} as true; // Error: should not show the {} branch
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:55:8
   55| any as number & string & {} as true; // Error: should not show the {} branch
              ^^^^^^ [1]
   errors_intersection.js:55:32
   55| any as number & string & {} as true; // Error: should not show the {} branch
                                      ^^^^ [2]
   errors_intersection.js:55:17
   55| any as number & string & {} as true; // Error: should not show the {} branch
                       ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:56:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:56:1
   56| any as {} & number & string as true; // Error: should not show the {} branch
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:56:13
   56| any as {} & number & string as true; // Error: should not show the {} branch
                   ^^^^^^ [1]
   errors_intersection.js:56:32
   56| any as {} & number & string as true; // Error: should not show the {} branch
                                      ^^^^ [2]
   errors_intersection.js:56:22
   56| any as {} & number & string as true; // Error: should not show the {} branch
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:57:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:57:1
   57| any as number & {} & string as true; // Error: should not show the {} branch
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:57:8
   57| any as number & {} & string as true; // Error: should not show the {} branch
              ^^^^^^ [1]
   errors_intersection.js:57:32
   57| any as number & {} & string as true; // Error: should not show the {} branch
                                      ^^^^ [2]
   errors_intersection.js:57:22
   57| any as number & {} & string as true; // Error: should not show the {} branch
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:59:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:59:8
   59| any as {+a: number & string} as {+a: true}; // Error
              ^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:59:13
   59| any as {+a: number & string} as {+a: true}; // Error
                   ^^^^^^ [1]
   errors_intersection.js:59:38
   59| any as {+a: number & string} as {+a: true}; // Error
                                            ^^^^ [2]
   errors_intersection.js:59:22
   59| any as {+a: number & string} as {+a: true}; // Error
                            ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:61:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:61:8
              v
   61| any as {
   62|   +a: number & string,
   63|   +b: {} & number & string,
   64|   +c: number & {} & string,
   65|   +d: number & string & {},
   66| } as {
       ^

References:
   errors_intersection.js:62:7
   62|   +a: number & string,
             ^^^^^^ [1]
   errors_intersection.js:67:7
   67|   +a: true, // Error: should be grouped
             ^^^^ [2]
   errors_intersection.js:62:16
   62|   +a: number & string,
                      ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:61:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:61:8
              v
   61| any as {
   62|   +a: number & string,
   63|   +b: {} & number & string,
   64|   +c: number & {} & string,
   65|   +d: number & string & {},
   66| } as {
       ^

References:
   errors_intersection.js:63:12
   63|   +b: {} & number & string,
                  ^^^^^^ [1]
   errors_intersection.js:68:7
   68|   +b: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [2]
   errors_intersection.js:63:21
   63|   +b: {} & number & string,
                           ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:61:8

Cannot cast `any` to object type because in property `c`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:61:8
              v
   61| any as {
   62|   +a: number & string,
   63|   +b: {} & number & string,
   64|   +c: number & {} & string,
   65|   +d: number & string & {},
   66| } as {
       ^

References:
   errors_intersection.js:64:7
   64|   +c: number & {} & string,
             ^^^^^^ [1]
   errors_intersection.js:69:7
   69|   +c: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [2]
   errors_intersection.js:64:21
   64|   +c: number & {} & string,
                           ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:61:8

Cannot cast `any` to object type because in property `d`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:61:8
              v
   61| any as {
   62|   +a: number & string,
   63|   +b: {} & number & string,
   64|   +c: number & {} & string,
   65|   +d: number & string & {},
   66| } as {
       ^

References:
   errors_intersection.js:65:7
   65|   +d: number & string & {},
             ^^^^^^ [1]
   errors_intersection.js:70:7
   70|   +d: true, // Error: should be grouped, should not show the {} branch
             ^^^^ [2]
   errors_intersection.js:65:16
   65|   +d: number & string & {},
                      ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:74:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2] in index 0.
 - Or string [3] is incompatible with boolean literal `true` [2] in index 0.

   errors_intersection.js:74:8
              v
   74| any as {
   75|   +a: [number] & [string],
   76|   +b: [{}] & [number] & [string],
   77|   +c: [number] & [{}] & [string],
   78|   +d: [number] & [string] & [{}],
   79| } as {
       ^

References:
   errors_intersection.js:75:8
   75|   +a: [number] & [string],
              ^^^^^^ [1]
   errors_intersection.js:80:8
   80|   +a: [true], // Error: should be grouped
              ^^^^ [2]
   errors_intersection.js:75:19
   75|   +a: [number] & [string],
                         ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:74:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2] in index 0.
 - Or string [3] is incompatible with boolean literal `true` [2] in index 0.

   errors_intersection.js:74:8
              v
   74| any as {
   75|   +a: [number] & [string],
   76|   +b: [{}] & [number] & [string],
   77|   +c: [number] & [{}] & [string],
   78|   +d: [number] & [string] & [{}],
   79| } as {
       ^

References:
   errors_intersection.js:76:15
   76|   +b: [{}] & [number] & [string],
                     ^^^^^^ [1]
   errors_intersection.js:81:8
   81|   +b: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [2]
   errors_intersection.js:76:26
   76|   +b: [{}] & [number] & [string],
                                ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:74:8

Cannot cast `any` to object type because in property `c`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2] in index 0.
 - Or string [3] is incompatible with boolean literal `true` [2] in index 0.

   errors_intersection.js:74:8
              v
   74| any as {
   75|   +a: [number] & [string],
   76|   +b: [{}] & [number] & [string],
   77|   +c: [number] & [{}] & [string],
   78|   +d: [number] & [string] & [{}],
   79| } as {
       ^

References:
   errors_intersection.js:77:8
   77|   +c: [number] & [{}] & [string],
              ^^^^^^ [1]
   errors_intersection.js:82:8
   82|   +c: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [2]
   errors_intersection.js:77:26
   77|   +c: [number] & [{}] & [string],
                                ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:74:8

Cannot cast `any` to object type because in property `d`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2] in index 0.
 - Or string [3] is incompatible with boolean literal `true` [2] in index 0.

   errors_intersection.js:74:8
              v
   74| any as {
   75|   +a: [number] & [string],
   76|   +b: [{}] & [number] & [string],
   77|   +c: [number] & [{}] & [string],
   78|   +d: [number] & [string] & [{}],
   79| } as {
       ^

References:
   errors_intersection.js:78:8
   78|   +d: [number] & [string] & [{}],
              ^^^^^^ [1]
   errors_intersection.js:83:8
   83|   +d: [true], // Error: should be grouped, should not show the [{}] branch
              ^^^^ [2]
   errors_intersection.js:78:19
   78|   +d: [number] & [string] & [{}],
                         ^^^^^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:86:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:86:1
   86| any as number & (string & false) as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:86:8
   86| any as number & (string & false) as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:86:37
   86| any as number & (string & false) as true; // Error: should be flattened
                                           ^^^^ [2]
   errors_intersection.js:86:18
   86| any as number & (string & false) as true; // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:86:27
   86| any as number & (string & false) as true; // Error: should be flattened
                                 ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:87:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:87:1
   87| any as (string & false) & number as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:87:9
   87| any as (string & false) & number as true; // Error: should be flattened
               ^^^^^^ [1]
   errors_intersection.js:87:37
   87| any as (string & false) & number as true; // Error: should be flattened
                                           ^^^^ [2]
   errors_intersection.js:87:18
   87| any as (string & false) & number as true; // Error: should be flattened
                        ^^^^^ [3]
   errors_intersection.js:87:27
   87| any as (string & false) & number as true; // Error: should be flattened
                                 ^^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:88:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:88:1
   88| any as {} & number & (string & false) as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:88:13
   88| any as {} & number & (string & false) as true; // Error: should be flattened
                   ^^^^^^ [1]
   errors_intersection.js:88:42
   88| any as {} & number & (string & false) as true; // Error: should be flattened
                                                ^^^^ [2]
   errors_intersection.js:88:23
   88| any as {} & number & (string & false) as true; // Error: should be flattened
                             ^^^^^^ [3]
   errors_intersection.js:88:32
   88| any as {} & number & (string & false) as true; // Error: should be flattened
                                      ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:89:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:89:1
   89| any as number & (string & false) & {} as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:89:8
   89| any as number & (string & false) & {} as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:89:42
   89| any as number & (string & false) & {} as true; // Error: should be flattened
                                                ^^^^ [2]
   errors_intersection.js:89:18
   89| any as number & (string & false) & {} as true; // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:89:27
   89| any as number & (string & false) & {} as true; // Error: should be flattened
                                 ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:90:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].
 - Or boolean literal `false` [4] is incompatible with boolean literal `true` [2].

   errors_intersection.js:90:1
   90| any as number & (string & {} & false) as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:90:8
   90| any as number & (string & {} & false) as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:90:42
   90| any as number & (string & {} & false) as true; // Error: should be flattened
                                                ^^^^ [2]
   errors_intersection.js:90:18
   90| any as number & (string & {} & false) as true; // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:90:32
   90| any as number & (string & {} & false) as true; // Error: should be flattened
                                      ^^^^^ [4]


Error -------------------------------------------------------------------------------------- errors_intersection.js:92:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:92:1
   92| any as number & number & number & string as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:92:8
   92| any as number & number & number & string as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:92:45
   92| any as number & number & number & string as true; // Error: should be flattened
                                                   ^^^^ [2]
   errors_intersection.js:92:17
   92| any as number & number & number & string as true; // Error: should be flattened
                       ^^^^^^ [3]
   errors_intersection.js:92:26
   92| any as number & number & number & string as true; // Error: should be flattened
                                ^^^^^^ [4]
   errors_intersection.js:92:35
   92| any as number & number & number & string as true; // Error: should be flattened
                                         ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:93:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:93:1
   93| any as number & number & (number & string) as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:93:8
   93| any as number & number & (number & string) as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:93:47
   93| any as number & number & (number & string) as true; // Error: should be flattened
                                                     ^^^^ [2]
   errors_intersection.js:93:17
   93| any as number & number & (number & string) as true; // Error: should be flattened
                       ^^^^^^ [3]
   errors_intersection.js:93:27
   93| any as number & number & (number & string) as true; // Error: should be flattened
                                 ^^^^^^ [4]
   errors_intersection.js:93:36
   93| any as number & number & (number & string) as true; // Error: should be flattened
                                          ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:94:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or string [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:94:1
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:94:8
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
              ^^^^^^ [1]
   errors_intersection.js:94:49
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
                                                       ^^^^ [2]
   errors_intersection.js:94:18
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:94:28
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
                                  ^^^^^^ [4]
   errors_intersection.js:94:37
   94| any as number & (number & (number & string)) as true; // Error: should be flattened
                                           ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:95:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or number [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:95:1
   95| any as (string & number) & number & number as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:95:9
   95| any as (string & number) & number & number as true; // Error: should be flattened
               ^^^^^^ [1]
   errors_intersection.js:95:47
   95| any as (string & number) & number & number as true; // Error: should be flattened
                                                     ^^^^ [2]
   errors_intersection.js:95:18
   95| any as (string & number) & number & number as true; // Error: should be flattened
                        ^^^^^^ [3]
   errors_intersection.js:95:28
   95| any as (string & number) & number & number as true; // Error: should be flattened
                                  ^^^^^^ [4]
   errors_intersection.js:95:37
   95| any as (string & number) & number & number as true; // Error: should be flattened
                                           ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:96:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either string [1] is incompatible with boolean literal `true` [2].
 - Or number [3] is incompatible with boolean literal `true` [2].
 - Or number [4] is incompatible with boolean literal `true` [2].
 - Or number [5] is incompatible with boolean literal `true` [2].

   errors_intersection.js:96:1
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:96:10
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
                ^^^^^^ [1]
   errors_intersection.js:96:49
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
                                                       ^^^^ [2]
   errors_intersection.js:96:19
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
                         ^^^^^^ [3]
   errors_intersection.js:96:29
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
                                   ^^^^^^ [4]
   errors_intersection.js:96:39
   96| any as ((string & number) & number) & number as true; // Error: should be flattened
                                             ^^^^^^ [5]


Error -------------------------------------------------------------------------------------- errors_intersection.js:98:1

Cannot cast `any` to boolean literal `true` because: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or object type [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:98:1
   98| any as number & {} as true; // Error
       ^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:98:8
   98| any as number & {} as true; // Error
              ^^^^^^ [1]
   errors_intersection.js:98:23
   98| any as number & {} as true; // Error
                             ^^^^ [2]
   errors_intersection.js:98:17
   98| any as number & {} as true; // Error
                       ^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:99:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or object type [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:99:8
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:99:13
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                   ^^^^^^ [1]
   errors_intersection.js:99:51
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                                         ^^^^ [2]
   errors_intersection.js:99:22
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                            ^^ [3]


Error -------------------------------------------------------------------------------------- errors_intersection.js:99:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or object type [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:99:8
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:99:30
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                    ^^^^^^ [1]
   errors_intersection.js:99:61
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                                                   ^^^^ [2]
   errors_intersection.js:99:39
   99| any as {+a: number & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                             ^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:100:8

Cannot cast `any` to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or string [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:100:8
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:100:13
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                    ^^^^^^ [1]
   errors_intersection.js:100:60
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                                                   ^^^^ [2]
   errors_intersection.js:100:22
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:100:8

Cannot cast `any` to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean literal `true` [2].
 - Or object type [3] is incompatible with boolean literal `true` [2].

   errors_intersection.js:100:8
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:100:39
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                              ^^^^^^ [1]
   errors_intersection.js:100:70
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                                                             ^^^^ [2]
   errors_intersection.js:100:48
   100| any as {+a: number & string & {}, +b: number & {}} as {+a: true, +b: true}; // Error
                                                       ^^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:103:1

Cannot cast `any` to tuple type because: [incompatible-type]
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `B` [3] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [4] is incompatible with number [2] in index 1 of index 0.
 - Or `D` [5] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:103:1
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:103:16
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
                       ^ [1]
   errors_intersection.js:103:69
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
                                                                            ^^^^^^ [2]
   errors_intersection.js:103:28
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
                                   ^ [3]
   errors_intersection.js:103:42
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
                                                 ^ [4]
   errors_intersection.js:103:54
   103| any as [[null, A] & [null, B]] & [[null, C] & [null, D]] as [[null, number]];
                                                             ^ [5]


Error ------------------------------------------------------------------------------------- errors_intersection.js:106:1

Cannot cast `any` to tuple type because: [incompatible-type]
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [3] is incompatible with number [2] in index 1 of index 0.
 - Or `D` [4] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:106:1
   106| any as [[null, A] & {}] & [[null, C] & [null, D]] as [[null, number]];
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:106:16
   106| any as [[null, A] & {}] & [[null, C] & [null, D]] as [[null, number]];
                       ^ [1]
   errors_intersection.js:106:62
   106| any as [[null, A] & {}] & [[null, C] & [null, D]] as [[null, number]];
                                                                     ^^^^^^ [2]
   errors_intersection.js:106:35
   106| any as [[null, A] & {}] & [[null, C] & [null, D]] as [[null, number]];
                                          ^ [3]
   errors_intersection.js:106:47
   106| any as [[null, A] & {}] & [[null, C] & [null, D]] as [[null, number]];
                                                      ^ [4]


Error ------------------------------------------------------------------------------------- errors_intersection.js:109:1

Cannot cast `any` to tuple type because: [incompatible-type]
 - Either `A` [1] is incompatible with number [2] in index 1 of index 0.
 - Or `C` [3] is incompatible with number [2] in index 1 of index 0.

   errors_intersection.js:109:1
   109| any as [[null, A] & {}] & [[null, C] & {}] as [[null, number]];
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:109:16
   109| any as [[null, A] & {}] & [[null, C] & {}] as [[null, number]];
                       ^ [1]
   errors_intersection.js:109:55
   109| any as [[null, A] & {}] & [[null, C] & {}] as [[null, number]];
                                                              ^^^^^^ [2]
   errors_intersection.js:109:35
   109| any as [[null, A] & {}] & [[null, C] & {}] as [[null, number]];
                                          ^ [3]


Error ------------------------------------------------------------------------------------- errors_intersection.js:112:1

Cannot cast `any` to tuple type because: [incompatible-type]
 - Either `C` [1] is incompatible with number [2] in index 1 of index 0.
 - Or object type [3] is incompatible with tuple type [4] in index 0.

   errors_intersection.js:112:1
   112| any as {} & [[null, C] & {}] as [[null, number]];
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   errors_intersection.js:112:21
   112| any as {} & [[null, C] & {}] as [[null, number]];
                            ^ [1]
   errors_intersection.js:112:41
   112| any as {} & [[null, C] & {}] as [[null, number]];
                                                ^^^^^^ [2]
   errors_intersection.js:112:26
   112| any as {} & [[null, C] & {}] as [[null, number]];
                                 ^^ [3]
   errors_intersection.js:112:34
   112| any as {} & [[null, C] & {}] as [[null, number]];
                                         ^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------- errors_intersection.js:115:1

Cannot call `f1` because `A` [1] is not a function. [not-a-function]

   errors_intersection.js:115:1
   115| f1(); // Error
        ^^

References:
   errors_intersection.js:114:17
   114| declare var f1: A | B;
                        ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:115:1

Cannot call `f1` because `B` [1] is not a function. [not-a-function]

   errors_intersection.js:115:1
   115| f1(); // Error
        ^^

References:
   errors_intersection.js:114:21
   114| declare var f1: A | B;
                            ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:118:1

Cannot call `f2` because `A` [1] is not a function. [not-a-function]

   errors_intersection.js:118:1
   118| f2(); // Error
        ^^

References:
   errors_intersection.js:117:17
   117| declare var f2: A | (B | C);
                        ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:118:1

Cannot call `f2` because `B` [1] is not a function. [not-a-function]

   errors_intersection.js:118:1
   118| f2(); // Error
        ^^

References:
   errors_intersection.js:117:22
   117| declare var f2: A | (B | C);
                             ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:118:1

Cannot call `f2` because `C` [1] is not a function. [not-a-function]

   errors_intersection.js:118:1
   118| f2(); // Error
        ^^

References:
   errors_intersection.js:117:26
   117| declare var f2: A | (B | C);
                                 ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:121:1

Cannot call `f3` because `A` [1] is not a function. [not-a-function]

   errors_intersection.js:121:1
   121| f3(); // Error
        ^^

References:
   errors_intersection.js:120:17
   120| declare var f3: A | (B | (C | D));
                        ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:121:1

Cannot call `f3` because `B` [1] is not a function. [not-a-function]

   errors_intersection.js:121:1
   121| f3(); // Error
        ^^

References:
   errors_intersection.js:120:22
   120| declare var f3: A | (B | (C | D));
                             ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:121:1

Cannot call `f3` because `C` [1] is not a function. [not-a-function]

   errors_intersection.js:121:1
   121| f3(); // Error
        ^^

References:
   errors_intersection.js:120:27
   120| declare var f3: A | (B | (C | D));
                                  ^ [1]


Error ------------------------------------------------------------------------------------- errors_intersection.js:121:1

Cannot call `f3` because `D` [1] is not a function. [not-a-function]

   errors_intersection.js:121:1
   121| f3(); // Error
        ^^

References:
   errors_intersection.js:120:31
   120| declare var f3: A | (B | (C | D));
                                      ^ [1]


Error --------------------------------------------------------------------------------------------- errors_union.js:13:6

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `b`.
[incompatible-type]

   errors_union.js:13:6
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
            ^ [1]

References:
   errors_union.js:13:41
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
                                               ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:13:12

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a`.
[incompatible-type]

   errors_union.js:13:12
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
                  ^ [1]

References:
   errors_union.js:13:29
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
                                   ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:13:18

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `c`.
[incompatible-type]

   errors_union.js:13:18
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
                        ^ [1]

References:
   errors_union.js:13:53
   13| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean};
                                                           ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:16:6

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:16:6
   16| ({b: 2, a: 1, c: 3}) as {
            ^ [1]

References:
   errors_union.js:18:6
   18|   b: boolean | string,
            ^^^^^^^ [2]
   errors_union.js:18:16
   18|   b: boolean | string,
                      ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:16:12

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:16:12
   16| ({b: 2, a: 1, c: 3}) as {
                  ^ [1]

References:
   errors_union.js:17:6
   17|   a: boolean | string,
            ^^^^^^^ [2]
   errors_union.js:17:16
   17|   a: boolean | string,
                      ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:16:18

Cannot cast object literal to object type because in property `c`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:16:18
   16| ({b: 2, a: 1, c: 3}) as {
                        ^ [1]

References:
   errors_union.js:19:6
   19|   c: boolean | string,
            ^^^^^^^ [2]
   errors_union.js:19:16
   19|   c: boolean | string,
                      ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:23:6

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `b`.
[incompatible-type]

   errors_union.js:23:6
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
            ^ [1]

References:
   errors_union.js:23:50
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                                                        ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:23:12

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:23:12
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                  ^ [1]

References:
   errors_union.js:23:29
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                                   ^^^^^^^ [2]
   errors_union.js:23:39
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                                             ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:23:18

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `c`.
[incompatible-type]

   errors_union.js:23:18
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                        ^ [1]

References:
   errors_union.js:23:62
   23| ({b: 2, a: 1, c: 3}) as {a: boolean | string, b: boolean, c: boolean};
                                                                    ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:26:6

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:26:6
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
            ^ [1]

References:
   errors_union.js:26:41
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                                               ^^^^^^^ [2]
   errors_union.js:26:51
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                                                         ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:26:12

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a`.
[incompatible-type]

   errors_union.js:26:12
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                  ^ [1]

References:
   errors_union.js:26:29
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                                   ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:26:18

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `c`.
[incompatible-type]

   errors_union.js:26:18
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                        ^ [1]

References:
   errors_union.js:26:62
   26| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean | string, c: boolean};
                                                                    ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:29:6

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `b`.
[incompatible-type]

   errors_union.js:29:6
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
            ^ [1]

References:
   errors_union.js:29:41
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                                               ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:29:12

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a`.
[incompatible-type]

   errors_union.js:29:12
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                  ^ [1]

References:
   errors_union.js:29:29
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                                   ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- errors_union.js:29:18

Cannot cast object literal to object type because in property `c`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with string [3].

   errors_union.js:29:18
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                        ^ [1]

References:
   errors_union.js:29:53
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                                                           ^^^^^^^ [2]
   errors_union.js:29:63
   29| ({b: 2, a: 1, c: 3}) as {a: boolean, b: boolean, c: boolean | string};
                                                                     ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:32:10

Cannot cast object literal to object type because number [1] is incompatible with boolean [2] in property `a.b`.
[incompatible-type]

   errors_union.js:32:10
   32| ({a: {b: 42}}) as {a: {b: boolean}};
                ^^ [1]

References:
   errors_union.js:32:27
   32| ({a: {b: 42}}) as {a: {b: boolean}};
                                 ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:36:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either number [1] is incompatible with boolean [2] in property `b`.
 - Or number [1] is incompatible with object type [3] in property `b`.

   errors_union.js:36:6
   36| ({a: {b: 42}}) as {a: boolean | {b: boolean | {}}};
            ^^^^^^^

References:
   errors_union.js:36:10
   36| ({a: {b: 42}}) as {a: boolean | {b: boolean | {}}};
                ^^ [1]
   errors_union.js:36:37
   36| ({a: {b: 42}}) as {a: boolean | {b: boolean | {}}};
                                           ^^^^^^^ [2]
   errors_union.js:36:47
   36| ({a: {b: 42}}) as {a: boolean | {b: boolean | {}}};
                                                     ^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:38:1

Cannot cast `42` to boolean because number [1] is incompatible with boolean [2]. [incompatible-type]

   errors_union.js:38:1
   38| 42 as boolean; // Error: number ~> boolean
       ^^ [1]

References:
   errors_union.js:38:7
   38| 42 as boolean; // Error: number ~> boolean
             ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- errors_union.js:39:1

Cannot cast `42` to union type because: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with object type [3].

   errors_union.js:39:1
   39| 42 as {} | {} | {} | boolean; // Error: number ~> boolean
       ^^ [1]

References:
   errors_union.js:39:22
   39| 42 as {} | {} | {} | boolean; // Error: number ~> boolean
                            ^^^^^^^ [2]
   errors_union.js:39:7
   39| 42 as {} | {} | {} | boolean; // Error: number ~> boolean
             ^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:40:1

Cannot cast `42` to union type because: [incompatible-type]
 - Either number [1] is incompatible with boolean [2].
 - Or number [1] is incompatible with object type [3].

   errors_union.js:40:1
   40| 42 as {} | ({} | ({} | boolean)); // Error: number ~> boolean
       ^^ [1]

References:
   errors_union.js:40:24
   40| 42 as {} | ({} | ({} | boolean)); // Error: number ~> boolean
                              ^^^^^^^ [2]
   errors_union.js:40:7
   40| 42 as {} | ({} | ({} | boolean)); // Error: number ~> boolean
             ^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:43:2

Cannot cast object literal to union type because: [incompatible-type]
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:43:2
   43| ({x: 123, y: 'abc'}) as {x: number, y: number} | {x: string, y: string}; // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:43:14
   43| ({x: 123, y: 'abc'}) as {x: number, y: number} | {x: string, y: string}; // Error
                    ^^^^^ [1]
   errors_union.js:43:40
   43| ({x: 123, y: 'abc'}) as {x: number, y: number} | {x: string, y: string}; // Error
                                              ^^^^^^ [2]
   errors_union.js:43:6
   43| ({x: 123, y: 'abc'}) as {x: number, y: number} | {x: string, y: string}; // Error
            ^^^ [3]
   errors_union.js:43:54
   43| ({x: 123, y: 'abc'}) as {x: number, y: number} | {x: string, y: string}; // Error
                                                            ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:48:2

Cannot cast object literal to union type because: [incompatible-type]
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:48:2
   48| ({x: 123, y: 'abc'}) as number | NumberPoint | StringPoint; // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:48:14
   48| ({x: 123, y: 'abc'}) as number | NumberPoint | StringPoint; // Error
                    ^^^^^ [1]
   errors_union.js:46:35
   46| type NumberPoint = {x: number, y: number};
                                         ^^^^^^ [2]
   errors_union.js:48:6
   48| ({x: 123, y: 'abc'}) as number | NumberPoint | StringPoint; // Error
            ^^^ [3]
   errors_union.js:47:24
   47| type StringPoint = {x: string, y: string};
                              ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:52:2

Cannot cast object literal to `Point` because: [incompatible-type]
 - Either string [1] is incompatible with number [2] in property `y`.
 - Or number [3] is incompatible with string [4] in property `x`.

   errors_union.js:52:2
   52| ({x: 123, y: 'abc'}) as Point; // Error
        ^^^^^^^^^^^^^^^^^^

References:
   errors_union.js:52:14
   52| ({x: 123, y: 'abc'}) as Point; // Error
                    ^^^^^ [1]
   errors_union.js:46:35
   46| type NumberPoint = {x: number, y: number};
                                         ^^^^^^ [2]
   errors_union.js:52:6
   52| ({x: 123, y: 'abc'}) as Point; // Error
            ^^^ [3]
   errors_union.js:47:24
   47| type StringPoint = {x: string, y: string};
                              ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:54:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:54:1
   54| true as number | string; // Error
       ^^^^ [1]

References:
   errors_union.js:54:9
   54| true as number | string; // Error
               ^^^^^^ [2]
   errors_union.js:54:18
   54| true as number | string; // Error
                        ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:55:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:55:1
   55| true as number | string | {}; // Error: should not show the {} branch
       ^^^^ [1]

References:
   errors_union.js:55:9
   55| true as number | string | {}; // Error: should not show the {} branch
               ^^^^^^ [2]
   errors_union.js:55:18
   55| true as number | string | {}; // Error: should not show the {} branch
                        ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:56:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:56:1
   56| true as {} | number | string; // Error: should not show the {} branch
       ^^^^ [1]

References:
   errors_union.js:56:14
   56| true as {} | number | string; // Error: should not show the {} branch
                    ^^^^^^ [2]
   errors_union.js:56:23
   56| true as {} | number | string; // Error: should not show the {} branch
                             ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:57:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:57:1
   57| true as number | {} | string; // Error: should not show the {} branch
       ^^^^ [1]

References:
   errors_union.js:57:9
   57| true as number | {} | string; // Error: should not show the {} branch
               ^^^^^^ [2]
   errors_union.js:57:23
   57| true as number | {} | string; // Error: should not show the {} branch
                             ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:59:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:59:6
   59| ({a: true}) as {a: number | string}; // Error
            ^^^^ [1]

References:
   errors_union.js:59:20
   59| ({a: true}) as {a: number | string}; // Error
                          ^^^^^^ [2]
   errors_union.js:59:29
   59| ({a: true}) as {a: number | string}; // Error
                                   ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:62:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:62:6
   62|   a: true, // Error: should be grouped
            ^^^^ [1]

References:
   errors_union.js:67:6
   67|   a: number | string,
            ^^^^^^ [2]
   errors_union.js:67:15
   67|   a: number | string,
                     ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:63:6

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:63:6
   63|   b: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [1]

References:
   errors_union.js:68:11
   68|   b: {} | number | string,
                 ^^^^^^ [2]
   errors_union.js:68:20
   68|   b: {} | number | string,
                          ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:64:6

Cannot cast object literal to object type because in property `c`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:64:6
   64|   c: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [1]

References:
   errors_union.js:69:6
   69|   c: number | {} | string,
            ^^^^^^ [2]
   errors_union.js:69:20
   69|   c: number | {} | string,
                          ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:65:6

Cannot cast object literal to object type because in property `d`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:65:6
   65|   d: true, // Error: should be grouped, should not show the {} branch
            ^^^^ [1]

References:
   errors_union.js:70:6
   70|   d: number | string | {},
            ^^^^^^ [2]
   errors_union.js:70:15
   70|   d: number | string | {},
                     ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:75:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2] in index 0.
 - Or boolean [1] is incompatible with string [3] in index 0.

   errors_union.js:75:6
   75|   a: [true], // Error: should be grouped
            ^^^^^^

References:
   errors_union.js:75:7
   75|   a: [true], // Error: should be grouped
             ^^^^ [1]
   errors_union.js:80:7
   80|   a: [number] | [string],
             ^^^^^^ [2]
   errors_union.js:80:18
   80|   a: [number] | [string],
                        ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:76:6

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2] in index 0.
 - Or boolean [1] is incompatible with string [3] in index 0.

   errors_union.js:76:6
   76|   b: [true], // Error: should be grouped, should not show the [{}] branch
            ^^^^^^

References:
   errors_union.js:76:7
   76|   b: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [1]
   errors_union.js:81:14
   81|   b: [{}] | [number] | [string],
                    ^^^^^^ [2]
   errors_union.js:81:25
   81|   b: [{}] | [number] | [string],
                               ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:77:6

Cannot cast object literal to object type because in property `c`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2] in index 0.
 - Or boolean [1] is incompatible with string [3] in index 0.

   errors_union.js:77:6
   77|   c: [true], // Error: should be grouped, should not show the [{}] branch
            ^^^^^^

References:
   errors_union.js:77:7
   77|   c: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [1]
   errors_union.js:82:7
   82|   c: [number] | [{}] | [string],
             ^^^^^^ [2]
   errors_union.js:82:25
   82|   c: [number] | [{}] | [string],
                               ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:78:6

Cannot cast object literal to object type because in property `d`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2] in index 0.
 - Or boolean [1] is incompatible with string [3] in index 0.

   errors_union.js:78:6
   78|   d: [true], // Error: should be grouped, should not show the [{}] branch
            ^^^^^^

References:
   errors_union.js:78:7
   78|   d: [true], // Error: should be grouped, should not show the [{}] branch
             ^^^^ [1]
   errors_union.js:83:7
   83|   d: [number] | [string] | [{}],
             ^^^^^^ [2]
   errors_union.js:83:18
   83|   d: [number] | [string] | [{}],
                        ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:86:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean literal `true` [1] is incompatible with boolean literal `false` [4].

   errors_union.js:86:1
   86| true as number | (string | false); // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:86:9
   86| true as number | (string | false); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:86:19
   86| true as number | (string | false); // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:86:28
   86| true as number | (string | false); // Error: should be flattened
                                  ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:87:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with string [2].
 - Or boolean literal `true` [1] is incompatible with boolean literal `false` [3].
 - Or boolean [1] is incompatible with number [4].

   errors_union.js:87:1
   87| true as (string | false) | number; // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:87:10
   87| true as (string | false) | number; // Error: should be flattened
                ^^^^^^ [2]
   errors_union.js:87:19
   87| true as (string | false) | number; // Error: should be flattened
                         ^^^^^ [3]
   errors_union.js:87:28
   87| true as (string | false) | number; // Error: should be flattened
                                  ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:88:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean literal `true` [1] is incompatible with boolean literal `false` [4].

   errors_union.js:88:1
   88| true as {} | number | (string | false); // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:88:14
   88| true as {} | number | (string | false); // Error: should be flattened
                    ^^^^^^ [2]
   errors_union.js:88:24
   88| true as {} | number | (string | false); // Error: should be flattened
                              ^^^^^^ [3]
   errors_union.js:88:33
   88| true as {} | number | (string | false); // Error: should be flattened
                                       ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:89:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean literal `true` [1] is incompatible with boolean literal `false` [4].

   errors_union.js:89:1
   89| true as number | (string | false) | {}; // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:89:9
   89| true as number | (string | false) | {}; // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:89:19
   89| true as number | (string | false) | {}; // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:89:28
   89| true as number | (string | false) | {}; // Error: should be flattened
                                  ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:90:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].
 - Or boolean literal `true` [1] is incompatible with boolean literal `false` [4].

   errors_union.js:90:1
   90| true as number | (string | {} | false); // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:90:9
   90| true as number | (string | {} | false); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:90:19
   90| true as number | (string | {} | false); // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:90:33
   90| true as number | (string | {} | false); // Error: should be flattened
                                       ^^^^^ [4]


Error --------------------------------------------------------------------------------------------- errors_union.js:92:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:92:1
   92| true as number | number | number | string; // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:92:9
   92| true as number | number | number | string; // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:92:18
   92| true as number | number | number | string; // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:92:27
   92| true as number | number | number | string; // Error: should be flattened
                                 ^^^^^^ [4]
   errors_union.js:92:36
   92| true as number | number | number | string; // Error: should be flattened
                                          ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:93:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:93:1
   93| true as number | number | (number | string); // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:93:9
   93| true as number | number | (number | string); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:93:18
   93| true as number | number | (number | string); // Error: should be flattened
                        ^^^^^^ [3]
   errors_union.js:93:28
   93| true as number | number | (number | string); // Error: should be flattened
                                  ^^^^^^ [4]
   errors_union.js:93:37
   93| true as number | number | (number | string); // Error: should be flattened
                                           ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:94:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with string [5].

   errors_union.js:94:1
   94| true as number | (number | (number | string)); // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:94:9
   94| true as number | (number | (number | string)); // Error: should be flattened
               ^^^^^^ [2]
   errors_union.js:94:19
   94| true as number | (number | (number | string)); // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:94:29
   94| true as number | (number | (number | string)); // Error: should be flattened
                                   ^^^^^^ [4]
   errors_union.js:94:38
   94| true as number | (number | (number | string)); // Error: should be flattened
                                            ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:95:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with string [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with number [5].

   errors_union.js:95:1
   95| true as (string | number) | number | number; // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:95:10
   95| true as (string | number) | number | number; // Error: should be flattened
                ^^^^^^ [2]
   errors_union.js:95:19
   95| true as (string | number) | number | number; // Error: should be flattened
                         ^^^^^^ [3]
   errors_union.js:95:29
   95| true as (string | number) | number | number; // Error: should be flattened
                                   ^^^^^^ [4]
   errors_union.js:95:38
   95| true as (string | number) | number | number; // Error: should be flattened
                                            ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:96:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with string [2].
 - Or boolean [1] is incompatible with number [3].
 - Or boolean [1] is incompatible with number [4].
 - Or boolean [1] is incompatible with number [5].

   errors_union.js:96:1
   96| true as ((string | number) | number) | number; // Error: should be flattened
       ^^^^ [1]

References:
   errors_union.js:96:11
   96| true as ((string | number) | number) | number; // Error: should be flattened
                 ^^^^^^ [2]
   errors_union.js:96:20
   96| true as ((string | number) | number) | number; // Error: should be flattened
                          ^^^^^^ [3]
   errors_union.js:96:30
   96| true as ((string | number) | number) | number; // Error: should be flattened
                                    ^^^^^^ [4]
   errors_union.js:96:40
   96| true as ((string | number) | number) | number; // Error: should be flattened
                                              ^^^^^^ [5]


Error --------------------------------------------------------------------------------------------- errors_union.js:98:1

Cannot cast `true` to union type because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with object type [3].

   errors_union.js:98:1
   98| true as number | {}; // Error
       ^^^^ [1]

References:
   errors_union.js:98:9
   98| true as number | {}; // Error
               ^^^^^^ [2]
   errors_union.js:98:18
   98| true as number | {}; // Error
                        ^^ [3]


Error --------------------------------------------------------------------------------------------- errors_union.js:99:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with object type [3].

   errors_union.js:99:6
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
            ^^^^ [1]

References:
   errors_union.js:99:29
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
                                   ^^^^^^ [2]
   errors_union.js:99:38
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
                                            ^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:99:15

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with object type [3].

   errors_union.js:99:15
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
                     ^^^^ [1]

References:
   errors_union.js:99:45
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
                                                   ^^^^^^ [2]
   errors_union.js:99:54
   99| ({a: true, b: true}) as {a: number | {}, b: number | {}}; // Error
                                                            ^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:100:6

Cannot cast object literal to object type because in property `a`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   errors_union.js:100:6
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
             ^^^^ [1]

References:
   errors_union.js:100:29
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
                                    ^^^^^^ [2]
   errors_union.js:100:38
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
                                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- errors_union.js:100:15

Cannot cast object literal to object type because in property `b`: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with object type [3].

   errors_union.js:100:15
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
                      ^^^^ [1]

References:
   errors_union.js:100:54
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
                                                             ^^^^^^ [2]
   errors_union.js:100:63
   100| ({a: true, b: true}) as {a: number | string | {}, b: number | {}}; // Error
                                                                      ^^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:103:8

Cannot cast `any` to union type because: [incompatible-type]
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `B` [3] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [4] in index 1 of index 0.
 - Or number [1] is incompatible with `D` [5] in index 1 of index 0.

   errors_union.js:103:8
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
               ^^^^^^^^^^^^^^^^

References:
   errors_union.js:103:16
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
                       ^^^^^^ [1]
   errors_union.js:103:36
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
                                           ^ [2]
   errors_union.js:103:48
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
                                                       ^ [3]
   errors_union.js:103:62
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
                                                                     ^ [4]
   errors_union.js:103:74
   103| any as [[null, number]] as [[null, A] | [null, B]] | [[null, C] | [null, D]];
                                                                                 ^ [5]


Error -------------------------------------------------------------------------------------------- errors_union.js:106:8

Cannot cast `any` to union type because: [incompatible-type]
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [3] in index 1 of index 0.
 - Or number [1] is incompatible with `D` [4] in index 1 of index 0.

   errors_union.js:106:8
   106| any as [[null, number]] as [[null, A] | {}] | [[null, C] | [null, D]];
               ^^^^^^^^^^^^^^^^

References:
   errors_union.js:106:16
   106| any as [[null, number]] as [[null, A] | {}] | [[null, C] | [null, D]];
                       ^^^^^^ [1]
   errors_union.js:106:36
   106| any as [[null, number]] as [[null, A] | {}] | [[null, C] | [null, D]];
                                           ^ [2]
   errors_union.js:106:55
   106| any as [[null, number]] as [[null, A] | {}] | [[null, C] | [null, D]];
                                                              ^ [3]
   errors_union.js:106:67
   106| any as [[null, number]] as [[null, A] | {}] | [[null, C] | [null, D]];
                                                                          ^ [4]


Error -------------------------------------------------------------------------------------------- errors_union.js:109:8

Cannot cast `any` to union type because: [incompatible-type]
 - Either number [1] is incompatible with `A` [2] in index 1 of index 0.
 - Or number [1] is incompatible with `C` [3] in index 1 of index 0.

   errors_union.js:109:8
   109| any as [[null, number]] as [[null, A] | {}] | [[null, C] | {}];
               ^^^^^^^^^^^^^^^^

References:
   errors_union.js:109:16
   109| any as [[null, number]] as [[null, A] | {}] | [[null, C] | {}];
                       ^^^^^^ [1]
   errors_union.js:109:36
   109| any as [[null, number]] as [[null, A] | {}] | [[null, C] | {}];
                                           ^ [2]
   errors_union.js:109:55
   109| any as [[null, number]] as [[null, A] | {}] | [[null, C] | {}];
                                                              ^ [3]


Error -------------------------------------------------------------------------------------------- errors_union.js:112:8

Cannot cast `any` to union type because: [incompatible-type]
 - Either number [1] is incompatible with `C` [2] in index 1 of index 0.
 - Or tuple type [3] is incompatible with object type [4] in index 0.

   errors_union.js:112:8
   112| any as [[null, number]] as {} | [[null, C] | {}];
               ^^^^^^^^^^^^^^^^

References:
   errors_union.js:112:16
   112| any as [[null, number]] as {} | [[null, C] | {}];
                       ^^^^^^ [1]
   errors_union.js:112:41
   112| any as [[null, number]] as {} | [[null, C] | {}];
                                                ^ [2]
   errors_union.js:112:9
   112| any as [[null, number]] as {} | [[null, C] | {}];
                ^^^^^^^^^^^^^^ [3]
   errors_union.js:112:46
   112| any as [[null, number]] as {} | [[null, C] | {}];
                                                     ^^ [4]


Error --------------------------------------------------------------------------------------- exported_bad_evalt.js:8:26

Cannot access object with computed property using string [1]. [invalid-computed-prop]

   8| export type Bad = C<Obj2[string]>;
                               ^^^^^^ [1]


Error ------------------------------------------------------------------------------------ intersection-function.js:19:1

Cannot call `a` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   intersection-function.js:19:1
   19| a(true);
       ^

References:
   intersection-function.js:19:3
   19| a(true);
         ^^^^ [1]
   intersection-function.js:17:23
   17| declare function a(x: number): void;
                             ^^^^^^ [2]
   intersection-function.js:18:23
   18| declare function a(x: string): void;
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:23:1

Cannot call `b` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   intersection-function.js:23:1
   23| b(42);
       ^

References:
   intersection-function.js:23:3
   23| b(42);
         ^^ [1]
   intersection-function.js:21:23
   21| declare function b(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:22:23
   22| declare function b(x: {p: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:24:1

Cannot call `b` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with string [4].

   intersection-function.js:24:1
   24| b({p: 42});
       ^

References:
   intersection-function.js:24:7
   24| b({p: 42});
             ^^ [1]
   intersection-function.js:22:27
   22| declare function b(x: {p: string}): void;
                                 ^^^^^^ [2]
   intersection-function.js:24:3
   24| b({p: 42});
         ^^^^^^^ [3]
   intersection-function.js:21:23
   21| declare function b(x: string): void;
                             ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:30:1

Cannot call `c` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   intersection-function.js:30:1
   30| c(42);
       ^

References:
   intersection-function.js:30:3
   30| c(42);
         ^^ [1]
   intersection-function.js:26:23
   26| declare function c(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:28:23
   28| declare function c(x: boolean): void;
                             ^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:31:1

Cannot call `c` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or number [1] is incompatible with boolean [3] in property `a.b`.

   intersection-function.js:31:1
   31| c({a: {b: 42}});
       ^

References:
   intersection-function.js:31:11
   31| c({a: {b: 42}});
                 ^^ [1]
   intersection-function.js:27:31
   27| declare function c(x: {a: {b: string}}): void;
                                     ^^^^^^ [2]
   intersection-function.js:29:31
   29| declare function c(x: {a: {b: boolean}}): void;
                                     ^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:36:1

Cannot call `d` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   intersection-function.js:36:1
   36| d(42);
       ^

References:
   intersection-function.js:36:3
   36| d(42);
         ^^ [1]
   intersection-function.js:33:23
   33| declare function d(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:34:23
   34| declare function d(x: {a: string}): void;
                             ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:37:1

Cannot call `d` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a`.
 - Or number [1] is incompatible with object type [3] in property `a`.

   intersection-function.js:37:1
   37| d({a: 42});
       ^

References:
   intersection-function.js:37:7
   37| d({a: 42});
             ^^ [1]
   intersection-function.js:34:27
   34| declare function d(x: {a: string}): void;
                                 ^^^^^^ [2]
   intersection-function.js:35:27
   35| declare function d(x: {a: {b: string}}): void;
                                 ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:38:1

Cannot call `d` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or object literal [3] is incompatible with string [4] in property `a`.

   intersection-function.js:38:1
   38| d({a: {b: 42}});
       ^

References:
   intersection-function.js:38:11
   38| d({a: {b: 42}});
                 ^^ [1]
   intersection-function.js:35:31
   35| declare function d(x: {a: {b: string}}): void;
                                     ^^^^^^ [2]
   intersection-function.js:38:7
   38| d({a: {b: 42}});
             ^^^^^^^ [3]
   intersection-function.js:34:27
   34| declare function d(x: {a: string}): void;
                                 ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:42:1

Cannot call `e` because: [incompatible-type]
 - Either number literal `42` [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with `X` [3].

   intersection-function.js:42:1
   42| e(42);
       ^

References:
   intersection-function.js:42:3
   42| e(42);
         ^^ [1]
   intersection-function.js:41:23
   41| declare function e(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [2]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:44:1

Cannot call `e` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with `X` [4].

   intersection-function.js:44:1
   44| e(new Y());
       ^

References:
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   intersection-function.js:41:37
   41| declare function e(x: interface {p: string}): void;
                                           ^^^^^^ [2]
   intersection-function.js:44:3
   44| e(new Y());
         ^^^^^^^ [3]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:45:1

Cannot call `e` because: [incompatible-type]
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in interface type [3].

   intersection-function.js:45:1
   45| e(new Z());
       ^

References:
   intersection-function.js:45:3
   45| e(new Z());
         ^^^^^^^ [1]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [2]
   intersection-function.js:41:23
   41| declare function e(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:46:1

Cannot call `e` because: [incompatible-type]
 - Either boolean [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with `X` [4].

   intersection-function.js:46:1
   46| e({p: true});
       ^

References:
   intersection-function.js:46:7
   46| e({p: true});
             ^^^^ [1]
   intersection-function.js:41:37
   41| declare function e(x: interface {p: string}): void;
                                           ^^^^^^ [2]
   intersection-function.js:46:3
   46| e({p: true});
         ^^^^^^^^^ [3]
   intersection-function.js:40:23
   40| declare function e(x: X): void;
                             ^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:51:1

Cannot call `f` because: [incompatible-type]
 - Either number literal `42` [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   intersection-function.js:51:1
   51| f(42);
       ^

References:
   intersection-function.js:51:3
   51| f(42);
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:52:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with read-only array type [4].

   intersection-function.js:52:1
   52| f({p: 42});
       ^

References:
   intersection-function.js:52:7
   52| f({p: 42});
             ^^ [1]
   intersection-function.js:48:37
   48| declare function f(x: interface {p: string}): void;
                                           ^^^^^^ [2]
   intersection-function.js:52:3
   52| f({p: 42});
         ^^^^^^^ [3]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:53:1

Cannot call `f` because: [incompatible-type]
 - Either property `p` is missing in object literal [1] but exists in interface type [2].
 - Or object literal [1] is incompatible with read-only array type [3].

   intersection-function.js:53:1
   53| f({});
       ^

References:
   intersection-function.js:53:3
   53| f({});
         ^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:54:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with `$ReadOnlyArray` [4].

   intersection-function.js:54:1
   54| f(new Y());
       ^

References:
   intersection-function.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   intersection-function.js:48:37
   48| declare function f(x: interface {p: string}): void;
                                           ^^^^^^ [2]
   intersection-function.js:54:3
   54| f(new Y());
         ^^^^^^^ [3]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:55:1

Cannot call `f` because: [incompatible-type]
 - Either property `p` is missing in `Z` [1] but exists in interface type [2].
 - Or `Z` [1] is incompatible with `$ReadOnlyArray` [3].

   intersection-function.js:55:1
   55| f(new Z());
       ^

References:
   intersection-function.js:55:3
   55| f(new Z());
         ^^^^^^^ [1]
   intersection-function.js:48:23
   48| declare function f(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [2]
   intersection-function.js:49:23
   49| declare function f(x: $ReadOnlyArray<string>): void;
                             ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:56:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or property `p` is missing in tuple type [3] but exists in interface type [4].

   intersection-function.js:56:1
   56| f([1] as [number]);
       ^

References:
   intersection-function.js:56:11
   56| f([1] as [number]);
                 ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]
   intersection-function.js:56:10
   56| f([1] as [number]);
                ^^^^^^^^ [3]
   intersection-function.js:48:23
   48| declare function f(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:57:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in index 0.
 - Or number [1] is incompatible with string [3] in array element.

   intersection-function.js:57:1
   57| f([1, 2] as [number, number]);
       ^

References:
   intersection-function.js:57:14
   57| f([1, 2] as [number, number]);
                    ^^^^^^ [1]
   intersection-function.js:50:24
   50| declare function f(x: [string, string]): void;
                              ^^^^^^ [2]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:58:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or property `p` is missing in tuple type [3] but exists in interface type [4].

   intersection-function.js:58:1
   58| f([1, 2, 3] as [number, number, number]);
       ^

References:
   intersection-function.js:58:17
   58| f([1, 2, 3] as [number, number, number]);
                       ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]
   intersection-function.js:58:16
   58| f([1, 2, 3] as [number, number, number]);
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   intersection-function.js:48:23
   48| declare function f(x: interface {p: string}): void;
                             ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:59:1

Cannot call `f` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or number [3] is incompatible with string [4] in property `p`.

   intersection-function.js:59:1
   59| f(null as any as Array<number> & {p: number});
       ^

References:
   intersection-function.js:59:24
   59| f(null as any as Array<number> & {p: number});
                              ^^^^^^ [1]
   intersection-function.js:49:38
   49| declare function f(x: $ReadOnlyArray<string>): void;
                                            ^^^^^^ [2]
   intersection-function.js:59:38
   59| f(null as any as Array<number> & {p: number});
                                            ^^^^^^ [3]
   intersection-function.js:48:37
   48| declare function f(x: interface {p: string}): void;
                                           ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:63:1

Cannot call `g` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Z` [3].

   intersection-function.js:63:1
   63| g(42);
       ^

References:
   intersection-function.js:63:3
   63| g(42);
         ^^ [1]
   intersection-function.js:61:23
   61| declare function g(x: string): void;
                             ^^^^^^ [2]
   intersection-function.js:62:23
   62| declare function g(x: Z): void;
                             ^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:64:1

Cannot call `g` because: [incompatible-type]
 - Either object literal [1] is incompatible with `Z` [2].
 - Or object literal [1] is incompatible with string [3].

   intersection-function.js:64:1
   64| g({});
       ^

References:
   intersection-function.js:64:3
   64| g({});
         ^^ [1]
   intersection-function.js:62:23
   62| declare function g(x: Z): void;
                             ^ [2]
   intersection-function.js:61:23
   61| declare function g(x: string): void;
                             ^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:68:1

Cannot call `h` because: [incompatible-type]
 - Either number [1] is incompatible with object type [2].
 - Or no more than 2 arguments are expected by function type [3].

   intersection-function.js:68:1
   68| h(1, 2, 3);
       ^

References:
   intersection-function.js:68:6
   68| h(1, 2, 3);
            ^ [1]
   intersection-function.js:67:34
   67| declare function h(a: number, b: {}, c: string): void;
                                        ^^ [2]
   intersection-function.js:66:19
   66| declare function h(a: string, b: string): void;
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------ intersection-function.js:72:1

Cannot call `i` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or `Y` [3] is incompatible with `X` [4].

   intersection-function.js:72:1
   72| i(new Y(), 42);
       ^

References:
   intersection-function.js:72:12
   72| i(new Y(), 42);
                  ^^ [1]
   intersection-function.js:70:29
   70| declare function i(a: Y, b: string): void;
                                   ^^^^^^ [2]
   intersection-function.js:72:3
   72| i(new Y(), 42);
         ^^^^^^^ [3]
   intersection-function.js:71:23
   71| declare function i(a: X, b: number): void;
                             ^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:76:1

Cannot call `j` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [3] is incompatible with string [4].

   intersection-function.js:76:1
   76| j(1, 2);
       ^

References:
   intersection-function.js:76:6
   76| j(1, 2);
            ^ [1]
   intersection-function.js:74:34
   74| declare function j(a: number, b: string): void;
                                        ^^^^^^ [2]
   intersection-function.js:76:3
   76| j(1, 2);
         ^ [3]
   intersection-function.js:75:23
   75| declare function j(a: string, b: number): void;
                             ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:80:1

Cannot call `k` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or number [3] is incompatible with string [4].

   intersection-function.js:80:1
   80| k(1, {p: 2});
       ^

References:
   intersection-function.js:80:10
   80| k(1, {p: 2});
                ^ [1]
   intersection-function.js:78:38
   78| declare function k(a: number, b: {p: string}): void;
                                            ^^^^^^ [2]
   intersection-function.js:80:3
   80| k(1, {p: 2});
         ^ [3]
   intersection-function.js:79:23
   79| declare function k(a: string, b: {p: number}): void;
                             ^^^^^^ [4]


Error ------------------------------------------------------------------------------------ intersection-function.js:84:1

Cannot call `m` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in type argument `T` [3].
 - Or number [1] is incompatible with string [4] in property `p`.

   intersection-function.js:84:1
   84| m(new W() as W<number>);
       ^

References:
   intersection-function.js:84:16
   84| m(new W() as W<number>);
                      ^^^^^^ [1]
   intersection-function.js:82:25
   82| declare function m(x: W<string>): void;
                               ^^^^^^ [2]
   intersection-function.js:13:9
   13| class W<T> {
               ^ [3]
   intersection-function.js:83:37
   83| declare function m(x: interface {p: string}): void;
                                           ^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- nullish.js:6:1

Cannot cast `42` to union type because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with null [3].

   nullish.js:6:1
   6| 42 as string | null | void; // Error: should only show string
      ^^ [1]

References:
   nullish.js:6:7
   6| 42 as string | null | void; // Error: should only show string
            ^^^^^^ [2]
   nullish.js:6:16
   6| 42 as string | null | void; // Error: should only show string
                     ^^^^ [3]


Error --------------------------------------------------------------------------------------------------- nullish.js:7:1

Cannot cast `42` to union type because: [incompatible-type]
 - Either number [1] is incompatible with object type [2].
 - Or number [1] is incompatible with null [3].

   nullish.js:7:1
   7| 42 as {} | null | void; // Error: should only show object
      ^^ [1]

References:
   nullish.js:7:7
   7| 42 as {} | null | void; // Error: should only show object
            ^^ [2]
   nullish.js:7:12
   7| 42 as {} | null | void; // Error: should only show object
                 ^^^^ [3]


Error --------------------------------------------------------------------------------------------------- nullish.js:8:1

Cannot cast `42` to union type because: [incompatible-type]
 - Either number [1] is incompatible with tuple type [2].
 - Or number [1] is incompatible with null [3].

   nullish.js:8:1
   8| 42 as [] | null | void; // Error: should only show array
      ^^ [1]

References:
   nullish.js:8:7
   8| 42 as [] | null | void; // Error: should only show array
            ^^ [2]
   nullish.js:8:12
   8| 42 as [] | null | void; // Error: should only show array
                 ^^^^ [3]


Error --------------------------------------------------------------------------------------------------- nullish.js:9:2

Cannot cast object literal to union type because: [incompatible-type]
 - Either object literal [1] is incompatible with string [2].
 - Or object literal [1] is incompatible with null [3].

   nullish.js:9:2
   9| ({}) as string | null | void; // Error: should only show string
       ^^ [1]

References:
   nullish.js:9:9
   9| ({}) as string | null | void; // Error: should only show string
              ^^^^^^ [2]
   nullish.js:9:18
   9| ({}) as string | null | void; // Error: should only show string
                       ^^^^ [3]


Error -------------------------------------------------------------------------------------------------- nullish.js:10:2

Cannot cast object literal to union type because: [incompatible-type]
 - Either property `p` is missing in object literal [1] but exists in object type [2].
 - Or object literal [1] is incompatible with null [3].

   nullish.js:10:2
   10| ({}) as {p: empty} | null | void; // Error: should only show object
        ^^ [1]

References:
   nullish.js:10:9
   10| ({}) as {p: empty} | null | void; // Error: should only show object
               ^^^^^^^^^^ [2]
   nullish.js:10:22
   10| ({}) as {p: empty} | null | void; // Error: should only show object
                            ^^^^ [3]


Error -------------------------------------------------------------------------------------------------- nullish.js:11:2

Cannot cast object literal to union type because: [incompatible-type]
 - Either object literal [1] is incompatible with tuple type [2].
 - Or object literal [1] is incompatible with null [3].

   nullish.js:11:2
   11| ({}) as [] | null | void; // Error: should only show array
        ^^ [1]

References:
   nullish.js:11:9
   11| ({}) as [] | null | void; // Error: should only show array
               ^^ [2]
   nullish.js:11:14
   11| ({}) as [] | null | void; // Error: should only show array
                    ^^^^ [3]


Error -------------------------------------------------------------------------------------------------- nullish.js:12:1

Cannot cast array literal to union type because: [incompatible-type]
 - Either empty array literal [1] is incompatible with string [2].
 - Or empty array literal [1] is incompatible with null [3].

   nullish.js:12:1
   12| [] as string | null | void; // Error: should only show string
       ^^ [1]

References:
   nullish.js:12:7
   12| [] as string | null | void; // Error: should only show string
             ^^^^^^ [2]
   nullish.js:12:16
   12| [] as string | null | void; // Error: should only show string
                      ^^^^ [3]


Error -------------------------------------------------------------------------------------------------- nullish.js:13:1

Cannot cast array literal to union type because: [incompatible-type]
 - Either empty array literal [1] is incompatible with object type [2].
 - Or empty array literal [1] is incompatible with null [3].

   nullish.js:13:1
   13| [] as {} | null | void; // Error: should only show object
       ^^ [1]

References:
   nullish.js:13:7
   13| [] as {} | null | void; // Error: should only show object
             ^^ [2]
   nullish.js:13:12
   13| [] as {} | null | void; // Error: should only show object
                  ^^^^ [3]


Error -------------------------------------------------------------------------------------------------- nullish.js:14:1

Cannot cast array literal to union type because: [incompatible-type]
 - Either empty array literal [1] has 0 elements but tuple type [2] has 1 element.
 - Or empty array literal [1] is incompatible with null [3].

   nullish.js:14:1
   14| [] as [empty] | null | void; // Error: should only show array
       ^^ [1]

References:
   nullish.js:14:7
   14| [] as [empty] | null | void; // Error: should only show array
             ^^^^^^^ [2]
   nullish.js:14:17
   14| [] as [empty] | null | void; // Error: should only show array
                       ^^^^ [3]


Error ------------------------------------------------------------------------------------------ numeric_sentinel.js:9:4

Cannot cast `x1.p` to string because number [1] is incompatible with string [2]. [incompatible-type]

   numeric_sentinel.js:9:4
   9|   (x1.p: string); // should error
         ^^^^

References:
   numeric_sentinel.js:2:18
   2|   | {type: 1, p: number}
                       ^^^^^^ [1]
   numeric_sentinel.js:9:10
   9|   (x1.p: string); // should error
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- numeric_sentinel.js:20:4

Cannot cast `x2.p` to string because number [1] is incompatible with string [2]. [incompatible-type]

   numeric_sentinel.js:20:4
   20|   (x2.p: string); // should error
          ^^^^

References:
   numeric_sentinel.js:13:20
   13|   | {type: 1.0, p: number}
                          ^^^^^^ [1]
   numeric_sentinel.js:20:10
   20|   (x2.p: string); // should error
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- numeric_sentinel.js:31:4

Cannot cast `x3.p` to string because number [1] is incompatible with string [2]. [incompatible-type]

   numeric_sentinel.js:31:4
   31|   (x3.p: string); // should error
          ^^^^

References:
   numeric_sentinel.js:24:26
   24|   | {type: 1.0 | 1.1, p: number}
                                ^^^^^^ [1]
   numeric_sentinel.js:31:10
   31|   (x3.p: string); // should error
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- numeric_sentinel.js:35:4

Cannot cast `x3.p` to string because number [1] is incompatible with string [2]. [incompatible-type]

   numeric_sentinel.js:35:4
   35|   (x3.p: string); // should error
          ^^^^

References:
   numeric_sentinel.js:24:26
   24|   | {type: 1.0 | 1.1, p: number}
                                ^^^^^^ [1]
   numeric_sentinel.js:35:10
   35|   (x3.p: string); // should error
                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ sentinel.js:11:17

Cannot cast object literal to `X` because string [1] is incompatible with number [2] in property `p`.
[incompatible-type]

   sentinel.js:11:17
   11| ({type: 'A', p: 'foo'}) as X;
                       ^^^^^ [1]

References:
   sentinel.js:7:20
    7|   | {type: 'A', p: number}
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- sentinel.js:12:2

Cannot cast object literal to `X` because object literal [1] is incompatible with `X` [2]. [incompatible-type]

   sentinel.js:12:2
   12| ({type: 'D'}) as X;
        ^^^^^^^^^^^ [1]

References:
   sentinel.js:12:18
   12| ({type: 'D'}) as X;
                        ^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:18:1

Cannot cast `true` to `A` because: [incompatible-type]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   union.js:18:1
   18| true as A;
       ^^^^ [1]

References:
   union.js:17:10
   17| type A = number | string;
                ^^^^^^ [2]
   union.js:17:19
   17| type A = number | string;
                         ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:21:1

Cannot cast `42` to `B` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   union.js:21:1
   21| 42 as B;
       ^^ [1]

References:
   union.js:20:10
   20| type B = string | {p: string};
                ^^^^^^ [2]
   union.js:20:19
   20| type B = string | {p: string};
                         ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:22:2

Cannot cast object literal to `B` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with string [4].

   union.js:22:2
   22| ({p: 42}) as B;
        ^^^^^^^ [3]

References:
   union.js:22:6
   22| ({p: 42}) as B;
            ^^ [1]
   union.js:20:23
   20| type B = string | {p: string};
                             ^^^^^^ [2]
   union.js:20:10
   20| type B = string | {p: string};
                ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:25:1

Cannot cast `42` to `C` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with boolean [3].

   union.js:25:1
   25| 42 as C;
       ^^ [1]

References:
   union.js:24:10
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                ^^^^^^ [2]
   union.js:24:38
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                            ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:26:2

Cannot cast object literal to `C` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or number [1] is incompatible with boolean [3] in property `a.b`.

   union.js:26:2
   26| ({a: {b: 42}}) as C;
        ^^^^^^^^^^^^

References:
   union.js:26:10
   26| ({a: {b: 42}}) as C;
                ^^ [1]
   union.js:24:27
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                 ^^^^^^ [2]
   union.js:24:56
   24| type C = string | {a: {b: string}} | boolean | {a: {b: boolean}};
                                                              ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:29:1

Cannot cast `42` to `D` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with object type [3].

   union.js:29:1
   29| 42 as D;
       ^^ [1]

References:
   union.js:28:10
   28| type D = string | {a: string} | {a: {b: string}};
                ^^^^^^ [2]
   union.js:28:19
   28| type D = string | {a: string} | {a: {b: string}};
                         ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:30:2

Cannot cast object literal to `D` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a`.
 - Or number [1] is incompatible with object type [3] in property `a`.

   union.js:30:2
   30| ({a: 42}) as D;
        ^^^^^^^

References:
   union.js:30:6
   30| ({a: 42}) as D;
            ^^ [1]
   union.js:28:23
   28| type D = string | {a: string} | {a: {b: string}};
                             ^^^^^^ [2]
   union.js:28:37
   28| type D = string | {a: string} | {a: {b: string}};
                                           ^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:31:2

Cannot cast object literal to `D` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `a.b`.
 - Or object literal [3] is incompatible with string [4] in property `a`.

   union.js:31:2
   31| ({a: {b: 42}}) as D;
        ^^^^^^^^^^^^

References:
   union.js:31:10
   31| ({a: {b: 42}}) as D;
                ^^ [1]
   union.js:28:41
   28| type D = string | {a: string} | {a: {b: string}};
                                               ^^^^^^ [2]
   union.js:31:6
   31| ({a: {b: 42}}) as D;
            ^^^^^^^ [3]
   union.js:28:23
   28| type D = string | {a: string} | {a: {b: string}};
                             ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:34:1

Cannot cast `42` to `E` because: [incompatible-type]
 - Either number literal `42` [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with `X` [3].

   union.js:34:1
   34| 42 as E;
       ^^ [1]

References:
   union.js:33:14
   33| type E = X | interface {p: string};
                    ^^^^^^^^^^^^^^^^^^^^^ [2]
   union.js:33:10
   33| type E = X | interface {p: string};
                ^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:36:1

Cannot cast `new Y()` to `E` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with `X` [4].

   union.js:36:1
   36| new Y() as E;
       ^^^^^^^ [3]

References:
   union.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   union.js:33:28
   33| type E = X | interface {p: string};
                                  ^^^^^^ [2]
   union.js:33:10
   33| type E = X | interface {p: string};
                ^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:37:1

Cannot cast `new Z()` to `E` because: [incompatible-type]
 - Either `Z` [1] is incompatible with `X` [2].
 - Or property `p` is missing in `Z` [1] but exists in interface type [3].

   union.js:37:1
   37| new Z() as E;
       ^^^^^^^ [1]

References:
   union.js:33:10
   33| type E = X | interface {p: string};
                ^ [2]
   union.js:33:14
   33| type E = X | interface {p: string};
                    ^^^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:38:2

Cannot cast object literal to `E` because: [incompatible-type]
 - Either boolean [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with `X` [4].

   union.js:38:2
   38| ({p: true}) as E;
        ^^^^^^^^^ [3]

References:
   union.js:38:6
   38| ({p: true}) as E;
            ^^^^ [1]
   union.js:33:28
   33| type E = X | interface {p: string};
                                  ^^^^^^ [2]
   union.js:33:10
   33| type E = X | interface {p: string};
                ^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:41:1

Cannot cast `42` to `F` because: [incompatible-type]
 - Either number literal `42` [1], a primitive, cannot be used as a subtype of interface type [2]. You can wrap it in
   `new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface.
 - Or number [1] is incompatible with read-only array type [3].

   union.js:41:1
   41| 42 as F;
       ^^ [1]

References:
   union.js:40:10
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^^^^^^^^^^^ [2]
   union.js:40:34
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                        ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:42:2

Cannot cast object literal to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or object literal [3] is incompatible with read-only array type [4].

   union.js:42:2
   42| ({p: 42}) as F;
        ^^^^^^^ [3]

References:
   union.js:42:6
   42| ({p: 42}) as F;
            ^^ [1]
   union.js:40:24
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^ [2]
   union.js:40:34
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                        ^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:43:2

Cannot cast object literal to `F` because: [incompatible-type]
 - Either property `p` is missing in object literal [1] but exists in interface type [2].
 - Or object literal [1] is incompatible with read-only array type [3].

   union.js:43:2
   43| ({}) as F;
        ^^ [1]

References:
   union.js:40:10
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^^^^^^^^^^^ [2]
   union.js:40:34
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                        ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:44:1

Cannot cast `new Y()` to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in property `p`.
 - Or `Y` [3] is incompatible with `$ReadOnlyArray` [4].

   union.js:44:1
   44| new Y() as F;
       ^^^^^^^ [3]

References:
   union.js:10:6
   10|   p: number;
            ^^^^^^ [1]
   union.js:40:24
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^ [2]
   union.js:40:34
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                        ^^^^^^^^^^^^^^^^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:45:1

Cannot cast `new Z()` to `F` because: [incompatible-type]
 - Either property `p` is missing in `Z` [1] but exists in interface type [2].
 - Or `Z` [1] is incompatible with `$ReadOnlyArray` [3].

   union.js:45:1
   45| new Z() as F;
       ^^^^^^^ [1]

References:
   union.js:40:10
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^^^^^^^^^^^ [2]
   union.js:40:34
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                        ^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:46:8

Cannot cast `[...]` to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or property `p` is missing in tuple type [3] but exists in interface type [4].

   union.js:46:8
   46| [1] as [number] as F;
              ^^^^^^^^ [3]

References:
   union.js:46:9
   46| [1] as [number] as F;
               ^^^^^^ [1]
   union.js:40:49
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^ [2]
   union.js:40:10
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- union.js:47:11

Cannot cast `[...]` to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in index 0.
 - Or number [1] is incompatible with string [3] in array element.

   union.js:47:11
   47| [1, 2] as [number, number] as F;
                 ^^^^^^^^^^^^^^^^

References:
   union.js:47:12
   47| [1, 2] as [number, number] as F;
                  ^^^^^^ [1]
   union.js:40:60
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                                                  ^^^^^^ [2]
   union.js:40:49
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- union.js:48:14

Cannot cast `[...]` to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or property `p` is missing in tuple type [3] but exists in interface type [4].

   union.js:48:14
   48| [1, 2, 3] as [number, number, number] as F;
                    ^^^^^^^^^^^^^^^^^^^^^^^^ [3]

References:
   union.js:48:15
   48| [1, 2, 3] as [number, number, number] as F;
                     ^^^^^^ [1]
   union.js:40:49
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^ [2]
   union.js:40:10
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                ^^^^^^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------------------------- union.js:49:16

Cannot cast `null` to `F` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in array element.
 - Or number [3] is incompatible with string [4] in property `p`.

   union.js:49:16
   49| null as any as Array<number> & {p: number} as F;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   union.js:49:22
   49| null as any as Array<number> & {p: number} as F;
                            ^^^^^^ [1]
   union.js:40:49
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                                                       ^^^^^^ [2]
   union.js:49:36
   49| null as any as Array<number> & {p: number} as F;
                                          ^^^^^^ [3]
   union.js:40:24
   40| type F = interface {p: string} | $ReadOnlyArray<string> | [string, string];
                              ^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------------- union.js:52:1

Cannot cast `42` to `G` because: [incompatible-type]
 - Either number [1] is incompatible with string [2].
 - Or number [1] is incompatible with `Z` [3].

   union.js:52:1
   52| 42 as G;
       ^^ [1]

References:
   union.js:51:10
   51| type G = string | Z;
                ^^^^^^ [2]
   union.js:51:19
   51| type G = string | Z;
                         ^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:53:2

Cannot cast object literal to `G` because: [incompatible-type]
 - Either object literal [1] is incompatible with `Z` [2].
 - Or object literal [1] is incompatible with string [3].

   union.js:53:2
   53| ({}) as G;
        ^^ [1]

References:
   union.js:51:19
   51| type G = string | Z;
                         ^ [2]
   union.js:51:10
   51| type G = string | Z;
                ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- union.js:56:12

Cannot cast `new W()` to `M` because: [incompatible-type]
 - Either number [1] is incompatible with string [2] in type argument `T` [3].
 - Or number [1] is incompatible with string [4] in property `p`.

   union.js:56:12
   56| new W() as W<number> as M;
                  ^^^^^^^^^

References:
   union.js:56:14
   56| new W() as W<number> as M;
                    ^^^^^^ [1]
   union.js:55:12
   55| type M = W<string> | interface {p: string};
                  ^^^^^^ [2]
   union.js:13:9
   13| class W<T> {
               ^ [3]
   union.js:55:36
   55| type M = W<string> | interface {p: string};
                                          ^^^^^^ [4]



Found 186 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
