Error --------------------------------------------------------------------------------------------- async_return.js:8:10

Cannot call await because `T` [1] is underconstrained by await [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   async_return.js:8:10
      8|   return await [][0]
                  ^^^^^^^^^^^ [2]

References:
   <BUILTINS>/core.js:2045:25
   2045| declare function $await<T>(p: Promise<T> | T): T;
                                 ^ [1]


Error ------------------------------------------------------------------------------------------ contextual_ctor.js:5:13

Cannot call `C` because `T` [1] is underconstrained by new `C` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   contextual_ctor.js:5:13
   5| let x = new C(); // Error
                  ^

References:
   contextual_ctor.js:3:9
   3| class C<T> {}
              ^ [1]
   contextual_ctor.js:5:9
   5| let x = new C(); // Error
              ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- contextual_jsx.js:6:10

Cannot create `Component` element because `T` [1] is underconstrained by `Component` element [2]. Either add explicit
type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   contextual_jsx.js:6:10
   6| let x = <Component />; // Error
               ^^^^^^^^^

References:
   contextual_jsx.js:4:20
   4| function Component<T>(props: {foo?: T}): React.Node { return null; }
                         ^ [1]
   contextual_jsx.js:6:9
   6| let x = <Component />; // Error
              ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ contextual_jsx.js:18:29

Cannot create `ComponentWithBound` element because boolean [1] is incompatible with number [2] in type argument `T`.
[incompatible-type-arg]

   contextual_jsx.js:18:29
   18| <div><ComponentWithBound a={true} /></div>; // error: bool ~> number
                                   ^^^^ [1]

References:
   contextual_jsx.js:17:32
   17| function ComponentWithBound<T: number>(pprops: {a:T}): React$Node {}
                                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- invalid.js:5:8

Cannot call `Import.store` because `store` [1] is not a function. [not-a-function]

   invalid.js:5:8
   5| Import.store(); // Should not crash.
             ^^^^^

References:
   invalid-export.js:4:20
   4| export opaque type store<T> = mixed;
                         ^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- issue_9015.js:20:3

Cannot call `c.query` because `R` [1] is underconstrained by call of method `query` [2]. Either add explicit type
arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   issue_9015.js:20:3
   20| c.query('SELECT 1');
         ^^^^^

References:
   issue_9015.js:14:9
   14|   query<R>(config: string): Promise<ResultSet<R>>;
               ^ [1]
   issue_9015.js:20:1
   20| c.query('SELECT 1');
       ^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ polyt_flow_error.js:2:7

Cannot call `first` with `1` bound to the first parameter because number [1] is incompatible with array type [2].
[incompatible-call]

   polyt_flow_error.js:2:7
   2| first(1); // Incompatibility error, but no error on under-constrained T
            ^ [1]

References:
   polyt_flow_error.js:1:27
   1| declare function first<T>(Array<T>): ?T;
                                ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- speculation.js:21:9

An annotation on rest parameter `args` is required because Flow cannot infer its type from local context.
[missing-local-annot]

   21|     (...args) => {
               ^^^^


Error ---------------------------------------------------------------------------------------- typeapp_expansion.js:54:4

Cannot cast `Spreaded` to `Opaque` because property `foo` is missing in object type [1] but exists in object type [2] in
type argument `T` [3]. [prop-missing]

   typeapp_expansion.js:54:4
   54|   (Spreaded: Opaque<{}>); // error: {} ~> Foo
          ^^^^^^^^

References:
   typeapp_expansion.js:54:21
   54|   (Spreaded: Opaque<{}>); // error: {} ~> Foo
                           ^^ [1]
   typeapp_expansion.js:40:13
   40|   ): Opaque<{...P2}>;
                   ^^^^^^^ [2]
   typeapp_expansion.js:31:31
   31|   declare opaque type Opaque<-T>;
                                     ^ [3]


Error ------------------------------------------------------------------------ underconstrained_class_constructor.js:5:5

Cannot call `A` because `T` [1] is underconstrained by new `A` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_class_constructor.js:5:5
   5| new A(); // Error: T underconstrained
          ^

References:
   underconstrained_class_constructor.js:2:17
   2| declare class A<T>{
                      ^ [1]
   underconstrained_class_constructor.js:5:1
   5| new A(); // Error: T underconstrained
      ^^^^^^^ [2]


Error ----------------------------------------------------------------------- underconstrained_class_constructor.js:18:5

Cannot call `Array` because `T` [1] is underconstrained by new `Array` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_class_constructor.js:18:5
    18| new Array(1); // Error
            ^^^^^

References:
   <BUILTINS>/core.js:948:21
   948| declare class Array<T> extends $ReadOnlyArray<T> {
                            ^ [1]
   underconstrained_class_constructor.js:18:1
    18| new Array(1); // Error
        ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------- underconstrained_class_constructor.js:21:5

Cannot call `PolyClass1` because `T` [1] is underconstrained by new `PolyClass1` [2]. Either add explicit type arguments
or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_class_constructor.js:21:5
   21| new PolyClass1(); // Error
           ^^^^^^^^^^

References:
   exported_poly_class.js:1:25
    1| export class PolyClass1<T> {}
                               ^ [1]
   underconstrained_class_constructor.js:21:1
   21| new PolyClass1(); // Error
       ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------- underconstrained_class_constructor.js:22:5

Cannot call `PolyClass2` because `T` [1] is underconstrained by new `PolyClass2` [2]. Either add explicit type arguments
or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_class_constructor.js:22:5
   22| new PolyClass2(); // Error
           ^^^^^^^^^^

References:
   exported_poly_class.js:2:25
    2| export class PolyClass2<T> {
                               ^ [1]
   underconstrained_class_constructor.js:22:1
   22| new PolyClass2(); // Error
       ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------- underconstrained_fun_call.js:3:1

Cannot call `f` because `T` [1] is underconstrained by call of `f` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_fun_call.js:3:1
   3| f(); // Error: T underconstrained
      ^

References:
   underconstrained_fun_call.js:2:20
   2| declare function f<T>(): T;
                         ^ [1]
   underconstrained_fun_call.js:3:1
   3| f(); // Error: T underconstrained
      ^^^ [2]


Error -------------------------------------------------------------------------------- underconstrained_fun_call.js:12:1

Cannot call `i` because `T` [1] is underconstrained by call of `i` [2]. Either add explicit type arguments or cast the
expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_fun_call.js:12:1
   12| i(); // Error: T underconstrained
       ^

References:
   underconstrained_fun_call.js:11:20
   11| declare function i<T>(): Array<T>;
                          ^ [1]
   underconstrained_fun_call.js:12:1
   12| i(); // Error: T underconstrained
       ^^^ [2]


Error ------------------------------------------------------------------------------------ underconstrained_react.js:7:2

Cannot create `PolyReactClass` element because `T` [1] is underconstrained by `PolyReactClass` element [2]. Either add
explicit type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   underconstrained_react.js:7:2
   7| <PolyReactClass />;
       ^^^^^^^^^^^^^^

References:
   underconstrained_react.js:5:22
   5| class PolyReactClass<T> extends React.Component<{}> {}
                           ^ [1]
   underconstrained_react.js:7:1
   7| <PolyReactClass />;
      ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------- underconstrained_react.js:11:2

Cannot create `PolyFunctionComponent` element because `T` [1] is underconstrained by `PolyFunctionComponent`
element [2]. Either add explicit type arguments or cast the expression to your expected type.
[underconstrained-implicit-instantiation]

   underconstrained_react.js:11:2
   11| <PolyFunctionComponent foo={() => {}}/>;
        ^^^^^^^^^^^^^^^^^^^^^

References:
   underconstrained_react.js:9:32
    9| function PolyFunctionComponent<T>(props: {foo: ({x: T} => mixed)}): React.Node { return null }
                                      ^ [1]
   underconstrained_react.js:11:1
   11| <PolyFunctionComponent foo={() => {}}/>;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:11:1

Cannot call `ReposLowerTRegressionTest` because `T` [1] is underconstrained by call of `ReposLowerTRegressionTest` [2].
Either add explicit type arguments or cast the expression to your expected type.
[underconstrained-implicit-instantiation]

   upper_non_t.js:11:1
   11| ReposLowerTRegressionTest({}) // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   upper_non_t.js:10:44
   10| declare function ReposLowerTRegressionTest<T>({o?: T}): T;
                                                  ^ [1]
   upper_non_t.js:11:1
   11| ReposLowerTRegressionTest({}) // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:21:1

Cannot call `IndexedAccess1` because `T` [1] is underconstrained by call of `IndexedAccess1` [2]. Either add explicit
type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:21:1
   21| IndexedAccess1(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^

References:
   upper_non_t.js:20:33
   20| declare function IndexedAccess1<T>(T['f']): T;
                                       ^ [1]
   upper_non_t.js:21:1
   21| IndexedAccess1(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:23:1

Cannot call `IndexedAccess2` because `T` [1] is underconstrained by call of `IndexedAccess2` [2]. Either add explicit
type arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:23:1
   23| IndexedAccess2(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^

References:
   upper_non_t.js:22:33
   22| declare function IndexedAccess2<T>(T[number]): T;
                                       ^ [1]
   upper_non_t.js:23:1
   23| IndexedAccess2(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:25:1

Cannot call `Call` because `T` [1] is underconstrained by call of `Call` [2]. Either add explicit type arguments or cast
the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:25:1
   25| Call(undefined); // Error: T under constrained.
       ^^^^

References:
   upper_non_t.js:24:23
   24| declare function Call<T>($Call<T, <V>(V)=>void>): T;
                             ^ [1]
   upper_non_t.js:25:1
   25| Call(undefined); // Error: T under constrained.
       ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:27:1

Cannot call `ObjMap` because `T` [1] is underconstrained by call of `ObjMap` [2]. Either add explicit type arguments or
cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:27:1
   27| ObjMap({}); // Error: T under constrained.
       ^^^^^^

References:
   upper_non_t.js:26:25
   26| declare function ObjMap<T>($ObjMap<T, <V>(V)=>void>): T;
                               ^ [1]
   upper_non_t.js:27:1
   27| ObjMap({}); // Error: T under constrained.
       ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:29:1

Cannot call `Values` because `T` [1] is underconstrained by call of `Values` [2]. Either add explicit type arguments or
cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:29:1
   29| Values(3); // Error: T under constrained.
       ^^^^^^

References:
   upper_non_t.js:28:25
   28| declare function Values<T>($Values<T>): T;
                               ^ [1]
   upper_non_t.js:29:1
   29| Values(3); // Error: T under constrained.
       ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:31:1

Cannot call `ElementRef` because `T` [1] is underconstrained by call of `ElementRef` [2]. Either add explicit type
arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:31:1
   31| ElementRef(1); // Error: T under constrained.
       ^^^^^^^^^^

References:
   upper_non_t.js:30:29
   30| declare function ElementRef<T>(React$ElementRef<T>): T;
                                   ^ [1]
   upper_non_t.js:31:1
   31| ElementRef(1); // Error: T under constrained.
       ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:47:6

Cannot get `s1.bad` because property `bad` (did you mean `bar`?) is missing in object literal [1]. [prop-missing]

   upper_non_t.js:47:6
   47|   s1.bad; // error
            ^^^

References:
   upper_non_t.js:43:22
   43|   const s1 = spread1({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:51:6

Cannot get `s2.bad` because property `bad` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:51:6
   51|   s2.bad; // error
            ^^^

References:
   upper_non_t.js:49:22
   49|   const s2 = spread2({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:52:6

Cannot get `s2.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:52:6
   52|   s2.bar; // error
            ^^^

References:
   upper_non_t.js:49:22
   49|   const s2 = spread2({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:53:6

Cannot get `s2.baz` because property `baz` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:53:6
   53|   s2.baz; // error
            ^^^

References:
   upper_non_t.js:49:22
   49|   const s2 = spread2({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:57:6

Cannot get `s3.bad` because property `bad` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:57:6
   57|   s3.bad; // error
            ^^^

References:
   upper_non_t.js:55:22
   55|   const s3 = spread3({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:58:6

Cannot get `s3.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:58:6
   58|   s3.bar; // error
            ^^^

References:
   upper_non_t.js:55:22
   55|   const s3 = spread3({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:59:6

Cannot get `s3.baz` because property `baz` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:59:6
   59|   s3.baz; // error
            ^^^

References:
   upper_non_t.js:55:22
   55|   const s3 = spread3({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:63:6

Cannot get `s4.bad` because property `bad` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:63:6
   63|   s4.bad; // error
            ^^^

References:
   upper_non_t.js:61:22
   61|   const s4 = spread4({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:64:6

Cannot get `s4.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:64:6
   64|   s4.bar; // error
            ^^^

References:
   upper_non_t.js:61:22
   61|   const s4 = spread4({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:65:6

Cannot get `s4.baz` because property `baz` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:65:6
   65|   s4.baz; // error
            ^^^

References:
   upper_non_t.js:61:22
   61|   const s4 = spread4({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:69:6

Cannot get `s5.bad` because property `bad` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:69:6
   69|   s5.bad; // error
            ^^^

References:
   upper_non_t.js:67:22
   67|   const s5 = spread5({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:70:6

Cannot get `s5.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:70:6
   70|   s5.bar; // error
            ^^^

References:
   upper_non_t.js:67:22
   67|   const s5 = spread5({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:71:6

Cannot get `s5.baz` because property `baz` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:71:6
   71|   s5.baz; // error
            ^^^

References:
   upper_non_t.js:67:22
   67|   const s5 = spread5({foo: 3, bar: 2, baz: 1}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:75:6

Cannot get `s6.bad` because property `bad` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:75:6
   75|   s6.bad; // error
            ^^^

References:
   upper_non_t.js:73:22
   73|   const s6 = spread6({foo: 3, bar: 2, baz: 1, hhh: 0}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:76:6

Cannot get `s6.bar` because property `bar` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:76:6
   76|   s6.bar; // error
            ^^^

References:
   upper_non_t.js:73:22
   73|   const s6 = spread6({foo: 3, bar: 2, baz: 1, hhh: 0}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:77:6

Cannot get `s6.baz` because property `baz` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:77:6
   77|   s6.baz; // error
            ^^^

References:
   upper_non_t.js:73:22
   73|   const s6 = spread6({foo: 3, bar: 2, baz: 1, hhh: 0}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:83:6

Cannot get `sr.bad` because property `bad` (did you mean `bar`?) is missing in object literal [1]. [prop-missing]

   upper_non_t.js:83:6
   83|   sr.bad; // error
            ^^^

References:
   upper_non_t.js:80:34
   80|   const sr = spread_and_readonly({foo: 1, bar: ''});
                                        ^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:88:5

Cannot get `o.cp` because property `cp` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:88:5
   88|   o.cp; // error
           ^^

References:
   upper_non_t.js:87:22
   87|   const o = optional({cp, foo: '', bar: 3}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:89:5

Cannot get `o.foo` because property `foo` is missing in object literal [1]. [prop-missing]

   upper_non_t.js:89:5
   89|   o.foo; // error
           ^^^

References:
   upper_non_t.js:87:22
   87|   const o = optional({cp, foo: '', bar: 3}); // ok
                            ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:99:6

Cannot get `r1.bad` because property `bad` is missing in `Array` [1]. [prop-missing]

   upper_non_t.js:99:6
    99|   r1.bad; // error
             ^^^

References:
   <BUILTINS>/core.js:948:15
   948| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:103:4

Cannot cast `r2[2]` to empty because number literal `1` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:103:4
   103|   (r2[2]: empty); // error
           ^^^^^

References:
   upper_non_t.js:96:35
    96|   const r2 = ArrRest(...([1, 2]: [1, 2])); // ok
                                          ^ [1]
   upper_non_t.js:103:11
   103|   (r2[2]: empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:103:4

Cannot cast `r2[2]` to empty because number literal `2` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:103:4
   103|   (r2[2]: empty); // error
           ^^^^^

References:
   upper_non_t.js:96:38
    96|   const r2 = ArrRest(...([1, 2]: [1, 2])); // ok
                                             ^ [1]
   upper_non_t.js:103:11
   103|   (r2[2]: empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:104:6

Cannot get `r2.bad` because property `bad` is missing in `Array` [1]. [prop-missing]

   upper_non_t.js:104:6
   104|   r2.bad; // error
             ^^^

References:
   <BUILTINS>/core.js:948:15
   948| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:114:6

Cannot call `f1` because string [1] is incompatible with number [2] in index 0. [incompatible-call]

   upper_non_t.js:114:6
   114|   f1(""); // error
             ^^ [1]

References:
   upper_non_t.js:111:17
   111|   function g(x: number): void {}
                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:119:6

Cannot call `f2` because string [1] is incompatible with number [2] in index 0. [incompatible-call]

   upper_non_t.js:119:6
   119|   f2("", 0); // error
             ^^ [1]

References:
   upper_non_t.js:116:17
   116|   function h(x: number, y: string): void {}
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- upper_non_t.js:119:10

Cannot call `f2` because number [1] is incompatible with string [2] in index 1. [incompatible-call]

   upper_non_t.js:119:10
   119|   f2("", 0); // error
                 ^ [1]

References:
   upper_non_t.js:116:28
   116|   function h(x: number, y: string): void {}
                                   ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:124:6

Cannot call `f3` because string [1] is incompatible with number [2] in array element. [incompatible-call]

   upper_non_t.js:124:6
   124|   f3("") // error
             ^^ [1]

References:
   upper_non_t.js:121:29
   121|   function i(...rest: Array<number>): void {}
                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:128:4

Cannot cast `v1` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:128:4
   128|   (v1: empty); // error: tuple ~> empty
           ^^

References:
   upper_non_t.js:109:66
   109|   declare function params<TArguments: $ReadOnlyArray<mixed>>(fn: (...TArguments) => mixed): TArguments;
                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   upper_non_t.js:128:8
   128|   (v1: empty); // error: tuple ~> empty
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:133:3

Cannot call `Diff0` because `T` [1] is underconstrained by call of `Diff0` [2]. Either add explicit type arguments or
cast the expression to your expected type. [underconstrained-implicit-instantiation]

   upper_non_t.js:133:3
   133|   Diff0(); // error
          ^^^^^

References:
   upper_non_t.js:132:26
   132|   declare function Diff0<T>(): $Diff<T, {foo: number}>;
                                 ^ [1]
   upper_non_t.js:133:3
   133|   Diff0(); // error
          ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:139:4

Cannot cast `d1` to object type because number [1] is incompatible with string [2] in property `foo`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   upper_non_t.js:139:4
   139|   (d1: {|foo: string | number, bar: number|}); // error
           ^^

References:
   upper_non_t.js:139:24
   139|   (d1: {|foo: string | number, bar: number|}); // error
                               ^^^^^^ [1]
   upper_non_t.js:134:45
   134|   declare function Diff1<T>($Diff<T, {|foo: string|}>): T;
                                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:140:6

Cannot get `d1.bad` because property `bad` (did you mean `bar`?) is missing in `$Diff` [1]. [prop-missing]

   upper_non_t.js:140:6
   140|   d1.bad; // error
             ^^^

References:
   upper_non_t.js:134:29
   134|   declare function Diff1<T>($Diff<T, {|foo: string|}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:141:4

Cannot cast `d1` to empty because `$Diff` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:141:4
   141|   (d1: empty); // error
           ^^

References:
   upper_non_t.js:134:29
   134|   declare function Diff1<T>($Diff<T, {|foo: string|}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   upper_non_t.js:141:8
   141|   (d1: empty); // error
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:146:6

Cannot get `d2.bad` because property `bad` (did you mean `bar`?) is missing in `$Diff` [1]. [prop-missing]

   upper_non_t.js:146:6
   146|   d2.bad; // error
             ^^^

References:
   upper_non_t.js:142:29
   142|   declare function Diff2<T>($Diff<T, {|foo?: string|}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:147:4

Cannot cast `d2` to empty because `$Diff` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:147:4
   147|   (d2: empty); // error
           ^^

References:
   upper_non_t.js:142:29
   142|   declare function Diff2<T>($Diff<T, {|foo?: string|}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   upper_non_t.js:147:8
   147|   (d2: empty); // error
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:152:6

Cannot get `d3.bad` because property `bad` (did you mean `bar`?) is missing in `$Diff` [1]. [prop-missing]

   upper_non_t.js:152:6
   152|   d3.bad; // error
             ^^^

References:
   upper_non_t.js:148:29
   148|   declare function Diff3<T>($Diff<T, {foo: string, ...}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:153:4

Cannot cast `d3` to empty because `$Diff` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:153:4
   153|   (d3: empty); // error
           ^^

References:
   upper_non_t.js:148:29
   148|   declare function Diff3<T>($Diff<T, {foo: string, ...}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   upper_non_t.js:153:8
   153|   (d3: empty); // error
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:154:4

Cannot cast `d3` to object type because inexact `$Diff` [1] is incompatible with exact object type [2].
[incompatible-exact]

   upper_non_t.js:154:4
   154|   (d3: {|foo: string, bar: number|}); // error
           ^^

References:
   upper_non_t.js:148:29
   148|   declare function Diff3<T>($Diff<T, {foo: string, ...}>): T;
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   upper_non_t.js:154:8
   154|   (d3: {|foo: string, bar: number|}); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- upper_non_t.js:157:15

Cannot call `Diff4` because string [1] is incompatible with number [2]. [incompatible-call]

   upper_non_t.js:157:15
   157|   Diff4({bar: ''}); // error: number is incompatible with string
                      ^^ [1]

References:
   upper_non_t.js:155:49
   155|   declare function Diff4<T>($Diff<T, {[string]: number}>): T;
                                                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:161:6

number [1] is incompatible with string [2]. [incompatible-type]

   upper_non_t.js:161:6
   161|   d4[0]; // error
             ^ [1]

References:
   upper_non_t.js:155:40
   155|   declare function Diff4<T>($Diff<T, {[string]: number}>): T;
                                               ^^^^^^ [2]



Found 63 errors
