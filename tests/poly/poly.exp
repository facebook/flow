Error ---------------------------------------------------------------------------------------------------- annot.js:3:17

Cannot use `A` [1] with fewer than 1 type argument. [missing-type-arg]

   annot.js:3:17
   3| class B extends A { } // OK, same as above
                      ^

References:
   annot.js:1:8
   1| class A<X> { }
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- annot2.js:1:24

Cannot return function because function [1] contains type variable `T` [2] which cannot escape from the scope in which
it was defined [2] (try adding a type annotation to return [3]). [escaped-generic]

   annot2.js:1:24
   1| const f = <T>(x: T) => (y: T) => y;
                             ^^^^^^^^^^^ [1]

References:
   annot2.js:1:12
   1| const f = <T>(x: T) => (y: T) => y;
                 ^ [2]
   annot2.js:1:20
   1| const f = <T>(x: T) => (y: T) => y;
                          [3]


Error ---------------------------------------------------------------------------------------------------- annot2.js:4:2

Cannot cast `f(...)(...)` to number because `T` [1] is incompatible with number [2]. [incompatible-cast]

   annot2.js:4:2
   4| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
       ^^^^^^^

References:
   annot2.js:1:28
   1| const f = <T>(x: T) => (y: T) => y;
                                 ^ [1]
   annot2.js:4:11
   4| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- annot2.js:4:7

Cannot call `f(...)` with `1` bound to `y` because number [1] is incompatible with `T` [2]. [incompatible-call]

   annot2.js:4:7
   4| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
            ^ [1]

References:
   annot2.js:1:28
   1| const f = <T>(x: T) => (y: T) => y;
                                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- error.js:8:8

Cannot call `newFn1` with `'string'` bound to the first parameter because string [1] is incompatible with number [2].
[incompatible-call]

   error.js:8:8
   8| newFn1('string'); // The error should point here.
             ^^^^^^^^ [1]

References:
   error.js:7:24
   7| const newFn1 = fn1((x: number) => {});
                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- error.js:11:20

Cannot call `fn2` with `42` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   error.js:11:20
   11| const newFn2 = fn2(42);
                          ^^ [1]

References:
   error.js:12:12
   12| newFn2((x: string) => {});
                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- error.js:15:5

Cannot call `fn3` with `42` bound to `x` because number [1] is incompatible with string [2]. [incompatible-call]

   error.js:15:5
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
           ^^ [1]

References:
   error.js:15:13
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- error.js:20:2

Cannot cast `newVal4` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   error.js:20:2
   20| (newVal4: string); // The error should point here.
        ^^^^^^^

References:
   error.js:19:8
   19| newFn4(42);
              ^^ [1]
   error.js:20:11
   20| (newVal4: string); // The error should point here.
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- error_position.js:11:2

Cannot cast `foo` to `typeof bar` because property `x` is missing in `Props` [1] but exists in `Props2` [2] in the first
parameter. [prop-missing]

   error_position.js:11:2
   11| (foo : typeof bar);
        ^^^

References:
   error_position.js:7:30
    7| declare function foo<TValue>(Props<TValue>): null;
                                    ^^^^^^^^^^^^^ [1]
   error_position.js:9:37
    9| declare function bar<TValue>(props: Props2<TValue>): null;
                                           ^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:19:8

Cannot call `a.meth` with `42` bound to `a` because number [1] is incompatible with `Middle` [2]. [incompatible-call]

   implicit_bounded_instantiation.js:19:8
   19| a.meth(42); // Error: number ~> Middle
              ^^ [1]

References:
   implicit_bounded_instantiation.js:7:12
    7| class C<T: Middle> {
                  ^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:20:8

Cannot call `a.meth` with `new Base()` bound to `a` because `Base` [1] is incompatible with `Middle` [2].
[incompatible-call]

   implicit_bounded_instantiation.js:20:8
   20| a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]

References:
   implicit_bounded_instantiation.js:7:12
    7| class C<T: Middle> {
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- inout.js:7:2

Cannot cast `x` to `C` because `B` [1] is incompatible with `A` [2] in type argument `In` [3]. [incompatible-cast]

   inout.js:7:2
   7| (x: C<A>); // error: A ~> B in default-expanded type
       ^

References:
   inout.js:6:18
   6| declare var x: C<B>;
                       ^ [1]
   inout.js:7:7
   7| (x: C<A>); // error: A ~> B in default-expanded type
            ^ [2]
   inout.js:4:16
   4| class C<+Out, -In: Out = Out> {}
                     ^^ [3]


Error --------------------------------------------------------------------------------------------------- phantom.js:7:2

Cannot cast `a` to `B` because number [1] is incompatible with string [2] in type argument `Phantom` [3].
[incompatible-cast]

   phantom.js:7:2
   7| (a: B); // Error
       ^

References:
   phantom.js:3:12
   3| type A = T<number>;
                 ^^^^^^ [1]
   phantom.js:4:12
   4| type B = T<string>;
                 ^^^^^^ [2]
   phantom.js:9:8
   9| type T<Phantom> = any;
             ^^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- phantom.js:15:2

Cannot cast `c` to `D` because number [1] is incompatible with string [2] in type argument `Phantom` [3].
[incompatible-cast]

   phantom.js:15:2
   15| (c: D); // Error
        ^

References:
   phantom.js:11:12
   11| type C = T<number>;
                  ^^^^^^ [1]
   phantom.js:12:12
   12| type D = T<string>;
                  ^^^^^^ [2]
   phantom.js:9:8
    9| type T<Phantom> = any;
              ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- poly.js:17:16

Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   poly.js:17:16
   17| var x:string = foo.x;
                      ^^^^^

References:
   poly.js:16:19
   16| var foo = new Foo(0);
                         ^ [1]
   poly.js:17:7
   17| var x:string = foo.x;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- poly.js:17:16

Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   poly.js:17:16
   17| var x:string = foo.x;
                      ^^^^^

References:
   poly.js:18:11
   18| var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [1]
   poly.js:17:7
   17| var x:string = foo.x;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- poly.js:18:31

Cannot assign `Q.bar(...)` to `z` because string [1] is incompatible with number [2] in type argument `T` [3].
[incompatible-type-arg]

   poly.js:18:31
   18| var z:Foo<number> = Q.bar(foo,"");
                                     ^^ [1]

References:
   poly.js:18:11
   18| var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [2]
   poly.js:1:11
    1| class Foo<T> {
                 ^ [3]


Error ----------------------------------------------------------------------------------------------- subtyping.js:41:48

Cannot return `f` because `T` [1] is incompatible with number [2] in the return value. [incompatible-return]

   subtyping.js:41:48
   41|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                                      ^

References:
   subtyping.js:41:8
   41|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
              ^ [1]
   subtyping.js:41:37
   41|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:49:42

Cannot return `f` because `T` [1] is incompatible with array type [2] in the return value. [incompatible-return]

   subtyping.js:49:42
   49|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                                ^

References:
   subtyping.js:49:8
   49|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
              ^ [1]
   subtyping.js:49:34
   49|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                        ^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:55:26

Cannot use function type [1] with fewer than 2 type arguments. [missing-type-arg]

   subtyping.js:55:26
   55| (f: <R, S>(R, S) => S): (<T>(T, T) => T) => f; // ideally ok, known error
                                ^^^^^^^^^^^^^^

References:
   subtyping.js:55:5
   55| (f: <R, S>(R, S) => S): (<T>(T, T) => T) => f; // ideally ok, known error
           ^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- subtyping.js:56:26

Cannot use function type [1] with fewer than 2 type arguments. [missing-type-arg]

   subtyping.js:56:26
   56| (f: <R, S>(R, S) => S): (<T>(T, T) => boolean) => f; // error
                                ^^^^^^^^^^^^^^^^^^^^

References:
   subtyping.js:56:5
   56| (f: <R, S>(R, S) => S): (<T>(T, T) => boolean) => f; // error
           ^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- subtyping.js:57:27

Cannot use function type [1] with more than 1 type argument. [extra-type-arg]

   subtyping.js:57:27
   57| (f: <R>(R, mixed) => R): (<S, T>(S, T) => S) => f; // ideally ok, known error
                                 ^^^^^^^^^^^^^^^^^

References:
   subtyping.js:57:5
   57| (f: <R>(R, mixed) => R): (<S, T>(S, T) => S) => f; // ideally ok, known error
           ^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- subtyping.js:58:27

Cannot use function type [1] with more than 1 type argument. [extra-type-arg]

   subtyping.js:58:27
   58| (f: <R>(R, mixed) => R): (<S, T>(S, T) => T) => f; // error
                                 ^^^^^^^^^^^^^^^^^

References:
   subtyping.js:58:5
   58| (f: <R>(R, mixed) => R): (<S, T>(S, T) => T) => f; // error
           ^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- subtyping.js:65:51

Cannot return `f` because number [1] is incompatible with string [2]. [incompatible-return]

   subtyping.js:65:51
   65|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                                         ^

References:
   subtyping.js:65:9
   65|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
               ^^^^^^ [1]
   subtyping.js:64:9
   64| (f: <S: string, T: number>() => { a: S, b: T })
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:65:51

Cannot return `f` because string [1] is incompatible with number [2]. [incompatible-return]

   subtyping.js:65:51
   65|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                                         ^

References:
   subtyping.js:65:20
   65|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                          ^^^^^^ [1]
   subtyping.js:64:20
   64| (f: <S: string, T: number>() => { a: S, b: T })
                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:70:54

Cannot return `f` because number [1] is incompatible with `T` [2] in the first parameter. [incompatible-return]

   subtyping.js:70:54
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:70:6
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
            ^^^^^^ [1]
   subtyping.js:70:39
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                             ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:70:54

Cannot return `f` because number [1] is incompatible with `T` [2] in the second parameter. [incompatible-return]

   subtyping.js:70:54
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:70:14
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                    ^^^^^^ [1]
   subtyping.js:70:42
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:70:54

Cannot return `f` because number [1] is incompatible with `T` [2] in the return value. [incompatible-return]

   subtyping.js:70:54
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:70:25
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                               ^^^^^^ [1]
   subtyping.js:70:48
   70| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                      ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:72:54

Cannot return `f` because number [1] is incompatible with string [2] in the second parameter. [incompatible-return]

   subtyping.js:72:54
   72| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                                            ^

References:
   subtyping.js:72:43
   72| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                                 ^^^^^^ [1]
   subtyping.js:72:32
   72| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:8:10

Cannot extend `C` [1] with `D` because number [2] is incompatible with `X` [3] in the first parameter of property `foo`.
[incompatible-extend]

   test.js:8:10
   8|   foo(x: number): number { return x; } // error (specialization, see below)
               ^^^^^^ [2]

References:
   test.js:7:17
   7| class D extends C {
                      ^ [1]
   test.js:2:13
   2|   foo<X>(x: X): X { return x; }
                  ^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:8:19

Cannot extend `C` [1] with `D` because number [2] is incompatible with `X` [3] in the return value of property `foo`.
[incompatible-extend]

   test.js:8:19
   8|   foo(x: number): number { return x; } // error (specialization, see below)
                        ^^^^^^ [2]

References:
   test.js:7:17
   7| class D extends C {
                      ^ [1]
   test.js:2:17
   2|   foo<X>(x: X): X { return x; }
                      ^ [3]



Found 31 errors
