Error ---------------------------------------------------------------------------------------------------- annot.js:3:17

Cannot use `A` [1] with fewer than 1 type argument. [missing-type-arg]

   annot.js:3:17
   3| class B extends A { } // OK, same as above
                      ^

References:
   annot.js:1:8
   1| class A<X> { }
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- annot2.js:1:20

Missing an annotation on return because generic functions must be fully annotated. [missing-local-annot]

   1| const f = <T>(x: T) => (y: T) => y;
                         


Error ----------------------------------------------------------------------------------------------------- error.js:8:8

Cannot call `newFn1` with `'string'` bound to the first parameter because string [1] is incompatible with number [2].
[incompatible-type]

   error.js:8:8
   8| newFn1('string'); // The error should point here.
             ^^^^^^^^ [1]

References:
   error.js:7:24
   7| const newFn1 = fn1((x: number) => {});
                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- error.js:12:12

Cannot call `newFn2` with function bound to the first parameter because in the first parameter: string [1] is
incompatible with number [2]. [incompatible-type]

   error.js:12:12
   12| newFn2((x: string) => {});
                  ^^^^^^ [1]

References:
   error.js:11:20
   11| const newFn2 = fn2(42);
                          ^^ [2]


Error --------------------------------------------------------------------------------------------------- error.js:15:13

Cannot call `fn3` with function bound to `y` because in the first parameter: string [1] is incompatible with number [2].
[incompatible-type]

   error.js:15:13
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
                   ^^^^^^ [1]

References:
   error.js:15:5
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
           ^^ [2]


Error ---------------------------------------------------------------------------------------------------- error.js:20:1

Cannot cast `newVal4` to string because number [1] is incompatible with string [2]. [incompatible-type]

   error.js:20:1
   20| newVal4 as string; // The error should point here.
       ^^^^^^^

References:
   error.js:18:31
   18| const [newVal4, newFn4] = fn4<number>();
                                     ^^^^^^ [1]
   error.js:20:12
   20| newVal4 as string; // The error should point here.
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- error_position.js:11:1

Cannot cast `foo` to `typeof bar` because in the first parameter: property `x` is extra in object type [1] but missing
in object type [2]. Exact objects do not accept extra props. [incompatible-type]

   error_position.js:11:1
   11| foo as typeof bar;
       ^^^

References:
   error_position.js:9:37
    9| declare function bar<TValue>(props: Props2<TValue>): null;
                                           ^^^^^^^^^^^^^^ [1]
   error_position.js:7:30
    7| declare function foo<TValue>(Props<TValue>): null;
                                    ^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:17:8

Cannot call `a.meth` with `42` bound to `a` because number [1] is incompatible with `Middle` [2]. [incompatible-type]

   implicit_bounded_instantiation.js:17:8
   17| a.meth(42); // Error: number ~> Middle
              ^^ [1]

References:
   implicit_bounded_instantiation.js:5:21
    5| class C<T: Middle = Middle> {
                           ^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:18:8

Cannot call `a.meth` with `new Base()` bound to `a` because `Base` [1] is incompatible with `Middle` [2].
[incompatible-type]

   implicit_bounded_instantiation.js:18:8
   18| a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]

References:
   implicit_bounded_instantiation.js:5:21
    5| class C<T: Middle = Middle> {
                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- inout.js:7:2

Cannot cast `x` to `C` because in type argument `In` [1]: `B` [2] is incompatible with `A` [3]. [incompatible-type]

   inout.js:7:2
   7| (x: C<A>); // error: A ~> B in default-expanded type
       ^

References:
   inout.js:4:16
   4| class C<+Out, -In: Out = Out> {}
                     ^^ [1]
   inout.js:6:18
   6| declare var x: C<B>;
                       ^ [2]
   inout.js:7:7
   7| (x: C<A>); // error: A ~> B in default-expanded type
            ^ [3]


Error --------------------------------------------------------------------------------------------------- phantom.js:5:2

Cannot cast `a` to `B` because in type argument `Phantom` [1]: number [2] is incompatible with string [3].
[incompatible-type]

   phantom.js:5:2
   5| (a: B); // Error
       ^

References:
   phantom.js:7:8
   7| type T<Phantom> = any;
             ^^^^^^^ [1]
   phantom.js:1:12
   1| type A = T<number>;
                 ^^^^^^ [2]
   phantom.js:2:12
   2| type B = T<string>;
                 ^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- phantom.js:13:2

Cannot cast `c` to `D` because in type argument `Phantom` [1]: number [2] is incompatible with string [3].
[incompatible-type]

   phantom.js:13:2
   13| (c: D); // Error
        ^

References:
   phantom.js:7:8
    7| type T<Phantom> = any;
              ^^^^^^^ [1]
   phantom.js:9:12
    9| type C = T<number>;
                  ^^^^^^ [2]
   phantom.js:10:12
   10| type D = T<string>;
                  ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- poly.js:17:16

Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2]. [incompatible-type]

   poly.js:17:16
   17| var x:string = foo.x;
                      ^^^^^

References:
   poly.js:16:19
   16| var foo = new Foo(0);
                         ^ [1]
   poly.js:17:7
   17| var x:string = foo.x;
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- poly.js:18:31

Cannot call `Q.bar` with empty string bound to `y` because string [1] is incompatible with number [2].
[incompatible-type]

   poly.js:18:31
   18| var z:Foo<number> = Q.bar(foo,"");
                                     ^^ [1]

References:
   poly.js:16:19
   16| var foo = new Foo(0);
                         ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:8:40

Cannot return `o` because in the return value: mixed [1] is incompatible with `T` [2]. [incompatible-type]

   subtyping.js:8:40
   8|   (o: <T>() => mixed): (<S>() => S) => o; // should error
                                             ^

References:
   subtyping.js:8:16
   8|   (o: <T>() => mixed): (<S>() => S) => o; // should error
                     ^^^^^ [1]
   subtyping.js:8:34
   8|   (o: <T>() => mixed): (<S>() => S) => o; // should error
                                       ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:11:48

Cannot return `o` because in the return value: mixed [1] is incompatible with `T` [2]. [incompatible-type]

   subtyping.js:11:48
   11|     const g = (o: <T>() => A): (<S>() => S) => o; // should error
                                                      ^

References:
   subtyping.js:11:28
   11|     const g = (o: <T>() => A): (<S>() => S) => o; // should error
                                  ^ [1]
   subtyping.js:11:42
   11|     const g = (o: <T>() => A): (<S>() => S) => o; // should error
                                                ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:21:46

Cannot return `f` because in the first parameter: `T` [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:21:46
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                    ^

References:
   subtyping.js:21:11
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                 ^ [1]
   subtyping.js:21:30
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:21:46

Cannot return `f` because in the return value: mixed [1] is incompatible with `T` [2]. [incompatible-type]

   subtyping.js:21:46
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                    ^

References:
   subtyping.js:21:17
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                       ^^^^^ [1]
   subtyping.js:21:40
   21|   (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                              ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:24:58

Cannot return `f` because in the first parameter: `T` [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:24:58
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                                ^

References:
   subtyping.js:24:23
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                             ^ [1]
   subtyping.js:24:42
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:24:58

Cannot return `f` because in the return value: mixed [1] is incompatible with `T` [2]. [incompatible-type]

   subtyping.js:24:58
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                                ^

References:
   subtyping.js:24:29
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                   ^^^^^ [1]
   subtyping.js:24:52
   24|     const g = (f: <T>(T) => mixed): (<S>(mixed) => S) => f; // should error
                                                          ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:37:55

Cannot return `f` because mixed [1] is incompatible with `S` [2]. [incompatible-type]

   subtyping.js:37:55
   37|   const g = (f: <S, T: S>(T) => T): <S, T>(T) => S => f; // should error
                                                             ^

References:
   subtyping.js:37:41
   37|   const g = (f: <S, T: S>(T) => T): <S, T>(T) => S => f; // should error
                                               ^ [1]
   subtyping.js:37:24
   37|   const g = (f: <S, T: S>(T) => T): <S, T>(T) => S => f; // should error
                              ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:49:48

Cannot return `f` because in the first parameter: `T` [1] is incompatible with number [2]. [incompatible-type]

   subtyping.js:49:48
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                                      ^

References:
   subtyping.js:49:11
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                 ^ [1]
   subtyping.js:49:26
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:49:48

Cannot return `f` because in the return value: mixed [1] is incompatible with number [2]. [incompatible-type]

   subtyping.js:49:48
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                                      ^

References:
   subtyping.js:49:17
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                       ^ [1]
   subtyping.js:49:37
   49|   (f: <T>(T) => T): (<S>(number) => number) => f; // should be ok, currently isn't
                                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:57:42

Cannot return `f` because in the first parameter: `T` [1] is incompatible with array type [2]. [incompatible-type]

   subtyping.js:57:42
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                                ^

References:
   subtyping.js:57:11
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                 ^ [1]
   subtyping.js:57:26
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                ^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:57:42

Cannot return `f` because in the return value: mixed [1] is incompatible with array type [2]. [incompatible-type]

   subtyping.js:57:42
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                                ^

References:
   subtyping.js:57:17
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                       ^ [1]
   subtyping.js:57:34
   57|   (f: <T>(T) => T): (<S>(S[]) => S[]) => f; // should be ok, currently isn't
                                        ^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:64:51

Cannot return `f` because in the second parameter: boolean [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:64:51
   64| (f: <R, S>(R, S) => S): (<T>(T, T) => boolean) => f; // error
                                                         ^

References:
   subtyping.js:64:39
   64| (f: <R, S>(R, S) => S): (<T>(T, T) => boolean) => f; // error
                                             ^^^^^^^ [1]
   subtyping.js:64:33
   64| (f: <R, S>(R, S) => S): (<T>(T, T) => boolean) => f; // error
                                       ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:66:49

Cannot return `f` because in the first parameter: `T` [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:66:49
   66| (f: <R>(R, mixed) => R): (<S, T>(S, T) => T) => f; // error
                                                       ^

References:
   subtyping.js:66:43
   66| (f: <R>(R, mixed) => R): (<S, T>(S, T) => T) => f; // error
                                                 ^ [1]
   subtyping.js:66:34
   66| (f: <R>(R, mixed) => R): (<S, T>(S, T) => T) => f; // error
                                        ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:73:51

Cannot return `f` because number [1] is incompatible with string [2]. [incompatible-type]

   subtyping.js:73:51
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                                         ^

References:
   subtyping.js:73:9
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
               ^^^^^^ [1]
   subtyping.js:72:9
   72| (f: <S: string, T: number>() => { a: S, b: T })
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:73:51

Cannot return `f` because string [1] is incompatible with number [2]. [incompatible-type]

   subtyping.js:73:51
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                                         ^

References:
   subtyping.js:73:20
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                          ^^^^^^ [1]
   subtyping.js:72:20
   72| (f: <S: string, T: number>() => { a: S, b: T })
                          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:73:51

Cannot return `f` because in the return value: properties `a` and `b` of `{a: S, b: T}` [1] are not exactly the same as
those of `{a: T, b: S}` [2]. [incompatible-type]

The above-mentioned two types must be the same because properties `a` and `b` are invariantly typed. To fix the error,
- Either make `{a: S, b: T}` [1] and `{a: T, b: S}` [2] exactly the same
- Or make properties `a` and `b` in object type [2] readonly. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.

   subtyping.js:73:51
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                                         ^

References:
   subtyping.js:72:33
   72| (f: <S: string, T: number>() => { a: S, b: T })
                                       ^^^^^^^^^^^^^^ [1]
   subtyping.js:73:33
   73|   : <T: number, S: string>() => { a: S, b: T } => f; // ideally ok, known error
                                       ^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:78:54

Cannot return `f` because in the first parameter: number [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:78:54
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:78:6
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
            ^^^^^^ [1]
   subtyping.js:78:39
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                             ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:78:54

Cannot return `f` because in the second parameter: number [1] is incompatible with mixed [2]. [incompatible-type]

   subtyping.js:78:54
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:78:14
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                    ^^^^^^ [1]
   subtyping.js:78:42
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:78:54

Cannot return `f` because in the return value: number [1] is incompatible with `T` [2]. [incompatible-type]

   subtyping.js:78:54
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                            ^

References:
   subtyping.js:78:25
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                               ^^^^^^ [1]
   subtyping.js:78:48
   78| (f: (number, number) => number): (<T>(T, T) => T) => f; // error
                                                      ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:80:54

Cannot return `f` because in the second parameter: number [1] is incompatible with string [2]. [incompatible-type]

   subtyping.js:80:54
   80| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                                            ^

References:
   subtyping.js:80:43
   80| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                                 ^^^^^^ [1]
   subtyping.js:80:32
   80| (f: <T>(T, T) => T): ((number, string) => number) => f; // error
                                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:8:10

Cannot extend `C` [1] with `D` because in property `foo` > the first parameter: number [2] is incompatible with
mixed [3]. [incompatible-type]

   test.js:8:10
   8|   foo(x: number): number { return x; } // error (specialization, see below)
               ^^^^^^ [2]

References:
   test.js:7:17
   7| class D extends C {
                      ^ [1]
   test.js:2:13
   2|   foo<X>(x: X): X { return x; }
                  ^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:8:19

Cannot extend `C` [1] with `D` because in property `foo` > the return value: number [2] is incompatible with `X` [3].
[incompatible-type]

   test.js:8:19
   8|   foo(x: number): number { return x; } // error (specialization, see below)
                        ^^^^^^ [2]

References:
   test.js:7:17
   7| class D extends C {
                      ^ [1]
   test.js:2:17
   2|   foo<X>(x: X): X { return x; }
                      ^ [3]



Found 36 errors
