Error: annot.js:3
  3: class B extends A { } // OK, same as above
                     ^ polymorphic type: class type: A. Too few type arguments. Expected at least 1
  1: class A<X> { }
             ^ See type parameters of definition here

Error: annot.js:10
 10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                        ^^^^^^^^^^^^^^ type application of class `A`. This type is incompatible with the expected return type of
  9: function bar(): A<*> { // error, * can't be {} and {x: string} at the same time
                     ^^^^ type application of polymorphic type: class type: A
  Type argument `X` is incompatible:
     10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                              ^^^^^^^^^^^ property `x`. Property not found in
     10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                            ^^ object type

Error: implicit_bounded_instantiation.js:19
 19: a.meth(42); // Error: number ~> Middle
            ^^ number. This type is incompatible with
  7: class C<T: Middle> {
                ^^^^^^ Middle

Error: implicit_bounded_instantiation.js:20
 20: a.meth(new Base()); // Error: Base ~> Middle
            ^^^^^^^^^^ Base. This type is incompatible with
  7: class C<T: Middle> {
                ^^^^^^ Middle

Error: phantom.js:7
  7: (a: B); // Error
      ^ type application of T. Has some incompatible type argument with
  7: (a: B); // Error
         ^ type application of T
  Type argument `Phantom` is incompatible:
      3: type A = T<number>;
                    ^^^^^^ number. This type is incompatible with
      4: type B = T<string>;
                    ^^^^^^ string

Error: phantom.js:7
  7: (a: B); // Error
      ^ type application of T. Has some incompatible type argument with
  7: (a: B); // Error
         ^ type application of T
  Type argument `Phantom` is incompatible:
      4: type B = T<string>;
                    ^^^^^^ string. This type is incompatible with
      3: type A = T<number>;
                    ^^^^^^ number

Error: phantom.js:15
 15: (c: D); // Error
      ^ type application of polymorphic type: T. Has some incompatible type argument with
 15: (c: D); // Error
         ^ type application of polymorphic type: T
  Type argument `Phantom` is incompatible:
     11: type C = T<number>;
                    ^^^^^^ number. This type is incompatible with
     12: type D = T<string>;
                    ^^^^^^ string

Error: phantom.js:15
 15: (c: D); // Error
      ^ type application of polymorphic type: T. Has some incompatible type argument with
 15: (c: D); // Error
         ^ type application of polymorphic type: T
  Type argument `Phantom` is incompatible:
     12: type D = T<string>;
                    ^^^^^^ string. This type is incompatible with
     11: type C = T<number>;
                    ^^^^^^ number

Error: poly.js:17
 17: var x:string = foo.x;
                    ^^^^^ number. This type is incompatible with
 17: var x:string = foo.x;
           ^^^^^^ string

Error: poly.js:18
 18: var z:Foo<number> = Q.bar(foo,"");
                         ^^^^^^^^^^^^^ type application of class `Foo`. Has some incompatible type argument with
 18: var z:Foo<number> = Q.bar(foo,"");
           ^^^^^^^^^^^ type application of polymorphic type: class type: Foo
  Type argument `T` is incompatible:
     18: var z:Foo<number> = Q.bar(foo,"");
                                       ^^ string. This type is incompatible with
     18: var z:Foo<number> = Q.bar(foo,"");
                   ^^^^^^ number

Error: test.js:8
  8:   foo(x: number): number { return x; } // error (specialization, see below)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  2:   foo<X>(x: X): X { return x; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function
  This parameter is incompatible:
      2:   foo<X>(x: X): X { return x; }
               ^ X. This type is incompatible with
      8:   foo(x: number): number { return x; } // error (specialization, see below)
                  ^^^^^^ number

Error: test.js:8
  8:   foo(x: number): number { return x; } // error (specialization, see below)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  2:   foo<X>(x: X): X { return x; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function
  This parameter is incompatible:
      8:   foo(x: number): number { return x; } // error (specialization, see below)
                           ^^^^^^ number. This type is incompatible with
      8:   foo(x: number): number { return x; } // error (specialization, see below)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ some incompatible instantiation of `X`


Found 12 errors
