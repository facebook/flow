Error ---------------------------------------------------------------------------------------------------- annot.js:3:17

Cannot use `A` [1] with fewer than 1 type argument.

   annot.js:3:17
   3| class B extends A { } // OK, same as above
                      ^

References:
   annot.js:1:8
   1| class A<X> { }
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- annot.js:10:10

Cannot return `new A() || new A()` because property `x` is missing in object type [1] but exists in object type [2] in
type argument `X` [3].

   annot.js:10:10
   10|   return (new A: A<{}>) || (new A: A<{x: string}>);
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   annot.js:10:20
   10|   return (new A: A<{}>) || (new A: A<{x: string}>);
                          ^^ [1]
   annot.js:10:38
   10|   return (new A: A<{}>) || (new A: A<{x: string}>);
                                            ^^^^^^^^^^^ [2]
   annot.js:1:9
    1| class A<X> { }
               ^ [3]


Error ---------------------------------------------------------------------------------------------------- annot2.js:3:2

Cannot cast `f(...)(...)` to number because `T` [1] is incompatible with number [2].

   annot2.js:3:2
   3| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
       ^^^^^^^

References:
   annot1.js:1:35
   1| export const f = <T>(x: T) => (y: T) => y;
                                        ^ [1]
   annot2.js:3:11
   3| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- annot2.js:3:7

Cannot call `f(...)` with `1` bound to `y` because number [1] is incompatible with `T` [2].

   annot2.js:3:7
   3| (f(0)(1): number); // errors: number ~> T (empty), T (mixed) ~> number
            ^ [1]

References:
   annot1.js:1:35
   1| export const f = <T>(x: T) => (y: T) => y;
                                        ^ [2]


Error ----------------------------------------------------------------------------------------------------- error.js:8:8

Cannot call `newFn1` with `'string'` bound to the first parameter because string [1] is incompatible with number [2].

   error.js:8:8
   8| newFn1('string'); // The error should point here.
             ^^^^^^^^ [1]

References:
   error.js:7:24
   7| const newFn1 = fn1((x: number) => {});
                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- error.js:11:20

Cannot call `fn2` with `42` bound to `x` because number [1] is incompatible with string [2].

   error.js:11:20
   11| const newFn2 = fn2(42);
                          ^^ [1]

References:
   error.js:12:12
   12| newFn2((x: string) => {});
                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- error.js:15:5

Cannot call `fn3` with `42` bound to `x` because number [1] is incompatible with string [2].

   error.js:15:5
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
           ^^ [1]

References:
   error.js:15:13
   15| fn3(42, (x: string) => {}); // The error should point to 42 and not string.
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- error.js:20:2

Cannot cast `newVal4` to string because number [1] is incompatible with string [2].

   error.js:20:2
   20| (newVal4: string); // The error should point here.
        ^^^^^^^

References:
   error.js:19:8
   19| newFn4(42);
              ^^ [1]
   error.js:20:11
   20| (newVal4: string); // The error should point here.
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:15:8

Cannot instantiate `C` because:
 - number [1] is incompatible with `Middle` [2] in type argument `T`.
 - `Base` [3] is incompatible with `Middle` [2] in type argument `T`.

   implicit_bounded_instantiation.js:15:8
   15| var a: C<*> = new C();
              ^^^^

References:
   implicit_bounded_instantiation.js:19:8
   19| a.meth(42); // Error: number ~> Middle
              ^^ [1]
   implicit_bounded_instantiation.js:7:12
    7| class C<T: Middle> {
                  ^^^^^^ [2]
   implicit_bounded_instantiation.js:20:8
   20| a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:19:8

Cannot call `a.meth` with `42` bound to `a` because number [1] is incompatible with `Middle` [2].

   implicit_bounded_instantiation.js:19:8
   19| a.meth(42); // Error: number ~> Middle
              ^^ [1]

References:
   implicit_bounded_instantiation.js:7:12
    7| class C<T: Middle> {
                  ^^^^^^ [2]


Error --------------------------------------------------------------------------- implicit_bounded_instantiation.js:20:8

Cannot call `a.meth` with `new Base()` bound to `a` because `Base` [1] is incompatible with `Middle` [2].

   implicit_bounded_instantiation.js:20:8
   20| a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]

References:
   implicit_bounded_instantiation.js:7:12
    7| class C<T: Middle> {
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- inout.js:7:2

Cannot cast `x` to `C` because `B` [1] is incompatible with `A` [2] in type argument `In` [3].

   inout.js:7:2
   7| (x: C<A>); // error: A ~> B in default-expanded type
       ^

References:
   inout.js:6:18
   6| declare var x: C<B>;
                       ^ [1]
   inout.js:7:7
   7| (x: C<A>); // error: A ~> B in default-expanded type
            ^ [2]
   inout.js:4:16
   4| class C<+Out, -In: Out = Out> {}
                     ^^ [3]


Error --------------------------------------------------------------------------------------------------- phantom.js:7:2

Cannot cast `a` to `B` because number [1] is incompatible with string [2] in type argument `Phantom` [3].

   phantom.js:7:2
   7| (a: B); // Error
       ^

References:
   phantom.js:3:12
   3| type A = T<number>;
                 ^^^^^^ [1]
   phantom.js:4:12
   4| type B = T<string>;
                 ^^^^^^ [2]
   phantom.js:9:8
   9| type T<Phantom> = any;
             ^^^^^^^ [3]


Error -------------------------------------------------------------------------------------------------- phantom.js:15:2

Cannot cast `c` to `D` because number [1] is incompatible with string [2] in type argument `Phantom` [3].

   phantom.js:15:2
   15| (c: D); // Error
        ^

References:
   phantom.js:11:12
   11| type C = T<number>;
                  ^^^^^^ [1]
   phantom.js:12:12
   12| type D = T<string>;
                  ^^^^^^ [2]
   phantom.js:9:8
    9| type T<Phantom> = any;
              ^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- poly.js:17:16

Cannot assign `foo.x` to `x` because:
 - number [1] is incompatible with string [2].
 - number [3] is incompatible with string [2].

   poly.js:17:16
   17| var x:string = foo.x;
                      ^^^^^

References:
   poly.js:16:19
   16| var foo = new Foo(0);
                         ^ [1]
   poly.js:17:7
   17| var x:string = foo.x;
             ^^^^^^ [2]
   poly.js:18:11
   18| var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- poly.js:18:21

Cannot assign `Q.bar(...)` to `z` because string [1] is incompatible with number [2] in type argument `T` [3].

   poly.js:18:21
   18| var z:Foo<number> = Q.bar(foo,"");
                           ^^^^^^^^^^^^^

References:
   poly.js:18:31
   18| var z:Foo<number> = Q.bar(foo,"");
                                     ^^ [1]
   poly.js:18:11
   18| var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [2]
   poly.js:1:11
    1| class Foo<T> {
                 ^ [3]


Error ------------------------------------------------------------------------------------------------------ test.js:7:1

Cannot extend `C` [1] with `D` because:
 - number [2] is incompatible with `X` [3] in the first argument of property `foo`.
 - number [4] is incompatible with `X` [5] in the return value of property `foo`.

   test.js:7:1
       v------------------
    7| class D extends C {
    8|   foo(x: number): number { return x; } // error (specialization, see below)
    9|   foo_(x: number): number { return x; } // OK, but only because the overridden foo accepts no more than number and returns exactly number
   10|   bar<X>(x: X): X { return x; } // OK
   11|   qux<X>(x: X): X { return x; } // OK (generalization)
   12| }
       ^

References:
   test.js:7:17
    7| class D extends C {
                       ^ [1]
   test.js:8:10
    8|   foo(x: number): number { return x; } // error (specialization, see below)
                ^^^^^^ [2]
   test.js:2:13
    2|   foo<X>(x: X): X { return x; }
                   ^ [3]
   test.js:8:19
    8|   foo(x: number): number { return x; } // error (specialization, see below)
                         ^^^^^^ [4]
   test.js:2:17
    2|   foo<X>(x: X): X { return x; }
                       ^ [5]



Found 20 errors
