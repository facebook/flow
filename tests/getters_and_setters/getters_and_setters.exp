Error: class.js:11
 11:   set goodSetterNoAnnotation(x) { z = x; } // TODO: bad error position
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

Error: class.js:34
 34:   set [z](x: string) {}
       ^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

Error: class.js:35
 35:   get [z](): string { return string; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

Error: class.js:44
 44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

Error: class.js:45
 45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

Error: class.js:53
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

Error: class.js:55
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null or undefined. This type is incompatible with
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

Error: class.js:57
 57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                      ^^^^^^ number

Error: class.js:58
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ number. This type is incompatible with
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: declare_class.js:37
 37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

Error: declare_class.js:42
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

Error: declare_class.js:44
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null or undefined. This type is incompatible with
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

Error: declare_class.js:46
 46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                      ^^^^^^ number

Error: declare_class.js:47
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ number. This type is incompatible with
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: object.js:15
 15:   set goodSetterNoAnnotation(x) { z = x; },
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

Error: object.js:34
 34:   set [z](x: string) {},
       ^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

Error: object.js:35
 35:   get [z](): string { return string; },
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

Error: object.js:47
 47: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 47: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

Error: object.js:48
 48: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 48: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

Error: object.js:55
 55: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 55: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

Error: object.js:57
 57: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null or undefined. This type is incompatible with
 57: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

Error: object.js:62
 62: obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                           ^^^^^^^ C. This type is incompatible with
 62: obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B

Error: object.js:66
 66:   obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 65: var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                       ^^^^^^ number

Error: object.js:68
 68: (obj["stringLiteral"]: string); // err, num !~> string
      ^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 68: (obj["stringLiteral"]: string); // err, num !~> string
                            ^^^^^^ string

Error: object.js:69
 69: obj["stringLiteral"] = "foo"; // err, string !~> num
                            ^^^^^ string. This type is incompatible with
 69: obj["stringLiteral"] = "foo"; // err, string !~> num
     ^^^^^^^^^^^^^^^^^^^^ number

Error: object_type.js:36
 36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ string

Error: object_type.js:41
 41:   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ string. This type is incompatible with
 41:   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

Error: object_type.js:43
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null or undefined. This type is incompatible with
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ number

Error: object_type.js:48
 48:   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                             ^^^^^^^ C. This type is incompatible with
 48:   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B

Error: object_type.js:52
 52:     obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 51:   var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                         ^^^^^^ number

Error: react.js:15
 15: (<Example />); // error: property `a` not found
      ^^^^^^^^^^^ props. This type is incompatible with
                  v
  8:   propTypes: {
  9:     get a() { return React.PropTypes.number.isRequired; },
 10:     set b(x: number) { this.c = x; },
 11:     c: React.PropTypes.string,
 12:   }
       ^ propTypes of React component
  Property `a` is incompatible:
                      v
      8:   propTypes: {
      9:     get a() { return React.PropTypes.number.isRequired; },
     10:     set b(x: number) { this.c = x; },
     11:     c: React.PropTypes.string,
     12:   }
           ^ property `a`. Property not found in
     15: (<Example />); // error: property `a` not found
          ^^^^^^^^^^^ props

Error: react.js:17
 17: (<Example a="bad" />); // error: number ~> string
      ^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
                  v
  8:   propTypes: {
  9:     get a() { return React.PropTypes.number.isRequired; },
 10:     set b(x: number) { this.c = x; },
 11:     c: React.PropTypes.string,
 12:   }
       ^ propTypes of React component
  Property `a` is incompatible:
     17: (<Example a="bad" />); // error: number ~> string
                     ^^^^^ string. This type is incompatible with
      9:     get a() { return React.PropTypes.number.isRequired; },
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number

Error: react.js:18
 18: (<Example a={0} c={0} />); // error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
                  v
  8:   propTypes: {
  9:     get a() { return React.PropTypes.number.isRequired; },
 10:     set b(x: number) { this.c = x; },
 11:     c: React.PropTypes.string,
 12:   }
       ^ propTypes of React component
  Property `c` is incompatible:
     18: (<Example a={0} c={0} />); // error: number ~> string
                            ^ number. This type is incompatible with
     11:     c: React.PropTypes.string,
                ^^^^^^^^^^^^^^^^^^^^^^ string

Error: variance.js:21
      v-------------------
 21: (class extends Base {
 22:   // error: getter incompatible with read/write property
 23:   get x(): B { return b }
 24: });
     ^ `<<anonymous class>>`. Cannot extend
 21: (class extends Base {
                    ^^^^ Base
  Property `x` is incompatible:
          v-------------------
     21: (class extends Base {
     22:   // error: getter incompatible with read/write property
     23:   get x(): B { return b }
     24: });
         ^ `<<anonymous class>>`. Covariant property `x` incompatible with invariant use in
     21: (class extends Base {
                        ^^^^ Base

Error: variance.js:26
      v-------------------
 26: (class extends Base {
 27:   // error: setter incompatible with read/write property
 28:   set x(value: B): void {}
 29: });
     ^ `<<anonymous class>>`. Cannot extend
 26: (class extends Base {
                    ^^^^ Base
  Property `x` is incompatible:
          v-------------------
     26: (class extends Base {
     27:   // error: setter incompatible with read/write property
     28:   set x(value: B): void {}
     29: });
         ^ `<<anonymous class>>`. Contravariant property `x` incompatible with invariant use in
     26: (class extends Base {
                        ^^^^ Base

Error: variance.js:37
      v-------------------
 37: (class extends Base {
 38:   // error: setter incompatible with read-only property
 39:   set pos(value: B): void {}
 40: });
     ^ `<<anonymous class>>`. Cannot extend
 37: (class extends Base {
                    ^^^^ Base
  Property `pos` is incompatible:
          v-------------------
     37: (class extends Base {
     38:   // error: setter incompatible with read-only property
     39:   set pos(value: B): void {}
     40: });
         ^ `<<anonymous class>>`. Contravariant property `pos` incompatible with covariant use in
     37: (class extends Base {
                        ^^^^ Base

Error: variance.js:47
      v-------------------
 47: (class extends Base {
 48:   // error: getter incompatible with write-only property
 49:   get neg(): B { return b }
 50: });
     ^ `<<anonymous class>>`. Cannot extend
 47: (class extends Base {
                    ^^^^ Base
  Property `neg` is incompatible:
          v-------------------
     47: (class extends Base {
     48:   // error: getter incompatible with write-only property
     49:   get neg(): B { return b }
     50: });
         ^ `<<anonymous class>>`. Covariant property `neg` incompatible with contravariant use in
     47: (class extends Base {
                        ^^^^ Base


Found 37 errors
