Error ------------------------------------------------------------------------------------------------------- dro.js:2:5

Cannot assign `42` to `a.x.y` because property `y` is not writable. [cannot-write]

   2| a.x.y = 42; // error
          ^


Error ------------------------------------------------------------------------------------------------------- dro.js:3:3

Cannot assign `42` to `a.x` because property `x` is not writable. [cannot-write]

   3| a.x = 42; // error
        ^


Error ------------------------------------------------------------------------------------------------------ dro.js:10:2

Cannot cast `v` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   dro.js:10:2
   10| (v: empty); //error
        ^

References:
   dro.js:5:71
    5| declare const x: $ReactDeepReadOnly<{x: {a: number}, y: Array<{w: {v: number}}>}>;
                                                                             ^^^^^^ [1]
   dro.js:10:5
   10| (v: empty); //error
           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ dro.js:11:3

Cannot assign `0` to `w.v` because property `v` is not writable. [cannot-write]

   11| w.v = 0; // error
         ^


Error ------------------------------------------------------------------------------------------------------ dro.js:12:5

Cannot assign `42` to `x.x.a` because property `a` is not writable. [cannot-write]

   12| x.x.a = 42; // error
           ^


Error ------------------------------------------------------------------------------------------------------ dro.js:13:5

Cannot assign array literal to `x.x.y` because property `y` is not writable. [cannot-write]

   13| x.x.y = []; // error
           ^


Error ------------------------------------------------------------------------------------------------------ dro.js:14:3

Cannot assign `42` to `x.x` because property `x` is not writable. [cannot-write]

   14| x.x = (42: any);
         ^


Error ------------------------------------------------------------------------------------------------------ dro.js:22:6

Cannot assign `42` to `w2.a.b` because property `b` is not writable. [cannot-write]

   22| w2.a.b = 42; // error
            ^


Error ------------------------------------------------------------------------------------------------------ dro.js:27:7

Cannot assign `42` to `v2[1].a` because property `a` is not writable. [cannot-write]

   27| v2[1].a = 42; //error
             ^


Error ------------------------------------------------------------------------------------------------------ dro.js:32:7

Cannot assign `42` to `x.y` because property `y` is not writable. React component properties [1] and their nested props
and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:32:7
   32|     x.y = 42 // error;
             ^

References:
   dro.js:31:16
   31| component Foo1(x: { y: number}) {
                      ^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- dro.js:36:10

Cannot assign `42` to `rest.bar` because property `bar` is not writable. React component properties [1] and their nested
props and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:36:10
   36|     rest.bar = 42; // error;
                ^^^

References:
   dro.js:35:19
   35| component Foo2(...rest: {bar: number, baz: Array<string>, qux:[number, Array<string>]}) {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:37:5

Cannot call `rest.baz.push` because property `push` is not readable. React component properties [1] and their nested
props and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:37:5
   37|     rest.baz.push("hello"); // error
           ^^^^^^^^^^^^^

References:
   dro.js:35:19
   35| component Foo2(...rest: {bar: number, baz: Array<string>, qux:[number, Array<string>]}) {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:38:5

Cannot assign `42` to `rest.qux[0]` because read-only arrays cannot be written to. React component properties [1] and
their nested props and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:38:5
   38|     rest.qux[0] = 42; // error
           ^^^^^^^^^^^

References:
   dro.js:35:19
   35| component Foo2(...rest: {bar: number, baz: Array<string>, qux:[number, Array<string>]}) {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:39:5

Cannot call `rest.qux[1].pop` because property `pop` is not readable. React component properties [1] and their nested
props and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:39:5
   39|     rest.qux[1].pop(); // error
           ^^^^^^^^^^^^^^^

References:
   dro.js:35:19
   35| component Foo2(...rest: {bar: number, baz: Array<string>, qux:[number, Array<string>]}) {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:56:9

Cannot assign `0` to `obj.prop` because property `prop` is not writable. React component properties [1] and their nested
props and elements cannot be written to. [react-rule-unsafe-mutation]

   dro.js:56:9
   56|     obj.prop = 0; // error
               ^^^^

References:
   dro.js:49:5
           v------
   49|     data: {
   50|       [key: Union]: {
   51|         prop?: number,
   52|       },
   53|     },
           ^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:61:1

Cannot call `droset.add` because property `add` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:61:1
   61| droset.add(new Set()); // error
       ^^^^^^^^^^

References:
   dro.js:60:23
   60| declare const droset: React$Immutable<Set<Set<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:62:1

Cannot call `droset.add` because property `add` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:62:1
   62| droset.add((42: any)); // error
       ^^^^^^^^^^

References:
   dro.js:60:23
   60| declare const droset: React$Immutable<Set<Set<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- dro.js:63:21

Cannot call `x.add` because property `add` is not readable. Values annotated using `React.Immutable` [1] are managed by
the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:63:21
   63| droset.forEach(x => x.add(42)) // error
                           ^^^^^

References:
   dro.js:60:23
   60| declare const droset: React$Immutable<Set<Set<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:68:1

Cannot call `dromap.set` because property `set` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:68:1
   68| dromap.set({x: 42}, new Map()); // error
       ^^^^^^^^^^

References:
   dro.js:67:23
   67| declare const dromap: React$Immutable<Map<{x: number}, Map<{y: number}, number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:69:1

Cannot call `dromap.set` because property `set` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:69:1
   69| dromap.set({x: 42}, (42: any)); // error
       ^^^^^^^^^^

References:
   dro.js:67:23
   67| declare const dromap: React$Immutable<Map<{x: number}, Map<{y: number}, number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:71:7

Cannot assign `42` to `key.x` because property `x` is not writable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:71:7
   71|   key.x = 42; // error
             ^

References:
   dro.js:67:23
   67| declare const dromap: React$Immutable<Map<{x: number}, Map<{y: number}, number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:72:3

Cannot call `val.set` because property `set` is not readable. Values annotated using `React.Immutable` [1] are managed
by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:72:3
   72|   val.set({y: 420}, 42) // error
         ^^^^^^^

References:
   dro.js:67:23
   67| declare const dromap: React$Immutable<Map<{x: number}, Map<{y: number}, number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- dro.js:80:10

Cannot assign `42` to `drc.prop.x` because property `x` is not writable. Values annotated using `React.Immutable` [1]
are managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:80:10
   80| drc.prop.x = 42 // error;
                ^

References:
   dro.js:79:20
   79| declare const drc: React$Immutable<CoolClass>;
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:81:5

Cannot assign object literal to `drc.prop` because property `prop` is not writable. Values annotated using
`React.Immutable` [1] are managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:81:5
   81| drc.prop = {x: 42}; // error;
           ^^^^

References:
   dro.js:79:20
   79| declare const drc: React$Immutable<CoolClass>;
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:84:1

Cannot call `droarr.push` because property `push` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:84:1
   84| droarr.push([]); // error
       ^^^^^^^^^^^

References:
   dro.js:83:23
   83| declare const droarr: React$Immutable<Array<Array<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:85:1

Cannot call `droarr[0].push` because property `push` is not readable. Values annotated using `React.Immutable` [1] are
managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:85:1
   85| droarr[0].push(42); // error
       ^^^^^^^^^^^^^^

References:
   dro.js:83:23
   83| declare const droarr: React$Immutable<Array<Array<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ dro.js:86:1

Cannot call `droarr.at(...)?.push` because property `push` is not readable. Values annotated using `React.Immutable` [1]
are managed by the React runtime and cannot be mutated. [react-rule-unsafe-mutation]

   dro.js:86:1
   86| droarr.at(0)?.push(42) // error;
       ^^^^^^^^^^^^^^^^^^

References:
   dro.js:83:23
   83| declare const droarr: React$Immutable<Array<Array<number>>>;
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------- error.invalid-access-ref-during-render.js:8:17

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   8|   const value = ref.current; // Error
                      ^^^ [1]


Error ----------------------------------------------------------------------- error.invalid-pass-ref-to-function.js:8:17

Cannot pass `ref` [1] as an argument because `ref` values may not be passed to functions because they could read the ref
value (`current`) property) during render. (https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   8|   const x = foo(ref); // Error
                      ^^^ [1]


Error ------------------------------------------------------------------------- error.invalid-ref-value-as-props.js:8:20

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   8|   return <Foo ref={ref.current} />; // Error
                         ^^^ [1]


Error -------------------------------------------------------------- error.invalid-set-and-read-ref-during-render.js:6:3

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   6|   ref.current = value; // Error
        ^^^ [1]


Error ------------------------------------------------------------- error.invalid-set-and-read-ref-during-render.js:7:10

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   7|   return ref.current; // Error
               ^^^ [1]


Error ---------------------------------------------------- error.invalid-use-ref-added-to-dep-without-type-info.js:14:23

Cannot read `current` from expression [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   14|   const x = { a, val: val.ref.current }; // Error
                             ^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- exception_for_init.js:9:3

Cannot read `current` from `ref1` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   9|   ref1.current; // error
        ^^^^ [1]


Error --------------------------------------------------------------------------------------- exception_for_init.js:13:5

Cannot read `current` from `ref2` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   13|     ref2.current; // error
           ^^^^ [1]


Error --------------------------------------------------------------------------------------- exception_for_init.js:23:5

Cannot read `current` from `ref4` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   23|     ref4.current = 42; // error
           ^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- nested.js:5:5

Cannot read `current` from `ref` [1] because `ref` values may not be read within hooks.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   5|     ref.current = 42; // error
          ^^^ [1]


Error -------------------------------------------------------------------------------------------------- nested.js:17:13

Cannot pass `ref` [1] as an argument because `ref` values may not be passed to functions because they could read the ref
value (`current`) property) during render. (https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   17|     takeRef(ref); // error
                   ^^^ [1]


Error --------------------------------------------------------------------------------------------------- nested.js:19:9

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   19|         ref.current = 42; // error, triggeted by boom()
               ^^^ [1]


Error -------------------------------------------------------------------------------------------------- nested.js:29:21

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   29|     useMemo(() => { ref.current = 42; }, []); // error
                           ^^^ [1]


Error --------------------------------------------------------------------------------------------------- nested.js:32:9

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   32|         ref.current = 42; // error, triggeted by nestedBoomOuter()
               ^^^ [1]


Error -------------------------------------------------------------------------------------------------- nested.js:45:41

Cannot read `current` from `ref` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   45|     const cb_boom = useCallback(() => { ref.current = 42; }, []); // error
                                               ^^^ [1]


Error ---------------------------------------------------------------------------------------------- pass_to_hook.js:4:5

Cannot read `current` from `ref` [1] because `ref` values may not be read within hooks.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   4|     ref.current; // error
          ^^^ [1]


Error ----------------------------------------------------------------------------------- ref_read_different_type.js:2:5

Cannot read `current` from `otherRef` [1] because `ref` values may not be read during render.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   2|     otherRef.current; // error
          ^^^^^^^^ [1]



Found 44 errors
