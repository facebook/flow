Error ----------------------------------------------------------------------------------------------------- dict.js:9:10

Cannot determine a type for object literal [1]. object type [2] cannot be spread because the indexer string [3] may
overwrite properties with explicit keys in a way that Flow cannot track. Can you spread object type [2] first or remove
the indexer?

   dict.js:9:10
    9|       ...map // Error, can't spread indexer second
                ^^^

References:
   dict.js:7:5
           v
    7|     {
    8|       first,
    9|       ...map // Error, can't spread indexer second
   10|     },
           ^ [1]
   dict.js:3:19
    3| function foo(map: { [key: string]: mixed }) {
                         ^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   dict.js:3:27
    3| function foo(map: { [key: string]: mixed }) {
                                 ^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- exact.js:14:35

Cannot assign object literal to `spread_inexact_first` because inexact object literal [1] is incompatible with exact
`Foo` [2].

   exact.js:14:35
   14| const spread_inexact_first: Foo = {...foo_inexact, ...other}; // not OK
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   exact.js:14:29
   14| const spread_inexact_first: Foo = {...foo_inexact, ...other}; // not OK
                                   ^^^ [2]


Error --------------------------------------------------------------------------------------------------- exact.js:15:50

Cannot determine a type for object literal [1]. object type [2] is inexact, so it may contain `bar` with a type that
conflicts with `bar`'s definition in object literal [3]. Can you make object type [2] exact?

   exact.js:15:50
   15| const spread_inexact_second: Foo = {...other, ...foo_inexact}; // not OK
                                                        ^^^^^^^^^^^

References:
   exact.js:15:36
   15| const spread_inexact_second: Foo = {...other, ...foo_inexact}; // not OK
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   exact.js:13:20
   13| const foo_inexact: { baz: number } = { bar: 42, baz: 123 };
                          ^^^^^^^^^^^^^^^ [2]
   exact.js:9:15
    9| const other = {bar: 'wat'}
                     ^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------------ null.js:6:4

Cannot get `empty.x` because property `x` is missing in object literal [1].

   null.js:6:4
   6|   (empty.x); // Error
         ^^^^^^^

References:
   null.js:5:17
   5|   const empty = {...bar};
                      ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test10.js:3:2

Cannot cast `o.p` to empty because number [1] is incompatible with empty [2].

   test10.js:3:2
   3| (o.p: empty); // error: number ~> empty
       ^^^

References:
   test10.js:2:14
   2| var o = { p: 0, ...x };
                   ^ [1]
   test10.js:3:7
   3| (o.p: empty); // error: number ~> empty
            ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test3.js:8:17

Cannot assign `o.y` to `y` because string [1] is incompatible with number [2].

   test3.js:8:17
   8| var y: number = o.y; // Error string ~> number
                      ^^^

References:
   test3.js:1:14
   1| var p = { y: "" };
                   ^^ [1]
   test3.js:8:8
   8| var y: number = o.y; // Error string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test3.js:9:17

Cannot assign `o.z` to `z` because string [1] is incompatible with number [2].

   test3.js:9:17
   9| var z: number = o.z; // Error string ~> number
                      ^^^

References:
   test3.js:2:14
   2| var q = { z: "" };
                   ^^ [1]
   test3.js:9:8
   9| var z: number = o.z; // Error string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test6.js:10:2

Cannot cast `p` to object type because property `abc` is missing in object literal [1] but exists in object type [2].

   test6.js:10:2
   10| (p: {foo: string; abc: string}); // error, p doesn't have `abc` yet
        ^

References:
   test6.js:7:9
               v
    7| var p = {
    8|   foo: 'bar'
    9| };
       ^ [1]
   test6.js:10:5
   10| (p: {foo: string; abc: string}); // error, p doesn't have `abc` yet
           ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test8.js:7:2

Cannot cast object literal to object type because string [1] is incompatible with number [2] in property `q`.

   test8.js:7:2
    7| ({ ...o }: { p: number, q: number }); // error: string ~> number (prop q)
        ^^^^^^^^

References:
   test8.js:12:15
   12| type B = { q: string };
                     ^^^^^^ [1]
   test8.js:7:28
    7| ({ ...o }: { p: number, q: number }); // error: string ~> number (prop q)
                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test8.js:8:2

Cannot cast object literal to object type because number [1] is incompatible with string [2] in property `p`.

   test8.js:8:2
    8| ({ ...o }: { p: string, q: string }); // error: number ~> string (prop p)
        ^^^^^^^^

References:
   test8.js:11:15
   11| type A = { p: number };
                     ^^^^^^ [1]
   test8.js:8:17
    8| ({ ...o }: { p: string, q: string }); // error: number ~> string (prop p)
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test9.js:5:7

Cannot determine a type for object literal [1]. `I_call` [2] cannot be spread because interfaces do not track the
own-ness of their properties. Can you use an object type instead?

   test9.js:5:7
   5| ({ ...o_call }: { "$call": any }); // error: interfaces cannot be spread 
            ^^^^^^

References:
   test9.js:5:2
   5| ({ ...o_call }: { "$call": any }); // error: interfaces cannot be spread 
       ^^^^^^^^^^^^^ [1]
   test9.js:4:21
   4| declare var o_call: I_call;
                          ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:11:7

Cannot determine a type for object literal [1]. `I_index` [2] cannot be spread because interfaces do not track the
own-ness of their properties. Can you use an object type instead?

   test9.js:11:7
   11| ({ ...o_index }: { "$key": any }); // error: interfaces cannot be spread 
             ^^^^^^^

References:
   test9.js:11:2
   11| ({ ...o_index }: { "$key": any }); // error: interfaces cannot be spread 
        ^^^^^^^^^^^^^^ [1]
   test9.js:10:22
   10| declare var o_index: I_index;
                            ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:12:7

Cannot determine a type for object literal [1]. `I_index` [2] cannot be spread because interfaces do not track the
own-ness of their properties. Can you use an object type instead?

   test9.js:12:7
   12| ({ ...o_index }: { "$value": any }); // error: interfaces cannot be spread 
             ^^^^^^^

References:
   test9.js:12:2
   12| ({ ...o_index }: { "$value": any }); // error: interfaces cannot be spread 
        ^^^^^^^^^^^^^^ [1]
   test9.js:10:22
   10| declare var o_index: I_index;
                            ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- unsealed.js:6:10

Cannot return `o` because inexact object literal [1] is incompatible with exact object type [2].

   unsealed.js:6:10
   6|   return o; // error, unsealed implies inexact
               ^

References:
   unsealed.js:4:11
   4|   var o = {};
                ^^ [1]
   unsealed.js:3:25
   3| function foo1(b: bool): {| x?: number |} {
                              ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- unsealed.js:25:4

Cannot cast `b2.x` to string because number [1] is incompatible with string [2].

   unsealed.js:25:4
   25|   (b2.x: string); // expected error: number ~/~> string
          ^^^^

References:
   unsealed.js:16:18
   16|   const a = { x: 42 };
                        ^^ [1]
   unsealed.js:25:10
   25|   (b2.x: string); // expected error: number ~/~> string
                ^^^^^^ [2]



Found 15 errors
