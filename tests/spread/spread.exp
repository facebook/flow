Error ------------------------------------------------------------------------------------------------------ dict.js:5:5

Cannot spread object literal because Flow cannot determine a type for object literal [1]. object type [2] cannot be
spread because the indexer string [3] may overwrite properties with explicit keys in a way that Flow cannot track. Try
spreading object type [2] first or remove the indexer. [cannot-spread-indexer]

   dict.js:5:5
          v
   5|     {
   6|       first,
   7|       ...map // Error, can't spread indexer second
   8|     },
          ^ [1]

References:
   dict.js:1:19
   1| function foo(map: { [key: string]: mixed }) {
                        ^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   dict.js:1:27
   1| function foo(map: { [key: string]: mixed }) {
                                ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------ error_positions.js:11:6

Cannot call `bar` because Flow cannot determine a type for object type [1]. object type [2] is inexact, so it may
contain `m` with a type that conflicts with `m`'s definition in object type [1]. Try making object type [2] exact.
[cannot-spread-inexact]

   error_positions.js:11:6
   11| (foo(bar(C)): F<typeof C>); // error on call
            ^^^

References:
   error_positions.js:7:45
    7| declare function bar<P>(React$ComponentType<{ m: number, ...P}>): React$ComponentType<P>;
                                                   ^^^^^^^^^^^^^^^^^^ [1]
   error_positions.js:9:33
    9| class C extends React.Component<{}> {}
                                       ^^ [2]


Error ------------------------------------------------------------------------------------------ error_positions.js:11:6

Cannot call `foo` with `bar(...)` bound to the first parameter because `React.ComponentType` [1] is incompatible with
class `C` [2]. [incompatible-call]

   error_positions.js:11:6
   11| (foo(bar(C)): F<typeof C>); // error on call
            ^^^^^^

References:
   error_positions.js:7:67
    7| declare function bar<P>(React$ComponentType<{ m: number, ...P}>): React$ComponentType<P>;
                                                                         ^^^^^^^^^^^^^^^^^^^^^^ [1]
   error_positions.js:11:17
   11| (foo(bar(C)): F<typeof C>); // error on call
                       ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ error_positions.js:16:1

Cannot call `spread` because Flow cannot determine a type for object type [1]. object type [2] is inexact, so it may
contain `foo` with a type that conflicts with `foo`'s definition in object type [3]. Try making object type [2] exact.
[cannot-spread-inexact]

   error_positions.js:16:1
   16| spread(inexact); // error on call
       ^^^^^^

References:
   error_positions.js:13:39
   13| declare function spread<T: {}>(x: T): {...T, ...{}}; // error should not appear here
                                             ^^^^^^^^^^^^^ [1]
   error_positions.js:13:49
   13| declare function spread<T: {}>(x: T): {...T, ...{}}; // error should not appear here
                                                       ^^ [2]
   error_positions.js:15:22
   15| declare var inexact: {foo: number};
                            ^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- exact.js:12:35

Cannot assign object literal to `spread_inexact_first` because inexact object literal [1] is incompatible with exact
`Foo` [2]. [incompatible-exact]

   exact.js:12:35
   12| const spread_inexact_first: Foo = {...foo_inexact, ...other}; // not OK
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   exact.js:12:29
   12| const spread_inexact_first: Foo = {...foo_inexact, ...other}; // not OK
                                   ^^^ [2]


Error --------------------------------------------------------------------------------------------------- exact.js:13:36

Cannot spread object literal because Flow cannot determine a type for object literal [1]. object type [2] is inexact, so
it may contain `bar` with a type that conflicts with `bar`'s definition in object literal [3]. Try making object
type [2] exact. [cannot-spread-inexact]

   exact.js:13:36
   13| const spread_inexact_second: Foo = {...other, ...foo_inexact}; // not OK
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   exact.js:11:20
   11| const foo_inexact: { baz: number } = { bar: 42, baz: 123 };
                          ^^^^^^^^^^^^^^^ [2]
   exact.js:7:15
    7| const other = {bar: 'wat'}
                     ^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- nested_unions.js:7:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. object type [2] is inexact, so
it may contain `a` with a type that conflicts with `a`'s definition in object type [3]. Try making object type [2]
exact. [cannot-spread-inexact]

   nested_unions.js:7:2
   7| ({...OBJ, ...works1}); // error: cannot-spread-inexact
       ^^^^^^^^^^^^^^^^^^^ [1]

References:
   nested_unions.js:3:21
   3| declare var works1: {...} | void;
                          ^^^^^ [2]
   nested_unions.js:1:18
   1| declare var OBJ: {a: string};
                       ^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- nested_unions.js:8:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. object type [2] is inexact, so
it may contain `a` with a type that conflicts with `a`'s definition in object type [3]. Try making object type [2]
exact. [cannot-spread-inexact]

   nested_unions.js:8:2
   8| ({...OBJ, ...works2}); // error: cannot-spread-inexact
       ^^^^^^^^^^^^^^^^^^^ [1]

References:
   nested_unions.js:4:21
   4| declare var works2: {...} | void | void;
                          ^^^^^ [2]
   nested_unions.js:1:18
   1| declare var OBJ: {a: string};
                       ^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------- nested_unions.js:9:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. object type [2] is inexact, so
it may contain `a` with a type that conflicts with `a`'s definition in object type [3]. Try making object type [2]
exact. [cannot-spread-inexact]

   nested_unions.js:9:2
   9| ({...OBJ, ...works3}); // error: cannot-spread-inexact
       ^^^^^^^^^^^^^^^^^^^ [1]

References:
   nested_unions.js:5:21
   5| declare var works3: {...} | (void | void);
                          ^^^^^ [2]
   nested_unions.js:1:18
   1| declare var OBJ: {a: string};
                       ^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------- nested_unions.js:17:16

Cannot assign object literal to `o1` because object literal [1] is incompatible with `BC` [2]. [incompatible-type]

   nested_unions.js:17:16
   17| const o1: BC = { ...x1 }; // errors
                      ^^^^^^^^^ [1]

References:
   nested_unions.js:17:11
   17| const o1: BC = { ...x1 }; // errors
                 ^^ [2]


Error ------------------------------------------------------------------------------------------- nested_unions.js:18:16

Cannot assign object literal to `o2` because object literal [1] is incompatible with `BC` [2]. [incompatible-type]

   nested_unions.js:18:16
   18| const o2: BC = { ...x2 }; // errors
                      ^^^^^^^^^ [1]

References:
   nested_unions.js:18:11
   18| const o2: BC = { ...x2 }; // errors
                 ^^ [2]


Error ----------------------------------------------------------------------------------------------------- null.js:4:10

Cannot get `empty.x` because property `x` is missing in object literal [1]. [prop-missing]

   null.js:4:10
   4|   (empty.x); // Error
               ^

References:
   null.js:3:17
   3|   const empty = {...bar};
                      ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test10.js:3:2

Cannot cast `o.p` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test10.js:3:2
   3| (o.p: empty); // error: number ~> empty
       ^^^

References:
   test10.js:2:14
   2| var o = { p: 0, ...x };
                   ^ [1]
   test10.js:3:7
   3| (o.p: empty); // error: number ~> empty
            ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- test11.js:14:3

Cannot cast `ret` to empty because object literal [1] is incompatible with empty [2]. [incompatible-cast]

   test11.js:14:3
   14|   ret as empty; //err
         ^^^

References:
   test11.js:11:15
                     v
   11|   const ret = {
   12|     ...item.customPolygonData,
   13|   };
         ^ [1]
   test11.js:14:10
   14|   ret as empty; //err
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test3.js:8:17

Cannot assign `o.y` to `y` because string [1] is incompatible with number [2]. [incompatible-type]

   test3.js:8:17
   8| var y: number = o.y; // Error string ~> number
                      ^^^

References:
   test3.js:1:14
   1| var p = { y: "" };
                   ^^ [1]
   test3.js:8:8
   8| var y: number = o.y; // Error string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test3.js:9:17

Cannot assign `o.z` to `z` because string [1] is incompatible with number [2]. [incompatible-type]

   test3.js:9:17
   9| var z: number = o.z; // Error string ~> number
                      ^^^

References:
   test3.js:2:14
   2| var q = { z: "" };
                   ^^ [1]
   test3.js:9:8
   9| var z: number = o.z; // Error string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test6.js:10:2

Cannot cast `p` to object type because property `abc` is missing in object literal [1] but exists in object type [2].
[prop-missing]

   test6.js:10:2
   10| (p: {foo: string; abc: string}); // error, p doesn't have `abc` yet
        ^

References:
   test6.js:7:9
               v
    7| var p = {
    8|   foo: 'bar'
    9| };
       ^ [1]
   test6.js:10:5
   10| (p: {foo: string; abc: string}); // error, p doesn't have `abc` yet
           ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test8.js:7:2

Cannot cast object literal to object type because string [1] is incompatible with number [2] in property `q`.
[incompatible-cast]

   test8.js:7:2
    7| ({ ...o }: { p: number, q: number }); // error: string ~> number (prop q)
        ^^^^^^^^

References:
   test8.js:12:15
   12| type B = { q: string };
                     ^^^^^^ [1]
   test8.js:7:28
    7| ({ ...o }: { p: number, q: number }); // error: string ~> number (prop q)
                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test8.js:8:2

Cannot cast object literal to object type because number [1] is incompatible with string [2] in property `p`.
[incompatible-cast]

   test8.js:8:2
    8| ({ ...o }: { p: string, q: string }); // error: number ~> string (prop p)
        ^^^^^^^^

References:
   test8.js:11:15
   11| type A = { p: number };
                     ^^^^^^ [1]
   test8.js:8:17
    8| ({ ...o }: { p: string, q: string }); // error: number ~> string (prop p)
                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test9.js:5:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. `I_call` [2] cannot be spread
because interfaces do not track the own-ness of their properties. Try using an object type instead.
[cannot-spread-interface]

   test9.js:5:2
   5| ({ ...o_call }: { "$call": any }); // error: interfaces cannot be spread 
       ^^^^^^^^^^^^^ [1]

References:
   test9.js:4:21
   4| declare var o_call: I_call;
                          ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:11:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. `I_index` [2] cannot be spread
because interfaces do not track the own-ness of their properties. Try using an object type instead.
[cannot-spread-interface]

   test9.js:11:2
   11| ({ ...o_index }: { "$key": any }); // error: interfaces cannot be spread 
        ^^^^^^^^^^^^^^ [1]

References:
   test9.js:10:22
   10| declare var o_index: I_index;
                            ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test9.js:12:2

Cannot spread object literal because Flow cannot determine a type for object literal [1]. `I_index` [2] cannot be spread
because interfaces do not track the own-ness of their properties. Try using an object type instead.
[cannot-spread-interface]

   test9.js:12:2
   12| ({ ...o_index }: { "$value": any }); // error: interfaces cannot be spread 
        ^^^^^^^^^^^^^^ [1]

References:
   test9.js:10:22
   10| declare var o_index: I_index;
                            ^^^^^^^ [2]



Found 22 errors
