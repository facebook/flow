annot.js:4
  4: var bar: (str:number, i:number)=> string = foo;
                   ^^^^^^ number. This type is incompatible with the expected param type of
  1: function foo(str:string, i:number):string {
                      ^^^^^^ string

annot.js:6
  6: var qux = function(str:string, i:number):number { return foo(str,i); }
                                                              ^^^^^^^^^^ string. This type is incompatible with the expected return type of
  6: var qux = function(str:string, i:number):number { return foo(str,i); }
                                              ^^^^^^ number

annot.js:8
  8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `j`. Property not found in
  8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal

annot.js:8
  8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `i` is incompatible:
      8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
                                                                      ^^^^^ string. This type is incompatible with
      8: var obj: {str:string; i:number; j:boolean} = {str: "...", i: "...", k: false};
                                 ^^^^^^ number

annot.js:10
 10: var arr: Array<number> = [1,2,"..."];
                                   ^^^^^ string. This type is incompatible with
 10: var arr: Array<number> = [1,2,"..."];
                    ^^^^^^ number

annot.js:13
 13: var array: number[] = [1,2,"..."];
                                ^^^^^ string. This type is incompatible with
 13: var array: number[] = [1,2,"..."];
                ^^^^^^ number

annot.js:27
 27: var test_obj: ObjType = { 'bar-foo': '23' };
                   ^^^^^^^ property `foo-bar`. Property not found in
 27: var test_obj: ObjType = { 'bar-foo': '23' };
                             ^^^^^^^^^^^^^^^^^^^ object literal

annot.js:31
 31:   n = "hey"; // error
           ^^^^^ string. This type is incompatible with
 30: function param_anno(n:number):void {
                           ^^^^^^ number

annot.js:37
 37:     batchRequests: Array<{method: string; path: string; params: ?Object}>,
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `path`. Property not found in
 46:       return {
                  ^ object literal

annot.js:55
 55: var toz : null = 3;
                      ^ number. This type is incompatible with
 55: var toz : null = 3;
               ^^^^ null

forward_ref.js:1
  1: let myClassInstance: MyClass = null; // forward ref ok, null ~> class error
                                    ^^^^ null. This type is incompatible with
  1: let myClassInstance: MyClass = null; // forward ref ok, null ~> class error
                          ^^^^^^^ MyClass

forward_ref.js:4
  4:   return null; // forward ref ok, null ~> class error
              ^^^^ null. This type is incompatible with the expected return type of
  3: function bar(): MyClass {
                     ^^^^^^^ MyClass


Found 12 errors
