Error -------------------------------------------------------------------------------- class_interface_subtyping.js:52:2

Cannot cast `cft` to `I_Function_this` because `C_Function_this` [1] is incompatible with `I_Function_this` [2] in the
`this` parameter of property `x`. [incompatible-cast]

   class_interface_subtyping.js:52:2
   52| (cft : I_Function_this); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:53:2

Cannot cast `cft` to `I_Method_this` because `C_Function_this` [1] is incompatible with `I_Method_this` [2] in the
`this` parameter of property `x`. [incompatible-cast]

   class_interface_subtyping.js:53:2
   53| (cft : I_Method_this); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:54:2

Cannot cast `cft` to `I_Function_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   class_interface_subtyping.js:54:2
   54| (cft : I_Function_mixed); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:55:2

Cannot cast `cft` to `I_Method_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   class_interface_subtyping.js:55:2
   55| (cft : I_Method_mixed); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:58:2

Cannot cast `cmt` to `I_Function_this` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:58:2
   58| (cmt : I_Function_this); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void {}
                    ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:60:2

Cannot cast `cmt` to `I_Function_mixed` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:60:2
   60| (cmt : I_Function_mixed); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void {}
                    ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:62:2

Cannot cast `cmt` to `I_Function_empty` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:62:2
   62| (cmt : I_Function_empty); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void {}
                    ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:70:2

Cannot cast `cmm` to `I_Function_this` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:70:2
   70| (cmm : I_Function_this); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void {}
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:72:2

Cannot cast `cmm` to `I_Function_mixed` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:72:2
   72| (cmm : I_Function_mixed); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void {}
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:74:2

Cannot cast `cmm` to `I_Function_empty` because function [1] cannot be unbound from the context [2] where it was defined
in the `this` parameter of property `x`. [method-unbinding]

   class_interface_subtyping.js:74:2
   74| (cmm : I_Function_empty); // error, unbound method
        ^^^

References:
   class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void {}
           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void {}
                    ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:76:2

Cannot cast `cfe` to `I_Function_this` because empty [1] is incompatible with `I_Function_this` [2] in the `this`
parameter of property `x`. [incompatible-cast]

   class_interface_subtyping.js:76:2
   76| (cfe : I_Function_this); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   class_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:77:2

Cannot cast `cfe` to `I_Method_this` because empty [1] is incompatible with `I_Method_this` [2] in the `this` parameter
of property `x`. [incompatible-cast]

   class_interface_subtyping.js:77:2
   77| (cfe : I_Method_this); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   class_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:78:2

Cannot cast `cfe` to `I_Function_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   class_interface_subtyping.js:78:2
   78| (cfe : I_Function_mixed); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   class_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error -------------------------------------------------------------------------------- class_interface_subtyping.js:79:2

Cannot cast `cfe` to `I_Method_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   class_interface_subtyping.js:79:2
   79| (cfe : I_Method_mixed); // error, contravariant
        ^^^

References:
   class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   class_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- class_method.js:8:12

Cannot return `this.prop` because boolean [1] is incompatible with string [2]. [incompatible-return]

   class_method.js:8:12
   8|     return this.prop; // Error - number ~> string
                 ^^^^^^^^^

References:
   class_method.js:7:33
   7|   method(this: interface {prop: boolean}): string {
                                      ^^^^^^^ [1]
   class_method.js:7:44
   7|   method(this: interface {prop: boolean}): string {
                                                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:12:12

Cannot return `this.prop` because boolean [1] is incompatible with string [2]. [incompatible-return]

   class_method.js:12:12
   12|     return this.prop; // Error - number ~> string
                  ^^^^^^^^^

References:
   class_method.js:11:46
   11|   static staticMethod(this: interface {prop: boolean}): string {
                                                    ^^^^^^^ [1]
   class_method.js:11:57
   11|   static staticMethod(this: interface {prop: boolean}): string {
                                                               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:16:12

Cannot return `this.prop` because boolean [1] is incompatible with string [2]. [incompatible-return]

   class_method.js:16:12
   16|     return this.prop; // Error - number ~> string
                  ^^^^^^^^^

References:
   class_method.js:15:104
   15|   propUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                                                                              ^^^^^^^ [1]
   class_method.js:15:115
   15|   propUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                                                                                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:20:12

Cannot return `this.prop` because boolean [1] is incompatible with string [2]. [incompatible-return]

   class_method.js:20:12
   20|     return this.prop; // Error - number ~> string
                  ^^^^^^^^^

References:
   class_method.js:19:117
   19|   static staticPropUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                                                                                           ^^^^^^^ [1]
   class_method.js:19:128
   19|   static staticPropUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                                                                                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:25:43

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   class_method.js:25:43
   25| let _1 = {prop : true, method : (new A()).method }.method();
                                                 ^^^^^^ [1]

References:
   class_method.js:7:3
         v------------------------------------------------
    7|   method(this: interface {prop: boolean}): string {
    8|     return this.prop; // Error - number ~> string
    9|   }
         ^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:27:18

Cannot call `{...}.method` because number [1] is incompatible with boolean [2] in property `prop`. [incompatible-call]

   class_method.js:27:18
   27| let _2 = {prop : 123, method : (new A()).method }.method(); // Error - bool ~> number
                        ^^^ [1]

References:
   class_method.js:7:33
    7|   method(this: interface {prop: boolean}): string {
                                       ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:27:42

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   class_method.js:27:42
   27| let _2 = {prop : 123, method : (new A()).method }.method(); // Error - bool ~> number
                                                ^^^^^^ [1]

References:
   class_method.js:7:3
         v------------------------------------------------
    7|   method(this: interface {prop: boolean}): string {
    8|     return this.prop; // Error - number ~> string
    9|   }
         ^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:29:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   class_method.js:29:10
   29| let _3 = {method : (new A()).method }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   class_method.js:7:16
    7|   method(this: interface {prop: boolean}): string {
                      ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:29:30

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   class_method.js:29:30
   29| let _3 = {method : (new A()).method }.method(); // Error prop missing
                                    ^^^^^^ [1]

References:
   class_method.js:7:3
         v------------------------------------------------
    7|   method(this: interface {prop: boolean}): string {
    8|     return this.prop; // Error - number ~> string
    9|   }
         ^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:34:18

Cannot call `{...}.method` because number [1] is incompatible with boolean [2] in property `prop`. [incompatible-call]

   class_method.js:34:18
   34| let _5 = {prop : 123, method : A.staticMethod }.method();// Error - bool ~> number
                        ^^^ [1]

References:
   class_method.js:11:46
   11|   static staticMethod(this: interface {prop: boolean}): string {
                                                    ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:36:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   class_method.js:36:10
   36| let _6 = {method : A.staticMethod }.method(); // error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   class_method.js:11:29
   11|   static staticMethod(this: interface {prop: boolean}): string {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:41:18

Cannot call `{...}.method` because number [1] is incompatible with boolean [2] in property `prop`. [incompatible-call]

   class_method.js:41:18
   41| let _8 = {prop : 123, method : (new A()).propUnboundNonMethod }.method(); // Error - bool ~> number
                        ^^^ [1]

References:
   class_method.js:15:50
   15|   propUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                        ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:43:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   class_method.js:43:10
   43| let _9 = {method : (new A()).propUnboundNonMethod }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   class_method.js:15:33
   15|   propUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:48:19

Cannot call `{...}.method` because number [1] is incompatible with boolean [2] in property `prop`. [incompatible-call]

   class_method.js:48:19
   48| let _11 = {prop : 123, method : A.staticPropUnboundNonMethod }.method();// Error - bool ~> number
                         ^^^ [1]

References:
   class_method.js:19:63
   19|   static staticPropUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                                     ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- class_method.js:50:11

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   class_method.js:50:11
   50| let _12 = {method : A.staticPropUnboundNonMethod }.method(); // error prop missing
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   class_method.js:19:46
   19|   static staticPropUnboundNonMethod : (this: interface {prop: boolean}) => string = function(this: interface {prop: boolean}): string {
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- class_poly_method.js:20:2

Cannot cast `n.method()` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   class_poly_method.js:20:2
   20| (n.method() : string); // error (number incompatible with string)
        ^^^^^^^^^^

References:
   class_poly_method.js:16:15
   16| let n = new A<number>(3);
                     ^^^^^^ [1]
   class_poly_method.js:20:15
   20| (n.method() : string); // error (number incompatible with string)
                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- class_poly_method.js:22:2

Cannot cast `s.method()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   class_poly_method.js:22:2
   22| (s.method() : number); // error (number incompatible with string)
        ^^^^^^^^^^

References:
   class_poly_method.js:17:15
   17| let s = new A<string>("");
                     ^^^^^^ [1]
   class_poly_method.js:22:15
   22| (s.method() : number); // error (number incompatible with string)
                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- class_poly_method.js:24:3

Cannot get `n.method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   class_poly_method.js:24:3
   24| n.method.bind(s); // TODO: error (number incompatible with string)
         ^^^^^^ [1]

References:
   class_poly_method.js:9:3
         v----------------------
    9|   method(this: A<N>): N {
   10|     return this.prop;
   11|   }
         ^ [2]


Error ---------------------------------------------------------------------------------------- class_poly_method.js:25:3

Cannot get `s.method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   class_poly_method.js:25:3
   25| s.method.bind(n); //  TODO: error (number incompatible with string)
         ^^^^^^ [1]

References:
   class_poly_method.js:9:3
         v----------------------
    9|   method(this: A<N>): N {
   10|     return this.prop;
   11|   }
         ^ [2]


Error ---------------------------------------------------------------------------------------- class_poly_method.js:29:5

Cannot define method `foo` [1] on `B` because `T` [2] is incompatible with `X` [2] in type argument `T` [2].
[incompatible-type-arg]

   class_poly_method.js:29:5
   29|     foo<X>(this: B<X>) : void
           ^^^ [1]

References:
   class_poly_method.js:28:17
   28| declare class B<T> {
                       ^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:56:2

Cannot cast `cft` to `I_Function_this` because `C_Function_this` [1] is incompatible with `I_Function_this` [2] in the
`this` parameter of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:56:2
   56| (cft : I_Function_this); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:57:2

Cannot cast `cft` to `I_Method_this` because `C_Function_this` [1] is incompatible with `I_Method_this` [2] in the
`this` parameter of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:57:2
   57| (cft : I_Method_this); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:58:2

Cannot cast `cft` to `I_Function_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:58:2
   58| (cft : I_Function_mixed); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:59:2

Cannot cast `cft` to `I_Method_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:59:2
   59| (cft : I_Method_mixed); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:62:2

Cannot cast `cmt` to `I_Function_this` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:62:2
   62| (cmt : I_Function_this); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:64:2

Cannot cast `cmt` to `I_Function_mixed` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:64:2
   64| (cmt : I_Function_mixed); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:66:2

Cannot cast `cmt` to `I_Function_empty` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:66:2
   66| (cmt : I_Function_empty); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:30:5
   30|     x(this : C_Method_this) : void
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:74:2

Cannot cast `cmm` to `I_Function_this` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:74:2
   74| (cmm : I_Function_this); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void
           ^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:76:2

Cannot cast `cmm` to `I_Function_mixed` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:76:2
   76| (cmm : I_Function_mixed); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void
           ^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:78:2

Cannot cast `cmm` to `I_Function_empty` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x`. [method-unbinding]

   declare_class_interface_subtyping.js:78:2
   78| (cmm : I_Function_empty); // error, unbound method
        ^^^

References:
   declare_class_interface_subtyping.js:38:5
   38|     x(this : mixed) : void
           ^^^^^^^^^^^^^^^^^^^^^^ [1]
   declare_class_interface_subtyping.js:38:14
   38|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:80:2

Cannot cast `cfe` to `I_Function_this` because empty [1] is incompatible with `I_Function_this` [2] in the `this`
parameter of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:80:2
   80| (cfe : I_Function_this); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   declare_class_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:81:2

Cannot cast `cfe` to `I_Method_this` because empty [1] is incompatible with `I_Method_this` [2] in the `this` parameter
of property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:81:2
   81| (cfe : I_Method_this); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   declare_class_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:82:2

Cannot cast `cfe` to `I_Function_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:82:2
   82| (cfe : I_Function_mixed); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   declare_class_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------ declare_class_interface_subtyping.js:83:2

Cannot cast `cfe` to `I_Method_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   declare_class_interface_subtyping.js:83:2
   83| (cfe : I_Method_mixed); // error, contravariant
        ^^^

References:
   declare_class_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   declare_class_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:17:42

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   declare_class_method.js:17:42
   17| let _1 = {prop : 123, method : (new A()).method }.method();
                                                ^^^^^^ [1]

References:
   declare_class_method.js:7:3
    7|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:19:18

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_class_method.js:19:18
   19| let _2 = {prop : true, method : (new A()).method }.method(); // Error - bool ~> number
                        ^^^^ [1]

References:
   declare_class_method.js:7:33
    7|   method(this: interface {prop: number}): string;
                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:19:43

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   declare_class_method.js:19:43
   19| let _2 = {prop : true, method : (new A()).method }.method(); // Error - bool ~> number
                                                 ^^^^^^ [1]

References:
   declare_class_method.js:7:3
    7|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:21:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   declare_class_method.js:21:10
   21| let _3 = {method : (new A()).method }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   declare_class_method.js:7:16
    7|   method(this: interface {prop: number}): string;
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:21:30

Cannot get `(new A()).method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   declare_class_method.js:21:30
   21| let _3 = {method : (new A()).method }.method(); // Error prop missing
                                    ^^^^^^ [1]

References:
   declare_class_method.js:7:3
    7|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:26:18

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_class_method.js:26:18
   26| let _5 = {prop : true, method : A.staticMethod }.method();// Error - bool ~> number
                        ^^^^ [1]

References:
   declare_class_method.js:9:46
    9|   static staticMethod(this: interface {prop: number}): string;
                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:28:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   declare_class_method.js:28:10
   28| let _6 = {method : A.staticMethod }.method(); // error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   declare_class_method.js:9:29
    9|   static staticMethod(this: interface {prop: number}): string;
                                   ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:33:18

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_class_method.js:33:18
   33| let _8 = {prop : true, method : (new A()).propUnboundNonMethod }.method(); // Error - bool ~> number
                        ^^^^ [1]

References:
   declare_class_method.js:11:49
   11|   propUnboundNonMethod: (this: interface {prop: number}) => string;
                                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:35:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   declare_class_method.js:35:10
   35| let _9 = {method : (new A()).propUnboundNonMethod }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   declare_class_method.js:11:32
   11|   propUnboundNonMethod: (this: interface {prop: number}) => string;
                                      ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:40:19

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_class_method.js:40:19
   40| let _11 = {prop : true, method : A.staticPropUnboundNonMethod }.method();// Error - bool ~> number
                         ^^^^ [1]

References:
   declare_class_method.js:13:62
   13|   static staticPropUnboundNonMethod: (this: interface {prop: number}) => string;
                                                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ declare_class_method.js:42:11

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   declare_class_method.js:42:11
   42| let _12 = {method : A.staticPropUnboundNonMethod }.method(); // error prop missing
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   declare_class_method.js:13:45
   13|   static staticPropUnboundNonMethod: (this: interface {prop: number}) => string;
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:14:19

Cannot call `myFun.bind` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_function.js:14:19
   14| myFun.bind({prop: true}); // Error - bool ~> number
                         ^^^^ [1]

References:
   declare_function.js:3:37
    3| declare function myFun(this: {prop: number}): string;
                                           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:15:20

Cannot call `myFun.apply` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_function.js:15:20
   15| myFun.apply({prop: true}, []); // Error - bool ~> number
                          ^^^^ [1]

References:
   declare_function.js:3:37
    3| declare function myFun(this: {prop: number}): string;
                                           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:16:19

Cannot call `myFun.call` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_function.js:16:19
   16| myFun.call({prop: true}); // Error - bool ~> number
                         ^^^^ [1]

References:
   declare_function.js:3:37
    3| declare function myFun(this: {prop: number}): string;
                                           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:17:23

Cannot call `myPolyFun.bind` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_function.js:17:23
   17| myPolyFun.bind({prop: true}); // Error - bool ~> number
                             ^^^^ [1]

References:
   declare_function.js:4:44
    4| declare function myPolyFun<T>(this: {prop: number}, x: T): T;
                                                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:18:24

Cannot call `myPolyFun.apply` because boolean [1] is incompatible with number [2] in property `prop`.
[incompatible-call]

   declare_function.js:18:24
   18| myPolyFun.apply({prop: true}, []); // Error - bool ~> number
                              ^^^^ [1]

References:
   declare_function.js:4:44
    4| declare function myPolyFun<T>(this: {prop: number}, x: T): T;
                                                  ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:19:23

Cannot call `myPolyFun.call` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   declare_function.js:19:23
   19| myPolyFun.call({prop: true}); // Error - bool ~> number
                             ^^^^ [1]

References:
   declare_function.js:4:44
    4| declare function myPolyFun<T>(this: {prop: number}, x: T): T;
                                                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- declare_function.js:21:7

Cannot call `myFun.bind` because a call signature declaring the expected parameter / return type is missing in function
type [1]. [prop-missing]

   declare_function.js:21:7
   21| myFun.bind(); // Error - void ~> number
             ^^^^

References:
   declare_function.js:21:1
   21| myFun.bind(); // Error - void ~> number
       ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- declare_function.js:22:7

Cannot call `myFun.apply` because undefined [1] is incompatible with object type [2]. [incompatible-call]

   declare_function.js:22:7
   22| myFun.apply(); // Error - void ~> number
             ^^^^^

References:
   declare_function.js:22:1
   22| myFun.apply(); // Error - void ~> number
       ^^^^^^^^^^^^^ [1]
   declare_function.js:3:30
    3| declare function myFun(this: {prop: number}): string;
                                    ^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- declare_function.js:23:7

Cannot call `myFun.call` because undefined [1] is incompatible with object type [2]. [incompatible-call]

   declare_function.js:23:7
   23| myFun.call(); // Error - void ~> number
             ^^^^

References:
   declare_function.js:23:1
   23| myFun.call(); // Error - void ~> number
       ^^^^^^^^^^^^ [1]
   declare_function.js:3:30
    3| declare function myFun(this: {prop: number}): string;
                                    ^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:24:11

Cannot call `myPolyFun.bind` because a call signature declaring the expected parameter / return type is missing in
function type [1]. [prop-missing]

   declare_function.js:24:11
   24| myPolyFun.bind(); // Error - void ~> number
                 ^^^^

References:
   declare_function.js:24:1
   24| myPolyFun.bind(); // Error - void ~> number
       ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- declare_function.js:25:11

Cannot call `myPolyFun.apply` because undefined [1] is incompatible with object type [2]. [incompatible-call]

   declare_function.js:25:11
   25| myPolyFun.apply(); // Error - void ~> number
                 ^^^^^

References:
   declare_function.js:25:1
   25| myPolyFun.apply(); // Error - void ~> number
       ^^^^^^^^^^^^^^^^^ [1]
   declare_function.js:4:37
    4| declare function myPolyFun<T>(this: {prop: number}, x: T): T;
                                           ^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- declare_function.js:26:11

Cannot call `myPolyFun.call` because undefined [1] is incompatible with object type [2]. [incompatible-call]

   declare_function.js:26:11
   26| myPolyFun.call(); // Error - void ~> number
                 ^^^^

References:
   declare_function.js:26:1
   26| myPolyFun.call(); // Error - void ~> number
       ^^^^^^^^^^^^^^^^ [1]
   declare_function.js:4:37
    4| declare function myPolyFun<T>(this: {prop: number}, x: T): T;
                                           ^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- function_type.js:7:9

Cannot call `x.bind` because string [1] is incompatible with number [2]. [incompatible-call]

   function_type.js:7:9
   7| (x.bind("")()); // error: number incompatible with string
              ^^ [1]

References:
   function_type.js:4:25
   4| declare var x : (this : number) => void;
                              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_type.js:14:8

Cannot call `y.bind` because string [1] is incompatible with number [2]. [incompatible-call]

   function_type.js:14:8
   14| y.bind(""); // error: number incompatible with string
              ^^ [1]

References:
   function_type.js:12:19
   12| declare var y : F<number>;
                         ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_type.js:17:2

Cannot cast `y` to `F` because number [1] is incompatible with string [2] in type argument `T` [3]. [incompatible-cast]

   function_type.js:17:2
   17| (y : F<string>); // error: number incompatible with string
        ^

References:
   function_type.js:12:19
   12| declare var y : F<number>;
                         ^^^^^^ [1]
   function_type.js:17:8
   17| (y : F<string>); // error: number incompatible with string
              ^^^^^^ [2]
   function_type.js:10:8
   10| type F<T> = (this : T) => void;
              ^ [3]


Error -------------------------------------------------------------------------------------------- function_type.js:22:2

Cannot cast `z.bind(...)()` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   function_type.js:22:2
   22| (z.bind(3)() : string); // error: number incompatible with string
        ^^^^^^^^^^^

References:
   function_type.js:22:9
   22| (z.bind(3)() : string); // error: number incompatible with string
               ^ [1]
   function_type.js:22:16
   22| (z.bind(3)() : string); // error: number incompatible with string
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_type.js:23:2

Cannot cast `z.bind(...)()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   function_type.js:23:2
   23| (z.bind("")() : number); // error: number incompatible with string
        ^^^^^^^^^^^^

References:
   function_type.js:23:9
   23| (z.bind("")() : number); // error: number incompatible with string
               ^^ [1]
   function_type.js:23:17
   23| (z.bind("")() : number); // error: number incompatible with string
                       ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_type.js:32:2

Cannot cast `x` to `BotFn` because number [1] is incompatible with mixed [2] in the `this` parameter.
[incompatible-cast]

   function_type.js:32:2
   32| (x : BotFn); // error
        ^

References:
   function_type.js:4:25
    4| declare var x : (this : number) => void;
                               ^^^^^^ [1]
   function_type.js:29:22
   29| type BotFn = (this : mixed) => empty;
                            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- function_type.js:32:2

Cannot cast `x` to `BotFn` because undefined [1] is incompatible with empty [2] in the return value. [incompatible-cast]

   function_type.js:32:2
   32| (x : BotFn); // error
        ^

References:
   function_type.js:4:36
    4| declare var x : (this : number) => void;
                                          ^^^^ [1]
   function_type.js:29:32
   29| type BotFn = (this : mixed) => empty;
                                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:5:10

Cannot define method `foo2` [1] on `A` because class `this` type [2] is incompatible with number [3].
[incompatible-type]

   incompatible_this_param.js:5:10
   5|   static foo2(this : number) {} // error
               ^^^^ [1]

References:
   incompatible_this_param.js:3:7
   3| class A {
            ^ [2]
   incompatible_this_param.js:5:22
   5|   static foo2(this : number) {} // error
                           ^^^^^^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:7:10

Cannot define method `foo4` [1] on `A` because class `this` type [2] is incompatible with `A` [3]. [incompatible-type]

   incompatible_this_param.js:7:10
   7|   static foo4(this : A) {} // error
               ^^^^ [1]

References:
   incompatible_this_param.js:3:7
   3| class A {
            ^ [2]
   incompatible_this_param.js:7:22
   7|   static foo4(this : A) {} // error
                           ^ [3]


Error ----------------------------------------------------------------------------------- incompatible_this_param.js:9:3

Cannot define method `bar2` [1] on `A` because `A` [2] is incompatible with number [3]. [incompatible-type]

   incompatible_this_param.js:9:3
   9|   bar2 (this : number) {} // error
        ^^^^ [1]

References:
   incompatible_this_param.js:3:7
   3| class A {
            ^ [2]
   incompatible_this_param.js:9:16
   9|   bar2 (this : number) {} // error
                     ^^^^^^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:11:3

Cannot define method `bar4` [1] on `A` because `A` [2] is incompatible with class `A` [3]. [incompatible-type]

   incompatible_this_param.js:11:3
   11|   bar4 (this : typeof A) {} // error
         ^^^^ [1]

References:
   incompatible_this_param.js:3:7
    3| class A {
             ^ [2]
   incompatible_this_param.js:11:16
   11|   bar4 (this : typeof A) {} // error
                      ^^^^^^^^ [3]


Error --------------------------------------------------------------------------------- incompatible_this_param.js:16:10

Cannot define method `foo2` [1] on `B` because class `this` type [2] is incompatible with number [3].
[incompatible-type]

   incompatible_this_param.js:16:10
   16|   static foo2(this : number) : void, // error
                ^^^^ [1]

References:
   incompatible_this_param.js:14:15
   14| declare class B {
                     ^ [2]
   incompatible_this_param.js:16:22
   16|   static foo2(this : number) : void, // error
                            ^^^^^^ [3]


Error --------------------------------------------------------------------------------- incompatible_this_param.js:18:10

Cannot define method `foo4` [1] on `B` because class `this` type [2] is incompatible with `B` [3]. [incompatible-type]

   incompatible_this_param.js:18:10
   18|   static foo4(this : B) : void, // error
                ^^^^ [1]

References:
   incompatible_this_param.js:14:15
   14| declare class B {
                     ^ [2]
   incompatible_this_param.js:18:22
   18|   static foo4(this : B) : void, // error
                            ^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:20:3

Cannot define method `bar2` [1] on `B` because `B` [2] is incompatible with number [3]. [incompatible-type]

   incompatible_this_param.js:20:3
   20|   bar2 (this : number) : void, // error
         ^^^^ [1]

References:
   incompatible_this_param.js:14:15
   14| declare class B {
                     ^ [2]
   incompatible_this_param.js:20:16
   20|   bar2 (this : number) : void, // error
                      ^^^^^^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:22:3

Cannot define method `bar4` [1] on `B` because `B` [2] is incompatible with class `B` [3]. [incompatible-type]

   incompatible_this_param.js:22:3
   22|   bar4 (this : typeof B) : void // error
         ^^^^ [1]

References:
   incompatible_this_param.js:14:15
   14| declare class B {
                     ^ [2]
   incompatible_this_param.js:22:16
   22|   bar4 (this : typeof B) : void // error
                      ^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:27:3

Cannot define method `bar2` [1] on `C` because `C` [2] is incompatible with number [3]. [incompatible-type]

   incompatible_this_param.js:27:3
   27|   bar2 (this : number) : void, // error
         ^^^^ [1]

References:
   incompatible_this_param.js:25:11
   25| interface C {
                 ^ [2]
   incompatible_this_param.js:27:16
   27|   bar2 (this : number) : void, // error
                      ^^^^^^ [3]


Error ---------------------------------------------------------------------------------- incompatible_this_param.js:40:3

Cannot define method `bar2` [1] on `E` because `E` [2] is incompatible with number [3]. [incompatible-type]

   incompatible_this_param.js:40:3
   40|   bar2 (this : number) : void, // error
         ^^^^ [1]

References:
   incompatible_this_param.js:38:11
   38| interface E {
                 ^ [2]
   incompatible_this_param.js:40:16
   40|   bar2 (this : number) : void, // error
                      ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- interface.js:14:38

Cannot get `AImpl.method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   interface.js:14:38
   14| let _1 = {prop : 123, method : AImpl.method }.method();
                                            ^^^^^^ [1]

References:
   interface.js:6:3
    6|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:16:18

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   interface.js:16:18
   16| let _2 = {prop : true, method : AImpl.method }.method(); // Error - bool ~> number
                        ^^^^ [1]

References:
   interface.js:6:33
    6|   method(this: interface {prop: number}): string;
                                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:16:39

Cannot get `AImpl.method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   interface.js:16:39
   16| let _2 = {prop : true, method : AImpl.method }.method(); // Error - bool ~> number
                                             ^^^^^^ [1]

References:
   interface.js:6:3
    6|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:18:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   interface.js:18:10
   18| let _3 = {method : AImpl.method }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   interface.js:6:16
    6|   method(this: interface {prop: number}): string;
                      ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:18:26

Cannot get `AImpl.method` because property `method` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   interface.js:18:26
   18| let _3 = {method : AImpl.method }.method(); // Error prop missing
                                ^^^^^^ [1]

References:
   interface.js:6:3
    6|   method(this: interface {prop: number}): string;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:23:18

Cannot call `{...}.method` because boolean [1] is incompatible with number [2] in property `prop`. [incompatible-call]

   interface.js:23:18
   23| let _5 = {prop : true, method : AImpl.propUnboundNonMethod }.method(); // Error - bool ~> number
                        ^^^^ [1]

References:
   interface.js:8:49
    8|   propUnboundNonMethod: (this: interface {prop: number}) => string;
                                                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- interface.js:25:10

Cannot call `{...}.method` because property `prop` is missing in object literal [1] but exists in interface type [2].
[prop-missing]

   interface.js:25:10
   25| let _6 = {method : AImpl.propUnboundNonMethod }.method(); // Error prop missing
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   interface.js:8:32
    8|   propUnboundNonMethod: (this: interface {prop: number}) => string;
                                      ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ mixed_inference.js:38:2

Cannot cast `foo` to `typeof bar2` because number [1] is incompatible with implicit `this` parameter of function [2] in
the `this` parameter. [incompatible-cast]

   mixed_inference.js:38:2
   38| (foo : typeof bar2); // mixed incompatible with number
        ^^^

References:
   mixed_inference.js:30:21
   30| function foo(this : number) {}
                           ^^^^^^ [1]
   mixed_inference.js:32:1
   32| function bar2() {}
       ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ mixed_inference.js:39:2

Cannot cast `foo` to `typeof baz2` because number [1] is incompatible with implicit `this` parameter of function [2] in
the `this` parameter. [incompatible-cast]

   mixed_inference.js:39:2
   39| (foo : typeof baz2); // mixed incompatible with number
        ^^^

References:
   mixed_inference.js:30:21
   30| function foo(this : number) {}
                           ^^^^^^ [1]
   mixed_inference.js:36:12
   36| let baz2 = function () {};
                  ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ mixed_inference.js:40:2

Cannot cast `foo` to `typeof o2.m` because number [1] is incompatible with implicit `this` parameter of function [2] in
the `this` parameter. [incompatible-cast]

   mixed_inference.js:40:2
   40| (foo : typeof o2.m); // mixed incompatible with number
        ^^^

References:
   mixed_inference.js:30:21
   30| function foo(this : number) {}
                           ^^^^^^ [1]
   mixed_inference.js:34:12
   34| let o2 = { m() {}, n : function() {} }
                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ mixed_inference.js:41:2

Cannot cast `foo` to `typeof o2.n` because number [1] is incompatible with implicit `this` parameter of function [2] in
the `this` parameter. [incompatible-cast]

   mixed_inference.js:41:2
   41| (foo : typeof o2.n); // mixed incompatible with number
        ^^^

References:
   mixed_inference.js:30:21
   30| function foo(this : number) {}
                           ^^^^^^ [1]
   mixed_inference.js:34:24
   34| let o2 = { m() {}, n : function() {} }
                              ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ mixed_inference.js:55:2

Cannot cast `foo` to `typeof i.m` because number [1] is incompatible with implicit `this` parameter of function type [2]
in the `this` parameter. [incompatible-cast]

   mixed_inference.js:55:2
   55| (foo : typeof i.m); // mixed incompatible with number
        ^^^

References:
   mixed_inference.js:30:21
   30| function foo(this : number) {}
                           ^^^^^^ [1]
   mixed_inference.js:49:5
   49|     m() : void;
           ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:57:2

Cannot cast `cft` to `I_Function_this` because `I_Function_this` [1] is not a subtype of `C_Function_this` [2]. Class
instances are not subtypes of object types; consider rewriting `C_Function_this` [2] as an interface in the `this`
parameter of property `x`. [class-object-subtyping]

   object_interface_subtyping.js:57:2
   57| (cft : I_Function_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:58:2

Cannot cast `cft` to `I_Method_this` because `I_Method_this` [1] is not a subtype of `C_Function_this` [2]. Class
instances are not subtypes of object types; consider rewriting `C_Function_this` [2] as an interface in the `this`
parameter of property `x`. [class-object-subtyping]

   object_interface_subtyping.js:58:2
   58| (cft : I_Method_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:58:2

Cannot cast `cft` to `I_Method_this` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x` of the `this` parameter of property `x`. [method-unbinding]

   object_interface_subtyping.js:58:2
   58| (cft : I_Method_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:8:5
    8|     x(this : I_Method_this) : void
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:59:2

Cannot cast `cft` to `I_Function_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   object_interface_subtyping.js:59:2
   59| (cft : I_Function_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:60:2

Cannot cast `cft` to `I_Method_mixed` because `C_Function_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   object_interface_subtyping.js:60:2
   60| (cft : I_Method_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:26:18
   26|     +x : (this : C_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:63:2

Cannot cast `cmt` to `I_Function_this` because `I_Function_this` [1] is not a subtype of `C_Method_this` [2]. Class
instances are not subtypes of object types; consider rewriting `C_Method_this` [2] as an interface in the `this`
parameter of property `x`. [class-object-subtyping]

   object_interface_subtyping.js:63:2
   63| (cmt : I_Function_this);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:64:2

Cannot cast `cmt` to `I_Method_this` because `I_Method_this` [1] is not a subtype of `C_Method_this` [2]. Class
instances are not subtypes of object types; consider rewriting `C_Method_this` [2] as an interface in the `this`
parameter of property `x`. [class-object-subtyping]

   object_interface_subtyping.js:64:2
   64| (cmt : I_Method_this);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:64:2

Cannot cast `cmt` to `I_Method_this` because function type [1] cannot be unbound from the context [2] where it was
defined in the `this` parameter of property `x` of the `this` parameter of property `x`. [method-unbinding]

   object_interface_subtyping.js:64:2
   64| (cmt : I_Method_this);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:8:5
    8|     x(this : I_Method_this) : void
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:65:2

Cannot cast `cmt` to `I_Function_mixed` because `C_Method_this` [1] is incompatible with mixed [2] in the `this`
parameter of property `x`. [incompatible-cast]

   object_interface_subtyping.js:65:2
   65| (cmt : I_Function_mixed);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:66:2

Cannot cast `cmt` to `I_Method_mixed` because `C_Method_this` [1] is incompatible with mixed [2] in the `this` parameter
of property `x`. [incompatible-cast]

   object_interface_subtyping.js:66:2
   66| (cmt : I_Method_mixed);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:30:14
   30|     x(this : C_Method_this) : void
                    ^^^^^^^^^^^^^ [1]
   object_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:81:2

Cannot cast `cfe` to `I_Function_this` because empty [1] is incompatible with `I_Function_this` [2] in the `this`
parameter of property `x`. [incompatible-cast]

   object_interface_subtyping.js:81:2
   81| (cfe : I_Function_this);  // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:82:2

Cannot cast `cfe` to `I_Method_this` because empty [1] is incompatible with `I_Method_this` [2] in the `this` parameter
of property `x`. [incompatible-cast]

   object_interface_subtyping.js:82:2
   82| (cfe : I_Method_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:83:2

Cannot cast `cfe` to `I_Function_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   object_interface_subtyping.js:83:2
   83| (cfe : I_Function_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:84:2

Cannot cast `cfe` to `I_Method_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   object_interface_subtyping.js:84:2
   84| (cfe : I_Method_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:42:18
   42|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:87:2

Cannot cast `cme` to `I_Function_this` because empty [1] is incompatible with `I_Function_this` [2] in the `this`
parameter of property `x`. [incompatible-cast]

   object_interface_subtyping.js:87:2
   87| (cme : I_Function_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:46:18
   46|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:4:18
    4|     +x : (this : I_Function_this) => void
                        ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:88:2

Cannot cast `cme` to `I_Method_this` because empty [1] is incompatible with `I_Method_this` [2] in the `this` parameter
of property `x`. [incompatible-cast]

   object_interface_subtyping.js:88:2
   88| (cme : I_Method_this); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:46:18
   46|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:8:14
    8|     x(this : I_Method_this) : void
                    ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:89:2

Cannot cast `cme` to `I_Function_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   object_interface_subtyping.js:89:2
   89| (cme : I_Function_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:46:18
   46|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:12:18
   12|     +x : (this : mixed) => void
                        ^^^^^ [2]


Error ------------------------------------------------------------------------------- object_interface_subtyping.js:90:2

Cannot cast `cme` to `I_Method_mixed` because empty [1] is incompatible with mixed [2] in the `this` parameter of
property `x`. [incompatible-cast]

   object_interface_subtyping.js:90:2
   90| (cme : I_Method_mixed); // error, contravariant
        ^^^

References:
   object_interface_subtyping.js:46:18
   46|     +x : (this : empty) => void
                        ^^^^^ [1]
   object_interface_subtyping.js:16:14
   16|     x(this : mixed) : void
                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:8:17

Cannot get `this.x` because property `x` is missing in mixed [1]. [incompatible-use]

   test.js:8:17
   8|     return this.x; // error: this is mixed
                      ^

References:
   test.js:7:21
   7| function foo(this : mixed) : void {
                          ^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:11:5

Cannot call `foo` because no arguments are expected by function [1]. [extra-arg]

   test.js:11:5
   11| foo(3); // error: foo does not take any arguments
           ^

References:
   test.js:7:1
    7| function foo(this : mixed) : void {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:15:10

Cannot get `this.y` because property `y` is missing in object type [1]. [prop-missing]

   test.js:15:10
   15|     this.y; // error no property y
                ^

References:
   test.js:14:22
   14| function bar (this : {f : number, ...}) : number {
                            ^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:19:10

Cannot call `bar.bind` because property `f` is missing in object type [1] but exists in object type [2]. [prop-missing]

   test.js:19:10
   19| bar.bind(y)(); // error : number incompatible with string
                ^

References:
   test.js:5:17
    5| declare var y : { y : string};
                       ^^^^^^^^^^^^^ [1]
   test.js:14:22
   14| function bar (this : {f : number, ...}) : number {
                            ^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:27:1

Cannot call `o.foo` because property `y` is missing in object literal [1] but exists in object type [2]. [prop-missing]

   test.js:27:1
   27| o.foo(); // error o has no field y
       ^

References:
   test.js:23:9
               v
   23| let o = {
   24|     foo(this : {y : number, ...}) {}
   25| }
       ^ [1]
   test.js:24:16
   24|     foo(this : {y : number, ...}) {}
                      ^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:45:4

Cannot call `o3.foo` because property `foo` is missing in object type [1] but exists in object literal [2].
[prop-missing]

   test.js:45:4
   45| o3.foo(); // error, foo is missing in type of this
          ^^^

References:
   test.js:41:16
   41|     foo(this : {|y : number|}) {},
                      ^^^^^^^^^^^^^^ [1]
   test.js:40:10
                v
   40| let o3 = {
   41|     foo(this : {|y : number|}) {},
   42|     y : 3
   43| }
       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:47:8

Cannot call `o3.foo.bind` because property `foo` is missing in object type [1] but exists in object literal [2].
[prop-missing]

   test.js:47:8
   47| o3.foo.bind(o2)(); // error, foo is missing in type of o2 this
              ^^^^

References:
   test.js:41:16
   41|     foo(this : {|y : number|}) {},
                      ^^^^^^^^^^^^^^ [1]
   test.js:32:10
                v
   32| let o2 = {
   33|     foo(this : {y : number , ...}) {},
   34|     y : 3
   35| }
       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:57:2

Cannot cast `baz.bind(...)()` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:57:2
   57| (baz.bind({f : 3})() : string); // error : number incompatible with string
        ^^^^^^^^^^^^^^^^^^^

References:
   test.js:57:16
   57| (baz.bind({f : 3})() : string); // error : number incompatible with string
                      ^ [1]
   test.js:57:24
   57| (baz.bind({f : 3})() : string); // error : number incompatible with string
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:58:2

Cannot cast `baz.bind(...)()` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:58:2
   58| (baz.bind({f : ""})() : number); // error : number incompatible with string
        ^^^^^^^^^^^^^^^^^^^^

References:
   test.js:58:16
   58| (baz.bind({f : ""})() : number); // error : number incompatible with string
                      ^^ [1]
   test.js:58:25
   58| (baz.bind({f : ""})() : number); // error : number incompatible with string
                               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:63:2

Cannot cast `baz2.bind(...)(...)` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:63:2
   63| (baz2.bind(3)("") : string); // error : number incompatible with string
        ^^^^^^^^^^^^^^^^

References:
   test.js:63:12
   63| (baz2.bind(3)("") : string); // error : number incompatible with string
                  ^ [1]
   test.js:63:21
   63| (baz2.bind(3)("") : string); // error : number incompatible with string
                           ^^^^^^ [2]



Found 128 errors
