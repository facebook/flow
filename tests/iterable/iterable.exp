array.js:8
  8: var arrayTest4: Iterable<number> = ["hi"];
                              ^^^^^^ number. This type is incompatible with
  8: var arrayTest4: Iterable<number> = ["hi"];
                                         ^^^^ string

array.js:8
  8: var arrayTest4: Iterable<number> = ["hi"];
                                         ^^^^ string. This type is incompatible with
  8: var arrayTest4: Iterable<number> = ["hi"];
                              ^^^^^^ number

array.js:10
 10: var arrayTest5: Iterable<string> = ["hi", 1];
                                               ^ number. This type is incompatible with
 10: var arrayTest5: Iterable<string> = ["hi", 1];
                              ^^^^^^ string

caching_bug.js:21
 21: function miss_the_cache(x: Array<string | number>): Iterable<string> { return x; }
                                               ^^^^^^ number. This type is incompatible with
 21: function miss_the_cache(x: Array<string | number>): Iterable<string> { return x; }
                                                                  ^^^^^^ string

iterator_result.js:23
 23:         return { done, value: "still going..." }; // Error string ~> void
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
 20:     next(): IteratorResult<string, void> {
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
  Member 1:
  object type. See lib: core.js:392
  Error:
   23:         return { done, value: "still going..." }; // Error string ~> void
                                     ^^^^^^^^^^^^^^^^ string. This type is incompatible with
   20:     next(): IteratorResult<string, void> {
                                          ^^^^ undefined
  Member 2:
  object type. See lib: core.js:395
  Error:
  inconsistent use of library definitions
  boolean literal `true`. Expected boolean literal `false`, got `true` instead. See lib: core.js:393
  boolean literal `false`. See lib: core.js:396

iterator_result.js:25
 25:         return { done }; // Error void ~> string
                    ^^^^^^^^ object literal. This type is incompatible with
 20:     next(): IteratorResult<string, void> {
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
  Member 1:
  object type. See lib: core.js:392
  Error:
   25:         return { done }; // Error void ~> string
                        ^^^^ boolean. Expected boolean literal `true`, got `false` instead
  boolean literal `true`. See lib: core.js:393
  Member 2:
  object type. See lib: core.js:395
  Error:
  property `value`. Property not found in. See lib: core.js:395
   25:         return { done }; // Error void ~> string
                      ^^^^^^^^ object literal

map.js:13
 13: function mapTest4(map: Map<number, string>): Iterable<string> {
                                                           ^^^^^^ string. This type is incompatible with
tuple type. See lib: core.js:422

set.js:13
 13: function setTest4(set: Set<string>): Iterable<number> {
                                ^^^^^^ string. This type is incompatible with
 13: function setTest4(set: Set<string>): Iterable<number> {
                                                   ^^^^^^ number

set.js:13
 13: function setTest4(set: Set<string>): Iterable<number> {
                                                   ^^^^^^ number. This type is incompatible with
 13: function setTest4(set: Set<string>): Iterable<number> {
                                ^^^^^^ string

string.js:5
  5: var stringTest3: Iterable<number> = "hi"; // Error - string is a Iterable<string>
                               ^^^^^^ number. This type is incompatible with
string. See lib: core.js:234


Found 10 errors
