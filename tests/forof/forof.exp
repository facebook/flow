Error ----------------------------------------------------------------------------------------------------- forof.js:7:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   forof.js:7:6
   7|     (x: string); // Error - number ~> string
           ^

References:
   forof.js:5:31
   5| function testArray(arr: Array<number>): void {
                                    ^^^^^^ [1]
   forof.js:7:9
   7|     (x: string); // Error - number ~> string
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:13:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   forof.js:13:6
   13|     (x: string); // Error - number ~> string
            ^

References:
   forof.js:11:43
   11| function testIterable1(iterable: Iterable<number>): void {
                                                 ^^^^^^ [1]
   forof.js:13:9
   13|     (x: string); // Error - number ~> string
               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- forof.js:24:17

string [1], a primitive, cannot be used as a subtype of `$Iterable` [2]. You can wrap it in `new String(...))` to turn
it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   forof.js:24:17
     24|   for (var x of str) { // ERROR
                         ^^^

References:
   forof.js:23:26
     23| function testString(str: string): void {
                                  ^^^^^^ [1]
   <BUILTINS>/core.js:1762:11
   1762| interface $Iterable<+Yield,+Return,-Next> {
                   ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:32:6

Cannot cast `elem` to number because tuple type [1] is incompatible with number [2]. [incompatible-cast]

   forof.js:32:6
     32|     (elem: number); // Error - tuple ~> number
              ^^^^

References:
   <BUILTINS>/core.js:1821:28
   1821|     @@iterator(): Iterator<[K, V]>;
                                    ^^^^^^ [1]
   forof.js:32:12
     32|     (elem: number); // Error - tuple ~> number
                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:38:6

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   forof.js:38:6
   38|     (x: number); // Error - string ~> number
            ^

References:
   forof.js:36:28
   36| function testSet1(set: Set<string>): void {
                                  ^^^^^^ [1]
   forof.js:38:9
   38|     (x: number); // Error - string ~> number
               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- forof.js:59:15

Cannot use operator `*` with operands string [1] and number [2] [unsafe-arithmetic]

   forof.js:59:15
   59|   const x1_ = x1 * 3; // error
                     ^^^^^^

References:
   forof.js:48:48
   48| declare var funky1 : { @@iterator(): $Iterator<string, number, boolean> };
                                                      ^^^^^^ [1]
   forof.js:59:20
   59|   const x1_ = x1 * 3; // error
                          ^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:78:4

Cannot cast `x5` to number because boolean [1] is incompatible with number [2]. [incompatible-cast]

   forof.js:78:4
   78|   (x5 : number); // error
          ^^

References:
   forof.js:54:9
   54|   yield true;
               ^^^^ [1]
   forof.js:78:9
   78|   (x5 : number); // error
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:79:4

Cannot cast `x5` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   forof.js:79:4
   79|   (x5 : boolean); // error
          ^^

References:
   forof.js:53:9
   53|   yield 0;
               ^ [1]
   forof.js:79:9
   79|   (x5 : boolean); // error
               ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:80:4

Cannot cast `x5` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   forof.js:80:4
   80|   (x5 : string) //error
          ^^

References:
   forof.js:53:9
   53|   yield 0;
               ^ [1]
   forof.js:80:9
   80|   (x5 : string) //error
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- forof.js:80:4

Cannot cast `x5` to string because boolean [1] is incompatible with string [2]. [incompatible-cast]

   forof.js:80:4
   80|   (x5 : string) //error
          ^^

References:
   forof.js:54:9
   54|   yield true;
               ^^^^ [1]
   forof.js:80:9
   80|   (x5 : string) //error
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- scope.js:2:17

Cannot use variable `x` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   scope.js:2:17
   2| for (const x of x) { // error: can not reference undeclared x in right-hand expr
                      ^

References:
   scope.js:2:12
   2| for (const x of x) { // error: can not reference undeclared x in right-hand expr
                 ^ [1]



Found 11 errors
