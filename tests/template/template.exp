Error ------------------------------------------------------------------------------------------- tagged_template.js:6:5

Cannot call `TemplateStringsArray` because `TemplateStringsArray` [1] is not a function.

   tagged_template.js:6:5
    6|     new TemplateStringsArray();
           ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/prelude.js:19:6
   19| type TemplateStringsArray = interface extends $ReadOnlyArray<string> {
            ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- tagged_template.js:15:14

Cannot call `tag` with string bound to `x` because string [1] is incompatible with number [2].

   tagged_template.js:15:14
   15|     tag`foo${"bad"}bar${2}`; // error: string !~> number
                    ^^^^^ [1]

References:
   tagged_template.js:11:51
   11|     function tag(quasis: TemplateStringsArray, x: number, y: number) {
                                                         ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ tagged_template.js:23:5

Cannot call `tag` because no more than 2 arguments are expected by function [1].

   tagged_template.js:23:5
   23|     tag`foo${1}bar${2}`; // error: expected 2 args, got 3
           ^^^^^^^^^^^^^^^^^^^

References:
   tagged_template.js:20:5
   20|     function tag(quasis: TemplateStringsArray, number) {
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ tagged_template.js:32:5

Cannot call `tag` because string [1] is incompatible with number [2] in array element.

   tagged_template.js:32:5
   32|     tag`foo${"bad"}`; // error: string !~> number
           ^^^^^^^^^^^^^^^^

References:
   tagged_template.js:32:14
   32|     tag`foo${"bad"}`; // error: string !~> number
                    ^^^^^ [1]
   tagged_template.js:28:64
   28|     function tag(quasis: TemplateStringsArray, ...exprs: Array<number>) {
                                                                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- template.js:5:2

Cannot cast template string to number because string [1] is incompatible with number [2].

   template.js:5:2
   5| (`baz`: number); // error
       ^^^^^ [1]

References:
   template.js:5:9
   5| (`baz`: number); // error
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- template.js:8:8

Cannot coerce object literal to string because object literal [1] should not be coerced.

   8| `foo ${{bar: 123}} baz`; // error, object can't be appended
             ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ template.js:22:12

Cannot coerce `x` to string because boolean [1] should not be coerced.

   template.js:22:12
   22|     `foo ${x}`; // error
                  ^

References:
   template.js:21:15
   21|   function(x: boolean) {
                     ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- template.js:23:8

Cannot coerce `x` to string because boolean [1] should not be coerced.

   template.js:23:8
   23|     `${x} bar`; // error
              ^

References:
   template.js:21:15
   21|   function(x: boolean) {
                     ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ template.js:24:21

Cannot coerce `x` to string because boolean [1] should not be coerced.

   template.js:24:21
   24|     `foo ${'bar'} ${x}`; // error
                           ^

References:
   template.js:21:15
   21|   function(x: boolean) {
                     ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ template.js:27:12

Cannot coerce `x` to string because mixed [1] should not be coerced.

   template.js:27:12
   27|     `foo ${x}`; // error
                  ^

References:
   template.js:26:15
   26|   function(x: mixed) {
                     ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- template.js:28:8

Cannot coerce `x` to string because mixed [1] should not be coerced.

   template.js:28:8
   28|     `${x} bar`; // error
              ^

References:
   template.js:26:15
   26|   function(x: mixed) {
                     ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ template.js:29:21

Cannot coerce `x` to string because mixed [1] should not be coerced.

   template.js:29:21
   29|     `foo ${'bar'} ${x}`; // error
                           ^

References:
   template.js:26:15
   26|   function(x: mixed) {
                     ^^^^^ [1]



Found 12 errors
