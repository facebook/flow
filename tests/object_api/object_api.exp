Error: c.js:5
  5: c.foo();
       ^^^ property `foo`. Property not found in
  5: c.foo();
     ^ object literal

Error: object_assign.js:7
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                       ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `bar` is incompatible:
      7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                           ^^^^^^^^^^^^^^^^^^^^^^ property `bar`. Property not found in
      7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal

Error: object_create.js:12
 12: ({ foo: "foo" }: C);
      ^^^^^^^^^^^^^^ object literal. This type is incompatible with
 12: ({ foo: "foo" }: C);
                      ^ C

Error: object_create.js:17
 17: (o: C);
      ^ object type. This type is incompatible with
 17: (o: C);
         ^ C

Error: object_keys.js:5
  5: (Object.keys(sealed): void); // error, Array<string>
      ^^^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
  5: (Object.keys(sealed): void); // error, Array<string>
                           ^^^^ undefined

Error: object_keys.js:9
  9:   (k : number) // error: string ~> number
        ^ string. This type is incompatible with
  9:   (k : number) // error: string ~> number
            ^^^^^^ number

Error: object_keys.js:14
 14:   (k : number) // error: string ~> number
        ^ string. This type is incompatible with
 14:   (k : number) // error: string ~> number
            ^^^^^^ number

Error: object_keys.js:18
 18: (Object.keys(any): Array<number>); // error, Array<string>
      ^^^^^^^^^^^^^^^^ array type. Has some incompatible type argument with
 18: (Object.keys(any): Array<number>); // error, Array<string>
                        ^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     18: (Object.keys(any): Array<number>); // error, Array<string>
                      ^^^ string. This type is incompatible with
     18: (Object.keys(any): Array<number>); // error, Array<string>
                                  ^^^^^^ number

Error: object_keys.js:25
 25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
      ^^^^^^^^^^^^^^^^^^^^^^ array type. Has some incompatible type argument with
 25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
                              ^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
          ^^^^^^^^^^^^^^^^^^^^^^ string literal `prop`. Expected string literal `error`, got `prop` instead
     25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
                                        ^^^^^^^ string literal `error`

Error: object_keys.js:32
 32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
      ^^^^^^^^^^^^^^^^^^^^^^ array type. Has some incompatible type argument with
 32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
                              ^^^^^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
          ^^^^^^^^^^^^^^^^^^^^^^ string literal `bar_prop`. Expected string literal `error`, got `bar_prop` instead
     32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
                                        ^^^^^^^ string literal `error`

Error: object_missing.js:5
  5:     Object.doesNotExist();
                ^^^^^^^^^^^^ property `doesNotExist`. Property not found in
  5:     Object.doesNotExist();
         ^^^^^^ statics of Object

Error: object_prototype.js:31
 31: b.toString = function(): string { return 'foo'; };
     ^^^^^^^^^^ Object. Covariant property `toString` incompatible with contravariant use in
 31: b.toString = function(): string { return 'foo'; };
     ^^^^^^^^^^ assignment of property `toString`

Error: object_prototype.js:38
 38: var xToString : number = x.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 38: var xToString : number = x.toString; // error
                     ^^^^^^ number

Error: object_prototype.js:39
 39: var xToString2 : () => number = x.toString; // error
                                     ^^^^^^^^^^ function type. This type is incompatible with
 39: var xToString2 : () => number = x.toString; // error
                      ^^^^^^^^^^^^ function type
  This parameter is incompatible:
     54:     toString(): string;
                         ^^^^^^ string. This type is incompatible with. See lib: <BUILTINS>/core.js:54
     39: var xToString2 : () => number = x.toString; // error
                                ^^^^^^ number

Error: object_prototype.js:43
 43: var yToString : number = y.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 43: var yToString : number = y.toString; // error
                     ^^^^^^ number

Error: object_prototype.js:49
 49: (123).toString = function() {}; // error
           ^^^^^^^^ property `toString`. Property cannot be assigned on
 49: (123).toString = function() {}; // error
      ^^^ number

Error: object_prototype.js:51
 51: (123).toString('foo'); // error
                    ^^^^^ string. This type is incompatible with the expected param type of
144:     toString(radix?: number): string;
                          ^^^^^^ number. See lib: <BUILTINS>/core.js:144

Error: object_prototype.js:52
 52: (123).toString(null); // error
                    ^^^^ null. This type is incompatible with the expected param type of
144:     toString(radix?: number): string;
                          ^^^^^^ number. See lib: <BUILTINS>/core.js:144

Error: object_prototype.js:68
 68: b.hasOwnProperty = function() { return false; };
     ^^^^^^^^^^^^^^^^ Object. Covariant property `hasOwnProperty` incompatible with contravariant use in
 68: b.hasOwnProperty = function() { return false; };
     ^^^^^^^^^^^^^^^^ assignment of property `hasOwnProperty`

Error: object_prototype.js:71
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                           ^^^^^^ number

Error: object_prototype.js:72
 72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                       ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^ function type
  This parameter is incompatible:
     50:     hasOwnProperty(prop: any): boolean;
                                        ^^^^^^^ boolean. This type is incompatible with. See lib: <BUILTINS>/core.js:50
     72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                  ^^^^^^ number

Error: object_prototype.js:76
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                           ^^^^^^ number

Error: object_prototype.js:93
 93: b.propertyIsEnumerable = function() { return false; };
     ^^^^^^^^^^^^^^^^^^^^^^ Object. Covariant property `propertyIsEnumerable` incompatible with contravariant use in
 93: b.propertyIsEnumerable = function() { return false; };
     ^^^^^^^^^^^^^^^^^^^^^^ assignment of property `propertyIsEnumerable`

Error: object_prototype.js:96
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                 ^^^^^^ number

Error: object_prototype.js:98
 98:   x.propertyIsEnumerable; // error
       ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 97: var xPropertyIsEnumerable2 : (prop: string) => number =
                                  ^^^^^^^^^^^^^^^^^^^^^^^^ function type
  This parameter is incompatible:
     52:     propertyIsEnumerable(prop: any): boolean;
                                              ^^^^^^^ boolean. This type is incompatible with. See lib: <BUILTINS>/core.js:52
     97: var xPropertyIsEnumerable2 : (prop: string) => number =
                                                        ^^^^^^ number

Error: object_prototype.js:102
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                 ^^^^^^ number

Error: object_prototype.js:119
119: b.valueOf = function() { return {}; };
     ^^^^^^^^^ Object. Covariant property `valueOf` incompatible with contravariant use in
119: b.valueOf = function() { return {}; };
     ^^^^^^^^^ assignment of property `valueOf`

Error: object_prototype.js:122
122: var xValueOf : number = x.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
122: var xValueOf : number = x.valueOf; // error
                    ^^^^^^ number

Error: object_prototype.js:126
126: var yValueOf : number = y.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
126: var yValueOf : number = y.valueOf; // error
                    ^^^^^^ number

Error: object_prototype.js:147
147: b.toLocaleString = function() { return 'derp'; };
     ^^^^^^^^^^^^^^^^ Object. Covariant property `toLocaleString` incompatible with contravariant use in
147: b.toLocaleString = function() { return 'derp'; };
     ^^^^^^^^^^^^^^^^ assignment of property `toLocaleString`

Error: object_prototype.js:150
150: var xToLocaleString : number = x.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
150: var xToLocaleString : number = x.toLocaleString; // error
                           ^^^^^^ number

Error: object_prototype.js:151
151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                           ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                            ^^^^^^^^^^^^ function type
  This parameter is incompatible:
    407:     toLocaleString(locales?: string | Array<string>, options?: Date$LocaleOptions): string;
                                                                                             ^^^^^^ string. This type is incompatible with. See lib: <BUILTINS>/core.js:407
    151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                      ^^^^^^ number

Error: object_prototype.js:155
155: var yToLocaleString : number = y.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
155: var yToLocaleString : number = y.toLocaleString; // error
                           ^^^^^^ number

Error: proto.js:3
  3: (o1_proto.toString: empty); // error: function ~> empty
      ^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
  3: (o1_proto.toString: empty); // error: function ~> empty
                         ^^^^^ empty

Error: proto.js:7
  7: (o2.__proto__.p: empty); // error: number ~> empty
      ^^^^^^^^^^^^^^ number. This type is incompatible with
  7: (o2.__proto__.p: empty); // error: number ~> empty
                      ^^^^^ empty

Error: proto.js:13
 13: (C1_proto.bind: empty); // error: function ~> empty
      ^^^^^^^^^^^^^ function type. This type is incompatible with
 13: (C1_proto.bind: empty); // error: function ~> empty
                     ^^^^^ empty

Error: proto.js:17
 17: (inst1_proto.m: empty); // TODO error: function ~> empty
                  ^ property `m`. Property not found in
 17: (inst1_proto.m: empty); // TODO error: function ~> empty
      ^^^^^^^^^^^ super of C1


Found 37 errors
