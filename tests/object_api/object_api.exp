Error --------------------------------------------------------------------------------------------------------- c.js:5:3

Cannot call `c.foo` because property `foo` is missing in object type [1]. [prop-missing]

   c.js:5:3
   5| c.foo();
        ^^^

References:
   b.js:4:10
   4| const b: { a(): void, bar(): void } = Object.assign({ bar() {}, ...{} }, a);
               ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- object_create.js:12:2

Cannot cast object literal to `C` because object literal [1] is incompatible with `C` [2]. [incompatible-cast]

   object_create.js:12:2
   12| ({ foo: "foo" }: C);
        ^^^^^^^^^^^^^^ [1]

References:
   object_create.js:12:18
   12| ({ foo: "foo" }: C);
                        ^ [2]


Error -------------------------------------------------------------------------------------------- object_create.js:17:2

Cannot cast `o` to `C` because `O` [1] is incompatible with `C` [2]. [incompatible-cast]

   object_create.js:17:2
   17| (o: C);
        ^

References:
   object_create.js:16:16
   16| declare var o: O;
                      ^ [1]
   object_create.js:17:5
   17| (o: C);
           ^ [2]


Error ----------------------------------------------------------------------------------------------- object_keys.js:5:2

Cannot cast `Object.keys(...)` to undefined because array type [1] is incompatible with undefined [2].
[incompatible-cast]

   object_keys.js:5:2
   5| (Object.keys(sealed): void); // error, Array<string>
       ^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:5:23
   5| (Object.keys(sealed): void); // error, Array<string>
                            ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- object_keys.js:9:4

Cannot cast `k` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   object_keys.js:9:4
   9|   (k : number) // error: string ~> number
         ^

References:
   object_keys.js:8:1
   8| Object.keys(unsealed).forEach(k => {
      ^^^^^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:9:8
   9|   (k : number) // error: string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:14:4

Cannot cast `k` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   object_keys.js:14:4
   14|   (k : number) // error: string ~> number
          ^

References:
   object_keys.js:13:1
   13| Object.keys(dict).forEach(k => {
       ^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:14:8
   14|   (k : number) // error: string ~> number
              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:18:2

Cannot cast `Object.keys(...)` to array type because string [1] is incompatible with number [2] in array element.
[incompatible-cast]

   object_keys.js:18:2
   18| (Object.keys(any): Array<number>); // error, Array<string>
        ^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:18:26
   18| (Object.keys(any): Array<number>); // error, Array<string>
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:25:2

Cannot cast `Object.keys(...)` to array type because string literal `prop` [1] is incompatible with string literal
`error` [2] in array element. [incompatible-cast]

   object_keys.js:25:2
   25| (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:25:32
   25| (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
                                      ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:32:2

Cannot cast `Object.keys(...)` to array type because string literal `bar_prop` [1] is incompatible with string literal
`error` [2] in array element. [incompatible-cast]

   object_keys.js:32:2
   32| (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:32:32
   32| (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
                                      ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:38:6

Cannot cast `Object.keys(...)` to array type because string literal `hi` [1] is incompatible with string literal
`bye` [2] in array element. [incompatible-cast]

   object_keys.js:38:6
   38|     (Object.keys(dict): Array<'bye'>); // error
            ^^^^^^^^^^^^^^^^^

References:
   object_keys.js:36:20
   36|   function(dict: {['hi']: mixed}) {
                          ^^^^ [1]
   object_keys.js:38:31
   38|     (Object.keys(dict): Array<'bye'>); // error
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:44:6

Cannot cast `Object.keys(...)` to array type because string [1] is incompatible with string literal `123` [2] in array
element. [incompatible-cast]

   object_keys.js:44:6
   44|     (Object.keys(dict): Array<'123'>); // error: not supported yet
            ^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:44:31
   44|     (Object.keys(dict): Array<'123'>); // error: not supported yet
                                     ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_missing.js:5:12

Cannot call method `doesNotExist` because property `doesNotExist` is missing in statics of `Object` [1]. [prop-missing]

   object_missing.js:5:12
    5|     Object.doesNotExist();
                  ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:92:15
   92| declare class Object {
                     ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:26:32

Cannot assign `a.toString` to `aToString` because function type [1] cannot be unbound from the context [1] where it was
defined in the `this` parameter. [method-unbinding]

   object_prototype.js:26:32
    26| var aToString : () => string = a.toString;
                                       ^^^^^^^^^^

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:31:3

Cannot assign function to `b.toString` because property `toString` is not writable. [cannot-write]

   31| b.toString = function(): string { return 'foo'; };
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- object_prototype.js:38:28

Cannot get `x.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:38:28
    38| var xToString : number = x.toString; // error
                                   ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:39:35

Cannot get `x.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:39:35
    39| var xToString2 : () => number = x.toString; // error
                                          ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:43:28

Cannot get `y.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:43:28
    43| var yToString : number = y.toString; // error
                                   ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:48:7

Cannot get `123.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:48:7
    48| (123).toString;
              ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:476:5
   476|     toString(radix?: number): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:49:7

Cannot assign function to `123.toString` because property `toString` is missing in number [1]. [incompatible-use]

   object_prototype.js:49:7
   49| (123).toString = function() {}; // error
             ^^^^^^^^

References:
   object_prototype.js:49:2
   49| (123).toString = function() {}; // error
        ^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:51:16

Cannot call `123.toString` with `'foo'` bound to `radix` because string [1] is incompatible with number [2].
[incompatible-call]

   object_prototype.js:51:16
    51| (123).toString('foo'); // error
                       ^^^^^ [1]

References:
   <BUILTINS>/core.js:476:22
   476|     toString(radix?: number): string;
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:52:16

Cannot call `123.toString` with `null` bound to `radix` because null [1] is incompatible with number [2].
[incompatible-call]

   object_prototype.js:52:16
    52| (123).toString(null); // error
                       ^^^^ [1]

References:
   <BUILTINS>/core.js:476:22
   476|     toString(radix?: number): string;
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:63:51

Cannot assign `a.hasOwnProperty` to `aHasOwnProperty` because function type [1] cannot be unbound from the context [1]
where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:63:51
    63| var aHasOwnProperty : (prop: string) => boolean = a.hasOwnProperty;
                                                          ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:224:5
   224|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:68:3

Cannot assign function to `b.hasOwnProperty` because property `hasOwnProperty` is not writable. [cannot-write]

   68| b.hasOwnProperty = function() { return false; };
         ^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- object_prototype.js:71:34

Cannot get `x.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:71:34
    71| var xHasOwnProperty : number = x.hasOwnProperty; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:224:5
   224|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:72:53

Cannot get `x.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:72:53
    72| var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                            ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:224:5
   224|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:76:34

Cannot get `y.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:76:34
    76| var yHasOwnProperty : number = y.hasOwnProperty; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:224:5
   224|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:88:57

Cannot assign `a.propertyIsEnumerable` to `aPropertyIsEnumerable` because function type [1] cannot be unbound from the
context [1] where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:88:57
    88| var aPropertyIsEnumerable : (prop: string) => boolean = a.propertyIsEnumerable;
                                                                ^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:234:5
   234|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:93:3

Cannot assign function to `b.propertyIsEnumerable` because property `propertyIsEnumerable` is not writable.
[cannot-write]

   93| b.propertyIsEnumerable = function() { return false; };
         ^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- object_prototype.js:96:40

Cannot get `x.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:96:40
    96| var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                               ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:234:5
   234|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:98:5

Cannot get `x.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:98:5
    98|   x.propertyIsEnumerable; // error
            ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:234:5
   234|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:102:40

Cannot get `y.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:102:40
   102| var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                               ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:234:5
   234|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:119:3

Cannot assign function to `b.valueOf` because property `valueOf` is not writable. [cannot-write]

   119| b.valueOf = function() { return {}; };
          ^^^^^^^


Error --------------------------------------------------------------------------------------- object_prototype.js:122:25

Cannot assign `x.valueOf` to `xValueOf` because function type [1] is incompatible with number [2]. [incompatible-type]

   object_prototype.js:122:25
    122| var xValueOf : number = x.valueOf; // error
                                 ^^^^^^^^^

References:
   <BUILTINS>/core.js:1505:5
   1505|     valueOf(): number;
             ^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:122:16
    122| var xValueOf : number = x.valueOf; // error
                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:122:27

Cannot get `x.valueOf` because property `valueOf` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:122:27
    122| var xValueOf : number = x.valueOf; // error
                                   ^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1505:5
   1505|     valueOf(): number;
             ^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:126:27

Cannot get `y.valueOf` because property `valueOf` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:126:27
   126| var yValueOf : number = y.valueOf; // error
                                  ^^^^^^^ [1]

References:
   <BUILTINS>/core.js:240:5
   240|     valueOf(): mixed;
            ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:142:38

Cannot assign `a.toLocaleString` to `aToLocaleString` because function type [1] cannot be unbound from the context [1]
where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:142:38
   142| var aToLocaleString : () => string = a.toLocaleString;
                                             ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:236:5
   236|     toLocaleString(): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:147:3

Cannot assign function to `b.toLocaleString` because property `toLocaleString` is not writable. [cannot-write]

   147| b.toLocaleString = function() { return 'derp'; };
          ^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------- object_prototype.js:150:32

Cannot assign `x.toLocaleString` to `xToLocaleString` because function type [1] is incompatible with number [2].
[incompatible-type]

   object_prototype.js:150:32
    150| var xToLocaleString : number = x.toLocaleString; // error
                                        ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1493:5
   1493|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:150:23
    150| var xToLocaleString : number = x.toLocaleString; // error
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:150:34

Cannot get `x.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:150:34
    150| var xToLocaleString : number = x.toLocaleString; // error
                                          ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1493:5
   1493|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:151:39

Cannot assign `x.toLocaleString` to `xToLocaleString2` because function type [1] cannot be unbound from the context [1]
where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:151:39
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                               ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1493:5
   1493|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- object_prototype.js:151:39

Cannot assign `x.toLocaleString` to `xToLocaleString2` because string [1] is incompatible with number [2] in the return
value. [incompatible-type]

   object_prototype.js:151:39
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                               ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1493:93
   1493|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
                                                                                                     ^^^^^^ [1]
   object_prototype.js:151:30
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:151:41

Cannot get `x.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:151:41
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                                 ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1493:5
   1493|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:155:34

Cannot get `y.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:155:34
   155| var yToLocaleString : number = y.toLocaleString; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:236:5
   236|     toLocaleString(): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- proto.js:3:2

Cannot cast `o1_proto.toString` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:3:2
     3| (o1_proto.toString: empty); // error: function ~> empty
         ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]
   proto.js:3:21
     3| (o1_proto.toString: empty); // error: function ~> empty
                            ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- proto.js:3:11

Cannot get `o1_proto.toString` because property `toString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   proto.js:3:11
     3| (o1_proto.toString: empty); // error: function ~> empty
                  ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:238:5
   238|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- proto.js:7:2

Cannot cast `o2.__proto__.p` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:7:2
   7| (o2.__proto__.p: empty); // error: number ~> empty
       ^^^^^^^^^^^^^^

References:
   proto.js:5:27
   5| var o2 = Object.create({p:0});
                                ^ [1]
   proto.js:7:18
   7| (o2.__proto__.p: empty); // error: number ~> empty
                       ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- proto.js:13:2

Cannot cast `C1_proto.bind` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:13:2
   13| (C1_proto.bind: empty); // error: function ~> empty
        ^^^^^^^^^^^^^ [1]

References:
   proto.js:13:17
   13| (C1_proto.bind: empty); // error: function ~> empty
                       ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- proto.js:17:14

Cannot get `inst1_proto.m` because property `m` is missing in super of `C1` [1]. [prop-missing]

   proto.js:17:14
   17| (inst1_proto.m: empty); // TODO error: function ~> empty
                    ^

References:
   proto.js:17:2
   17| (inst1_proto.m: empty); // TODO error: function ~> empty
        ^^^^^^^^^^^ [1]



Found 48 errors
