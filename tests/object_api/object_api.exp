c.js:5
  5: c.foo();
       ^^^ property `foo`. Property not found in
  5: c.foo();
     ^ object literal

object_assign.js:7
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `assign`
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                       ^^^^^^^^^^^^^^^^^^^^^^ property `bar`. Property not found in
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal

object_create.js:12
 12: ({ foo: "foo" }: C);
      ^^^^^^^^^^^^^^ object literal. This type is incompatible with
 12: ({ foo: "foo" }: C);
                      ^ C

object_create.js:17
 17: (o: C);
      ^ object type. This type is incompatible with
 17: (o: C);
         ^ C

object_keys.js:32
 32:   (k: void); // errors: 1|2|a|b ~> void
        ^ object literal. This type is incompatible with
 32:   (k: void); // errors: 1|2|a|b ~> void
           ^^^^ undefined

object_keys.js:37
 37:   (k: void) // error: string ~> void
        ^ string. This type is incompatible with
 37:   (k: void) // error: string ~> void
           ^^^^ undefined

object_keys.js:45
 45:   (k: void) // error: string ~> void
        ^ string. This type is incompatible with
 45:   (k: void) // error: string ~> void
           ^^^^ undefined

object_keys.js:56
 56:     (k: void); // error: string ~> void
          ^ object type. This type is incompatible with
 56:     (k: void); // error: string ~> void
             ^^^^ undefined

object_keys.js:62
 62:     (k: void); // error: string ~> void
          ^ string. This type is incompatible with
 62:     (k: void); // error: string ~> void
             ^^^^ undefined

object_missing.js:5
  5:     Object.doesNotExist();
                ^^^^^^^^^^^^ property `doesNotExist`. Property not found in
  5:     Object.doesNotExist();
         ^^^^^^ statics of Object

object_prototype.js:38
 38: var xToString : number = x.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 38: var xToString : number = x.toString; // error
                     ^^^^^^ number

object_prototype.js:39
 39: var xToString2 : () => number = x.toString; // error
                            ^^^^^^ number. This type is incompatible with
string. See: [LIB] core.js:53

object_prototype.js:43
 43: var yToString : number = y.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 43: var yToString : number = y.toString; // error
                     ^^^^^^ number

object_prototype.js:49
 49: (123).toString = function() {}; // error
           ^^^^^^^^ property `toString`. Property cannot be assigned on
 49: (123).toString = function() {}; // error
      ^^^ number

object_prototype.js:51
 51: (123).toString('foo'); // error
      ^^^^^^^^^^^^^^^^^^^^ call of method `toString`
 51: (123).toString('foo'); // error
                    ^^^^^ string. This type is incompatible with
number. See: [LIB] core.js:98

object_prototype.js:52
 52: (123).toString(null); // error
      ^^^^^^^^^^^^^^^^^^^ call of method `toString`
 52: (123).toString(null); // error
                    ^^^^ null. This type is incompatible with
number. See: [LIB] core.js:98

object_prototype.js:71
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                           ^^^^^^ number

object_prototype.js:72
 72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                              ^^^^^^ number. This type is incompatible with
boolean. See: [LIB] core.js:50

object_prototype.js:76
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                           ^^^^^^ number

object_prototype.js:96
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                 ^^^^^^ number

object_prototype.js:97
 97: var xPropertyIsEnumerable2 : (prop: string) => number =
                                                    ^^^^^^ number. This type is incompatible with
boolean. See: [LIB] core.js:51

object_prototype.js:102
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                 ^^^^^^ number

object_prototype.js:122
122: var xValueOf : number = x.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
122: var xValueOf : number = x.valueOf; // error
                    ^^^^^^ number

object_prototype.js:126
126: var yValueOf : number = y.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
126: var yValueOf : number = y.valueOf; // error
                    ^^^^^^ number

object_prototype.js:150
150: var xToLocaleString : number = x.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
150: var xToLocaleString : number = x.toLocaleString; // error
                           ^^^^^^ number

object_prototype.js:151
151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                  ^^^^^^ number. This type is incompatible with
string. See: [LIB] core.js:280

object_prototype.js:155
155: var yToLocaleString : number = y.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
155: var yToLocaleString : number = y.toLocaleString; // error
                           ^^^^^^ number

object_values.js:34
 34:   (v: void); // errors: A|B|C|D ~> void
        ^ mixed. This type is incompatible with
 34:   (v: void); // errors: A|B|C|D ~> void
           ^^^^ undefined

object_values.js:39
 39:   (v: void); // error: mixed ~> void
        ^ mixed. This type is incompatible with
 39:   (v: void); // error: mixed ~> void
           ^^^^ undefined

object_values.js:48
 48:   (v: string);
        ^ mixed. This type is incompatible with
 48:   (v: string);
           ^^^^^^ string

object_values.js:50
 50:   (v: void);
        ^ mixed. This type is incompatible with
 50:   (v: void);
           ^^^^ undefined

object_values.js:55
 55: dict.foo = 0; // error: `foo` is a string, incompatible with `k`
     ^^^^^^^^ property `foo` is a string. This type is incompatible with
 45: var dict: {[k:number]: string} = {}
                   ^^^^^^ number

object_values.js:55
 55: dict.foo = 0; // error: `foo` is a string, incompatible with `k`
                ^ number. This type is incompatible with
 45: var dict: {[k:number]: string} = {}
                            ^^^^^^ string

object_values.js:61
 61:   (v: string|number);
        ^ mixed. This type is incompatible with
 61:   (v: string|number);
           ^^^^^^^^^^^^^ union: string | number
  Member 1:
   61:   (v: string|number);
             ^^^^^^ string
  Error:
   61:   (v: string|number);
          ^ mixed. This type is incompatible with
   61:   (v: string|number);
             ^^^^^^ string
  Member 2:
   61:   (v: string|number);
                    ^^^^^^ number
  Error:
   61:   (v: string|number);
          ^ mixed. This type is incompatible with
   61:   (v: string|number);
                    ^^^^^^ number

object_values.js:63
 63:   (v: void);
        ^ mixed. This type is incompatible with
 63:   (v: void);
           ^^^^ undefined

object_values.js:68
 68: mixed_dict.bar = true; // error: `bar` is a string, incompatible with `k`
     ^^^^^^^^^^^^^^ property `bar` is a string. This type is incompatible with
 58: var mixed_dict: {[k:number]: string, foo: number} = {foo: 0};
                         ^^^^^^ number

object_values.js:68
 68: mixed_dict.bar = true; // error: `bar` is a string, incompatible with `k`
                      ^^^^ boolean. This type is incompatible with
 58: var mixed_dict: {[k:number]: string, foo: number} = {foo: 0};
                                  ^^^^^^ string

object_values.js:78
 78:     (v: void); // error: mixed ~> void
          ^ mixed. This type is incompatible with
 78:     (v: void); // error: mixed ~> void
             ^^^^ undefined

object_values.js:88
 88:     (v: string);
          ^ mixed. This type is incompatible with
 88:     (v: string);
             ^^^^^^ string

object_values.js:89
 89:     (v: number);
          ^ mixed. This type is incompatible with
 89:     (v: number);
             ^^^^^^ number


Found 40 errors
