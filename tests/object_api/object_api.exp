Error -------------------------------------------------------------------------------------------- object_create.js:12:2

Cannot cast object literal to `C` because object literal [1] is incompatible with `C` [2]. [incompatible-cast]

   object_create.js:12:2
   12| ({ foo: "foo" }: C);
        ^^^^^^^^^^^^^^ [1]

References:
   object_create.js:12:18
   12| ({ foo: "foo" }: C);
                        ^ [2]


Error -------------------------------------------------------------------------------------------- object_create.js:17:2

Cannot cast `o` to `C` because `O` [1] is incompatible with `C` [2]. [incompatible-cast]

   object_create.js:17:2
   17| (o: C);
        ^

References:
   object_create.js:16:16
   16| declare var o: O;
                      ^ [1]
   object_create.js:17:5
   17| (o: C);
           ^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:27:2

Cannot cast `Object.entries(...)` to array type because number [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:27:2
   27| (Object.entries(dict): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^

References:
   object_entries.js:1:30
    1| declare var dict: {[string]: number};
                                    ^^^^^^ [1]
   object_entries.js:27:39
   27| (Object.entries(dict): Array<[string, empty]>); // ERROR
                                             ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:28:2

Cannot cast `Object.entries(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:28:2
   28| (Object.entries(iface): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:28:40
   28| (Object.entries(iface): Array<[string, empty]>); // ERROR
                                              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:29:2

Cannot cast `Object.entries(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:29:2
   29| (Object.entries(dictWithProps): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:29:48
   29| (Object.entries(dictWithProps): Array<[string, empty]>); // ERROR
                                                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:30:2

Cannot cast `Object.entries(...)` to array type because number [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:30:2
   30| (Object.entries(dictUnion): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_entries.js:7:35
    7| declare var dictUnion: {[string]: number} | {[string]: boolean};
                                         ^^^^^^ [1]
   object_entries.js:30:44
   30| (Object.entries(dictUnion): Array<[string, empty]>); // ERROR
                                                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:30:2

Cannot cast `Object.entries(...)` to array type because boolean [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:30:2
   30| (Object.entries(dictUnion): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_entries.js:7:56
    7| declare var dictUnion: {[string]: number} | {[string]: boolean};
                                                              ^^^^^^^ [1]
   object_entries.js:30:44
   30| (Object.entries(dictUnion): Array<[string, empty]>); // ERROR
                                                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:31:2

Cannot cast `Object.entries(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:31:2
   31| (Object.entries(writeOnlyDict): Array<[string, empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:31:48
   31| (Object.entries(writeOnlyDict): Array<[string, empty]>); // ERROR
                                                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:32:2

Cannot cast `Object.entries(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:32:2
   32| (Object.entries(obj): Array<['a' | 'b', empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:32:41
   32| (Object.entries(obj): Array<['a' | 'b', empty]>); // ERROR
                                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:33:2

Cannot cast `Object.entries(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:33:2
   33| (Object.entries(instance): Array<['a' | 'b', empty]>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:33:46
   33| (Object.entries(instance): Array<['a' | 'b', empty]>); // ERROR
                                                    ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:34:2

Cannot cast `Object.entries(...)` to array type because tuple type [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_entries.js:34:2
   34| (Object.entries(dict): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_entries.js:34:30
   34| (Object.entries(dict): Array<empty>); // ERROR
                                    ^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_entries.js:37:8

Cannot call method `entries` because undefined [1] is not an object. [not-an-object]

   object_entries.js:37:8
   37| Object.entries(undefined); // ERROR
              ^^^^^^^

References:
   object_entries.js:37:16
   37| Object.entries(undefined); // ERROR
                      ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- object_entries.js:38:8

Cannot call method `entries` because null [1] is not an object. [not-an-object]

   object_entries.js:38:8
   38| Object.entries(null); // ERROR
              ^^^^^^^

References:
   object_entries.js:38:16
   38| Object.entries(null); // ERROR
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------- object_entries.js:39:8

Cannot call method `entries` because number [1] is not an object. [not-an-object]

   object_entries.js:39:8
   39| Object.entries(1); // ERROR
              ^^^^^^^

References:
   object_entries.js:39:16
   39| Object.entries(1); // ERROR
                      ^ [1]


Error ------------------------------------------------------------------------------------------- object_entries.js:40:8

Cannot call method `entries` because boolean [1] is not an object. [not-an-object]

   object_entries.js:40:8
   40| Object.entries(true); // ERROR
              ^^^^^^^

References:
   object_entries.js:40:16
   40| Object.entries(true); // ERROR
                      ^^^^ [1]


Error ------------------------------------------------------------------------------------------- object_entries.js:41:8

Cannot call method `entries` because array literal [1] is not an object. [not-an-object]

   object_entries.js:41:8
   41| Object.entries([1, 2]); // ERROR
              ^^^^^^^

References:
   object_entries.js:41:16
   41| Object.entries([1, 2]); // ERROR
                      ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- object_keys.js:3:2

Cannot cast `Object.keys(...)` to undefined because array type [1] is incompatible with undefined [2].
[incompatible-cast]

   object_keys.js:3:2
   3| (Object.keys(sealed): void); // error, Array<string>
       ^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:3:23
   3| (Object.keys(sealed): void); // error, Array<string>
                            ^^^^ [2]


Error ----------------------------------------------------------------------------------------------- object_keys.js:7:4

Cannot cast `k` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   object_keys.js:7:4
   7|   (k : number) // error: string ~> number
         ^

References:
   object_keys.js:6:1
   6| Object.keys(dict).forEach(k => {
      ^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:7:8
   7|   (k : number) // error: string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:17:2

Cannot cast `Object.keys(...)` to array type because string [1] is incompatible with number [2] in array element.
[incompatible-cast]

   object_keys.js:17:2
   17| (Object.keys(any): Array<number>); // error, Array<string>
        ^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:17:26
   17| (Object.keys(any): Array<number>); // error, Array<string>
                                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:24:2

Cannot cast `Object.keys(...)` to array type because string literal `prop` [1] is incompatible with string literal
`error` [2] in array element. [incompatible-cast]

   object_keys.js:24:2
   24| (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:24:32
   24| (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
                                      ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:31:2

Cannot cast `Object.keys(...)` to array type because string literal `bar_prop` [1] is incompatible with string literal
`error` [2] in array element. [incompatible-cast]

   object_keys.js:31:2
   31| (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:31:32
   31| (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
                                      ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:37:6

Cannot cast `Object.keys(...)` to array type because string literal `hi` [1] is incompatible with string literal
`bye` [2] in array element. [incompatible-cast]

   object_keys.js:37:6
   37|     (Object.keys(dict): Array<'bye'>); // error
            ^^^^^^^^^^^^^^^^^

References:
   object_keys.js:35:20
   35|   function(dict: {['hi']: mixed}) {
                          ^^^^ [1]
   object_keys.js:37:31
   37|     (Object.keys(dict): Array<'bye'>); // error
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:43:6

Cannot cast `Object.keys(...)` to array type because string [1] is incompatible with string literal `123` [2] in array
element. [incompatible-cast]

   object_keys.js:43:6
   43|     (Object.keys(dict): Array<'123'>); // error: not supported yet
            ^^^^^^^^^^^^^^^^^ [1]

References:
   object_keys.js:43:31
   43|     (Object.keys(dict): Array<'123'>); // error: not supported yet
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:55:2

Cannot cast `Object.keys(...)` to array type because string literal `x` [1] is incompatible with literal union [2] in
array element. [incompatible-cast]

   object_keys.js:55:2
   55| (Object.keys(ifaceDict): Array<'$value' | '$key'>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^

References:
   object_keys.js:49:36
   49| declare var ifaceDict: interface {['x' | 'y']: boolean};
                                          ^^^ [1]
   object_keys.js:55:32
   55| (Object.keys(ifaceDict): Array<'$value' | '$key'>); // ERROR
                                      ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:55:2

Cannot cast `Object.keys(...)` to array type because string literal `y` [1] is incompatible with literal union [2] in
array element. [incompatible-cast]

   object_keys.js:55:2
   55| (Object.keys(ifaceDict): Array<'$value' | '$key'>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^

References:
   object_keys.js:49:42
   49| declare var ifaceDict: interface {['x' | 'y']: boolean};
                                                ^^^ [1]
   object_keys.js:55:32
   55| (Object.keys(ifaceDict): Array<'$value' | '$key'>); // ERROR
                                      ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:58:8

Cannot call method `keys` because undefined [1] is not an object. [not-an-object]

   object_keys.js:58:8
   58| Object.keys(undefined); // ERROR
              ^^^^

References:
   object_keys.js:58:13
   58| Object.keys(undefined); // ERROR
                   ^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_keys.js:59:8

Cannot call method `keys` because null [1] is not an object. [not-an-object]

   object_keys.js:59:8
   59| Object.keys(null); // ERROR
              ^^^^

References:
   object_keys.js:59:13
   59| Object.keys(null); // ERROR
                   ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_keys.js:60:8

Cannot call method `keys` because number [1] is not an object. [not-an-object]

   object_keys.js:60:8
   60| Object.keys(1); // ERROR
              ^^^^

References:
   object_keys.js:60:13
   60| Object.keys(1); // ERROR
                   ^ [1]


Error ---------------------------------------------------------------------------------------------- object_keys.js:61:8

Cannot call method `keys` because boolean [1] is not an object. [not-an-object]

   object_keys.js:61:8
   61| Object.keys(true); // ERROR
              ^^^^

References:
   object_keys.js:61:13
   61| Object.keys(true); // ERROR
                   ^^^^ [1]


Error ---------------------------------------------------------------------------------------------- object_keys.js:67:4

Cannot cast `Object.keys(...)[0]` to `OpaqueKey` because string [1] is incompatible with `OpaqueKey` [2].
[incompatible-cast]

   object_keys.js:67:4
   67|   (Object.keys(opaqueDict)[0]: OpaqueKey); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_keys.js:67:4
   67|   (Object.keys(opaqueDict)[0]: OpaqueKey); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:67:32
   67|   (Object.keys(opaqueDict)[0]: OpaqueKey); // ERROR
                                      ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:74:4

Cannot cast `Object.keys(...)[0]` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   object_keys.js:74:4
   74|   (Object.keys(opaqueDict)[0]: empty); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_keys.js:72:31
   72|   declare const opaqueDict: {[OpaqueKeyWithSupertype1]: number};
                                     ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:74:32
   74|   (Object.keys(opaqueDict)[0]: empty); // ERROR
                                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- object_keys.js:87:4

Cannot cast `Object.keys(...)[0]` to `OpaqueKeyWithSupertype3` because string [1] is incompatible with
`OpaqueKeyWithSupertype3` [2]. [incompatible-cast]

   object_keys.js:87:4
   87|   (Object.keys(opaqueDict)[0]: OpaqueKeyWithSupertype3); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_keys.js:87:4
   87|   (Object.keys(opaqueDict)[0]: OpaqueKeyWithSupertype3); // ERROR
          ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_keys.js:87:32
   87|   (Object.keys(opaqueDict)[0]: OpaqueKeyWithSupertype3); // ERROR
                                      ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- object_missing.js:3:12

Cannot call method `doesNotExist` because property `doesNotExist` is missing in statics of `Object` [1]. [prop-missing]

   object_missing.js:3:12
    3|     Object.doesNotExist();
                  ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:94:15
   94| declare class Object {
                     ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:26:32

Cannot assign `a.toString` to `aToString` because function type [1] cannot be unbound from the context [1] where it was
defined in the `this` parameter. [method-unbinding]

   object_prototype.js:26:32
    26| var aToString : () => string = a.toString;
                                       ^^^^^^^^^^

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:31:3

Cannot assign function to `b.toString` because property `toString` is missing in object literal [1]. [prop-missing]

   object_prototype.js:31:3
   31| b.toString = function(): string { return 'foo'; };
         ^^^^^^^^

References:
   object_prototype.js:11:9
   11| var b = { foo: 'bar' };
               ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:38:26

Cannot assign `x.toString` to `xToString` because function type [1] is incompatible with number [2]. [incompatible-type]

   object_prototype.js:38:26
    38| var xToString : number = x.toString; // error
                                 ^^^^^^^^^^

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:38:17
    38| var xToString : number = x.toString; // error
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:38:28

Cannot get `x.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:38:28
    38| var xToString : number = x.toString; // error
                                   ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:39:33

Cannot assign `x.toString` to `xToString2` because string [1] is incompatible with number [2] in the return value.
[incompatible-type]

   object_prototype.js:39:33
    39| var xToString2 : () => number = x.toString; // error
                                        ^^^^^^^^^^

References:
   <BUILTINS>/core.js:240:17
   240|     toString(): string;
                        ^^^^^^ [1]
   object_prototype.js:39:24
    39| var xToString2 : () => number = x.toString; // error
                               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:39:35

Cannot get `x.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:39:35
    39| var xToString2 : () => number = x.toString; // error
                                          ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:43:26

Cannot assign `y.toString` to `yToString` because function type [1] is incompatible with number [2]. [incompatible-type]

   object_prototype.js:43:26
    43| var yToString : number = y.toString; // error
                                 ^^^^^^^^^^

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:43:17
    43| var yToString : number = y.toString; // error
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:43:28

Cannot get `y.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:43:28
    43| var yToString : number = y.toString; // error
                                   ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:48:7

Cannot get `123.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:48:7
    48| (123).toString;
              ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:478:5
   478|     toString(radix?: number): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:49:7

Cannot assign function to `123.toString` because property `toString` is missing in number [1]. [incompatible-use]

   object_prototype.js:49:7
   49| (123).toString = function() {}; // error
             ^^^^^^^^

References:
   object_prototype.js:49:2
   49| (123).toString = function() {}; // error
        ^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:51:16

Cannot call `123.toString` with `'foo'` bound to `radix` because string [1] is incompatible with number [2].
[incompatible-call]

   object_prototype.js:51:16
    51| (123).toString('foo'); // error
                       ^^^^^ [1]

References:
   <BUILTINS>/core.js:478:22
   478|     toString(radix?: number): string;
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:52:16

Cannot call `123.toString` with `null` bound to `radix` because null [1] is incompatible with number [2].
[incompatible-call]

   object_prototype.js:52:16
    52| (123).toString(null); // error
                       ^^^^ [1]

References:
   <BUILTINS>/core.js:478:22
   478|     toString(radix?: number): string;
                             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:63:51

Cannot assign `a.hasOwnProperty` to `aHasOwnProperty` because function type [1] cannot be unbound from the context [1]
where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:63:51
    63| var aHasOwnProperty : (prop: string) => boolean = a.hasOwnProperty;
                                                          ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:68:3

Cannot assign function to `b.hasOwnProperty` because property `hasOwnProperty` is missing in object literal [1].
[prop-missing]

   object_prototype.js:68:3
   68| b.hasOwnProperty = function() { return false; };
         ^^^^^^^^^^^^^^

References:
   object_prototype.js:11:9
   11| var b = { foo: 'bar' };
               ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:71:32

Cannot assign `x.hasOwnProperty` to `xHasOwnProperty` because function type [1] is incompatible with number [2].
[incompatible-type]

   object_prototype.js:71:32
    71| var xHasOwnProperty : number = x.hasOwnProperty; // error
                                       ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:71:23
    71| var xHasOwnProperty : number = x.hasOwnProperty; // error
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:71:34

Cannot get `x.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:71:34
    71| var xHasOwnProperty : number = x.hasOwnProperty; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:72:51

Cannot assign `x.hasOwnProperty` to `xHasOwnProperty2` because boolean [1] is incompatible with number [2] in the return
value. [incompatible-type]

   object_prototype.js:72:51
    72| var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                          ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:226:34
   226|     hasOwnProperty(prop: mixed): boolean;
                                         ^^^^^^^ [1]
   object_prototype.js:72:42
    72| var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:72:53

Cannot get `x.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:72:53
    72| var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                            ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:76:32

Cannot assign `y.hasOwnProperty` to `yHasOwnProperty` because function type [1] is incompatible with number [2].
[incompatible-type]

   object_prototype.js:76:32
    76| var yHasOwnProperty : number = y.hasOwnProperty; // error
                                       ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:76:23
    76| var yHasOwnProperty : number = y.hasOwnProperty; // error
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:76:34

Cannot get `y.hasOwnProperty` because property `hasOwnProperty` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:76:34
    76| var yHasOwnProperty : number = y.hasOwnProperty; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:226:5
   226|     hasOwnProperty(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:88:57

Cannot assign `a.propertyIsEnumerable` to `aPropertyIsEnumerable` because function type [1] cannot be unbound from the
context [1] where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:88:57
    88| var aPropertyIsEnumerable : (prop: string) => boolean = a.propertyIsEnumerable;
                                                                ^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------- object_prototype.js:93:3

Cannot assign function to `b.propertyIsEnumerable` because property `propertyIsEnumerable` is missing in object
literal [1]. [prop-missing]

   object_prototype.js:93:3
   93| b.propertyIsEnumerable = function() { return false; };
         ^^^^^^^^^^^^^^^^^^^^

References:
   object_prototype.js:11:9
   11| var b = { foo: 'bar' };
               ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:96:38

Cannot assign `x.propertyIsEnumerable` to `xPropertyIsEnumerable` because function type [1] is incompatible with
number [2]. [incompatible-type]

   object_prototype.js:96:38
    96| var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                             ^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:96:29
    96| var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                    ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:96:40

Cannot get `x.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:96:40
    96| var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                               ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:98:3

Cannot assign `x.propertyIsEnumerable` to `xPropertyIsEnumerable2` because boolean [1] is incompatible with number [2]
in the return value. [incompatible-type]

   object_prototype.js:98:3
    98|   x.propertyIsEnumerable; // error
          ^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:236:40
   236|     propertyIsEnumerable(prop: mixed): boolean;
                                               ^^^^^^^ [1]
   object_prototype.js:97:48
    97| var xPropertyIsEnumerable2 : (prop: string) => number =
                                                       ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- object_prototype.js:98:5

Cannot get `x.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:98:5
    98|   x.propertyIsEnumerable; // error
            ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:102:38

Cannot assign `y.propertyIsEnumerable` to `yPropertyIsEnumerable` because function type [1] is incompatible with
number [2]. [incompatible-type]

   object_prototype.js:102:38
   102| var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                             ^^^^^^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:102:29
   102| var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:102:40

Cannot get `y.propertyIsEnumerable` because property `propertyIsEnumerable` [1] cannot be unbound from the context [2]
where it was defined. [method-unbinding]

   object_prototype.js:102:40
   102| var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                               ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:236:5
   236|     propertyIsEnumerable(prop: mixed): boolean;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- object_prototype.js:119:3

Cannot assign function to `b.valueOf` because property `valueOf` is missing in object literal [1]. [prop-missing]

   object_prototype.js:119:3
   119| b.valueOf = function() { return {}; };
          ^^^^^^^

References:
   object_prototype.js:11:9
    11| var b = { foo: 'bar' };
                ^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- object_prototype.js:122:25

Cannot assign `x.valueOf` to `xValueOf` because function type [1] is incompatible with number [2]. [incompatible-type]

   object_prototype.js:122:25
    122| var xValueOf : number = x.valueOf; // error
                                 ^^^^^^^^^

References:
   <BUILTINS>/core.js:1588:5
   1588|     valueOf(): number;
             ^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:122:16
    122| var xValueOf : number = x.valueOf; // error
                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:122:27

Cannot get `x.valueOf` because property `valueOf` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:122:27
    122| var xValueOf : number = x.valueOf; // error
                                   ^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1588:5
   1588|     valueOf(): number;
             ^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:126:25

Cannot assign `y.valueOf` to `yValueOf` because function type [1] is incompatible with number [2]. [incompatible-type]

   object_prototype.js:126:25
   126| var yValueOf : number = y.valueOf; // error
                                ^^^^^^^^^

References:
   <BUILTINS>/core.js:242:5
   242|     valueOf(): mixed;
            ^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:126:16
   126| var yValueOf : number = y.valueOf; // error
                       ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:126:27

Cannot get `y.valueOf` because property `valueOf` [1] cannot be unbound from the context [2] where it was defined.
[method-unbinding]

   object_prototype.js:126:27
   126| var yValueOf : number = y.valueOf; // error
                                  ^^^^^^^ [1]

References:
   <BUILTINS>/core.js:242:5
   242|     valueOf(): mixed;
            ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:142:38

Cannot assign `a.toLocaleString` to `aToLocaleString` because function type [1] cannot be unbound from the context [1]
where it was defined in the `this` parameter. [method-unbinding]

   object_prototype.js:142:38
   142| var aToLocaleString : () => string = a.toLocaleString;
                                             ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:238:5
   238|     toLocaleString(): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- object_prototype.js:147:3

Cannot assign function to `b.toLocaleString` because property `toLocaleString` is missing in object literal [1].
[prop-missing]

   object_prototype.js:147:3
   147| b.toLocaleString = function() { return 'derp'; };
          ^^^^^^^^^^^^^^

References:
   object_prototype.js:11:9
    11| var b = { foo: 'bar' };
                ^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- object_prototype.js:150:32

Cannot assign `x.toLocaleString` to `xToLocaleString` because function type [1] is incompatible with number [2].
[incompatible-type]

   object_prototype.js:150:32
    150| var xToLocaleString : number = x.toLocaleString; // error
                                        ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1576:5
   1576|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:150:23
    150| var xToLocaleString : number = x.toLocaleString; // error
                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:150:34

Cannot get `x.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:150:34
    150| var xToLocaleString : number = x.toLocaleString; // error
                                          ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1576:5
   1576|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:151:39

Cannot assign `x.toLocaleString` to `xToLocaleString2` because string [1] is incompatible with number [2] in the return
value. [incompatible-type]

   object_prototype.js:151:39
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                               ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:1576:93
   1576|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
                                                                                                     ^^^^^^ [1]
   object_prototype.js:151:30
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:151:41

Cannot get `x.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:151:41
    151| var xToLocaleString2 : () => number = x.toLocaleString; // error
                                                 ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:1576:5
   1576|     toLocaleString(locales?: string | Array<string>, options?: Intl$DateTimeFormatOptions): string;
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:155:32

Cannot assign `y.toLocaleString` to `yToLocaleString` because function type [1] is incompatible with number [2].
[incompatible-type]

   object_prototype.js:155:32
   155| var yToLocaleString : number = y.toLocaleString; // error
                                       ^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:238:5
   238|     toLocaleString(): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   object_prototype.js:155:23
   155| var yToLocaleString : number = y.toLocaleString; // error
                              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- object_prototype.js:155:34

Cannot get `y.toLocaleString` because property `toLocaleString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   object_prototype.js:155:34
   155| var yToLocaleString : number = y.toLocaleString; // error
                                         ^^^^^^^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:238:5
   238|     toLocaleString(): string;
            ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:27:2

Cannot cast `Object.values(...)` to array type because number [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:27:2
   27| (Object.values(dict): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^

References:
   object_values.js:1:30
    1| declare var dict: {[string]: number};
                                    ^^^^^^ [1]
   object_values.js:27:29
   27| (Object.values(dict): Array<empty>); // ERROR
                                   ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:28:2

Cannot cast `Object.values(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:28:2
   28| (Object.values(iface): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_values.js:28:30
   28| (Object.values(iface): Array<empty>); // ERROR
                                    ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:29:2

Cannot cast `Object.values(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:29:2
   29| (Object.values(dictWithProps): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_values.js:29:38
   29| (Object.values(dictWithProps): Array<empty>); // ERROR
                                            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:30:2

Cannot cast `Object.values(...)` to array type because number [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:30:2
   30| (Object.values(dictUnion): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_values.js:7:35
    7| declare var dictUnion: {[string]: number} | {[string]: boolean};
                                         ^^^^^^ [1]
   object_values.js:30:34
   30| (Object.values(dictUnion): Array<empty>); // ERROR
                                        ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:30:2

Cannot cast `Object.values(...)` to array type because boolean [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:30:2
   30| (Object.values(dictUnion): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   object_values.js:7:56
    7| declare var dictUnion: {[string]: number} | {[string]: boolean};
                                                              ^^^^^^^ [1]
   object_values.js:30:34
   30| (Object.values(dictUnion): Array<empty>); // ERROR
                                        ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:31:2

Cannot cast `Object.values(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:31:2
   31| (Object.values(writeOnlyDict): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_values.js:31:38
   31| (Object.values(writeOnlyDict): Array<empty>); // ERROR
                                            ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:32:2

Cannot cast `Object.values(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:32:2
   32| (Object.values(obj): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^ [1]

References:
   object_values.js:32:28
   32| (Object.values(obj): Array<empty>); // ERROR
                                  ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:33:2

Cannot cast `Object.values(...)` to array type because mixed [1] is incompatible with empty [2] in array element.
[incompatible-cast]

   object_values.js:33:2
   33| (Object.values(instance): Array<empty>); // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   object_values.js:33:33
   33| (Object.values(instance): Array<empty>); // ERROR
                                       ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- object_values.js:36:8

Cannot call method `values` because undefined [1] is not an object. [not-an-object]

   object_values.js:36:8
   36| Object.values(undefined); // ERROR
              ^^^^^^

References:
   object_values.js:36:15
   36| Object.values(undefined); // ERROR
                     ^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- object_values.js:37:8

Cannot call method `values` because null [1] is not an object. [not-an-object]

   object_values.js:37:8
   37| Object.values(null); // ERROR
              ^^^^^^

References:
   object_values.js:37:15
   37| Object.values(null); // ERROR
                     ^^^^ [1]


Error -------------------------------------------------------------------------------------------- object_values.js:38:8

Cannot call method `values` because number [1] is not an object. [not-an-object]

   object_values.js:38:8
   38| Object.values(1); // ERROR
              ^^^^^^

References:
   object_values.js:38:15
   38| Object.values(1); // ERROR
                     ^ [1]


Error -------------------------------------------------------------------------------------------- object_values.js:39:8

Cannot call method `values` because boolean [1] is not an object. [not-an-object]

   object_values.js:39:8
   39| Object.values(true); // ERROR
              ^^^^^^

References:
   object_values.js:39:15
   39| Object.values(true); // ERROR
                     ^^^^ [1]


Error -------------------------------------------------------------------------------------------- object_values.js:40:8

Cannot call method `values` because array literal [1] is not an object. [not-an-object]

   object_values.js:40:8
   40| Object.values([1, 2]); // ERROR
              ^^^^^^

References:
   object_values.js:40:15
   40| Object.values([1, 2]); // ERROR
                     ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- proto.js:3:2

Cannot cast `o1_proto.toString` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:3:2
     3| (o1_proto.toString: empty); // error: function ~> empty
         ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]
   proto.js:3:21
     3| (o1_proto.toString: empty); // error: function ~> empty
                            ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- proto.js:3:11

Cannot get `o1_proto.toString` because property `toString` [1] cannot be unbound from the context [2] where it was
defined. [method-unbinding]

   proto.js:3:11
     3| (o1_proto.toString: empty); // error: function ~> empty
                  ^^^^^^^^ [1]

References:
   <BUILTINS>/core.js:240:5
   240|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- proto.js:7:2

Cannot cast `o2.__proto__.p` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:7:2
   7| (o2.__proto__.p: empty); // error: number ~> empty
       ^^^^^^^^^^^^^^

References:
   proto.js:5:27
   5| var o2 = Object.create({p:0});
                                ^ [1]
   proto.js:7:18
   7| (o2.__proto__.p: empty); // error: number ~> empty
                       ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- proto.js:13:2

Cannot cast `C1_proto.bind` to empty because function type [1] is incompatible with empty [2]. [incompatible-cast]

   proto.js:13:2
   13| (C1_proto.bind: empty); // error: function ~> empty
        ^^^^^^^^^^^^^ [1]

References:
   proto.js:13:17
   13| (C1_proto.bind: empty); // error: function ~> empty
                       ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- proto.js:17:14

Cannot get `inst1_proto.m` because property `m` is missing in super of `C1` [1]. [prop-missing]

   proto.js:17:14
   17| (inst1_proto.m: empty); // TODO error: function ~> empty
                    ^

References:
   proto.js:17:2
   17| (inst1_proto.m: empty); // TODO error: function ~> empty
        ^^^^^^^^^^^ [1]



Found 92 errors
