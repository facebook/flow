c.js:5
  5: c.foo();
       ^^^ property `foo`. Property not found in
  5: c.foo();
     ^ object literal

object_assign.js:7
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `assign`
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                       ^^^^^^^^^^^^^^^^^^^^^^ property `bar`. Property not found in
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal

object_create.js:12
 12: ({ foo: "foo" }: C);
      ^^^^^^^^^^^^^^ object literal. This type is incompatible with
 12: ({ foo: "foo" }: C);
                      ^ C

object_create.js:17
 17: (o: C);
      ^ object type. This type is incompatible with
 17: (o: C);
         ^ C

object_keys.js:5
  5: (Object.keys(sealed): void); // error, Array<string>
      ^^^^^^^^^^^^^^^^^^^ array type. This type is incompatible with
  5: (Object.keys(sealed): void); // error, Array<string>
                           ^^^^ undefined

object_keys.js:9
  9:   (k : number) // error: number ~> string
        ^ string. This type is incompatible with
  9:   (k : number) // error: number ~> string
            ^^^^^^ number

object_keys.js:14
 14:   (k : number) // error: number ~> string
        ^ string. This type is incompatible with
 14:   (k : number) // error: number ~> string
            ^^^^^^ number

object_keys.js:18
 18: (Object.keys(any): Array<number>); // error, Array<string>
                  ^^^ string. This type is incompatible with
 18: (Object.keys(any): Array<number>); // error, Array<string>
                              ^^^^^^ number

object_missing.js:5
  5:     Object.doesNotExist();
                ^^^^^^^^^^^^ property `doesNotExist`. Property not found in
  5:     Object.doesNotExist();
         ^^^^^^ statics of Object

object_prototype.js:38
 38: var xToString : number = x.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 38: var xToString : number = x.toString; // error
                     ^^^^^^ number

object_prototype.js:39
 39: var xToString2 : () => number = x.toString; // error
                            ^^^^^^ number. This type is incompatible with
string. See lib: core.js:55

object_prototype.js:43
 43: var yToString : number = y.toString; // error
                              ^^^^^^^^^^ function type. This type is incompatible with
 43: var yToString : number = y.toString; // error
                     ^^^^^^ number

object_prototype.js:49
 49: (123).toString = function() {}; // error
           ^^^^^^^^ property `toString`. Property cannot be assigned on
 49: (123).toString = function() {}; // error
      ^^^ number

object_prototype.js:51
 51: (123).toString('foo'); // error
      ^^^^^^^^^^^^^^^^^^^^ call of method `toString`
 51: (123).toString('foo'); // error
                    ^^^^^ string. This type is incompatible with
number. See lib: core.js:128

object_prototype.js:52
 52: (123).toString(null); // error
      ^^^^^^^^^^^^^^^^^^^ call of method `toString`
 52: (123).toString(null); // error
                    ^^^^ null. This type is incompatible with
number. See lib: core.js:128

object_prototype.js:71
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                           ^^^^^^ number

object_prototype.js:72
 72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                              ^^^^^^ number. This type is incompatible with
boolean. See lib: core.js:52

object_prototype.js:76
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                           ^^^^^^ number

object_prototype.js:96
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                 ^^^^^^ number

object_prototype.js:97
 97: var xPropertyIsEnumerable2 : (prop: string) => number =
                                                    ^^^^^^ number. This type is incompatible with
boolean. See lib: core.js:53

object_prototype.js:102
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                 ^^^^^^ number

object_prototype.js:122
122: var xValueOf : number = x.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
122: var xValueOf : number = x.valueOf; // error
                    ^^^^^^ number

object_prototype.js:126
126: var yValueOf : number = y.valueOf; // error
                             ^^^^^^^^^ function type. This type is incompatible with
126: var yValueOf : number = y.valueOf; // error
                    ^^^^^^ number

object_prototype.js:150
150: var xToLocaleString : number = x.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
150: var xToLocaleString : number = x.toLocaleString; // error
                           ^^^^^^ number

object_prototype.js:151
151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                  ^^^^^^ number. This type is incompatible with
string. See lib: core.js:340

object_prototype.js:155
155: var yToLocaleString : number = y.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ function type. This type is incompatible with
155: var yToLocaleString : number = y.toLocaleString; // error
                           ^^^^^^ number


Found 26 errors
