Error ------------------------------------------------------------------------- default_exported_this_arrow_func.js:1:24

Cannot use `this` in an exported function. [this-in-exported-function]

   1| export default () => { this; }
                             ^^^^


Error ------------------------------------------------------------------------------- default_exported_this_func.js:1:33

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   1| export default function default1() { this; }
                                      ^^


Error ------------------------------------------------------------------------------- default_exported_this_func.js:1:38

Cannot use `this` in an exported function. [this-in-exported-function]

   1| export default function default1() { this; }
                                           ^^^^


Error -------------------------------------------------------------------------- default_exported_this_func_expr.js:1:24

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   1| export default function() { this; }
                             ^^


Error -------------------------------------------------------------------------- default_exported_this_func_expr.js:1:29

Cannot use `this` in an exported function. [this-in-exported-function]

   1| export default function() { this; }
                                  ^^^^


Error ------------------------------------------------------------------------------------ export_renamed_default.js:3:9

Cannot set the default export of a module by renaming `Foo` to `default`. If you intended to set the default export use
`export default Foo` instead. [export-renamed-default]

   3| export {Foo as default}
              ^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------- export_unresolved_ident.js:2:9

Cannot resolve name `A`. [cannot-resolve-name]

   2| export {A}
              ^


Error -------------------------------------------------------------------------------- import_star_default_access.js:3:1

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:3:1
   3| Foo.default;
      ^^^^^^^^^^^

References:
   import_star_default_access.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error -------------------------------------------------------------------------------- import_star_default_access.js:4:1

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:4:1
   4| Foo['default'];
      ^^^^^^^^^^^^^^

References:
   import_star_default_access.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error -------------------------------------------------------------------------------- import_star_default_access.js:6:8

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:6:8
   6| const {default: renamed1} = Foo;
             ^^^^^^^

References:
   import_star_default_access.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error -------------------------------------------------------------------------------- import_star_default_access.js:7:8

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:7:8
   7| const {'default': renamed2} = Foo;
             ^^^^^^^^^

References:
   import_star_default_access.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------- import_star_default_access.js:10:3

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:10:3
   10| ({default: x}) = Foo;
         ^^^^^^^

References:
   import_star_default_access.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------- import_star_default_access.js:11:3

The default export of a module cannot be accessed from an `import *` [1] object. To use the default export you must
import it directly. [default-import-access]

   import_star_default_access.js:11:3
   11| ({'default': x}) = Foo;
         ^^^^^^^^^

References:
   import_star_default_access.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------- import_star_default_access.js:13:9

The default export of a module cannot be accessed from import destructuring. To use the default export you must import
it directly. [default-import-access]

   13| import {default as renamed3} from './foo';
               ^^^^^^^


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:5:1

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:5:1
   5| Foo;
      ^^^

References:
   import_star_invalid_use.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:6:1

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:6:1
   6| Foo();
      ^^^

References:
   import_star_invalid_use.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:6:1

Cannot call `Foo` because a call signature declaring the expected parameter / return type is missing in module
`./foo` [1]. [prop-missing]

   import_star_invalid_use.js:6:1
   6| Foo();
      ^^^

References:
   foo.js
   ^^^^^^ [1]


Error ---------------------------------------------------------------------------------- import_star_invalid_use.js:7:14

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:7:14
   7| const Foo2 = Foo;
                   ^^^

References:
   import_star_invalid_use.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- import_star_invalid_use.js:8:11

Cannot use `Foo` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   8| let Foo3: Foo;
                ^^^


Error ---------------------------------------------------------------------------------- import_star_invalid_use.js:8:11

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:8:11
   8| let Foo3: Foo;
                ^^^

References:
   import_star_invalid_use.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:9:2

Cannot create `Foo` element because module `./foo` [1] is not a React component. [not-a-component]

   import_star_invalid_use.js:9:2
   9| <Foo></Foo>;
       ^^^

References:
   foo.js
   ^^^^^^ [1]


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:9:2

Cannot instantiate `React.Element` because in type argument `ElementType`: [incompatible-type-arg]
 - Either module `./foo` [1] is incompatible with `React.ComponentType` [2].
 - Or module `./foo` [1] is incompatible with string [3].

   import_star_invalid_use.js:9:2
     9| <Foo></Foo>;
         ^^^

References:
   foo.js
   ^^^^^^ [1]
   <BUILTINS>/react.js:132:5
   132|   | React$ComponentType<empty>;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:131:5
   131|   | string
            ^^^^^^ [3]


Error ----------------------------------------------------------------------------------- import_star_invalid_use.js:9:2

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:9:2
   9| <Foo></Foo>;
       ^^^

References:
   import_star_invalid_use.js:1:8
   1| import * as Foo from './foo';
             ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- import_star_invalid_use.js:13:1

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:13:1
   13| Foo[prop];
       ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:29:12

Cannot assign `Foo` to `y` because module `./foo` [1] is incompatible with empty [2]. [incompatible-type]

   import_star_invalid_use.js:29:12
   29| const {y = Foo} = Foo;
                  ^^^

References:
   foo.js
   ^^^^^^ [1]
   import_star_invalid_use.js:29:8
   29| const {y = Foo} = Foo;
              ^ [2]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:29:12

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:29:12
   29| const {y = Foo} = Foo;
                  ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:32:37

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:32:37
   32| const {named1: renamed3, ...rest} = Foo;
                                           ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:34:23

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:34:23
   34| ({named1: x, ...z}) = Foo;
                             ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:37:27

Cannot access object with computed property using number [1]. [invalid-computed-prop]

   37| const {named1: renamed4, [1 + 2]: computed1} = Foo;
                                 ^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:37:48

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:37:48
   37| const {named1: renamed4, [1 + 2]: computed1} = Foo;
                                                      ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:38:15

Cannot access object with computed property using number [1]. [invalid-computed-prop]

   38| ({named1: x, [1 + 2]: z}) = Foo;
                     ^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:38:29

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:38:29
   38| ({named1: x, [1 + 2]: z}) = Foo;
                                   ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- import_star_invalid_use.js:41:16

`import *` [1] object can only be used by accessing one of its named exports with a member access or destructuring.
[invalid-import-star-use]

   import_star_invalid_use.js:41:16
   41|   type: typeof Foo,
                      ^^^

References:
   import_star_invalid_use.js:1:8
    1| import * as Foo from './foo';
              ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- mixed_import_and_require.js:4:1

Cannot use a mix of non-type toplevel `import` [1] and `require` statements in the same file. [mixed-import-and-require]

   mixed_import_and_require.js:4:1
   4| const {named1: require1} = require('./foo');
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   mixed_import_and_require.js:1:1
   1| import {named1} from './foo';
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------- mixed_require_and_import_member.js:3:1

Cannot use a mix of non-type toplevel `import` [1] and `require` statements in the same file. [mixed-import-and-require]

   mixed_require_and_import_member.js:3:1
   3| const named2 = require('./foo').named2;
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   mixed_require_and_import_member.js:1:1
   1| import {named1} from './foo';
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------- named_exported_this_func.js:2:23

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   2| export function named1() { this; }
                            ^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:2:28

Cannot use `this` in an exported function. [this-in-exported-function]

   2| export function named1() { this; }
                                 ^^^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:3:31

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   3| export const named2 = function() { this; }
                                    ^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:3:36

Cannot use `this` in an exported function. [this-in-exported-function]

   3| export const named2 = function() { this; }
                                         ^^^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:4:31

Cannot use `this` in an exported function. [this-in-exported-function]

   4| export const named3 = () => { this; }
                                    ^^^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:7:19

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   7| function exported1() { this; }
                        ^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:7:24

Cannot use `this` in an exported function. [this-in-exported-function]

   7| function exported1() { this; }
                             ^^^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:8:27

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   8| const exported2 = function() { this; };
                                ^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:8:32

Cannot use `this` in an exported function. [this-in-exported-function]

   8| const exported2 = function() { this; };
                                     ^^^^


Error --------------------------------------------------------------------------------- named_exported_this_func.js:9:27

Cannot use `this` in an exported function. [this-in-exported-function]

   9| const exported3 = () => { this; };
                                ^^^^


Error -------------------------------------------------------------------------------- named_exported_this_func.js:14:19

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   14| function internal1() { this; }
                         ^^


Error -------------------------------------------------------------------------------- named_exported_this_func.js:15:27

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   15| const internal2 = function() { this; };
                                 ^^


Error -------------------------------------------------------------------------------- named_exported_this_func.js:29:15

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   29|   function foo() {
                     ^^


Error -------------------------------------------------------------------------------- named_exported_this_func.js:35:18

Missing an annotation on implicit `this` parameter of function. [missing-this-annot]

   35|   return function() {
                        ^^


Error ------------------------------------------------------------------------------------------ non-const-export.js:5:8

Cannot export variable declared using `var` or `let`. All exported variables must be `const`. [non-const-var-export]

   5| export let test2: number = 2;
             ^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ non-const-export.js:6:8

Cannot export variable declared using `var` or `let`. All exported variables must be `const`. [non-const-var-export]

   6| export var test3: number = 3;
             ^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- non-const-export.js:13:19

Cannot export variable `letVar` [1] declared using `var` or `let`. All exported variables must be `const`.
[non-const-var-export]

   non-const-export.js:13:19
   13| export {constVar, letVar, varVar};
                         ^^^^^^

References:
   non-const-export.js:10:1
   10| let letVar: number = 2;
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- non-const-export.js:13:27

Cannot export variable `varVar` [1] declared using `var` or `let`. All exported variables must be `const`.
[non-const-var-export]

   non-const-export.js:13:27
   13| export {constVar, letVar, varVar};
                                 ^^^^^^

References:
   non-const-export.js:11:1
   11| var varVar: number = 3;
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- reexport_renamed_default.js:1:9

Cannot set the default export of a module by re-exporting `named1` as `default`. If you intended to set the default
export please `import` and then `export default` instead. [export-renamed-default]

   1| export {named1 as default} from './foo';
              ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- reexported_default.js:1:9

Cannot set the default export of a module by re-exporting the `default` property. If you intended to set the default
export please `import` and then `export default` instead. [export-renamed-default]

   1| export {default} from './foo';
              ^^^^^^^



Found 55 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
