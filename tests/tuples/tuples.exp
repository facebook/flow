Error ---------------------------------------------------------------------------------------------------- array.js:4:10

Cannot return `x` because array type [1] has an unknown number of elements, so is incompatible with tuple type [2].

   array.js:4:10
   4|   return x; // Error, can't enforce arity when flowing array to tuple
               ^

References:
   array.js:3:17
   3| function foo(x: Array<number>): [number, ?number] {
                      ^^^^^^^^^^^^^ [1]
   array.js:3:33
   3| function foo(x: Array<number>): [number, ?number] {
                                      ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- number-index.js:7:1

Cannot assign `123` to `tup[0]` because the index must be statically known to write a tuple element.

   7| tup[(0: number)] = 123;
      ^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- optional.js:4:2

Cannot cast array literal to tuple type because array literal [1] has an arity of 1 but tuple type [2] has an arity of
2.

   optional.js:4:2
   4| ([0]: [number, ?string]); // Error, arity is enforced
       ^^^ [1]

References:
   optional.js:4:7
   4| ([0]: [number, ?string]); // Error, arity is enforced
            ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:6:2

Cannot cast array literal to tuple type because empty array literal [1] has an arity of 0 but tuple type [2] has an
arity of 2.

   optional.js:6:2
   6| ([]: [?number, string]); // error, since second element is not marked optional
       ^^ [1]

References:
   optional.js:6:6
   6| ([]: [?number, string]); // error, since second element is not marked optional
           ^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- too-few.js:5:5

Cannot call `foo` with array literal bound to `a` because array literal [1] has an arity of 1 but tuple type [2] has an
arity of 2.

   too-few.js:5:5
   5| foo([ {} ]); // error, too few elements in array passed to a tuple
          ^^^^^^ [1]

References:
   too-few.js:3:17
   3| function foo(a: [Object, Object]) {}
                      ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:2:13

Cannot assign array literal to `b` because array literal [1] has an arity of 1 but tuple type [2] has an arity of 0.

   tuples.js:2:13
   2| var b: [] = [123]; // Error - arity mismatch
                  ^^^^^ [1]

References:
   tuples.js:2:8
   2| var b: [] = [123]; // Error - arity mismatch
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:3:19

Cannot assign array literal to `c` because empty array literal [1] has an arity of 0 but tuple type [2] has an arity of
1.

   tuples.js:3:19
   3| var c: [number] = []; // nope
                        ^^ [1]

References:
   tuples.js:3:8
   3| var c: [number] = []; // nope
             ^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:6:27

Cannot assign array literal to `f` because number [1] is incompatible with string [2] in index 1.

   tuples.js:6:27
   6| var f: [number, string] = [123, 456];
                                ^^^^^^^^^^

References:
   tuples.js:6:33
   6| var f: [number, string] = [123, 456];
                                      ^^^ [1]
   tuples.js:6:17
   6| var f: [number, string] = [123, 456];
                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:10:5

Cannot get `t[1]` because tuple type [1] only has 1 element, so index 1 is out of bounds.

   tuples.js:10:5
   10|     t[1]; // error, out of bounds
           ^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:11:5

Cannot get `t[-1]` because tuple type [1] only has 1 element, so index -1 is out of bounds.

   tuples.js:11:5
   11|     t[-1]; // error, out of bounds
           ^^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:15:5

Cannot get `t[0.5]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.

   tuples.js:15:5
   15|     t[0.5]; // error: index out of bounds
           ^^^^^^

References:
   tuples.js:15:7
   15|     t[0.5]; // error: index out of bounds
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:16:5

Cannot get `t[0.0000000000000000000001]` because the index into a tuple must be an integer, but `1e-22` [1] is not an
integer.

   tuples.js:16:5
   16|     t[0.0000000000000000000001]; // error: index ("1e-22") out of bounds
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tuples.js:16:7
   16|     t[0.0000000000000000000001]; // error: index ("1e-22") out of bounds
             ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:20:6

Cannot cast `t[1e0]` to boolean because string [1] is incompatible with boolean [2].

   tuples.js:20:6
   20|     (t[1e0]: boolean); // error: boolean !~> string
            ^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:20:14
   20|     (t[1e0]: boolean); // error: boolean !~> string
                    ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:21:6

Cannot cast `t[0.9999999999999999999999999999999999999999999]` to boolean because string [1] is incompatible with
boolean [2].

   tuples.js:21:6
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:21:56
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
                                                              ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:25:6

Cannot cast `t[56e-13214125]` to boolean because number [1] is incompatible with boolean [2].

   tuples.js:25:6
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
            ^^^^^^^^^^^^^^^

References:
   tuples.js:24:16
   24|   function(t: [number, string]) {
                      ^^^^^^ [1]
   tuples.js:25:23
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
                             ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:30:5

Cannot get `t[x]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.

   tuples.js:30:5
   30|     t[x]; // error, not an integer
           ^^^^

References:
   tuples.js:29:15
   29|     const x = 0.5;
                     ^^^ [1]


Error -------------------------------------------------------------------------------------------------- tuples.js:40:44

Cannot return `x.length` because length `2` (number) of tuple [1] is incompatible with string [2].

   tuples.js:40:44
   40|     function a(x: [1, 2]): string { return x.length; }
                                                  ^^^^^^^^

References:
   tuples.js:40:19
   40|     function a(x: [1, 2]): string { return x.length; }
                         ^^^^^^ [1]
   tuples.js:40:28
   40|     function a(x: [1, 2]): string { return x.length; }
                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:46:6

Cannot cast `a_len` to number literal `2` because length `1` (number) of tuple [1] is incompatible with number literal
`2` [2].

   tuples.js:46:6
   46|     (a_len: 2);
            ^^^^^

References:
   tuples.js:43:16
   43|   function (a: [number]) {
                      ^^^^^^^^ [1]
   tuples.js:46:13
   46|     (a_len: 2);
                   ^ [2]



Found 18 errors
