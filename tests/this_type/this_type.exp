Error: class_expr.js:6
  6:     this.x = 123; // error: property not found (must be declared)
              ^ property `x`. Property not found in
  6:     this.x = 123; // error: property not found (must be declared)
         ^^^^ class expr `Thing`

Error: contra.js:4
  4:   next: this; // error (see below for exploit): `this` should only appear in
             ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:15
 15:   foo<X: this>(that: X) { } // error: can't hide contravariance using a bound
              ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:19
 19:   foo<Y: this>(that: Y) { } // error (see above, catches hidden override)
              ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:25
 25:   out_object(): { _: this } { return { _: this }; }
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:26
 26:   in_object(_: { _: this }) { }
                         ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:27
 27:   inout_object: { _: this };
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:29
 29:   out_array(): Array<this> { return [this]; }
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:30
 30:   in_array(_: Array<this>) { }
                         ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:31
 31:   inout_array: Array<this>;
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:38
 38:   out_set(): Set<this> { return new Set().add(this); }
                      ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:39
 39:   in_set(_: Set<this>) { }
                     ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:40
 40:   inout_set: Set<this>;
                      ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:44
 44:   in_promise(_: Promise<this>) { }
                             ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:45
 45:   inout_promise: Promise<this>;
                              ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:48
 48:   *out_generator(): Generator<this,this,this> {
                                             ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:52
 52:   in_generator(_: Generator<this,this,this>) { }
                                 ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:52
 52:   in_generator(_: Generator<this,this,this>) { }
                                      ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                  ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                       ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                            ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: generics.js:6
  6: class ImplicitNumber extends Implicit { arg: number; }
                                  ^^^^^^^^ polymorphic type: class type: Implicit. Too few type arguments. Expected at least 1
  5: class Implicit<X> { arg: X; val: X; }
                    ^ See type parameters of definition here

Error: import.js:8
  8:   foo(): B1 { return new B1(); } // error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  2:   foo(): this { return this; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. See: export.js:2
  This parameter is incompatible:
      8:   foo(): B1 { return new B1(); } // error
                  ^^ B1. This type is incompatible with
      2:   foo(): this { return this; }
                  ^^^^ some incompatible instantiation of `this`. See: export.js:2

Error: import.js:14
 14:   foo(): B3<X> { return new B3(); } // error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  7:   foo(): this { return this; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. See: export.js:7
  This parameter is incompatible:
     14:   foo(): B3<X> { return new B3(); } // error
                  ^^^^^ B3. This type is incompatible with
      7:   foo(): this { return this; }
                  ^^^^ some incompatible instantiation of `this`. See: export.js:7

Error: import.js:18
 18: (new B3().qux(0): string); // error
      ^^^^^^^^^^^^^^^ number. This type is incompatible with
 18: (new B3().qux(0): string); // error
                       ^^^^^^ string

Error: import.js:21
 21: ((new B3().bar(): B3<string>): A2<number>); // error
                          ^^^^^^ string. This type is incompatible with
 21: ((new B3().bar(): B3<string>): A2<number>); // error
                                       ^^^^^^ number

Error: import.js:21
 21: ((new B3().bar(): B3<string>): A2<number>); // error
                                       ^^^^^^ number. This type is incompatible with
 21: ((new B3().bar(): B3<string>): A2<number>); // error
                          ^^^^^^ string

Error: import.js:22
 22: ((new B3(): A2<number>).qux(0): string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 22: ((new B3(): A2<number>).qux(0): string); // error
                                     ^^^^^^ string

Error: interface.js:1
  1: interface I { xs: Array<this>; }
                             ^^^^ Unexpected use of `this` type

Error: self.js:4
  4:   bar(): this { return new A().foo(); } // same as returning : A, so error
                            ^^^^^^^^^^^^^ A. This type is incompatible with the expected return type of
  4:   bar(): this { return new A().foo(); } // same as returning : A, so error
              ^^^^ some incompatible instantiation of `this`

Error: statics.js:17
 17: (A.make(): B); // error
      ^^^^^^^^ A. This type is incompatible with
 17: (A.make(): B); // error
                ^ B

Error: test.js:23
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
      ^^^^^^^^^^^^^^^^^^^ Base. This type is incompatible with
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
                           ^^^^^^^ Inherit

Error: test.js:23
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
      ^^^^^^^^^^^^^^^^^^^ Override. This type is incompatible with
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
                           ^^^^^^^ Inherit

Error: test.js:29
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Base. This type is incompatible with
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
                                          ^^^^^^^^^^^^^^^ InheritOverride

Error: test.js:29
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Override. This type is incompatible with
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
                                          ^^^^^^^^^^^^^^^ InheritOverride

Error: test.js:41
 41:   corge(that: this) { }
                   ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: test.js:51
 51:   bar(): Override2 { return new Override2; } // error (cf. OK above)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
 38:   bar(): this { return this; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function
  This parameter is incompatible:
     51:   bar(): Override2 { return new Override2; } // error (cf. OK above)
                  ^^^^^^^^^ Override2. This type is incompatible with
     38:   bar(): this { return this; }
                  ^^^^ some incompatible instantiation of `this`

Error: test.js:54
 54:   corge(that: this) { } // error
                   ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: test.js:56
 56:   grault(that: this) { } // error, too
       ^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
 42:   grault(that: Base2) { }
       ^^^^^^^^^^^^^^^^^^^^^^^ function
  This parameter is incompatible:
     42:   grault(that: Base2) { }
                        ^^^^^ Base2. This type is incompatible with
     56:   grault(that: this) { } // error, too
                        ^^^^ Override2

Error: test.js:56
 56:   grault(that: this) { } // error, too
       ^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
 42:   grault(that: Base2) { }
       ^^^^^^^^^^^^^^^^^^^^^^^ function
  This parameter is incompatible:
     42:   grault(that: Base2) { }
                        ^^^^^ Base2. This type is incompatible with
     56:   grault(that: this) { } // error, too
                        ^^^^ some incompatible instantiation of `this`

Error: test.js:56
 56:   grault(that: this) { } // error, too
                    ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)


Found 41 errors
