Error ------------------------------------------------------------------------------------------ contextual_ctor.js:5:13

Cannot call `C` because `T` [1] is underconstrained by new `C` [2]. [underconstrained-implicit-instantiation]

   contextual_ctor.js:5:13
   5| let x = new C(); // Error
                  ^

References:
   contextual_ctor.js:3:9
   3| class C<T> {}
              ^ [1]
   contextual_ctor.js:5:9
   5| let x = new C(); // Error
              ^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- contextual_jsx.js:6:10

Cannot create `Component` element because `T` [1] is underconstrained by `Component` element [2].
[underconstrained-implicit-instantiation]

   contextual_jsx.js:6:10
   6| let x = <Component />; // Error
               ^^^^^^^^^

References:
   contextual_jsx.js:4:20
   4| function Component<T>(props: {foo?: T}): React.Node { return null; }
                         ^ [1]
   contextual_jsx.js:6:9
   6| let x = <Component />; // Error
              ^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- invalid.js:5:8

Cannot call `Import.store` because `store` [1] is not a function. [not-a-function]

   invalid.js:5:8
   5| Import.store(); // Should not crash.
             ^^^^^

References:
   invalid-export.js:4:20
   4| export opaque type store<T> = mixed;
                         ^^^^^ [1]


Error ------------------------------------------------------------------------------------------ polyt_flow_error.js:4:7

Cannot call `first` with `1` bound to the first parameter because number [1] is incompatible with array type [2].
[incompatible-call]

   polyt_flow_error.js:4:7
   4| first(1); // Incompatibility error, but no error on under-constrained T
            ^ [1]

References:
   polyt_flow_error.js:3:27
   3| declare function first<T>(Array<T>): ?T;
                                ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- react_children.js:5:16

Cannot call `React.Children.toArray` because `T` [1] is underconstrained by call of method `toArray` [2].
[underconstrained-implicit-instantiation]

   react_children.js:5:16
     5| React.Children.toArray(1); // underconstrained
                       ^^^^^^^

References:
   <BUILTINS>/react.js:292:13
   292|     toArray<T>(children: ChildrenArray<T>): Array<$NonMaybeType<T>>,
                    ^ [1]
   react_children.js:5:1
     5| React.Children.toArray(1); // underconstrained
        ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- react_children.js:6:16

Cannot call `React.Children.toArray` because `T` [1] is underconstrained by call of method `toArray` [2].
[underconstrained-implicit-instantiation]

   react_children.js:6:16
     6| React.Children.toArray([1]); // underconstrained
                       ^^^^^^^

References:
   <BUILTINS>/react.js:292:13
   292|     toArray<T>(children: ChildrenArray<T>): Array<$NonMaybeType<T>>,
                    ^ [1]
   react_children.js:6:1
     6| React.Children.toArray([1]); // underconstrained
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------ underconstrained_class_constructor.js:5:5

Cannot call `A` because `T` [1] is underconstrained by new `A` [2]. [underconstrained-implicit-instantiation]

   underconstrained_class_constructor.js:5:5
   5| new A(); // Error: T underconstrained
          ^

References:
   underconstrained_class_constructor.js:2:17
   2| declare class A<T>{
                      ^ [1]
   underconstrained_class_constructor.js:5:1
   5| new A(); // Error: T underconstrained
      ^^^^^^^ [2]


Error --------------------------------------------------------------------------------- underconstrained_fun_call.js:3:1

Cannot call `f` because `T` [1] is underconstrained by call of `f` [2]. [underconstrained-implicit-instantiation]

   underconstrained_fun_call.js:3:1
   3| f(); // Error: T underconstrained
      ^

References:
   underconstrained_fun_call.js:2:20
   2| declare function f<T>(): T;
                         ^ [1]
   underconstrained_fun_call.js:3:1
   3| f(); // Error: T underconstrained
      ^^^ [2]


Error -------------------------------------------------------------------------------- underconstrained_fun_call.js:12:1

Cannot call `i` because `T` [1] is underconstrained by call of `i` [2]. [underconstrained-implicit-instantiation]

   underconstrained_fun_call.js:12:1
   12| i(); // Error: T underconstrained
       ^

References:
   underconstrained_fun_call.js:11:20
   11| declare function i<T>(): Array<T>;
                          ^ [1]
   underconstrained_fun_call.js:12:1
   12| i(); // Error: T underconstrained
       ^^^ [2]


Error ------------------------------------------------------------------------------------ underconstrained_react.js:7:2

Cannot create `PolyReactClass` element because `T` [1] is underconstrained by `PolyReactClass` element [2].
[underconstrained-implicit-instantiation]

   underconstrained_react.js:7:2
   7| <PolyReactClass />;
       ^^^^^^^^^^^^^^

References:
   underconstrained_react.js:5:22
   5| class PolyReactClass<T> extends React.Component<{}> {}
                           ^ [1]
   underconstrained_react.js:7:1
   7| <PolyReactClass />;
      ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------- underconstrained_react.js:11:2

Cannot create `PolyFunctionComponent` element because `T` [1] is underconstrained by `PolyFunctionComponent`
element [2]. [underconstrained-implicit-instantiation]

   underconstrained_react.js:11:2
   11| <PolyFunctionComponent foo={() => {}}/>;
        ^^^^^^^^^^^^^^^^^^^^^

References:
   underconstrained_react.js:9:32
    9| function PolyFunctionComponent<T>(props: {foo: ({x: T} => mixed)}): React.Node { return null }
                                      ^ [1]
   underconstrained_react.js:11:1
   11| <PolyFunctionComponent foo={() => {}}/>;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:11:1

Cannot call `ReposLowerTRegressionTest` because `T` [1] is underconstrained by call of `ReposLowerTRegressionTest` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:11:1
   11| ReposLowerTRegressionTest({}) // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   upper_non_t.js:10:44
   10| declare function ReposLowerTRegressionTest<T>({o?: T}): T;
                                                  ^ [1]
   upper_non_t.js:11:1
   11| ReposLowerTRegressionTest({}) // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:21:1

Cannot call `IndexedAccess1` because `T` [1] is underconstrained by call of `IndexedAccess1` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:21:1
   21| IndexedAccess1(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^

References:
   upper_non_t.js:20:33
   20| declare function IndexedAccess1<T>(T['f']): T;
                                       ^ [1]
   upper_non_t.js:21:1
   21| IndexedAccess1(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:23:1

Cannot call `IndexedAccess2` because `T` [1] is underconstrained by call of `IndexedAccess2` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:23:1
   23| IndexedAccess2(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^

References:
   upper_non_t.js:22:33
   22| declare function IndexedAccess2<T>(T[number]): T;
                                       ^ [1]
   upper_non_t.js:23:1
   23| IndexedAccess2(1); // Error: T under constrained.
       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:25:1

Cannot call `Call` because `T` [1] is underconstrained by call of `Call` [2]. [underconstrained-implicit-instantiation]

   upper_non_t.js:25:1
   25| Call(undefined); // Error: T under constrained.
       ^^^^

References:
   upper_non_t.js:24:23
   24| declare function Call<T>($Call<T, <V>(V)=>void>): T;
                             ^ [1]
   upper_non_t.js:25:1
   25| Call(undefined); // Error: T under constrained.
       ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:27:1

Cannot call `ObjMap` because `T` [1] is underconstrained by call of `ObjMap` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:27:1
   27| ObjMap({}); // Error: T under constrained.
       ^^^^^^

References:
   upper_non_t.js:26:25
   26| declare function ObjMap<T>($ObjMap<T, <V>(V)=>void>): T;
                               ^ [1]
   upper_non_t.js:27:1
   27| ObjMap({}); // Error: T under constrained.
       ^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:29:1

Cannot call `Values` because `T` [1] is underconstrained by call of `Values` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:29:1
   29| Values(3); // Error: T under constrained.
       ^^^^^^

References:
   upper_non_t.js:28:25
   28| declare function Values<T>($Values<T>): T;
                               ^ [1]
   upper_non_t.js:29:1
   29| Values(3); // Error: T under constrained.
       ^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:31:1

Cannot call `ElementRef` because `T` [1] is underconstrained by call of `ElementRef` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:31:1
   31| ElementRef(1); // Error: T under constrained.
       ^^^^^^^^^^

References:
   upper_non_t.js:30:29
   30| declare function ElementRef<T>(React$ElementRef<T>): T;
                                   ^ [1]
   upper_non_t.js:31:1
   31| ElementRef(1); // Error: T under constrained.
       ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- upper_non_t.js:99:6

Cannot get `r1.bad` because property `bad` is missing in `Array` [1]. [prop-missing]

   upper_non_t.js:99:6
    99|   r1.bad; // error
             ^^^

References:
   <BUILTINS>/core.js:879:15
   879| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:103:4

Cannot cast `r2[2]` to empty because number literal `1` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:103:4
   103|   (r2[2]: empty); // error
           ^^^^^

References:
   upper_non_t.js:96:35
    96|   const r2 = ArrRest(...([1, 2]: [1, 2])); // ok
                                          ^ [1]
   upper_non_t.js:103:11
   103|   (r2[2]: empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:103:4

Cannot cast `r2[2]` to empty because number literal `2` [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:103:4
   103|   (r2[2]: empty); // error
           ^^^^^

References:
   upper_non_t.js:96:38
    96|   const r2 = ArrRest(...([1, 2]: [1, 2])); // ok
                                             ^ [1]
   upper_non_t.js:103:11
   103|   (r2[2]: empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:104:6

Cannot get `r2.bad` because property `bad` is missing in `Array` [1]. [prop-missing]

   upper_non_t.js:104:6
   104|   r2.bad; // error
             ^^^

References:
   <BUILTINS>/core.js:879:15
   879| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:113:6

Cannot call `f1` because string [1] is incompatible with number [2] in the first argument. [incompatible-call]

   upper_non_t.js:113:6
   113|   f1(""); // error
             ^^ [1]

References:
   upper_non_t.js:110:17
   110|   function g(x: number): void {}
                        ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:118:6

Cannot call `f2` because string [1] is incompatible with number [2] in the first argument. [incompatible-call]

   upper_non_t.js:118:6
   118|   f2("", 0); // error
             ^^ [1]

References:
   upper_non_t.js:115:17
   115|   function h(x: number, y: string): void {}
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- upper_non_t.js:118:10

Cannot call `f2` because number [1] is incompatible with string [2] in the second argument. [incompatible-call]

   upper_non_t.js:118:10
   118|   f2("", 0); // error
                 ^ [1]

References:
   upper_non_t.js:115:28
   115|   function h(x: number, y: string): void {}
                                   ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:123:3

Cannot call `f3` because string [1] is incompatible with number [2] in array element. [incompatible-call]

   upper_non_t.js:123:3
   123|   f3("") // error
          ^^

References:
   upper_non_t.js:123:6
   123|   f3("") // error
             ^^ [1]
   upper_non_t.js:120:29
   120|   function i(...rest: Array<number>): void {}
                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:128:3

Cannot call `Diff0` because `T` [1] is underconstrained by call of `Diff0` [2].
[underconstrained-implicit-instantiation]

   upper_non_t.js:128:3
   128|   Diff0(); // error
          ^^^^^

References:
   upper_non_t.js:127:26
   127|   declare function Diff0<T>(): $Diff<T, {foo: number}>;
                                 ^ [1]
   upper_non_t.js:128:3
   128|   Diff0(); // error
          ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- upper_non_t.js:130:14

Cannot call `Diff1` because number [1] is incompatible with string [2]. [incompatible-call]

   upper_non_t.js:130:14
   130|   const d1 = Diff1({bar: 3});
                     ^^^^^

References:
   upper_non_t.js:134:24
   134|   (d1: {|foo: string | number, bar: number|}); // error
                               ^^^^^^ [1]
   upper_non_t.js:129:45
   129|   declare function Diff1<T>($Diff<T, {|foo: string|}>): T;
                                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:136:4

Cannot cast `d1` to empty because object literal [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:136:4
   136|   (d1: empty); // error
           ^^

References:
   upper_non_t.js:130:20
   130|   const d1 = Diff1({bar: 3});
                           ^^^^^^^^ [1]
   upper_non_t.js:136:8
   136|   (d1: empty); // error
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:142:4

Cannot cast `d2` to empty because object literal [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:142:4
   142|   (d2: empty); // error
           ^^

References:
   upper_non_t.js:138:20
   138|   const d2 = Diff2({bar: 3});
                           ^^^^^^^^ [1]
   upper_non_t.js:142:8
   142|   (d2: empty); // error
               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- upper_non_t.js:148:4

Cannot cast `d3` to empty because object literal [1] is incompatible with empty [2]. [incompatible-cast]

   upper_non_t.js:148:4
   148|   (d3: empty); // error
           ^^

References:
   upper_non_t.js:144:20
   144|   const d3 = Diff3({bar: 3});
                           ^^^^^^^^ [1]
   upper_non_t.js:148:8
   148|   (d3: empty); // error
               ^^^^^ [2]



Found 31 errors
