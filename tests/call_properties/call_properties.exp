A.js:8
  8:   return f();
              ^^^ string. This type is incompatible with the expected return type of
  7: function b(f: { (): string }): number {
                                    ^^^^^^ number

A.js:13
 13:   return f("hello");
                ^^^^^^^ string. This type is incompatible with the expected param type of
 12: function c(f: { (x: number): number }): number {
                         ^^^^^^ number

A.js:18
 18:   return f();
              ^^^ function call
 18:   return f();
              ^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 17: function d(f: { (x: number): number }): number {
                         ^^^^^^ number

A.js:23
 23:   return f();
              ^^^ function call. Callable signature not found in
 23:   return f();
              ^ object type

A.js:29
 29:   return x();
              ^^^ function call. Callable signature not found in
 29:   return x();
              ^ object literal

B.js:5
  5: var b: { (x: number): number } = function (x: number): string { return "hi"; };
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
  5: var b: { (x: number): number } = function (x: number): string { return "hi"; };
            ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `$call` is incompatible:
      5: var b: { (x: number): number } = function (x: number): string { return "hi"; };
                                                                ^^^^^^ string. This type is incompatible with
      5: var b: { (x: number): number } = function (x: number): string { return "hi"; };
                               ^^^^^^ number

B.js:8
  8: var c: { (x: string): string } = function (x: number): string { return "hi"; };
                  ^^^^^^ string. This type is incompatible with the expected param type of
  8: var c: { (x: string): string } = function (x: number): string { return "hi"; };
                                                   ^^^^^^ number

B.js:11
 11: var d: { (): string } = function (x: number): string { return "hi"; };
              ^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 11: var d: { (): string } = function (x: number): string { return "hi"; };
                                          ^^^^^^ number

C.js:7
  7: function b(x: { (z: number): string }): (z: number) => number {
                                  ^^^^^^ string. This type is incompatible with the expected return type of
  7: function b(x: { (z: number): string }): (z: number) => number {
                                                            ^^^^^^ number

C.js:12
 12: function c(x: { (z: number): string }): (z: string) => string {
                                                 ^^^^^^ string. This type is incompatible with the expected param type of
 12: function c(x: { (z: number): string }): (z: string) => string {
                         ^^^^^^ number

C.js:17
 17: function d(x: { (z: number): string }): () => string {
                                             ^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 17: function d(x: { (z: number): string }): () => string {
                         ^^^^^^ number

C.js:22
 22: function e(x: {}): () => string {
                        ^^^^^^^^^^^^ function type. Callable signature not found in
 23:   return x;
              ^ object type

C.js:32
 32: function g(x: {}): Function {
                        ^^^^^^^^ function type. Callable signature not found in
 33:   return x; // error
              ^ object type

D.js:11
 11: var c: { (): string; (x: number): string } =
              ^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
 12:   function (x: number): string { return "hi"; };
                    ^^^^^^ number

D.js:20
 20: function e(x: { (): string; (x: number): string }): () => number {
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ intersection. This type is incompatible with
 20: function e(x: { (): string; (x: number): string }): () => number {
                                                         ^^^^^^^^^^^^ function type
  Member 1:
   20: function e(x: { (): string; (x: number): string }): () => number {
                       ^^^^^^^^^^ function type
  Error:
   20: function e(x: { (): string; (x: number): string }): () => number {
                           ^^^^^^ string. This type is incompatible with the expected return type of
   20: function e(x: { (): string; (x: number): string }): () => number {
                                                                 ^^^^^^ number
  Member 2:
   20: function e(x: { (): string; (x: number): string }): () => number {
                                   ^^^^^^^^^^^^^^^^^^^ function type
  Error:
   20: function e(x: { (): string; (x: number): string }): () => number {
                                                           ^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
   20: function e(x: { (): string; (x: number): string }): () => number {
                                       ^^^^^^ number

E.js:2
  2: var a : { someProp: number } = function () {};
             ^^^^^^^^^^^^^^^^^^^^ property `someProp` of object type. Property not found in
  2: var a : { someProp: number } = function () {};
                                    ^^^^^^^^^^^^^^ function

F.js:6
  6: var b: { (x: number): number } = (x) => "hi"
                                      ^^^^^^^^^^^ arrow function. This type is incompatible with
  6: var b: { (x: number): number } = (x) => "hi"
            ^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `$call` is incompatible:
      6: var b: { (x: number): number } = (x) => "hi"
                                                 ^^^^ string. This type is incompatible with
      6: var b: { (x: number): number } = (x) => "hi"
                               ^^^^^^ number

F.js:9
  9: var c: { (x: string): string } = (x) => x.toFixed()
                                               ^^^^^^^ property `toFixed`. Property not found in
  9: var c: { (x: string): string } = (x) => x.toFixed()
                                             ^ String


Found 18 errors
