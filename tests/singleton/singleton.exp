Error: boolean.js:8
  8: var y : boolean = veryOptimistic(false); // error
                                      ^^^^^ boolean. Expected boolean literal `true`, got `false` instead
  3: function veryOptimistic(isThisAwesome: true): boolean {
                                            ^^^^ boolean literal `true`

Error: boolean.js:15
 15: var y : boolean = veryPessimistic(false); // error
                                       ^^^^^ boolean. Expected boolean literal `true`, got `false` instead
 10: function veryPessimistic(isThisAwesome: true): boolean {
                                             ^^^^ boolean literal `true`

Error: boolean.js:21
 21:     return x;
                ^ boolean literal `true`. Expected boolean literal `false`, got `true` instead
 19: function bar(x: MyOwnBooleanLOL): false {
                                       ^^^^^ boolean literal `false`

Error: boolean.js:23
 23:     return !x;
                ^^ boolean literal `true`. Expected boolean literal `false`, got `true` instead
 19: function bar(x: MyOwnBooleanLOL): false {
                                       ^^^^^ boolean literal `false`

Error: boolean.js:29
 29: bar(1); // error
         ^ number. This type is incompatible with the expected param type of
 19: function bar(x: MyOwnBooleanLOL): false {
                     ^^^^^^^^^^^^^^^ union: boolean literal `true` | boolean literal `false`
  Member 1:
   17: type MyOwnBooleanLOL = true | false
                              ^^^^ boolean literal `true`
  Error:
   29: bar(1); // error
           ^ number. This type is incompatible with
   17: type MyOwnBooleanLOL = true | false
                              ^^^^ boolean literal `true`
  Member 2:
   17: type MyOwnBooleanLOL = true | false
                                     ^^^^^ boolean literal `false`
  Error:
   29: bar(1); // error
           ^ number. This type is incompatible with
   17: type MyOwnBooleanLOL = true | false
                                     ^^^^^ boolean literal `false`

Error: number.js:8
  8: highlander(2); // error
                ^ number. Expected number literal `1`, got `2` instead
  3: function highlander(howMany: 1): number {
                                  ^ number literal `1`

Error: number.js:19
 19: bar(3); // error
         ^ number. This type is incompatible with the expected param type of
 13: function bar(num: Foo): number {
                       ^^^ number enum


Found 7 errors
