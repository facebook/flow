Error ----------------------------------------------------------------------------------------------------- body.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   body.js:13:8
   13|     1: true,
              ^^^^ [1]
   body.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- body.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   body.js:14:8
   14|     2: false,
              ^^^^^ [1]
   body.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- body.js:27:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   body.js:23:8
   23|     1: true,
              ^^^^ [1]
   body.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- body.js:27:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   body.js:24:8
   24|     2: 's',
              ^^^ [1]
   body.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- body.js:38:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:38:3
   38|   out as empty; // ERROR
         ^^^

References:
   body.js:34:8
   34|     1: true,
              ^^^^ [1]
   body.js:38:10
   38|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- body.js:46:3

Unreachable code. [unreachable-code]

   46|   out; // ERROR: unreachable
         ^^^^


Error ----------------------------------------------------------------------------------------------------- body.js:56:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   body.js:56:3
   56|   out as empty; // ERROR
         ^^^

References:
   body.js:53:8
   53|     _: 's',
              ^^^ [1]
   body.js:56:10
   56|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ matching.js:15:14

`match` is not exhaustively checked: number literal `-2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:15:14
   15|   const e2 = match (x) { // ERROR: not all members checked
                    ^^^^^

References:
   matching.js:3:24
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                              ^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:15:14

`match` is not exhaustively checked: string literal `s` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:15:14
   15|   const e2 = match (x) { // ERROR: not all members checked
                    ^^^^^

References:
   matching.js:3:34
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                                        ^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:36:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:36:14
   36|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:25:24
   25|   declare const x: 1 | 2;
                              ^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:51:14

`match` is not exhaustively checked: undefined [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:51:14
   51|   const e2 = match (x) { // ERROR: `undefined` not checked
                    ^^^^^

References:
   matching.js:43:24
   43|   declare const x: 1 | void;
                              ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:67:14

`match` is not exhaustively checked: null or undefined [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:67:14
   67|   const e2 = match (x) { // ERROR: `null` and `undefined` not checked
                    ^^^^^

References:
   matching.js:58:20
   58|   declare const x: ?1;
                          ^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:87:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:87:14
   87|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:74:24
   74|   declare const x: 1 | 2;
                              ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:131:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:131:14
   131|   const e2 = match (f()) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:123:30
   123|   declare const f: () => 1 | 2;
                                     ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:145:14

`match` is not exhaustively checked: number literal `3` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:145:14
   145|   const e2 = match (x) { // ERROR: `3` not checked
                     ^^^^^

References:
   matching.js:138:28
   138|   declare const x: 1 | 2 | 3;
                                   ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:156:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:156:14
   156|   const e1 = match (x) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:152:24
   152|   declare const x: 1 | 2;
                               ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:193:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:193:14
   193|   const e2 = match (x) { // ERROR: `type: 'baz'` not checked
                     ^^^^^

References:
   matching.js:184:20
   184|                  | {type: 'baz', val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:242:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:242:14
   242|   const e3 = match (x) { // ERROR: `type: 'bar', n: 2` not checked
                     ^^^^^

References:
   matching.js:227:20
   227|                  | {type: 'bar', n: 2, val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:270:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:270:14
   270|   const e2 = match (x) { // ERROR: `type: 'bar'` not checked
                     ^^^^^

References:
   matching.js:262:20
   262|                  | {type: 'bar', val: string}
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:288:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:288:14
   288|   const e2 = match (x) { // ERROR: `'baz'` element not checked
                     ^^^^^

References:
   matching.js:279:20
   279|                  | ['baz', boolean];
                           ^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:326:22

Cannot cast `a` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   matching.js:326:22
   326|     [const a, _, _]: a as empty, // ERROR: `boolean` is not `empty`
                             ^

References:
   matching.js:321:21
   321|                  | [boolean, boolean, boolean];
                            ^^^^^^^ [1]
   matching.js:326:27
   326|     [const a, _, _]: a as empty, // ERROR: `boolean` is not `empty`
                                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:346:16

Cannot cast `a` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   matching.js:346:16
   346|     [const a]: a as string, // ERROR: `number` is not `string`
                       ^

References:
   matching.js:342:21
   342|   declare const x: [number] | Array<string>;
                            ^^^^^^ [1]
   matching.js:346:21
   346|     [const a]: a as string, // ERROR: `number` is not `string`
                            ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:366:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:366:14
   366|   const e2 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:370:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:370:14
   370|   const e3 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:374:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:374:14
   374|   const e4 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:388:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:388:14
   388|   const e2 = match (x) { // ERROR: does not match all elements
                     ^^^^^

References:
   matching.js:381:20
   381|   declare const x: [a: 0, ...];
                           ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- patterns.js:9:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:9:3
   9|   out as empty; // ERROR
        ^^^

References:
   patterns.js:3:20
   3|   declare const x: number;
                         ^^^^^^ [1]
   patterns.js:9:10
   9|   out as empty; // ERROR
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:20:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:20:3
   20|   out as empty; // ERROR
         ^^^

References:
   patterns.js:14:20
   14|   declare const x: number;
                          ^^^^^^ [1]
   patterns.js:20:10
   20|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:31:3

Cannot resolve name `a`. [cannot-resolve-name]

   31|   a; // ERROR: cannot resolve name
         ^


Error ------------------------------------------------------------------------------------------------- patterns.js:42:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:42:3
   42|   out as empty; // ERROR
         ^^^

References:
   patterns.js:36:21
   36|   declare const x: [number];
                           ^^^^^^ [1]
   patterns.js:42:10
   42|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:54:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:54:3
   54|   out as empty; // ERROR
         ^^^

References:
   patterns.js:47:26
   47|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:54:10
   54|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:66:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:66:3
   66|   out as empty; // ERROR
         ^^^

References:
   patterns.js:59:26
   59|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:66:10
   66|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:79:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:79:3
   79|   out as empty; // ERROR
         ^^^

References:
   patterns.js:71:33
   71|   declare const x: {foo: [{bar: number}]};
                                       ^^^^^^ [1]
   patterns.js:79:10
   79|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:87:6

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   patterns.js:87:6
   87|     [a, const a]: a, // ERROR: reference before declaration
            ^

References:
   patterns.js:87:15
   87|     [a, const a]: a, // ERROR: reference before declaration
                     ^ [1]


Error ----------------------------------------------------------------------------------------------- patterns.js:100:23

Cannot cast `n` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:100:23
   100|     {foo: const n} if n as empty: n, // ERROR
                              ^

References:
   patterns.js:94:26
    94|   declare const x: {foo: number};
                                 ^^^^^^ [1]
   patterns.js:100:28
   100|     {foo: const n} if n as empty: n, // ERROR
                                   ^^^^^ [2]



Found 35 errors
