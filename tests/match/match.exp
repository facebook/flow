Error ----------------------------------------------------------------------------------------------- expression.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   expression.js:13:10
   13|     1 => true,
                ^^^^ [1]
   expression.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   expression.js:14:10
   14|     2 => false,
                ^^^^^ [1]
   expression.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:27:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   expression.js:23:10
   23|     1 => true,
                ^^^^ [1]
   expression.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:27:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   expression.js:24:10
   24|     2 => 's',
                ^^^ [1]
   expression.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:38:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:38:3
   38|   out as empty; // ERROR
         ^^^

References:
   expression.js:34:10
   34|     1 => true,
                ^^^^ [1]
   expression.js:38:10
   38|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:46:3

Unreachable code. [unreachable-code]

   46|   out; // ERROR: unreachable
         ^^^^


Error ----------------------------------------------------------------------------------------------- expression.js:56:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:56:3
   56|   out as empty; // ERROR
         ^^^

References:
   expression.js:53:10
   53|     _ => 's',
                ^^^ [1]
   expression.js:56:10
   56|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:97:3

Cannot resolve name `a`. [cannot-resolve-name]

   97|   a; // ERROR
         ^


Error ---------------------------------------------------------------------------------------------- expression.js:107:3

Cannot resolve name `a`. [cannot-resolve-name]

   107|   a; // ERROR
          ^


Error --------------------------------------------------------------------------------------------- expression.js:144:10

Cannot assign `match` to `x` because number [1] is incompatible with union type [2]. [incompatible-type]

   expression.js:144:10
   144|     1 => 2, // ERROR: 2 is not a subtype of 0|1
                 ^ [1]

References:
   expression.js:142:12
   142|   const x: 0|1 = match (n) {
                   ^^^ [2]


Error --------------------------------------------------------------------------------------------- expression.js:153:10

Cannot get `dict[match]` because property `2` is missing in object type [1]. [prop-missing]

   expression.js:153:10
   153|     1 => 2, // ERROR: 2 is not a subtype of 0|1
                 ^

References:
   expression.js:150:21
   150|   declare var dict: {[0|1]: number};
                            ^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:15:14

`match` is not exhaustively checked: number literal `-2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:15:14
   15|   const e2 = match (x) { // ERROR: not all members checked
                    ^^^^^

References:
   matching.js:3:24
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                              ^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:15:14

`match` is not exhaustively checked: string literal `s` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:15:14
   15|   const e2 = match (x) { // ERROR: not all members checked
                    ^^^^^

References:
   matching.js:3:34
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                                        ^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:36:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:36:14
   36|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:25:24
   25|   declare const x: 1 | 2;
                              ^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:51:14

`match` is not exhaustively checked: undefined [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:51:14
   51|   const e2 = match (x) { // ERROR: `undefined` not checked
                    ^^^^^

References:
   matching.js:43:24
   43|   declare const x: 1 | void;
                              ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:67:14

`match` is not exhaustively checked: null or undefined [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:67:14
   67|   const e2 = match (x) { // ERROR: `null` and `undefined` not checked
                    ^^^^^

References:
   matching.js:58:20
   58|   declare const x: ?1;
                          ^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:87:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:87:14
   87|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:74:24
   74|   declare const x: 1 | 2;
                              ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:140:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:140:14
   140|   const e2 = match (f()) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:132:30
   132|   declare const f: () => 1 | 2;
                                     ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:154:14

`match` is not exhaustively checked: number literal `3` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:154:14
   154|   const e2 = match (x) { // ERROR: `3` not checked
                     ^^^^^

References:
   matching.js:147:28
   147|   declare const x: 1 | 2 | 3;
                                   ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:165:14

`match` is not exhaustively checked: number literal `2` [1] has not been fully checked against by the match patterns
below. [match-not-exhaustive]

   matching.js:165:14
   165|   const e1 = match (x) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:161:24
   161|   declare const x: 1 | 2;
                               ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:220:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:220:14
   220|   const e2 = match (x) { // ERROR: `type: 'baz'` not checked
                     ^^^^^

References:
   matching.js:211:20
   211|                  | {type: 'baz', val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:269:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:269:14
   269|   const e3 = match (x) { // ERROR: `type: 'bar', n: 2` not checked
                     ^^^^^

References:
   matching.js:254:20
   254|                  | {type: 'bar', n: 2, val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:297:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:297:14
   297|   const e2 = match (x) { // ERROR: `type: 'bar'` not checked
                     ^^^^^

References:
   matching.js:289:20
   289|                  | {type: 'bar', val: string}
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:315:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:315:14
   315|   const e2 = match (x) { // ERROR: `'baz'` element not checked
                     ^^^^^

References:
   matching.js:306:20
   306|                  | ['baz', boolean];
                           ^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:353:24

Cannot cast `a` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   matching.js:353:24
   353|     [const a, _, _] => a as empty, // ERROR: `boolean` is not `empty`
                               ^

References:
   matching.js:348:21
   348|                  | [boolean, boolean, boolean];
                            ^^^^^^^ [1]
   matching.js:353:29
   353|     [const a, _, _] => a as empty, // ERROR: `boolean` is not `empty`
                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:373:18

Cannot cast `a` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   matching.js:373:18
   373|     [const a] => a as string, // ERROR: `number` is not `string`
                         ^

References:
   matching.js:369:21
   369|   declare const x: [number] | Array<string>;
                            ^^^^^^ [1]
   matching.js:373:23
   373|     [const a] => a as string, // ERROR: `number` is not `string`
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:393:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:393:14
   393|   const e2 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:386:20
   386|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:397:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:397:14
   397|   const e3 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:386:20
   386|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:401:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:401:14
   401|   const e4 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:386:20
   386|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:415:14

`match` is not exhaustively checked: tuple type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:415:14
   415|   const e2 = match (x) { // ERROR: does not match all elements
                     ^^^^^

References:
   matching.js:408:20
   408|   declare const x: [a: 0, ...];
                           ^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:425:14

`match` is not exhaustively checked: object type [1] has not been fully checked against by the match patterns below.
[match-not-exhaustive]

   matching.js:425:14
   425|   const e1 = match (x) {
                     ^^^^^

References:
   matching.js:422:23
   422|   type T = {foo: 1} | {foo: 2};
                              ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- pattern-errors.js:6:10

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   6|      [...let a] => 0, // ERROR
               ^^^^^


Error -------------------------------------------------------------------------------------------- pattern-errors.js:7:7

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   7|      {let a, ...let b} => 0, // ERROR
            ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:7:17

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   7|      {let a, ...let b} => 0, // ERROR
                      ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:8:11

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   8|      0 as let a => 0, // ERROR
                ^^^^^


Error -------------------------------------------------------------------------------------------- pattern-errors.js:9:6

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   9|      let a => 0, // ERROR
           ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:13:10

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   13|      [...var a] => 0, // ERROR
                ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:14:7

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   14|      {var a, ...var b} => 0, // ERROR
             ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:14:17

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   14|      {var a, ...var b} => 0, // ERROR
                       ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:15:11

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   15|      0 as var a => 0, // ERROR
                 ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:16:6

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   16|      var a => 0, // ERROR
            ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:25:6

Unsupported object property literal in match pattern. String literals and int-like number literals are supported.
[match-invalid-pattern]

   25|     {1.1: _} => 0, // ERROR
            ^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:35:5

Unary pattern on `0` is not supported. [match-invalid-pattern]

   35|     -0 => true, // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:36:5

Unary pattern on `0` is not supported. [match-invalid-pattern]

   36|     +0 => true, // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:46:5

Unary pattern `+` on bigint literal is not supported. [match-invalid-pattern]

   46|     +1n => true, // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:56:17

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   56|     {foo: true, foo: false} => 0, // ERROR
                       ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:61:23

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   61|     {foo: true, const foo} => 0, // ERROR
                             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:66:17

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   66|     {foo: true, 'foo': false} => 0, // ERROR
                       ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:76:23

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:76:23
   76|     [const a, true as a] => 0, // ERROR
                             ^

References:
   pattern-errors.js:76:12
   76|     [const a, true as a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:77:29

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:77:29
   77|     [const a, true as const a] => 0, // ERROR
                                   ^

References:
   pattern-errors.js:77:12
   77|     [const a, true as const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:78:21

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:78:21
   78|     [const a, const a] => 0, // ERROR
                           ^

References:
   pattern-errors.js:78:12
   78|     [const a, const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:79:24

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:79:24
   79|     [const a, ...const a] => 0, // ERROR
                              ^

References:
   pattern-errors.js:79:12
   79|     [const a, ...const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:80:24

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:80:24
   80|     {const a, ...const a} => 0, // ERROR
                              ^

References:
   pattern-errors.js:80:12
   80|     {const a, ...const a} => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:90:18

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   90|     _ | [true as a] => 0, // ERROR
                        ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:91:24

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   91|     _ | [true as const a] => 0, // ERROR
                              ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:92:16

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   92|     _ | [const a] => 0, // ERROR
                      ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:93:19

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   93|     _ | [...const a] => 0, // ERROR
                         ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:99:16

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   99|     _ | {const a} => 0, // ERROR
                      ^


Error ----------------------------------------------------------------------------------------- pattern-errors.js:100:19

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   100|     _ | {...const a} => 0, // ERROR
                          ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:109:5

Invalid `as` pattern. Direct use on a binding pattern is not allowed. [match-invalid-pattern]

   109|     const a as b => 0, // ERROR
            ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:110:5

Invalid `as` pattern. Direct use on a binding pattern is not allowed. [match-invalid-pattern]

   110|     const a as const b => 0, // ERROR
            ^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:119:6

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:119:6
   119|     [a, const a] => a, // ERROR: reference before declaration
             ^

References:
   pattern-errors.js:119:15
   119|     [a, const a] => a, // ERROR: reference before declaration
                      ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:127:6

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:127:6
   127|     [a.foo, const a] => a, // ERROR: reference before declaration
             ^

References:
   pattern-errors.js:127:19
   127|     [a.foo, const a] => a, // ERROR: reference before declaration
                          ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:137:15

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:137:15
   137|     [const a, a] => a, // ERROR
                      ^

References:
   pattern-errors.js:137:12
   137|     [const a, a] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:137:15

Cannot use variable `a` [1] within the same match pattern it is defined. [match-invalid-pattern]

   pattern-errors.js:137:15
   137|     [const a, a] => a, // ERROR
                      ^

References:
   pattern-errors.js:137:12
   137|     [const a, a] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:145:15

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:145:15
   145|     [const a, a.foo] => a, // ERROR
                      ^

References:
   pattern-errors.js:145:12
   145|     [const a, a.foo] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:145:15

Cannot use variable `a` [1] within the same match pattern it is defined. [match-invalid-pattern]

   pattern-errors.js:145:15
   145|     [const a, a.foo] => a, // ERROR
                      ^

References:
   pattern-errors.js:145:12
   145|     [const a, a.foo] => a, // ERROR
                   ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:155:6

Invalid object pattern property. Use `{const foo}` if you want to create a new variable with the value of property
`foo`, or use `{foo: foo}` if you want to match property `foo` against the value of the variable of the same name.
[match-invalid-pattern]

   155|     {foo} => 0, // ERROR
             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:156:6

Invalid object pattern property. Use `{const foo}` if you want to create a new variable with the value of property
`foo`, or use `{foo: foo}` if you want to match property `foo` against the value of the variable of the same name.
[match-invalid-pattern]

   156|     {foo, bar: true} => 0, // ERROR
             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:166:6

Unsupported object property literal in match pattern. String literals and int-like number literals are supported.
[match-invalid-pattern]

   166|     {1n: 1} => 0, // ERROR
             ^^


Error -------------------------------------------------------------------------------------------------- patterns.js:9:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:9:3
   9|   out as empty; // ERROR
        ^^^

References:
   patterns.js:3:20
   3|   declare const x: number;
                         ^^^^^^ [1]
   patterns.js:9:10
   9|   out as empty; // ERROR
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:20:3

Cannot resolve name `a`. [cannot-resolve-name]

   20|   a; // ERROR: cannot resolve name
         ^


Error ------------------------------------------------------------------------------------------------- patterns.js:31:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:31:3
   31|   out as empty; // ERROR
         ^^^

References:
   patterns.js:25:21
   25|   declare const x: [number];
                           ^^^^^^ [1]
   patterns.js:31:10
   31|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:43:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:43:3
   43|   out as empty; // ERROR
         ^^^

References:
   patterns.js:36:26
   36|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:43:10
   43|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:55:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:55:3
   55|   out as empty; // ERROR
         ^^^

References:
   patterns.js:48:26
   48|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:55:10
   55|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:68:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:68:3
   68|   out as empty; // ERROR
         ^^^

References:
   patterns.js:60:33
   60|   declare const x: {foo: [{bar: number}]};
                                       ^^^^^^ [1]
   patterns.js:68:10
   68|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ patterns.js:79:24

Cannot cast `n` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:79:24
   79|     {foo: const n} if (n as empty) => n, // ERROR
                              ^

References:
   patterns.js:73:26
   73|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:79:29
   79|     {foo: const n} if (n as empty) => n, // ERROR
                                   ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- rules-of-hooks.js:8:7

Cannot call hook [1] because React hooks cannot be called in conditional contexts.
(https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-conditional]

   rules-of-hooks.js:8:7
   8|       useHook(); // ERROR
            ^^^^^^^^^

References:
   rules-of-hooks.js:8:7
   8|       useHook(); // ERROR
            ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ rules-of-hooks.js:17:10

Cannot call hook [1] because React hooks cannot be called in conditional contexts.
(https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-conditional]

   rules-of-hooks.js:17:10
   17|     1 => useHook(), // ERROR
                ^^^^^^^^^

References:
   rules-of-hooks.js:17:10
   17|     1 => useHook(), // ERROR
                ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ statement.js:22:3

Unreachable code. [unreachable-code]

   22|   x; // ERROR: unreachable
         ^^


Error ------------------------------------------------------------------------------------------------ statement.js:70:3

Cannot resolve name `a`. [cannot-resolve-name]

   70|   a; // ERROR
         ^


Error ------------------------------------------------------------------------------------------------ statement.js:84:3

Cannot resolve name `a`. [cannot-resolve-name]

   84|   a; // ERROR
         ^


Error ---------------------------------------------------------------------------------------------- statement.js:176:10

Invalid `match` statement case body. A block is required for each case body. Wrap this statement with `{` and `}`.
[match-statement-invalid-body]

   176|     1 => return 1; // ERROR
                 ^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- statement.js:177:10

Invalid `match` statement case body. A block is required for each case body. Wrap this statement with `{` and `}`.
[match-statement-invalid-body]

   177|     2 => throw false; // ERROR
                 ^^^^^^^^^^^^



Found 84 errors
