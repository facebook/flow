Error ----------------------------------------------------------------------------------------------- expression.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   expression.js:13:10
   13|     1 => true,
                ^^^^ [1]
   expression.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:18:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:18:3
   18|   out as empty; // ERROR
         ^^^

References:
   expression.js:14:10
   14|     2 => false,
                ^^^^^ [1]
   expression.js:18:10
   18|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:27:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   expression.js:23:10
   23|     1 => true,
                ^^^^ [1]
   expression.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:27:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:27:3
   27|   out as empty; // ERROR
         ^^^

References:
   expression.js:24:10
   24|     2 => 's',
                ^^^ [1]
   expression.js:27:10
   27|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:38:3

Cannot cast `out` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:38:3
   38|   out as empty; // ERROR
         ^^^

References:
   expression.js:34:10
   34|     1 => true,
                ^^^^ [1]
   expression.js:38:10
   38|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:46:3

Unreachable code. [unreachable-code]

   46|   out; // ERROR: unreachable
         ^^^^


Error ----------------------------------------------------------------------------------------------- expression.js:56:3

Cannot cast `out` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   expression.js:56:3
   56|   out as empty; // ERROR
         ^^^

References:
   expression.js:53:10
   53|     _ => 's',
                ^^^ [1]
   expression.js:56:10
   56|   out as empty; // ERROR
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- expression.js:97:3

Cannot resolve name `a`. [cannot-resolve-name]

   97|   a; // ERROR
         ^


Error ---------------------------------------------------------------------------------------------- expression.js:108:3

Cannot resolve name `a`. [cannot-resolve-name]

   108|   a; // ERROR
          ^


Error --------------------------------------------------------------------------------------------- expression.js:144:10

Cannot assign `match` to `out` because string [1] is incompatible with union type [2]. [incompatible-type]

   expression.js:144:10
   144|     2 => 'xxx', // ERROR: 'xxx' is not a subtype of 'a' | 'b'
                 ^^^^^ [1]

References:
   expression.js:142:14
   142|   const out: 'a' | 'b' = match (x) {
                     ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- expression.js:151:10

Cannot get `dict[match]` because property `xxx` is missing in object type [1]. [prop-missing]

   expression.js:151:10
   151|     2 => 'xxx', // ERROR: 'xxx' is not a subtype of 'a' | 'b'
                 ^^^^^

References:
   expression.js:148:23
   148|   declare const dict: {['a' | 'b']: number};
                              ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- invalid-break-statement.js:17:5

Illegal break statement. `break` statements are not required in `match` statements, as unlike `switch` statements,
`match` statement cases do not fall-through by default.

   17|     break; // ERROR: parse error
           ^^^^^^


Error --------------------------------------------------------------------------------------- invalid-case-syntax.js:6:5

Drop the `case`. Just <pattern>. It's cleaner. [unsupported-syntax]

   6|     case 0 => {} // ERROR
          ^^^^


Error -------------------------------------------------------------------------------------- invalid-case-syntax.js:10:6

`match` cases use `=>` to separate the pattern and the case body. To fix, replace the `;` with `=>`.
[unsupported-syntax]

   10|     0: {} // ERROR
            ^


Error -------------------------------------------------------------------------------------- invalid-case-syntax.js:17:5

Drop the `case`. Just <pattern>. It's cleaner. [unsupported-syntax]

   17|     case 0 => 1, // ERROR
           ^^^^


Error -------------------------------------------------------------------------------------- invalid-case-syntax.js:22:6

`match` cases use `=>` to separate the pattern and the case body. To fix, replace the `;` with `=>`.
[unsupported-syntax]

   22|     0: 1, // ERROR
            ^


Error ------------------------------------------------------------------------------------- invalid-case-syntax.js:27:11

`match` uses commas `,` to separate cases. To fix, replace the `;` with `,`. [unsupported-syntax]

   27|     0 => 1; // ERROR
                 ^


Error -------------------------------------------------------------------------------------- invalid-case-syntax.js:35:3

Drop the `case`. Just <pattern>. It's cleaner. At [1] [2] [3]. [unsupported-syntax]

   invalid-case-syntax.js:35:3
   35|   match (x) { // ERROR
         ^^^^^

References:
   invalid-case-syntax.js:36:5
   36|     case 1 => {}
           ^^^^ [1]
   invalid-case-syntax.js:37:5
   37|     case 2 => {}
           ^^^^ [2]
   invalid-case-syntax.js:38:5
   38|     case 3 => {}
           ^^^^ [3]


Error -------------------------------------------------------------------------------------- invalid-case-syntax.js:52:3

Invalid match case syntax:
- Drop the `case`. Just <pattern>. It's cleaner. At [1] [2] [3].
- `match` cases use `=>` to separate the pattern and the case body. To fix, replace the `;` with `=>`. At [4] [5] [6].
[unsupported-syntax]

   invalid-case-syntax.js:52:3
   52|   match (x) { // ERROR
         ^^^^^

References:
   invalid-case-syntax.js:53:5
   53|     case 1: {}
           ^^^^ [1]
   invalid-case-syntax.js:54:5
   54|     case 2: {}
           ^^^^ [2]
   invalid-case-syntax.js:55:5
   55|     case 3: {}
           ^^^^ [3]
   invalid-case-syntax.js:53:11
   53|     case 1: {}
                 ^ [4]
   invalid-case-syntax.js:54:11
   54|     case 2: {}
                 ^ [5]
   invalid-case-syntax.js:55:11
   55|     case 3: {}
                 ^ [6]


Error ------------------------------------------------------------------------------------- invalid-case-syntax.js:58:13

Invalid match case syntax:
- Drop the `case`. Just <pattern>. It's cleaner. At [1] [2] [3].
- `match` cases use `=>` to separate the pattern and the case body. To fix, replace the `;` with `=>`. At [4] [5] [6].
- `match` uses commas `,` to separate cases. To fix, replace the `;` with `,`. At [7] [8] [9]. [unsupported-syntax]

   invalid-case-syntax.js:58:13
   58|   const e = match (x) { // ERROR
                   ^^^^^

References:
   invalid-case-syntax.js:59:5
   59|     case 1: null;
           ^^^^ [1]
   invalid-case-syntax.js:60:5
   60|     case 2: null;
           ^^^^ [2]
   invalid-case-syntax.js:61:5
   61|     case 3: null;
           ^^^^ [3]
   invalid-case-syntax.js:59:11
   59|     case 1: null;
                 ^ [4]
   invalid-case-syntax.js:60:11
   60|     case 2: null;
                 ^ [5]
   invalid-case-syntax.js:61:11
   61|     case 3: null;
                 ^ [6]
   invalid-case-syntax.js:59:17
   59|     case 1: null;
                       ^ [7]
   invalid-case-syntax.js:60:17
   60|     case 2: null;
                       ^ [8]
   invalid-case-syntax.js:61:17
   61|     case 3: null;
                       ^ [9]


Error ------------------------------------------------------------------------------------------------ matching.js:14:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing patterns:
- `'s'` to match string literal `s` [1]
- `-2` to match number literal `-2` [2] [match-not-exhaustive]

   matching.js:14:14
   14|   const e2 = match (x) { // ERROR: not all members checked
                    ^^^^^

References:
   matching.js:3:34
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                                        ^^^ [1]
   matching.js:3:24
    3|   declare const x: 1 | -2 | 3n | 's' | false | null;
                              ^^ [2]


Error ------------------------------------------------------------------------------------------------ matching.js:34:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `2` to match number
literal `2` [1]. [match-not-exhaustive]

   matching.js:34:14
   34|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:24:24
   24|   declare const x: 1 | 2;
                              ^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:48:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `undefined` to match
undefined [1]. [match-not-exhaustive]

   matching.js:48:14
   48|   const e2 = match (x) { // ERROR: `undefined` not checked
                    ^^^^^

References:
   matching.js:41:24
   41|   declare const x: 1 | void;
                              ^^^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:63:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing patterns:
- `null` to match null or undefined [1]
- `undefined` to match null or undefined [1] [match-not-exhaustive]

   matching.js:63:14
   63|   const e2 = match (x) { // ERROR: `null` and `undefined` not checked
                    ^^^^^

References:
   matching.js:55:20
   55|   declare const x: ?1;
                          ^^ [1]


Error ------------------------------------------------------------------------------------------------ matching.js:82:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `2` to match number
literal `2` [1]. [match-not-exhaustive]

   matching.js:82:14
   82|   const e2 = match (x) { // ERROR: `2` not checked
                    ^^^^^

References:
   matching.js:70:24
   70|   declare const x: 1 | 2;
                              ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:131:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `2` to match number
literal `2` [1]. [match-not-exhaustive]

   matching.js:131:14
   131|   const e2 = match (f()) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:124:30
   124|   declare const f: () => 1 | 2;
                                     ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:144:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `3` to match number
literal `3` [1]. [match-not-exhaustive]

   matching.js:144:14
   144|   const e2 = match (x) { // ERROR: `3` not checked
                     ^^^^^

References:
   matching.js:138:28
   138|   declare const x: 1 | 2 | 3;
                                   ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:155:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `2` to match number
literal `2` [1]. [match-not-exhaustive]

   matching.js:155:14
   155|   const e1 = match (x) { // ERROR: `2` not checked
                     ^^^^^

References:
   matching.js:151:24
   151|   declare const x: 1 | 2;
                               ^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:206:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `{type: 'baz', val: _}` to
match object type [1]. [match-not-exhaustive]

   matching.js:206:14
   206|   const e2 = match (x) { // ERROR: `type: 'baz'` not checked
                     ^^^^^

References:
   matching.js:198:20
   198|                  | {type: 'baz', val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:251:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern:
`{type: 'bar', n: 2, val: _}` to match object type [1]. [match-not-exhaustive]

   matching.js:251:14
   251|   const e3 = match (x) { // ERROR: `type: 'bar', n: 2` not checked
                     ^^^^^

References:
   matching.js:238:20
   238|                  | {type: 'bar', n: 2, val: boolean};
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:277:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `{type: 'bar', val: _}` to
match object type [1]. [match-not-exhaustive]

   matching.js:277:14
   277|   const e2 = match (x) { // ERROR: `type: 'bar'` not checked
                     ^^^^^

References:
   matching.js:270:20
   270|                  | {type: 'bar', val: string}
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:294:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `['baz', _]` to match
tuple type [1]. [match-not-exhaustive]

   matching.js:294:14
   294|   const e2 = match (x) { // ERROR: `'baz'` element not checked
                     ^^^^^

References:
   matching.js:286:20
   286|                  | ['baz', boolean];
                           ^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:330:24

Cannot cast `a` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   matching.js:330:24
   330|     [const a, _, _] => a as empty, // ERROR: `boolean` is not `empty`
                               ^

References:
   matching.js:325:21
   325|                  | [boolean, boolean, boolean];
                            ^^^^^^^ [1]
   matching.js:330:29
   330|     [const a, _, _] => a as empty, // ERROR: `boolean` is not `empty`
                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:347:18

Cannot cast `a` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   matching.js:347:18
   347|     [const a] => a as string, // ERROR: `number` is not `string`
                         ^

References:
   matching.js:343:21
   343|   declare const x: [number] | Array<string>;
                            ^^^^^^ [1]
   matching.js:347:23
   347|     [const a] => a as string, // ERROR: `number` is not `string`
                              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- matching.js:365:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `[_]` to match tuple
type [1]. [match-not-exhaustive]

   matching.js:365:14
   365|   const e2 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:369:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing patterns:
- `[_, _]` to match tuple type [1]
- `[_, _, _]` to match tuple type [1] [match-not-exhaustive]

   matching.js:369:14
   369|   const e3 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:373:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing patterns:
- `[_]` to match tuple type [1]
- `[_, _]` to match tuple type [1] [match-not-exhaustive]

   matching.js:373:14
   373|   const e4 = match (x) { // ERROR: does not match all possibilities
                     ^^^^^

References:
   matching.js:359:20
   359|   declare const x: [a: 0, b?: 1, c?: 2];
                           ^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:386:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `[_, ...]` to match tuple
type [1]. [match-not-exhaustive]

   matching.js:386:14
   386|   const e2 = match (x) { // ERROR: does not match all elements
                     ^^^^^

References:
   matching.js:380:20
   380|   declare const x: [a: 0, ...];
                           ^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- matching.js:396:14

`match` hasn't checked all possible cases of the input type. To fix, add the missing pattern: `{foo: 2}` to match object
type [1]. [match-not-exhaustive]

   matching.js:396:14
   396|   const e1 = match (x) {
                     ^^^^^

References:
   matching.js:394:20
   394|   declare const x: T;
                           ^ [1]


Error ------------------------------------------------------------------------------------------- pattern-errors.js:6:10

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   6|      [...let a] => 0, // ERROR
               ^^^^^


Error -------------------------------------------------------------------------------------------- pattern-errors.js:7:7

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   7|      {let a, ...let b} => 0, // ERROR
            ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:7:17

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   7|      {let a, ...let b} => 0, // ERROR
                      ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:8:11

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   8|      0 as let a => 0, // ERROR
                ^^^^^


Error -------------------------------------------------------------------------------------------- pattern-errors.js:9:6

Cannot use `let` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   9|      let a => 0, // ERROR
           ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:13:10

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   13|      [...var a] => 0, // ERROR
                ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:14:7

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   14|      {var a, ...var b} => 0, // ERROR
             ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:14:17

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   14|      {var a, ...var b} => 0, // ERROR
                       ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:15:11

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   15|      0 as var a => 0, // ERROR
                 ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:16:6

Cannot use `var` for match pattern binding. Only `const` is allowed. [match-invalid-pattern]

   16|      var a => 0, // ERROR
            ^^^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:25:5

This match pattern [1] is unused. The values it matches are either already covered by previous patterns, or are not part
of the input type. To fix, either remove this pattern or restructure previous patterns. [match-unused-pattern]

   25|     {1.1: _} => 0, // ERROR
           ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- pattern-errors.js:25:6

Unsupported object property literal in match pattern. String literals and int-like number literals are supported.
[match-invalid-pattern]

   25|     {1.1: _} => 0, // ERROR
            ^^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:35:5

Unary pattern on `0` is not supported. [match-invalid-pattern]

   35|     -0 => true, // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:36:5

Unary pattern on `0` is not supported. [match-invalid-pattern]

   36|     +0 => true, // ERROR
           ^^


Error ------------------------------------------------------------------------------------------- pattern-errors.js:46:5

Unary pattern `+` on bigint literal is not supported. [match-invalid-pattern]

   46|     +1n => true, // ERROR
           ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:56:17

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   56|     {foo: true, foo: false} => 0, // ERROR
                       ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:61:23

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   61|     {foo: true, const foo} => 0, // ERROR
                             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:65:17

Duplicate property `foo` in object pattern. [match-invalid-pattern]

   65|     {foo: true, 'foo': false} => 0, // ERROR
                       ^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:75:23

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:75:23
   75|     [const a, true as a] => 0, // ERROR
                             ^

References:
   pattern-errors.js:75:12
   75|     [const a, true as a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:76:21

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:76:21
   76|     [const a, const a] => 0, // ERROR
                           ^

References:
   pattern-errors.js:76:12
   76|     [const a, const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:80:29

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:80:29
   80|     [const a, true as const a] => 0, // ERROR
                                   ^

References:
   pattern-errors.js:80:12
   80|     [const a, true as const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:81:24

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:81:24
   81|     [const a, ...const a] => 0, // ERROR
                              ^

References:
   pattern-errors.js:81:12
   81|     [const a, ...const a] => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:87:26

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:87:26
   87|     {const a, b: true as a} => 0, // ERROR
                                ^

References:
   pattern-errors.js:87:12
   87|     {const a, b: true as a} => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:88:24

Cannot declare `a` [1] because the name is already bound. [name-already-bound]

   pattern-errors.js:88:24
   88|     {const a, ...const a} => 0, // ERROR
                              ^

References:
   pattern-errors.js:88:12
   88|     {const a, ...const a} => 0, // ERROR
                  ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:97:14

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   97|     [true as a] | ['s'] => 0, // ERROR
                    ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:98:21

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   98|     [false as const a] | ['s'] => 0, // ERROR
                           ^


Error ----------------------------------------------------------------------------------------- pattern-errors.js:103:20

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   103|     [true as const a] | ['s'] => 0, // ERROR
                           ^


Error ----------------------------------------------------------------------------------------- pattern-errors.js:104:23

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   104|     ['t'] | [...const a] => 0, // ERROR
                              ^


Error ----------------------------------------------------------------------------------------- pattern-errors.js:111:17

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   111|     {a: true as a} | {a: 's'} => 0, // ERROR
                        ^


Error ----------------------------------------------------------------------------------------- pattern-errors.js:112:24

New bindings in 'or' patterns are not yet supported. [match-invalid-pattern]

   112|     {a: false as const a} | {a: 's'} => 0, // ERROR
                               ^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:122:6

Invalid `as` pattern. Direct use on a binding pattern is not allowed. [match-invalid-pattern]

   122|     [const a as b] => 0, // ERROR
             ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:126:5

Invalid `as` pattern. Direct use on a binding pattern is not allowed. [match-invalid-pattern]

   126|     const a as const b => 0, // ERROR
            ^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:135:6

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:135:6
   135|     [a, const a] => a, // ERROR: reference before declaration
             ^

References:
   pattern-errors.js:135:15
   135|     [a, const a] => a, // ERROR: reference before declaration
                      ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:143:6

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:143:6
   143|     [a.foo, const a] => a, // ERROR: reference before declaration
             ^

References:
   pattern-errors.js:143:19
   143|     [a.foo, const a] => a, // ERROR: reference before declaration
                          ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:153:15

Can't use variable `a` [1] within the same match pattern it is defined. [match-invalid-pattern]

   pattern-errors.js:153:15
   153|     [const a, a] => a, // ERROR
                      ^

References:
   pattern-errors.js:153:12
   153|     [const a, a] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:153:15

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:153:15
   153|     [const a, a] => a, // ERROR
                      ^

References:
   pattern-errors.js:153:12
   153|     [const a, a] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:161:15

Can't use variable `a` [1] within the same match pattern it is defined. [match-invalid-pattern]

   pattern-errors.js:161:15
   161|     [const a, a.foo] => a, // ERROR
                      ^

References:
   pattern-errors.js:161:12
   161|     [const a, a.foo] => a, // ERROR
                   ^ [1]


Error ----------------------------------------------------------------------------------------- pattern-errors.js:161:15

Cannot use variable `a` [1] because the declaration either comes later or was skipped. [reference-before-declaration]

   pattern-errors.js:161:15
   161|     [const a, a.foo] => a, // ERROR
                      ^

References:
   pattern-errors.js:161:12
   161|     [const a, a.foo] => a, // ERROR
                   ^ [1]


Error ------------------------------------------------------------------------------------------ pattern-errors.js:171:6

`match` object patterns don't allow this property shorthand syntax. To fix, be explicit and either use `{const foo}` if
you want to create a new variable with the value of property `foo`, or use `{foo: foo}` if you want to match property
`foo` against the value of the variable named `foo`. [match-invalid-pattern]

   171|     {foo, ...} => 0, // ERROR
             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:172:6

`match` object patterns don't allow this property shorthand syntax. To fix, be explicit and either use `{const foo}` if
you want to create a new variable with the value of property `foo`, or use `{foo: foo}` if you want to match property
`foo` against the value of the variable named `foo`. [match-invalid-pattern]

   172|     {foo, bar: true} => 0, // ERROR
             ^^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:181:6

Unsupported object property literal in match pattern. String literals and int-like number literals are supported.
[match-invalid-pattern]

   181|     {1n: 1, ...} => 0, // ERROR
             ^^


Error ------------------------------------------------------------------------------------------ pattern-errors.js:191:5

`match` uses `_` for wildcard patterns which match everything. To fix, replace `default` with `_`. [unsupported-syntax]

   191|     default => {} // ERROR
            ^^^^^^^


Error -------------------------------------------------------------------------------------------------- patterns.js:9:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:9:3
   9|   out as empty; // ERROR
        ^^^

References:
   patterns.js:3:20
   3|   declare const x: number;
                         ^^^^^^ [1]
   patterns.js:9:10
   9|   out as empty; // ERROR
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:20:3

Cannot resolve name `a`. [cannot-resolve-name]

   20|   a; // ERROR: cannot resolve name
         ^


Error ------------------------------------------------------------------------------------------------- patterns.js:31:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:31:3
   31|   out as empty; // ERROR
         ^^^

References:
   patterns.js:25:21
   25|   declare const x: [number];
                           ^^^^^^ [1]
   patterns.js:31:10
   31|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:43:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:43:3
   43|   out as empty; // ERROR
         ^^^

References:
   patterns.js:36:26
   36|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:43:10
   43|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:55:3

Cannot cast `out` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:55:3
   55|   out as empty; // ERROR
         ^^^

References:
   patterns.js:48:26
   48|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:55:10
   55|   out as empty; // ERROR
                ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:66:3

Cannot cast `out1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:66:3
   66|   out1 as empty; // ERROR
         ^^^^

References:
   patterns.js:60:33
   60|   declare const x: {foo: [{bar: number}]};
                                       ^^^^^^ [1]
   patterns.js:66:11
   66|   out1 as empty; // ERROR
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- patterns.js:72:3

Cannot cast `out2` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:72:3
   72|   out2 as empty; // ERROR
         ^^^^

References:
   patterns.js:60:33
   60|   declare const x: {foo: [{bar: number}]};
                                       ^^^^^^ [1]
   patterns.js:72:11
   72|   out2 as empty; // ERROR
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ patterns.js:83:24

Cannot cast `n` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   patterns.js:83:24
   83|     {foo: const n} if (n as empty) => n, // ERROR
                              ^

References:
   patterns.js:77:26
   77|   declare const x: {foo: number};
                                ^^^^^^ [1]
   patterns.js:83:29
   83|     {foo: const n} if (n as empty) => n, // ERROR
                                   ^^^^^ [2]


Error -------------------------------------------------------------------------------------------- rules-of-hooks.js:8:7

Cannot call hook [1] because React hooks cannot be called in conditional contexts.
(https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-conditional]

   rules-of-hooks.js:8:7
   8|       useHook(); // ERROR
            ^^^^^^^^^

References:
   rules-of-hooks.js:8:7
   8|       useHook(); // ERROR
            ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ rules-of-hooks.js:17:10

Cannot call hook [1] because React hooks cannot be called in conditional contexts.
(https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-conditional]

   rules-of-hooks.js:17:10
   17|     1 => useHook(), // ERROR
                ^^^^^^^^^

References:
   rules-of-hooks.js:17:10
   17|     1 => useHook(), // ERROR
                ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ statement.js:22:3

Unreachable code. [unreachable-code]

   22|   x; // ERROR: unreachable
         ^^


Error ------------------------------------------------------------------------------------------------ statement.js:70:3

Cannot resolve name `a`. [cannot-resolve-name]

   70|   a; // ERROR
         ^


Error ------------------------------------------------------------------------------------------------ statement.js:85:3

Cannot resolve name `a`. [cannot-resolve-name]

   85|   a; // ERROR
         ^


Error ---------------------------------------------------------------------------------------------- statement.js:177:10

`match` statements use blocks for each case body. To fix, wrap this statement with `{` and `}`.
[match-statement-invalid-body]

   177|     1 => return 1; // ERROR
                 ^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- statement.js:178:10

`match` statements use blocks for each case body. To fix, wrap this statement with `{` and `}`.
[match-statement-invalid-body]

   178|     2 => throw false; // ERROR
                 ^^^^^^^^^^^^



Found 96 errors
