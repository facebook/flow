Error: element_type.js:1
  1: type BadArity = $ElementType<number, number, number>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect number of type parameters (expected 2)

Error: element_type.js:7
  7: ('hello world': Arr_Elem);
      ^^^^^^^^^^^^^ string. This type is incompatible with
  7: ('hello world': Arr_Elem);
                     ^^^^^^^^ number

Error: element_type.js:18
 18: ('hello world': Obj_Elem);
      ^^^^^^^^^^^^^ string. This type is incompatible with
 18: ('hello world': Obj_Elem);
                     ^^^^^^^^ number

Error: non_maybe_type.js:5
  5:   else return 0; // this should be an error
                   ^ number. This type is incompatible with the expected return type of
  3: function foo(x: ?string): $NonMaybeType<?string> {
                               ^^^^^^^^^^^^^^^^^^^^^^ union: non-maybe type(s)
  Member 1:
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ non-maybe type
  Error:
    5:   else return 0; // this should be an error
                     ^ number. This type is incompatible with
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ empty
  Member 2:
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ non-maybe type
  Error:
    5:   else return 0; // this should be an error
                     ^ number. This type is incompatible with
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ empty
  Member 3:
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ non-maybe type
  Error:
    5:   else return 0; // this should be an error
                     ^ number. This type is incompatible with
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                 ^^^^^^^^^^^^^^^^^^^^^^ string

Error: non_maybe_type.js:10
 10: (0: $NonMaybeType<null>); // error
      ^ number. This type is incompatible with
 10: (0: $NonMaybeType<null>); // error
         ^^^^^^^^^^^^^^^^^^^ empty

Error: property_type.js:1
  1: type Malformed = $PropertyType<any, number>;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected object type and string literal as arguments to $PropertyType

Error: property_type.js:6
  6: (42: Obj_Prop_x);
      ^^ number. This type is incompatible with
  6: (42: Obj_Prop_x);
          ^^^^^^^^^^ string

Error: property_type.js:10
 10:   else return 0;
                   ^ number. This type is incompatible with the expected return type of
  8: function foo(o: Obj): $PropertyType<Obj, 'x'> {
                           ^^^^^^^^^^^^^^^^^^^^^^^ string

Error: tvar3.js:20
 20: (fn1(a): B); // Error: A ~> B
      ^^^^^^ A. This type is incompatible with
 20: (fn1(a): B); // Error: A ~> B
              ^ B

Error: tvar3.js:21
 21: (fn2((a: A) => {}): B => void); // Error: B ~> A
          ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 11: declare function fn2<T>(x: (T) => void): T => void;
                                ^^^^^^^^^^^ function type
  This parameter is incompatible:
     21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                             ^ B. This type is incompatible with
     21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                  ^ A

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                            ^ C

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 12: declare function fn3<T>(x: T, y: (T) => void): T;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
              ^ A. This type is incompatible with
     22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                     ^ B

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 13: declare function fn4<T>(x: T, y: (T) => void): T => void;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
              ^ A. This type is incompatible with
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                     ^ B

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 13: declare function fn4<T>(x: T, y: (T) => void): T => void;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                                ^ C. This type is incompatible with
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                     ^ B

Error: tvar3.js:25
 25: (fn5(a): B); // Error: A ~> B
      ^^^^^^ A. This type is incompatible with
 25: (fn5(a): B); // Error: A ~> B
              ^ B

Error: tvar3.js:26
 26: (fn6((a: A) => {}): B => void); // Error: B ~> A
          ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 16: declare function fn6<T>(x: (T) => void): ($NonMaybeType<T>) => void;
                                ^^^^^^^^^^^ function type
  This parameter is incompatible:
     26: (fn6((a: A) => {}): B => void); // Error: B ~> A
                             ^ B. This type is incompatible with
     16: declare function fn6<T>(x: (T) => void): ($NonMaybeType<T>) => void;
                                                   ^^^^^^^^^^^^^^^^ A

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ A. This type is incompatible with
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                            ^ C

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 17: declare function fn7<T>(x: T, y: (T) => void): $NonMaybeType<T>;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
              ^ A. This type is incompatible with
     17: declare function fn7<T>(x: T, y: (T) => void): $NonMaybeType<T>;
                                                        ^^^^^^^^^^^^^^^^ B

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 17: declare function fn7<T>(x: T, y: (T) => void): $NonMaybeType<T>;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
              ^ A. This type is incompatible with
     27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                     ^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
              ^ A. This type is incompatible with
     18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                                         ^^^^^^^^^^^^^^^^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
              ^ A. This type is incompatible with
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                     ^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                      ^^^^^^^^^^^ function type
  This parameter is incompatible:
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                                ^ C. This type is incompatible with
     18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                                         ^^^^^^^^^^^^^^^^ B

Error: tvar4.js:3
  3: function fn1<T: {p: any}>(a: T, b: T => void): $PropertyType<T, 'p'> {
                                                    ^^^^^^^^^^^^^^^^^^^^^ property type. Property not found in
 24: fn1({p: 42}, (x: {}) => {});
                      ^^ object type

Error: tvar4.js:8
  8: function fn2<T: {p: any}>(a: T, b: T => void): ($PropertyType<T, 'p'>) => void {
                                                     ^^^^^^^^^^^^^^^^^^^^^ property type. Property not found in
 25: fn2({p: 42}, (x: {}) => {})('foo');
                      ^^ object type

Error: tvar4.js:33
 33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 27: function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                  ^^^^^^^^^ function type
  This parameter is incompatible:
     33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                  ^^^^^^^^^ object literal. This type is incompatible with
     27: function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^ object type
      Property `foo` is incompatible:
         33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                            ^^ number. This type is incompatible with
         33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                           ^^^^^^ string

Error: tvar4.js:38
 38: fn3((x: {foo: number}) => {})({foo: 42});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function call
 38: fn3((x: {foo: number}) => {})({foo: 42});
             ^^^^^^^^^^^^^ undefined property `p`. This type is incompatible with
 27: function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                                             ^^^^^^ number

Error: tvar4.js:40
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                                 ^^^^^^^^^^^^^^^^^^^^^ property type. Property not found in
 51: fn4((x: {}) => {})(42);
             ^^ object type

Error: tvar4.js:43
 43:   return p => a({p});
                     ^^^ object literal. This type is incompatible with the expected param type of
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ some incompatible instantiation of `T`

Error: tvar4.js:47
 47: fn4((x: {p: string}) => {})(42);
         ^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                    ^^^^^^^^^ function type
  This parameter is incompatible:
     47: fn4((x: {p: string}) => {})(42);
                                     ^^ number. This type is incompatible with
     40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                                     ^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:2
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                            ^^^^ boolean. This type is incompatible with
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: non-maybe type(s)
  Member 1:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ non-maybe type
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ non-maybe type
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:4
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                        ^^^^ boolean. This type is incompatible with
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: property type(s)
  Member 1:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property type
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property type
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:10
 10: (null: P2); // err, null ~> string|number
      ^^^^ null. This type is incompatible with
 10: (null: P2); // err, null ~> string|number
            ^^ union: property type(s)
  Member 1:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ property type
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ string
  Member 2:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ property type
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ number


Found 32 errors
