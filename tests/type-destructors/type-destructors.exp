Error --------------------------------------------------------------------------------------------- element_type.js:1:17

Cannot use type without exactly 2 type arguments.

   1| type BadArity = $ElementType<number, number, number>;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- element_type.js:7:2

Cannot cast `'hello world'` to `Arr_Elem` because string [1] is incompatible with number [2].

   element_type.js:7:2
   7| ('hello world': Arr_Elem);
       ^^^^^^^^^^^^^ [1]

References:
   element_type.js:7:17
   7| ('hello world': Arr_Elem);
                      ^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- element_type.js:18:2

Cannot cast `'hello world'` to `Obj_Elem` because string [1] is incompatible with number [2].

   element_type.js:18:2
   18| ('hello world': Obj_Elem);
        ^^^^^^^^^^^^^ [1]

References:
   element_type.js:18:17
   18| ('hello world': Obj_Elem);
                       ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- errors.js:12:10

Cannot instantiate `$PropertyType` because property `p` is missing in object type [1].

   errors.js:12:10
   12| type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
                ^^^^^^^^^^^^^^^^^^^^^^

References:
   errors.js:12:24
   12| type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
                              ^^ [1]


Error -------------------------------------------------------------------------------------------------- errors.js:15:10

Cannot instantiate `P` because property `p` is missing in object type [1].

   errors.js:15:10
   15| type B = P<{}>; // We should get an error on this line.
                ^^^^^

References:
   errors.js:15:12
   15| type B = P<{}>; // We should get an error on this line.
                  ^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:18:1

Cannot call `fn1` because property `p` is missing in object literal [1].

   errors.js:18:1
   18| fn1({x: 42}); // We should get an error on this line.
       ^^^^^^^^^^^^

References:
   errors.js:18:5
   18| fn1({x: 42}); // We should get an error on this line.
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:19:1

Cannot call `fn1` because an indexer property is missing in null [1].

   errors.js:19:1
   19| fn1(null); // We should get an error on this line.
       ^^^^^^^^^

References:
   errors.js:19:5
   19| fn1(null); // We should get an error on this line.
           ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:21:1

Cannot call `fn2` because property `p` is missing in object literal [1].

   errors.js:21:1
   21| fn2({x: 42})(); // We should get an error on this line.
       ^^^^^^^^^^^^

References:
   errors.js:21:5
   21| fn2({x: 42})(); // We should get an error on this line.
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:22:1

Cannot call `fn2` because an indexer property is missing in null [1].

   errors.js:22:1
   22| fn2(null)(); // We should get an error on this line.
       ^^^^^^^^^

References:
   errors.js:22:5
   22| fn2(null)(); // We should get an error on this line.
           ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:24:1

Cannot call `fn3` because property `p` is missing in object literal [1].

   errors.js:24:1
   24| fn3({x: 42}); // We should get an error on this line.
       ^^^^^^^^^^^^

References:
   errors.js:24:5
   24| fn3({x: 42}); // We should get an error on this line.
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:25:1

Cannot call `fn3` because property `p` is missing in null [1].

   errors.js:25:1
   25| fn3(null); // We should get an error on this line.
       ^^^^^^^^^

References:
   errors.js:25:5
   25| fn3(null); // We should get an error on this line.
           ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:27:1

Cannot call `fn4` because property `p` is missing in object literal [1].

   errors.js:27:1
   27| fn4({x: 42})(); // We should get an error on this line.
       ^^^^^^^^^^^^

References:
   errors.js:27:5
   27| fn4({x: 42})(); // We should get an error on this line.
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors.js:28:1

Cannot call `fn4` because property `p` is missing in null [1].

   errors.js:28:1
   28| fn4(null)(); // We should get an error on this line.
       ^^^^^^^^^

References:
   errors.js:28:5
   28| fn4(null)(); // We should get an error on this line.
           ^^^^ [1]


Error --------------------------------------------------------------------------------------------------- errors2.js:6:8

Cannot instantiate `$PropertyType` because property `p` is missing in object type [1].

   errors2.js:6:8
   6| (null: $PropertyType<{}, 'p'>); // Error should point here.
             ^^^^^^^^^^^^^^^^^^^^^^

References:
   errors2.js:6:22
   6| (null: $PropertyType<{}, 'p'>); // Error should point here.
                           ^^ [1]


Error -------------------------------------------------------------------------------------------------- errors2.js:8:10

Cannot instantiate `$PropertyType` because property `p` is missing in object type [1].

   errors2.js:8:10
   8| type A = $PropertyType<{}, 'p'>; // Error should point here.
               ^^^^^^^^^^^^^^^^^^^^^^

References:
   errors2.js:8:24
   8| type A = $PropertyType<{}, 'p'>; // Error should point here.
                             ^^ [1]


Error ------------------------------------------------------------------------------------------------- errors2.js:12:10

Cannot instantiate `B` because property `p` is missing in object type [1].

   errors2.js:12:10
   12| type C = B<{}>; // Error should point here.
                ^^^^^

References:
   errors2.js:12:12
   12| type C = B<{}>; // Error should point here.
                  ^^ [1]


Error ------------------------------------------------------------------------------------------------- errors2.js:15:31

Cannot instantiate `$PropertyType` because property `p` is missing in object type [1].

   errors2.js:15:31
   15| declare function f1<O>(o: O): $PropertyType<{}, 'p'>; // Error should point here.
                                     ^^^^^^^^^^^^^^^^^^^^^^

References:
   errors2.js:15:45
   15| declare function f1<O>(o: O): $PropertyType<{}, 'p'>; // Error should point here.
                                                   ^^ [1]


Error ------------------------------------------------------------------------------------------------- errors2.js:17:31

Cannot instantiate `B` because property `p` is missing in object type [1].

   errors2.js:17:31
   17| declare function f3<O>(o: O): B<{}>; // Error should point here.
                                     ^^^^^

References:
   errors2.js:17:33
   17| declare function f3<O>(o: O): B<{}>; // Error should point here.
                                       ^^ [1]


Error -------------------------------------------------------------------------------------------------- errors2.js:25:2

Cannot call `f4` because property `p` is missing in object type [1].

   errors2.js:25:2
   25| (f4(o): empty); // Error should point here.
        ^^^^^

References:
   errors2.js:21:16
   21| declare var o: {};
                      ^^ [1]


Error -------------------------------------------------------------------------------------------------- errors2.js:26:2

Cannot call `f5` because property `p` is missing in object type [1].

   errors2.js:26:2
   26| (f5(o): empty); // Error should point here.
        ^^^^^

References:
   errors2.js:21:16
   21| declare var o: {};
                      ^^ [1]


Error ----------------------------------------------------------------------------------------------- merged/test.js:9:4

Cannot call `fn` with object literal bound to the first parameter because property `foo` is missing in object type [1]
but exists in object literal [2].

   merged/test.js:9:4
    9| fn({foo: 42}); // Error: `foo` is not in `{||}`
          ^^^^^^^^^ [2]

References:
   merged/merged.js:10:23
   10| export default fn((t: {|p: number|}) => {});
                             ^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- non_maybe_type.js:5:15

Cannot return `0` because number [1] is incompatible with string [2].

   non_maybe_type.js:5:15
   5|   else return 0; // this should be an error
                    ^ [1]

References:
   non_maybe_type.js:3:42
   3| function foo(x: ?string): $NonMaybeType<?string> {
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- non_maybe_type.js:10:2

Cannot cast `0` to `$NonMaybeType` because number [1] is incompatible with empty [2].

   non_maybe_type.js:10:2
   10| (0: $NonMaybeType<null>); // error
        ^ [1]

References:
   non_maybe_type.js:10:19
   10| (0: $NonMaybeType<null>); // error
                         ^^^^ [2]


Error -------------------------------------------------------------------------------------------- property_type.js:1:18

Cannot use `$PropertyType` because the second type argument must be a string literal.

   1| type Malformed = $PropertyType<any, number>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- property_type.js:6:2

Cannot cast `42` to `Obj_Prop_x` because number [1] is incompatible with string [2].

   property_type.js:6:2
   6| (42: Obj_Prop_x);
       ^^ [1]

References:
   property_type.js:6:6
   6| (42: Obj_Prop_x);
           ^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- property_type.js:10:15

Cannot return `0` because number [1] is incompatible with string [2].

   property_type.js:10:15
   10|   else return 0;
                     ^ [1]

References:
   property_type.js:3:17
    3| type Obj = { x: string };
                       ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:20:2

Cannot cast `fn1(...)` to `B` because `A` [1] is incompatible with `B` [2].

   tvar3.js:20:2
   20| (fn1(a): B); // Error: A ~> B
        ^^^^^^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:20:10
   20| (fn1(a): B); // Error: A ~> B
                ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:21:2

Cannot cast `fn2(...)` to function type because `A` [1] is incompatible with `B` [2] in the first argument.

   tvar3.js:21:2
   21| (fn2((a: A) => {}): B => void); // Error: B ~> A
        ^^^^^^^^^^^^^^^^^

References:
   tvar3.js:21:10
   21| (fn2((a: A) => {}): B => void); // Error: B ~> A
                ^ [1]
   tvar3.js:21:21
   21| (fn2((a: A) => {}): B => void); // Error: B ~> A
                           ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:22:2

Cannot cast `fn3(...)` to `C` because `A` [1] is incompatible with `C` [2].

   tvar3.js:22:2
   22| (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
        ^^^^^^^^^^^^^^^^^^^^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:22:24
   22| (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                              ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:22:6

Cannot call `fn3` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].

   tvar3.js:22:6
   22| (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
            ^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:22:13
   22| (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:23:2

Cannot cast `fn4(...)` to function type because `B` [1] is incompatible with `C` [2] in the first argument.

   tvar3.js:23:2
   23| (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
        ^^^^^^^^^^^^^^^^^^^^

References:
   tvar3.js:23:13
   23| (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                   ^ [1]
   tvar3.js:23:24
   23| (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                              ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:23:6

Cannot call `fn4` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].

   tvar3.js:23:6
   23| (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
            ^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:23:13
   23| (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:25:2

Cannot cast `fn5(...)` to `B` because `A` [1] is incompatible with `B` [2].

   tvar3.js:25:2
   25| (fn5(a): B); // Error: A ~> B
        ^^^^^^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:25:10
   25| (fn5(a): B); // Error: A ~> B
                ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:26:2

Cannot cast `fn6(...)` to function type because `A` [1] is incompatible with `B` [2] in the first argument.

   tvar3.js:26:2
   26| (fn6((a: A) => {}): B => void); // Error: B ~> A
        ^^^^^^^^^^^^^^^^^

References:
   tvar3.js:26:10
   26| (fn6((a: A) => {}): B => void); // Error: B ~> A
                ^ [1]
   tvar3.js:26:21
   26| (fn6((a: A) => {}): B => void); // Error: B ~> A
                           ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:27:2

Cannot cast `fn7(...)` to `C` because `A` [1] is incompatible with `C` [2].

   tvar3.js:27:2
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
        ^^^^^^^^^^^^^^^^^^^^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:27:24
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                              ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:27:6

Cannot call `fn7` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].

   tvar3.js:27:6
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
            ^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:27:13
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:27:9

Cannot call `fn7` with function bound to `y` because `B` [1] is incompatible with `A` [2] in the first argument.

   tvar3.js:27:9
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
               ^^^^^^^^^^^^

References:
   tvar3.js:27:13
   27| (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                   ^ [1]
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:28:2

Cannot cast `fn8(...)` to function type because `B` [1] is incompatible with `C` [2] in the first argument.

   tvar3.js:28:2
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
        ^^^^^^^^^^^^^^^^^^^^

References:
   tvar3.js:28:13
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [1]
   tvar3.js:28:24
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                              ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:28:6

Cannot call `fn8` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].

   tvar3.js:28:6
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
            ^

References:
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [1]
   tvar3.js:28:13
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar3.js:28:9

Cannot call `fn8` with function bound to `y` because `B` [1] is incompatible with `A` [2] in the first argument.

   tvar3.js:28:9
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
               ^^^^^^^^^^^^

References:
   tvar3.js:28:13
   28| (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [1]
   tvar3.js:6:16
    6| declare var a: A;
                      ^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar4.js:24:1

Cannot call `fn1` because property `p` is missing in object type [1].

   tvar4.js:24:1
   24| fn1({p: 42}, (x: {}) => {});
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tvar4.js:24:18
   24| fn1({p: 42}, (x: {}) => {});
                        ^^ [1]


Error ---------------------------------------------------------------------------------------------------- tvar4.js:25:1

Cannot call `fn2` because property `p` is missing in object type [1].

   tvar4.js:25:1
   25| fn2({p: 42}, (x: {}) => {})('foo');
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tvar4.js:25:18
   25| fn2({p: 42}, (x: {}) => {})('foo');
                        ^^ [1]


Error --------------------------------------------------------------------------------------------------- tvar4.js:33:42

Cannot call `fn3(...)` with object literal bound to the first parameter because number [1] is incompatible with
string [2] in property `foo`.

   tvar4.js:33:42
   33| fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                ^^^^^^^^^

References:
   tvar4.js:33:48
   33| fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                      ^^ [1]
   tvar4.js:33:15
   33| fn3((x: {foo: string, p: number}) => {})({foo: 42});
                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar4.js:38:1

Cannot call `fn3` because undefined property `p` [1] is incompatible with number [2].

   tvar4.js:38:1
   38| fn3((x: {foo: number}) => {})({foo: 42});
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tvar4.js:38:9
   38| fn3((x: {foo: number}) => {})({foo: 42});
               ^^^^^^^^^^^^^ [1]
   tvar4.js:27:57
   27| function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                                               ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tvar4.js:43:17

Cannot call `a` with object literal bound to the first parameter because object literal [1] is incompatible with
`T` [2].

   tvar4.js:43:17
   43|   return p => a({p});
                       ^^^ [1]

References:
   tvar4.js:40:32
   40| function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                      ^ [2]


Error --------------------------------------------------------------------------------------------------- tvar4.js:47:29

Cannot call `fn4(...)` with `42` bound to the first parameter because number [1] is incompatible with string [2].

   tvar4.js:47:29
   47| fn4((x: {p: string}) => {})(42);
                                   ^^ [1]

References:
   tvar4.js:47:13
   47| fn4((x: {p: string}) => {})(42);
                   ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- tvar4.js:51:1

Cannot call `fn4` because property `p` is missing in object type [1].

   tvar4.js:51:1
   51| fn4((x: {}) => {})(42);
       ^^^^^^^^^^^^^^^^^^

References:
   tvar4.js:51:9
   51| fn4((x: {}) => {})(42);
               ^^ [1]


Error ---------------------------------------------------------------------------------------------------- union.js:2:40

Cannot assign `true` to `x1` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   union.js:2:40
   2| var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                             ^^^^ [1]

References:
   union.js:2:23
   2| var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                            ^^^^^^ [2]
   union.js:2:30
   2| var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                   ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:4:52

Cannot assign `true` to `x3` because:
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   union.js:4:52
   4| var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                         ^^^^ [1]

References:
   union.js:4:26
   4| var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                               ^^^^^^ [2]
   union.js:4:37
   4| var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                          ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:10:2

Cannot cast `null` to `P2` because:
 - Either null [1] is incompatible with string [2].
 - Or null [1] is incompatible with number [3].

   union.js:10:2
   10| (null: P2); // err, null ~> string|number
        ^^^^ [1]

References:
   union.js:11:14
   11| type T = {p: string} | {p: number}; // NB: T resolved here
                    ^^^^^^ [2]
   union.js:11:28
   11| type T = {p: string} | {p: number}; // NB: T resolved here
                                  ^^^^^^ [3]



Found 50 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
