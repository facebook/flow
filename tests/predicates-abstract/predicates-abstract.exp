Error -------------------------------------------------------------------------------------- sanity-filter-union.js:6:71

object with property `kind` that matches string literal `A` [1] is incompatible with string literal `B` [2].

   sanity-filter-union.js:6:71
   6| declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                                                            ^^^^^^^^^^^^^^ [1]

References:
   sanity-filter-union.js:9:18
   9| type B = { kind: 'B', v: string }
                       ^^^ [2]


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:16:2

Cannot cast `my_filter(...)` to array type because:
 - property `v` is missing in `A` [1] but exists in `B` [2] in array element.
 - string literal `A` [3] is incompatible with string literal `B` [4] in property `kind` of array element.

   sanity-filter-union.js:16:2
   16| (my_filter(ab, (x): %checks => x.kind === 'A'): Array<B>);    // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:14:23
   14| declare var ab: Array<A|B|C>;
                             ^ [1]
   sanity-filter-union.js:16:55
   16| (my_filter(ab, (x): %checks => x.kind === 'A'): Array<B>);    // ERROR
                                                             ^ [2]
   sanity-filter-union.js:8:18
    8| type A = { kind: 'A', u: number }
                        ^^^ [3]
   sanity-filter-union.js:9:18
    9| type B = { kind: 'B', v: string }
                        ^^^ [4]


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:17:2

Cannot cast `my_filter(...)` to array type because `B` [1] is incompatible with union type [2] in array element.

   sanity-filter-union.js:17:2
   17| (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:14:25
   14| declare var ab: Array<A|B|C>;
                               ^ [1]
   sanity-filter-union.js:17:55
   17| (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                             ^^^ [2]


Error --------------------------------------------------------------------------------------------- sanity-filter.js:8:2

Cannot cast `b` to array type because string [1] is incompatible with number [2] in array element.

   sanity-filter.js:8:2
   8| (b: Array<number>);
       ^

References:
   sanity-filter.js:6:22
   6| declare var a: Array<mixed>;
                           ^^^^^ [1]
   sanity-filter.js:8:11
   8| (b: Array<number>);
                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-filter.js:13:24

function [1]. Function is incompatible with abstract predicate function [2].

   sanity-filter.js:13:24
   13| const d = my_filter(c, is_string_regular);
                              ^^^^^^^^^^^^^^^^^

References:
   sanity-filter.js:20:1
   20| function is_string_regular(x): boolean {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-filter.js:3:34
    3| declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                        ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-filter.js:14:2

Cannot cast `d` to array type because mixed [1] is incompatible with string [2] in array element.

   sanity-filter.js:14:2
   14| (d: Array<string>);
        ^

References:
   sanity-filter.js:12:22
   12| declare var c: Array<mixed>;
                            ^^^^^ [1]
   sanity-filter.js:14:11
   14| (d: Array<string>);
                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-refine.js:4:55

refined type that uses predicate on parameter at position 2 [1]. This is incompatible with function with 1
parameters [2].

   sanity-refine.js:4:55
   4| declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                                            ^^^^^^^^^^^^^^ [1]

References:
   sanity-refine.js:7:19
   7| var b = refine(a, is_string);   // ERROR: index out of bounds
                        ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- sanity-refine.js:8:2

Cannot cast `b` to string because mixed [1] is incompatible with string [2].

   sanity-refine.js:8:2
   8| (b: string);
       ^

References:
   sanity-refine.js:6:16
   6| declare var a: mixed;
                     ^^^^^ [1]
   sanity-refine.js:8:5
   8| (b: string);
          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-refine.js:19:26

predicate function with 2 arguments [1]. Predicate function is incompatible with predicate function with 3
arguments [2].

   sanity-refine.js:19:26
   19| var e = refine3(c, d, e, is_string_and_number);
                                ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   sanity-refine.js:17:32
   17| declare function refine3<T, P: $Pred<3>>(u: T, v: T, w: T, cb: P): $Refine<T,P,1>;
                                      ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-refine.js:28:19

function [1]. Function is incompatible with abstract predicate function [2].

   sanity-refine.js:28:19
   28| var e = refine(a, is_string_regular);   // ERROR: is_string_regular is not a
                         ^^^^^^^^^^^^^^^^^

References:
   sanity-refine.js:38:1
   38| function is_string_regular(x)  {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-refine.js:4:31
    4| declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                     ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-refine.js:30:2

Cannot cast `e` to number because mixed [1] is incompatible with number [2].

   sanity-refine.js:30:2
   30| (e: number);
        ^

References:
   sanity-refine.js:6:16
    6| declare var a: mixed;
                      ^^^^^ [1]
   sanity-refine.js:30:5
   30| (e: number);
           ^^^^^^ [2]



Found 12 errors
