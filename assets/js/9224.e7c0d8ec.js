"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9224],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},49224:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var r=t(82167),i=t(74848),s=t(28453);const o={title:"Property Variance and Other Upcoming Changes","short-title":"Property Variance",author:"Sam Goldman",hide_table_of_contents:!0},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"What is Variance?",id:"what-is-variance",level:3},{value:"Input and Output",id:"input-and-output",level:4},{value:"Property Invariance",id:"property-invariance",level:2},{value:"Property Variance",id:"property-variance",level:3},{value:"Invariant-by-default Dictionary Types",id:"invariant-by-default-dictionary-types",level:3},{value:"Covariant-by-default Method Types",id:"covariant-by-default-method-types",level:3},{value:"More Flexible Getters and Setters",id:"more-flexible-getters-and-setters",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The next release of Flow, 0.34, will include a few important changes to object\ntypes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"property variance,"}),"\n",(0,i.jsx)(n.li,{children:"invariant-by-default dictionary types,"}),"\n",(0,i.jsx)(n.li,{children:"covariant-by-default method types,"}),"\n",(0,i.jsx)(n.li,{children:"and more flexible getters and setters."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-is-variance",children:"What is Variance?"}),"\n",(0,i.jsx)(n.p,{children:"Defining the subtype relationship between types is a core responsibility of Flow\nas a type system. These relationships are determined either directly for\nsimple types or, for complex types, defined in terms of their parts."}),"\n",(0,i.jsx)(n.p,{children:"Variance describes the subtyping relationship for complex types as it relates\nto the subtyping relationships of their parts."}),"\n",(0,i.jsxs)(n.p,{children:["For example, Flow directly encodes the knowledge that ",(0,i.jsx)(n.code,{children:"string"})," is a subtype of\n",(0,i.jsx)(n.code,{children:"?string"}),". Intuitively, a ",(0,i.jsx)(n.code,{children:"string"})," type contains string values while a ",(0,i.jsx)(n.code,{children:"?string"}),"\ntype contains ",(0,i.jsx)(n.code,{children:"null"}),", ",(0,i.jsx)(n.code,{children:"undefined"}),", and also string values, so membership in the\nformer naturally implies membership in the later."]}),"\n",(0,i.jsx)(n.p,{children:"The subtype relationships between two function types is not as direct. Rather,\nit is derived from the subtype relationships between the functions' parameter\nand return types."}),"\n",(0,i.jsx)(n.p,{children:"Let's see how this works for two simple function types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"type F1 = (x: P1) => R1;\ntype F2 = (x: P2) => R2;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Whether ",(0,i.jsx)(n.code,{children:"F2"})," is a subtype of ",(0,i.jsx)(n.code,{children:"F1"})," depends on the relationships between ",(0,i.jsx)(n.code,{children:"P1"})," and\n",(0,i.jsx)(n.code,{children:"P2"})," and ",(0,i.jsx)(n.code,{children:"R1"})," and ",(0,i.jsx)(n.code,{children:"R2"}),". Let's use the notation ",(0,i.jsx)(n.code,{children:"B <: A"})," to mean ",(0,i.jsx)(n.code,{children:"B"})," is a\nsubtype of ",(0,i.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It turns out that ",(0,i.jsx)(n.code,{children:"F2 <: F1"})," if ",(0,i.jsx)(n.code,{children:"P1 <: P2"})," and ",(0,i.jsx)(n.code,{children:"R2 <: R1"}),'. Notice that the\nrelationship for parameters is reversed? In technical terms, we can say that\nfunction types are "contravariant" with respect to their parameter types and\n"covariant" with respect to their return types.']}),"\n",(0,i.jsx)(n.p,{children:"Let's look at an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function f(callback: (x: string) => ?number): number {\n  return callback("hi") || 0;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["What kinds of functions can we pass to ",(0,i.jsx)(n.code,{children:"f"}),"? Based on the subtyping rule above,\nthen we can pass a function whose parameter type is a supertype of ",(0,i.jsx)(n.code,{children:"string"})," and\nwhose return type is a subtype of ",(0,i.jsx)(n.code,{children:"?number"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function g(x: ?string): number {\n  return x ? x.length : 0;\n}\nf(g);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The body of ",(0,i.jsx)(n.code,{children:"f"})," will only ever pass ",(0,i.jsx)(n.code,{children:"string"})," values into ",(0,i.jsx)(n.code,{children:"g"}),", which is safe\nbecause ",(0,i.jsx)(n.code,{children:"g"})," takes at least ",(0,i.jsx)(n.code,{children:"string"})," by taking ",(0,i.jsx)(n.code,{children:"?string"}),". Conversely, ",(0,i.jsx)(n.code,{children:"g"})," will\nonly ever return ",(0,i.jsx)(n.code,{children:"number"})," values to ",(0,i.jsx)(n.code,{children:"f"}),", which is safe because ",(0,i.jsx)(n.code,{children:"f"})," handles at\nleast ",(0,i.jsx)(n.code,{children:"number"})," by handling ",(0,i.jsx)(n.code,{children:"?number"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"input-and-output",children:"Input and Output"}),"\n",(0,i.jsx)(n.p,{children:'One convenient way to remember when something is covariant vs. contravariant is\nto think about "input" and "output."'}),"\n",(0,i.jsxs)(n.p,{children:["Parameters are in an ",(0,i.jsx)(n.em,{children:"input"}),' position, often called a "negative" position.\nComplex types are contravariant in their input positions.']}),"\n",(0,i.jsxs)(n.p,{children:["Return is an ",(0,i.jsx)(n.em,{children:"output"}),' position, often called a "positive" position. Complex\ntypes are covariant in their output positions.']}),"\n",(0,i.jsx)(n.h2,{id:"property-invariance",children:"Property Invariance"}),"\n",(0,i.jsx)(n.p,{children:"Just as function types are composed of parameter and return types, so too are\nobject types composed of property types. Thus, the subtyping relationship\nbetween objects is derived from the subtyping relationships of their\nproperties."}),"\n",(0,i.jsxs)(n.p,{children:["However, unlike functions which have input parameters and an output return,\nobject properties can be read and written. That is, properties are ",(0,i.jsx)(n.em,{children:"both"})," input\nand output."]}),"\n",(0,i.jsx)(n.p,{children:"Let's see how this works for two simple object types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"type O1 = {p: T1};\ntype O2 = {p: T2};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As with function types, whether ",(0,i.jsx)(n.code,{children:"O2"})," is a subtype of ",(0,i.jsx)(n.code,{children:"O1"})," depends on the\nrelationship between its parts, ",(0,i.jsx)(n.code,{children:"T1"})," and ",(0,i.jsx)(n.code,{children:"T2"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Here it turns out that ",(0,i.jsx)(n.code,{children:"O2 <: O1"})," if ",(0,i.jsx)(n.code,{children:"T2 <: T1"})," ",(0,i.jsx)(n.em,{children:"and"})," ",(0,i.jsx)(n.code,{children:"T1 <: T2"}),'. In technical\nterms, object types are "invariant" with respect to their property types.']}),"\n",(0,i.jsx)(n.p,{children:"Let's look at an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function f(o: {p: ?string}): void {\n  // We can read p from o\n  let len: number;\n  if (o.p) {\n    len = o.p.length;\n  } else {\n    len = 0;\n  }\n\n  // We can also write into p\n  o.p = null;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["What kinds of objects can we pass into ",(0,i.jsx)(n.code,{children:"f"}),", then? If we try to pass in an\nobject with a subtype property, we get an error:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var o1: {p: string} = {p: ""};\nf(o1);\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'function f(o: {p: ?string}) {}\n                   ^ null. This type is incompatible with\nvar o1: {p: string} = {p: ""};\n            ^ string\nfunction f(o: {p: ?string}) {}\n                   ^ undefined. This type is incompatible with\nvar o1: {p: string} = {p: ""};\n            ^ string\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Flow has correctly identified an error here. If the body of ",(0,i.jsx)(n.code,{children:"f"})," writes ",(0,i.jsx)(n.code,{children:"null"}),"\ninto ",(0,i.jsx)(n.code,{children:"o.p"}),", then ",(0,i.jsx)(n.code,{children:"o1.p"})," would no longer have type ",(0,i.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If we try to pass an object with a supertype property, we again get an error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"var o2: {p: ?(string|number)} = {p: 0};\nf(o2);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'var o1: {p: ?(string|number)} = {p: ""};\n                     ^ number. This type is incompatible with\nfunction f(o: {p: ?string}) {}\n                   ^ string\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Again, Flow correctly identifies an error, because if ",(0,i.jsx)(n.code,{children:"f"})," tried to read ",(0,i.jsx)(n.code,{children:"p"}),"\nfrom ",(0,i.jsx)(n.code,{children:"o"}),", it would find a number."]}),"\n",(0,i.jsx)(n.h3,{id:"property-variance",children:"Property Variance"}),"\n",(0,i.jsxs)(n.p,{children:["So objects have to be invariant with respect to their property types because\nproperties can be read from and written to. But just because you ",(0,i.jsx)(n.em,{children:"can"})," read and\nwrite, doesn't mean you always do."]}),"\n",(0,i.jsx)(n.p,{children:"Consider a function that gets the length of an nullable string property:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function f(o: {p: ?string}): number {\n  return o.p ? o.p.length : 0;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We never write into ",(0,i.jsx)(n.code,{children:"o.p"}),", so we should be able to pass in an object where the\ntype of property ",(0,i.jsx)(n.code,{children:"p"})," is a subtype of ",(0,i.jsx)(n.code,{children:"?string"}),". Until now, this wasn't possible\nin Flow."]}),"\n",(0,i.jsx)(n.p,{children:"With property variance, you can explicitly annotate object properties as being\ncovariant and contravariant. For example, we can rewrite the above function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function f(o: {+p: ?string}): number {\n  return o.p ? o.p.length : 0;\n}\n\nvar o: {p: string} = {p: ""};\nf(o); // no type error!\n'})}),"\n",(0,i.jsx)(n.p,{children:"It's crucial that covariant properties only ever appear in output positions. It\nis an error to write to a covariant property:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function f(o: {+p: ?string}) {\n  o.p = null;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"o.p = null;\n^ object type. Covariant property `p` incompatible with contravariant use in\no.p = null;\n^ assignment of property `p`\n"})}),"\n",(0,i.jsx)(n.p,{children:"Conversely, if a function only ever writes to a property, we can annotate the\nproperty as contravariant. This might come up in a function that initializes an\nobject with default values, for example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function g(o: {-p: string}): void {\n  o.p = "default";\n}\nvar o: {p: ?string} = {p: null};\ng(o);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Contravariant properties can only ever appear in input positions. It is an\nerror to read from a contravariant property:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function f(o: {-p: string}) {\n  o.p.length;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"o.p.length;\n^ object type. Contravariant property `p` incompatible with covariant use in\no.p.length;\n^ property `p`\n"})}),"\n",(0,i.jsx)(n.h3,{id:"invariant-by-default-dictionary-types",children:"Invariant-by-default Dictionary Types"}),"\n",(0,i.jsxs)(n.p,{children:["The object type ",(0,i.jsx)(n.code,{children:"{[key: string]: ?number}"})," describes an object that can be used\nas a map. We can read any property and Flow will infer the result type as\n",(0,i.jsx)(n.code,{children:"?number"}),". We can also write ",(0,i.jsx)(n.code,{children:"null"})," or ",(0,i.jsx)(n.code,{children:"undefined"})," or ",(0,i.jsx)(n.code,{children:"number"})," into any\nproperty."]}),"\n",(0,i.jsx)(n.p,{children:"In Flow 0.33 and earlier, these dictionary types were treated covariantly by\nthe type system. For example, Flow accepted the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function f(o: {[key: string]: ?number}) {\n  o.p = null;\n}\ndeclare var o: {p: number};\nf(o);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is unsound because ",(0,i.jsx)(n.code,{children:"f"})," can overwrite property ",(0,i.jsx)(n.code,{children:"p"})," with ",(0,i.jsx)(n.code,{children:"null"}),". In Flow\n0.34, dictionaries are invariant, like named properties. The same code now\nresults in the following type error:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"function f(o: {[key: string]: ?number}) {}\n                               ^ null. This type is incompatible with\ndeclare var o: {p: number};\n                   ^ number\nfunction f(o: {[key: string]: ?number}) {}\n                               ^ undefined. This type is incompatible with\ndeclare var o: {p: number};\n                   ^ number\n"})}),"\n",(0,i.jsx)(n.p,{children:"Covariant and contravariant dictionaries can be incredibly useful, though. To\nsupport this, the same syntax used to support variance for named properties can\nbe used for dictionaries as well."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"function f(o: {+[key: string]: ?number}) {}\ndeclare var o: {p: number};\nf(o); // no type error!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"covariant-by-default-method-types",children:"Covariant-by-default Method Types"}),"\n",(0,i.jsx)(n.p,{children:"ES6 gave us a shorthand way to write object properties which are functions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"var o = {\n  m(x) {\n    return x * 2\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Flow now interprets properties which use this shorthand method syntax as\ncovariant by default. This means it is an error to write to the property ",(0,i.jsx)(n.code,{children:"m"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If you don't want covariance, you can use the long form syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"var o = {\n  m: function(x) {\n    return x * 2;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"more-flexible-getters-and-setters",children:"More Flexible Getters and Setters"}),"\n",(0,i.jsx)(n.p,{children:"In Flow 0.33 and earlier, getters and setters had to agree exactly on their\nreturn type and parameter type, respectively. Flow 0.34 lifts that restriction."}),"\n",(0,i.jsx)(n.p,{children:"This means you can write code like the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// @flow\ndeclare var x: string;\n\nvar o = {\n  get x(): string {\n    return x;\n  },\n  set x(value: ?string) {\n    x = value || "default";\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},82167:e=>{e.exports=JSON.parse('{"permalink":"/blog/2016/10/04/Property-Variance","source":"@site/blog/2016-10-04-Property-Variance.md","title":"Property Variance and Other Upcoming Changes","description":"The next release of Flow, 0.34, will include a few important changes to object","date":"2016-10-04T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Sam Goldman","key":null,"page":null}],"frontMatter":{"title":"Property Variance and Other Upcoming Changes","short-title":"Property Variance","author":"Sam Goldman","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Introducing Flow-Typed","permalink":"/blog/2016/10/13/Flow-Typed"},"nextItem":{"title":"Windows Support is Here!","permalink":"/blog/2016/08/01/Windows-Support"}}')}}]);