"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3111],{3111:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting Started","href":"/en/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Installation","href":"/en/docs/install","docId":"install","unlisted":false},{"type":"link","label":"Usage","href":"/en/docs/usage","docId":"usage","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"FAQ","href":"/en/docs/faq","docId":"faq","unlisted":false},{"type":"category","label":"Type Annotations","items":[{"type":"link","label":"Type Annotations","href":"/en/docs/types","docId":"types/index","unlisted":false},{"type":"link","label":"Primitive Types","href":"/en/docs/types/primitives","docId":"types/primitives","unlisted":false},{"type":"link","label":"Literal Types","href":"/en/docs/types/literals","docId":"types/literals","unlisted":false},{"type":"link","label":"Mixed","href":"/en/docs/types/mixed","docId":"types/mixed","unlisted":false},{"type":"link","label":"Empty","href":"/en/docs/types/empty","docId":"types/empty","unlisted":false},{"type":"link","label":"Any","href":"/en/docs/types/any","docId":"types/any","unlisted":false},{"type":"link","label":"Maybe Types","href":"/en/docs/types/maybe","docId":"types/maybe","unlisted":false},{"type":"link","label":"Functions","href":"/en/docs/types/functions","docId":"types/functions","unlisted":false},{"type":"link","label":"Objects","href":"/en/docs/types/objects","docId":"types/objects","unlisted":false},{"type":"link","label":"Arrays","href":"/en/docs/types/arrays","docId":"types/arrays","unlisted":false},{"type":"link","label":"Tuples","href":"/en/docs/types/tuples","docId":"types/tuples","unlisted":false},{"type":"link","label":"Classes","href":"/en/docs/types/classes","docId":"types/classes","unlisted":false},{"type":"link","label":"Type Aliases","href":"/en/docs/types/aliases","docId":"types/aliases","unlisted":false},{"type":"link","label":"Opaque Type Aliases","href":"/en/docs/types/opaque-types","docId":"types/opaque-types","unlisted":false},{"type":"link","label":"Interfaces","href":"/en/docs/types/interfaces","docId":"types/interfaces","unlisted":false},{"type":"link","label":"Generics","href":"/en/docs/types/generics","docId":"types/generics","unlisted":false},{"type":"link","label":"Unions","href":"/en/docs/types/unions","docId":"types/unions","unlisted":false},{"type":"link","label":"Intersections","href":"/en/docs/types/intersections","docId":"types/intersections","unlisted":false},{"type":"link","label":"Indexed Access Types","href":"/en/docs/types/indexed-access","docId":"types/indexed-access","unlisted":false},{"type":"link","label":"Conditional Types","href":"/en/docs/types/conditional","docId":"types/conditional","unlisted":false},{"type":"link","label":"Mapped Types","href":"/en/docs/types/mapped-types","docId":"types/mapped-types","unlisted":false},{"type":"link","label":"Type Guards","href":"/en/docs/types/type-guards","docId":"types/type-guards","unlisted":false},{"type":"link","label":"Typeof Types","href":"/en/docs/types/typeof","docId":"types/typeof","unlisted":false},{"type":"link","label":"Type Casting Expressions","href":"/en/docs/types/casting","docId":"types/casting","unlisted":false},{"type":"link","label":"Const Expressions","href":"/en/docs/types/const-expression","docId":"types/const-expression","unlisted":false},{"type":"link","label":"Utility Types","href":"/en/docs/types/utilities","docId":"types/utilities","unlisted":false},{"type":"link","label":"Module Types","href":"/en/docs/types/modules","docId":"types/modules","unlisted":false},{"type":"link","label":"Comment Types","href":"/en/docs/types/comments","docId":"types/comments","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Type System","items":[{"type":"link","label":"Types & Expressions","href":"/en/docs/lang/types-and-expressions","docId":"lang/types-and-expressions","unlisted":false},{"type":"link","label":"Variable Declarations","href":"/en/docs/lang/variables","docId":"lang/variables","unlisted":false},{"type":"link","label":"Subsets & Subtypes","href":"/en/docs/lang/subtypes","docId":"lang/subtypes","unlisted":false},{"type":"link","label":"Type Hierarchy","href":"/en/docs/lang/type-hierarchy","docId":"lang/type-hierarchy","unlisted":false},{"type":"link","label":"Type Variance","href":"/en/docs/lang/variance","docId":"lang/variance","unlisted":false},{"type":"link","label":"Nominal & Structural Typing","href":"/en/docs/lang/nominal-structural","docId":"lang/nominal-structural","unlisted":false},{"type":"link","label":"Depth Subtyping","href":"/en/docs/lang/depth-subtyping","docId":"lang/depth-subtyping","unlisted":false},{"type":"link","label":"Width Subtyping","href":"/en/docs/lang/width-subtyping","docId":"lang/width-subtyping","unlisted":false},{"type":"link","label":"Type Refinements","href":"/en/docs/lang/refinements","docId":"lang/refinements","unlisted":false},{"type":"link","label":"Lazy Mode","href":"/en/docs/lang/lazy-modes","docId":"lang/lazy-modes","unlisted":false},{"type":"link","label":"File Signatures (Types-First)","href":"/en/docs/lang/types-first","docId":"lang/types-first","unlisted":false},{"type":"link","label":"Annotation Requirement","href":"/en/docs/lang/annotation-requirement","docId":"lang/annotation-requirement","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"React","items":[{"type":"link","label":"Getting Started","href":"/en/docs/react","docId":"react/index","unlisted":false},{"type":"link","label":"Component Syntax","href":"/en/docs/react/component-syntax","docId":"react/component-syntax","unlisted":false},{"type":"link","label":"Hook Syntax","href":"/en/docs/react/hook-syntax","docId":"react/hook-syntax","unlisted":false},{"type":"link","label":"Component Types","href":"/en/docs/react/component-types","docId":"react/component-types","unlisted":false},{"type":"link","label":"Function/Class Components","href":"/en/docs/react/function-and-class-components","docId":"react/function-and-class-components","unlisted":false},{"type":"link","label":"Event Handling","href":"/en/docs/react/events","docId":"react/events","unlisted":false},{"type":"link","label":"Ref Functions","href":"/en/docs/react/refs","docId":"react/refs","unlisted":false},{"type":"link","label":"Higher-order Components","href":"/en/docs/react/hoc","docId":"react/hoc","unlisted":false},{"type":"link","label":"Render Types","href":"/en/docs/react/render-types","docId":"react/render-types","unlisted":false},{"type":"link","label":"Type Reference","href":"/en/docs/react/types","docId":"react/types","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Flow Enums","items":[{"type":"link","label":"Flow Enums","href":"/en/docs/enums","docId":"enums/index","unlisted":false},{"type":"link","label":"Enabling enums in your project","href":"/en/docs/enums/enabling-enums","docId":"enums/enabling-enums","unlisted":false},{"type":"link","label":"Defining enums","href":"/en/docs/enums/defining-enums","docId":"enums/defining-enums","unlisted":false},{"type":"link","label":"Using enums","href":"/en/docs/enums/using-enums","docId":"enums/using-enums","unlisted":false},{"type":"link","label":"Migrating from legacy patterns","href":"/en/docs/enums/migrating-legacy-patterns","docId":"enums/migrating-legacy-patterns","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Match","items":[{"type":"link","label":"Match Expressions and Statements","href":"/en/docs/match","docId":"match/index","unlisted":false},{"type":"link","label":"Match Patterns","href":"/en/docs/match/patterns","docId":"match/patterns","unlisted":false},{"type":"link","label":"Migration from existing patterns","href":"/en/docs/match/migration","docId":"match/migration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Declarations","href":"/en/docs/declarations","docId":"declarations/index","unlisted":false},{"type":"category","label":"Library Definitions","items":[{"type":"link","label":"Library Definitions","href":"/en/docs/libdefs","docId":"libdefs/index","unlisted":false},{"type":"link","label":"Creating Library Definitions","href":"/en/docs/libdefs/creation","docId":"libdefs/creation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Error Suppressions","href":"/en/docs/errors","docId":"errors/index","unlisted":false},{"type":"category","label":"Linting","items":[{"type":"link","label":"Linting Overview","href":"/en/docs/linting","docId":"linting/index","unlisted":false},{"type":"link","label":"Flowlint Comments","href":"/en/docs/linting/flowlint-comments","docId":"linting/flowlint-comments","unlisted":false},{"type":"link","label":"Lint Rule Reference","href":"/en/docs/linting/rule-reference","docId":"linting/rule-reference","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Flow Strict","href":"/en/docs/strict","docId":"strict/index","unlisted":false},{"type":"category","label":"Flow CLI","items":[{"type":"link","label":"Flow CLI","href":"/en/docs/cli","docId":"cli/index","unlisted":false},{"type":"link","label":"Flow Coverage","href":"/en/docs/cli/coverage","docId":"cli/coverage","unlisted":false},{"type":"link","label":"Flow Annotate-Exports","href":"/en/docs/cli/annotate-exports","docId":"cli/annotate-exports","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Configuration","items":[{"type":"link","label":".flowconfig","href":"/en/docs/config","docId":"config/index","unlisted":false},{"type":"link","label":".flowconfig [version]","href":"/en/docs/config/version","docId":"config/version","unlisted":false},{"type":"link","label":".flowconfig [options]","href":"/en/docs/config/options","docId":"config/options","unlisted":false},{"type":"link","label":".flowconfig [include]","href":"/en/docs/config/include","docId":"config/include","unlisted":false},{"type":"link","label":".flowconfig [ignore]","href":"/en/docs/config/ignore","docId":"config/ignore","unlisted":false},{"type":"link","label":".flowconfig [untyped]","href":"/en/docs/config/untyped","docId":"config/untyped","unlisted":false},{"type":"link","label":".flowconfig [declarations]","href":"/en/docs/config/declarations","docId":"config/declarations","unlisted":false},{"type":"link","label":".flowconfig [libs]","href":"/en/docs/config/libs","docId":"config/libs","unlisted":false},{"type":"link","label":".flowconfig [lints]","href":"/en/docs/config/lints","docId":"config/lints","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tools","items":[{"type":"link","label":"Babel","href":"/en/docs/tools/babel","docId":"tools/babel","unlisted":false},{"type":"link","label":"Prettier","href":"/en/docs/tools/prettier","docId":"tools/prettier","unlisted":false},{"type":"link","label":"ESLint","href":"/en/docs/tools/eslint","docId":"tools/eslint","unlisted":false},{"type":"link","label":"flow-remove-types","href":"/en/docs/tools/flow-remove-types","docId":"tools/flow-remove-types","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Editors","items":[{"type":"link","label":"Editors","href":"/en/docs/editors","docId":"editors/index","unlisted":false},{"type":"link","label":"Visual Studio Code","href":"/en/docs/editors/vscode","docId":"editors/vscode","unlisted":false},{"type":"link","label":"Sublime Text","href":"/en/docs/editors/sublime-text","docId":"editors/sublime-text","unlisted":false},{"type":"link","label":"Vim","href":"/en/docs/editors/vim","docId":"editors/vim","unlisted":false},{"type":"link","label":"Emacs","href":"/en/docs/editors/emacs","docId":"editors/emacs","unlisted":false},{"type":"link","label":"WebStorm","href":"/en/docs/editors/webstorm","docId":"editors/webstorm","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"cli/annotate-exports":{"id":"cli/annotate-exports","title":"Flow Annotate-Exports","description":"Upgrading to Types-First mode may require a substantial","sidebar":"docsSidebar"},"cli/coverage":{"id":"cli/coverage","title":"Flow Coverage","description":"The coverage command provides a metric of the amount of checking that Flow has","sidebar":"docsSidebar"},"cli/index":{"id":"cli/index","title":"Flow CLI","description":"How to use Flow from the command line. Including how to manage the Flow background process.","sidebar":"docsSidebar"},"config/declarations":{"id":"config/declarations","title":".flowconfig [declarations]","description":"Often third-party libraries have broken type definitions or have type","sidebar":"docsSidebar"},"config/ignore":{"id":"config/ignore","title":".flowconfig [ignore]","description":"The [ignore] section in a .flowconfig file tells Flow to ignore files","sidebar":"docsSidebar"},"config/include":{"id":"config/include","title":".flowconfig [include]","description":"The [include] section in a .flowconfig file tells Flow to include the","sidebar":"docsSidebar"},"config/index":{"id":"config/index","title":".flowconfig","description":"Flow tries to work out of the box as much as possible, but can be configured to work with any codebase.","sidebar":"docsSidebar"},"config/libs":{"id":"config/libs","title":".flowconfig [libs]","description":"The [libs] section in a .flowconfig file tells Flow to include the","sidebar":"docsSidebar"},"config/lints":{"id":"config/lints","title":".flowconfig [lints]","description":"The [lints] section in a .flowconfig file can contain several key-value","sidebar":"docsSidebar"},"config/options":{"id":"config/options","title":".flowconfig [options]","description":"The [options] section in a .flowconfig file can contain several key-value","sidebar":"docsSidebar"},"config/untyped":{"id":"config/untyped","title":".flowconfig [untyped]","description":"The [untyped] section in a .flowconfig file tells Flow to not typecheck files","sidebar":"docsSidebar"},"config/version":{"id":"config/version","title":".flowconfig [version]","description":"You can specify in the .flowconfig which version of Flow you expect to use.","sidebar":"docsSidebar"},"declarations/index":{"id":"declarations/index","title":"Declaration Files","description":"Learn how to write types in .flow files.","sidebar":"docsSidebar"},"editors/emacs":{"id":"editors/emacs","title":"Emacs","description":"flow-for-emacs","sidebar":"docsSidebar"},"editors/index":{"id":"editors/index","title":"Editors","description":"Detailed guides, tips, and resources on how to integrate Flow with different code editors.","sidebar":"docsSidebar"},"editors/sublime-text":{"id":"editors/sublime-text","title":"Sublime Text","description":"Flow For Sublime Text 2 and 3","sidebar":"docsSidebar"},"editors/vim":{"id":"editors/vim","title":"Vim","description":"Flow\'s editor integration is primarily via the Language Server Protocol. There are many vim LSP clients to choose from, such as ALE.","sidebar":"docsSidebar"},"editors/vscode":{"id":"editors/vscode","title":"Visual Studio Code","description":"Screenshot of Flow Language Support","sidebar":"docsSidebar"},"editors/webstorm":{"id":"editors/webstorm","title":"WebStorm","description":"Webstorm installation instructions can be found here:","sidebar":"docsSidebar"},"enums/defining-enums":{"id":"enums/defining-enums","title":"Defining enums","description":"Learn how to define a Flow Enum. Looking for a quick overview? Check out the Quickstart Guide.","sidebar":"docsSidebar"},"enums/enabling-enums":{"id":"enums/enabling-enums","title":"Enabling enums in your project","description":"Upgrade tooling","sidebar":"docsSidebar"},"enums/index":{"id":"enums/index","title":"Flow Enums","description":"Define a fixed set of constants which create their own type. Exhaustively checked in switch statements.","sidebar":"docsSidebar"},"enums/migrating-legacy-patterns":{"id":"enums/migrating-legacy-patterns","title":"Migrating from legacy patterns","description":"Learn how to migrate to Flow Enums from legacy JavaScript enum patterns like Object.freeze.","sidebar":"docsSidebar"},"enums/using-enums":{"id":"enums/using-enums","title":"Using enums","description":"Flow Enums are not a syntax for union types. They are their own type, and each member of a Flow Enum has the same type.","sidebar":"docsSidebar"},"errors/index":{"id":"errors/index","title":"Error Suppressions","description":"Learn how to suppress Flow\'s type errors.","sidebar":"docsSidebar"},"faq":{"id":"faq","title":"FAQ","description":"Have a question about using Flow? Check here first!","sidebar":"docsSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Never used a type system before or just new to Flow? Let\'s get you up and running in a few minutes.","sidebar":"docsSidebar"},"index":{"id":"index","title":"Documentation","description":"Guides and references for all you need to know about Flow","sidebar":"docsSidebar"},"install":{"id":"install","title":"Installation","description":"Setup Compiler","sidebar":"docsSidebar"},"lang/annotation-requirement":{"id":"lang/annotation-requirement","title":"Annotation Requirement","description":"Note: As of version 0.199 Flow uses Local Type Inference as its inference algorithm.","sidebar":"docsSidebar"},"lang/depth-subtyping":{"id":"lang/depth-subtyping","title":"Depth Subtyping","description":"Assume we have two classes, which have a subtype relationship using extends:","sidebar":"docsSidebar"},"lang/lazy-modes":{"id":"lang/lazy-modes","title":"Lazy Mode","description":"By default, the Flow server will typecheck all your code. This way it can answer","sidebar":"docsSidebar"},"lang/nominal-structural":{"id":"lang/nominal-structural","title":"Nominal & Structural Typing","description":"A static type checker can use either the name (nominal typing) or the structure (structural typing)","sidebar":"docsSidebar"},"lang/refinements":{"id":"lang/refinements","title":"Type Refinements","description":"Refinements allow us to narrow the type of a value based on conditional tests.","sidebar":"docsSidebar"},"lang/subtypes":{"id":"lang/subtypes","title":"Subsets & Subtypes","description":"What is a subtype?","sidebar":"docsSidebar"},"lang/type-hierarchy":{"id":"lang/type-hierarchy","title":"Type Hierarchy","description":"Types in Flow form a hierarchy based on subtyping:","sidebar":"docsSidebar"},"lang/types-and-expressions":{"id":"lang/types-and-expressions","title":"Types & Expressions","description":"In JavaScript there are many types of values: numbers, strings, booleans,","sidebar":"docsSidebar"},"lang/types-first":{"id":"lang/types-first","title":"File Signatures (Types-First)","description":"Flow checks codebases by processing each file separately in dependency","sidebar":"docsSidebar"},"lang/variables":{"id":"lang/variables","title":"Variable Declarations","description":"When you are declaring a new variable, you may optionally declare its type.","sidebar":"docsSidebar"},"lang/variance":{"id":"lang/variance","title":"Type Variance","description":"Variance is a topic that comes up fairly often in type systems. It is used to determine","sidebar":"docsSidebar"},"lang/width-subtyping":{"id":"lang/width-subtyping","title":"Width Subtyping","description":"It\'s safe to use an object with \\"extra\\" properties in a position that is","sidebar":"docsSidebar"},"libdefs/creation":{"id":"libdefs/creation","title":"Creating Library Definitions","description":"Before spending the time to write your own libdef, we recommend that you look to","sidebar":"docsSidebar"},"libdefs/index":{"id":"libdefs/index","title":"Library Definitions","description":"Learn how to create and use library definitions for the third-party code your code depends on.","sidebar":"docsSidebar"},"linting/flowlint-comments":{"id":"linting/flowlint-comments","title":"Flowlint Comments","description":"You can use flowlint comments to specify more granular lint settings within a file.","sidebar":"docsSidebar"},"linting/index":{"id":"linting/index","title":"Linting Overview","description":"Learn how to configure Flow\'s linter to find potentially harmful code.","sidebar":"docsSidebar"},"linting/rule-reference":{"id":"linting/rule-reference","title":"Lint Rule Reference","description":"all","sidebar":"docsSidebar"},"match/index":{"id":"match/index","title":"Match Expressions and Statements","description":"match an input value against a series of patterns, which conditionally check the structure of the input and extract values, and either produce an expression (match expressions) or execute a block (match statements).","sidebar":"docsSidebar"},"match/migration":{"id":"match/migration","title":"Migration from existing patterns","description":"You can migrate from switch statements and conditional expressions to match expressions and statements","sidebar":"docsSidebar"},"match/patterns":{"id":"match/patterns","title":"Match Patterns","description":"Match patterns both define a condition that must be matched, and new variables that are extracted (like destructuring).","sidebar":"docsSidebar"},"react/component-syntax":{"id":"react/component-syntax","title":"Component Syntax","description":"Components are the foundation for building UIs in React. While components are typically expressed using JavaScript functions, Component Syntax provides component primitive values that provide several advantages over function components, like:","sidebar":"docsSidebar"},"react/component-types":{"id":"react/component-types","title":"Component Types","description":"Component Types are only available in Flow v0.243.0+. If you are on an older version, please use React.AbstractComponent","sidebar":"docsSidebar"},"react/events":{"id":"react/events","title":"Event Handling","description":"The React docs for handling events show how an event handler can be attached to","sidebar":"docsSidebar"},"react/function-and-class-components":{"id":"react/function-and-class-components","title":"Function/Class Components","description":"Adding Flow types to your React components is incredibly powerful. After typing","sidebar":"docsSidebar"},"react/hoc":{"id":"react/hoc","title":"Higher-order Components","description":"Higher-order components are discouraged in modern React code and will not be updated for Component Syntax.","sidebar":"docsSidebar"},"react/hook-syntax":{"id":"react/hook-syntax","title":"Hook Syntax","description":"Hook Syntax is first-class syntax and typechecking support for React hooks, bringing hooks into","sidebar":"docsSidebar"},"react/index":{"id":"react/index","title":"Getting Started","description":"Learn how to use Flow to effectively type common and advanced React patterns.","sidebar":"docsSidebar"},"react/multiplatform":{"id":"react/multiplatform","title":"Multi-platform Support for React Native","description":"Flow\'s support for multiple platforms inside a single React Native codebase"},"react/refs":{"id":"react/refs","title":"Ref Functions","description":"React allows you to grab the instance of an element or component with refs.","sidebar":"docsSidebar"},"react/render-types":{"id":"react/render-types","title":"Render Types","description":"Some component libraries or design systems may want to restrict how components may be composed.","sidebar":"docsSidebar"},"react/types":{"id":"react/types","title":"Type Reference","description":"React exports a handful of utility types that may be useful to you when typing","sidebar":"docsSidebar"},"strict/index":{"id":"strict/index","title":"Flow Strict","description":"Learn how to enable stricter type checking on a file-by-file basis.","sidebar":"docsSidebar"},"tools/babel":{"id":"tools/babel","title":"Babel","description":"Flow and Babel are designed to work great together. It","sidebar":"docsSidebar"},"tools/eslint":{"id":"tools/eslint","title":"ESLint","description":"ESLint is a static analysis tool which can help you quickly find and","sidebar":"docsSidebar"},"tools/flow-remove-types":{"id":"tools/flow-remove-types","title":"flow-remove-types","description":"flow-remove-types is a small","sidebar":"docsSidebar"},"tools/index":{"id":"tools/index","title":"Tools","description":"Detailed guides, tips, and resources on how to integrate Flow with different JavaScript tools.","sidebar":"docsSidebar"},"tools/prettier":{"id":"tools/prettier","title":"Prettier","description":"All Flow features are supported by Prettier.","sidebar":"docsSidebar"},"types/aliases":{"id":"types/aliases","title":"Type Aliases","description":"When you have complicated types that you want to reuse in multiple places, you","sidebar":"docsSidebar"},"types/any":{"id":"types/any","title":"Any","description":"Warning: Do not mistake any with mixed. It\'s also not the same as empty.","sidebar":"docsSidebar"},"types/arrays":{"id":"types/arrays","title":"Arrays","description":"Array types represent lists of unknown length, where all items have the same type.","sidebar":"docsSidebar"},"types/casting":{"id":"types/casting","title":"Type Casting Expressions","description":"Sometimes it is useful to assert a type without using something like a function","sidebar":"docsSidebar"},"types/classes":{"id":"types/classes","title":"Classes","description":"JavaScript classes","sidebar":"docsSidebar"},"types/comments":{"id":"types/comments","title":"Comment Types","description":"Flow supports a comment-based syntax, which makes it possible to use Flow","sidebar":"docsSidebar"},"types/conditional":{"id":"types/conditional","title":"Conditional Types","description":"Flow\'s conditional type allows you to conditionally choose between two different output types by inspecting an input type. It is useful to extract parts of a type, or to describe a complex overload.","sidebar":"docsSidebar"},"types/const-expression":{"id":"types/const-expression","title":"Const Expressions","description":"Sometimes it is useful to specify that a literal expression is expected to be immutable.","sidebar":"docsSidebar"},"types/empty":{"id":"types/empty","title":"Empty","description":"The empty type has no values. It is the subtype of all other types (i.e. the bottom type).","sidebar":"docsSidebar"},"types/functions":{"id":"types/functions","title":"Functions","description":"Functions have two places where types are applied: parameters (input) and the return value (output).","sidebar":"docsSidebar"},"types/generators":{"id":"types/generators","title":"generators","description":""},"types/generics":{"id":"types/generics","title":"Generics","description":"Generics (sometimes referred to as polymorphic types) are a way of abstracting","sidebar":"docsSidebar"},"types/index":{"id":"types/index","title":"Type Annotations","description":"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more.","sidebar":"docsSidebar"},"types/indexed-access":{"id":"types/indexed-access","title":"Indexed Access Types","description":"Flow\u2019s Indexed Access Types allow you to get the type of a property from an object, array, or tuple type.","sidebar":"docsSidebar"},"types/interfaces":{"id":"types/interfaces","title":"Interfaces","description":"Classes in Flow are nominally typed. This means that when you have two separate","sidebar":"docsSidebar"},"types/intersections":{"id":"types/intersections","title":"Intersections","description":"Sometimes it is useful to create a type which is all of a set of other","sidebar":"docsSidebar"},"types/literals":{"id":"types/literals","title":"Literal Types","description":"Flow has primitive types for","sidebar":"docsSidebar"},"types/mapped-types":{"id":"types/mapped-types","title":"Mapped Types","description":"Flow\'s mapped types allow you to transform object types. They are useful for modeling complex runtime operations over objects.","sidebar":"docsSidebar"},"types/maybe":{"id":"types/maybe","title":"Maybe Types","description":"You can prefix a type with ? to make it a union with null and void:","sidebar":"docsSidebar"},"types/mixed":{"id":"types/mixed","title":"Mixed","description":"mixed is the supertype of all types. All values are mixed.","sidebar":"docsSidebar"},"types/modules":{"id":"types/modules","title":"Module Types","description":"Importing and exporting types","sidebar":"docsSidebar"},"types/objects":{"id":"types/objects","title":"Objects","description":"Objects can be used in many different ways in JavaScript.","sidebar":"docsSidebar"},"types/opaque-types":{"id":"types/opaque-types","title":"Opaque Type Aliases","description":"Opaque type aliases are type aliases that do not allow access to their","sidebar":"docsSidebar"},"types/primitives":{"id":"types/primitives","title":"Primitive Types","description":"JavaScript has a number of different primitive types","sidebar":"docsSidebar"},"types/tuples":{"id":"types/tuples","title":"Tuples","description":"Tuple types represent a fixed length list, where the elements can have different types.","sidebar":"docsSidebar"},"types/type-guards":{"id":"types/type-guards","title":"Type Guards","description":"Flow lets you define functions whose return expression encodes some type predicate over a parameter param. This predicate is annotated in place of a return type annotation as param is PredicateType. It declares that if the function returns true then param is of type PredicateType.","sidebar":"docsSidebar"},"types/typeof":{"id":"types/typeof","title":"Typeof Types","description":"JavaScript has a typeof operator which returns a string describing a value.","sidebar":"docsSidebar"},"types/unions":{"id":"types/unions","title":"Unions","description":"Sometimes it\'s useful to create a type which is one of a set of other","sidebar":"docsSidebar"},"types/utilities":{"id":"types/utilities","title":"Utility Types","description":"Flow provides a set of utility types to operate on other types to create new types.","sidebar":"docsSidebar"},"usage":{"id":"usage","title":"Usage","description":"Once you have installed Flow, you will want to get a feel of how to use Flow at the most basic level. For most new Flow projects, you will follow this general pattern:","sidebar":"docsSidebar"}}}}')}}]);