"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9044],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},39044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"lang/depth-subtyping","title":"Depth Subtyping","description":"Assume we have two classes, which have a subtype relationship using extends:","source":"@site/docs/lang/depth-subtyping.md","sourceDirName":"lang","slug":"/lang/depth-subtyping","permalink":"/en/docs/lang/depth-subtyping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/lang/depth-subtyping.md","tags":[],"version":"current","frontMatter":{"title":"Depth Subtyping","slug":"/lang/depth-subtyping"},"sidebar":"docsSidebar","previous":{"title":"Nominal & Structural Typing","permalink":"/en/docs/lang/nominal-structural"},"next":{"title":"Width Subtyping","permalink":"/en/docs/lang/width-subtyping"}}');var o=t(74848),r=t(28453);const a={title:"Depth Subtyping",slug:"/lang/depth-subtyping"},i=void 0,c={},l=[];function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Assume we have two ",(0,o.jsx)(n.a,{href:"../../types/classes",children:"classes"}),", which have a subtype relationship using ",(0,o.jsx)(n.code,{children:"extends"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"class Person {\n  name: string;\n}\nclass Employee extends Person {\n  department: string;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It's valid to use an ",(0,o.jsx)(n.code,{children:"Employee"})," instance where a ",(0,o.jsx)(n.code,{children:"Person"})," instance is expected."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: Employee = new Employee();\nconst person: Person = employee; // OK\n"})}),"\n",(0,o.jsxs)(n.p,{children:["However, it is not valid to use an object containing an ",(0,o.jsx)(n.code,{children:"Employee"})," instance\nwhere an object containing a ",(0,o.jsx)(n.code,{children:"Person"})," instance is expected."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":31,"endLine":5,"endColumn":38,"description":"Cannot assign `employee` to `person` because `Employee` [1] is not exactly the same as `Person` [2] in property `who`. \\n\\nThe above-mentioned two types must be the same because property `who` is invariantly typed. To fix the error,\\n- Either make `{who: Employee}` [3] and `{who: Person}` [4] exactly the same\\n- Or make property `who` in object type [4] readonly. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]"}]',children:"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: {who: Employee} = {who: new Employee()};\nconst person: {who: Person} = employee; // Error\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This is an error because objects are mutable. The value referenced by the\n",(0,o.jsx)(n.code,{children:"employee"})," variable is the same as the value referenced by the ",(0,o.jsx)(n.code,{children:"person"}),"\nvariable."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"person.who = new Person();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If we write into the ",(0,o.jsx)(n.code,{children:"who"})," property of the ",(0,o.jsx)(n.code,{children:"person"})," object, we've also changed\nthe value of ",(0,o.jsx)(n.code,{children:"employee.who"}),", which is explicitly annotated to be an ",(0,o.jsx)(n.code,{children:"Employee"}),"\ninstance."]}),"\n",(0,o.jsxs)(n.p,{children:["If we prevented any code from ever writing a new value to the object through\nthe ",(0,o.jsx)(n.code,{children:"person"})," variable, it would be safe to use the ",(0,o.jsx)(n.code,{children:"employee"})," variable. Flow\nprovides a syntax for this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":10,"description":"Cannot assign `new Person()` to `person.who` because property `who` is not writable. [cannot-write]"}]',children:"class Person { name: string }\nclass Employee extends Person { department: string }\n\nconst employee: {who: Employee} = {who: new Employee()};\nconst person: {+who: Person} = employee; // OK\nperson.who = new Person(); // Error!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The plus sign ",(0,o.jsx)(n.code,{children:"+"})," indicates that the ",(0,o.jsx)(n.code,{children:"who"})," property is ",(0,o.jsx)(n.a,{href:"../variance/#toc-covariance",children:"covariant"}),".\nUsing a covariant property allows us to use objects which have subtype-compatible\nvalues for that property. By default, object properties are invariant, which allow\nboth reads and writes, but are more restrictive in the values they accept."]}),"\n",(0,o.jsxs)(n.p,{children:["Read more about ",(0,o.jsx)(n.a,{href:"../variance/",children:"property variance"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);