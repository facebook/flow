"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7393],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const l={},o=t.createContext(l);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},57393:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"editors/vim","title":"Vim","description":"Flow\'s editor integration is primarily via the Language Server Protocol. There are many vim LSP clients to choose from, such as ALE.","source":"@site/docs/editors/vim.md","sourceDirName":"editors","slug":"/editors/vim","permalink":"/en/docs/editors/vim","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/editors/vim.md","tags":[],"version":"current","frontMatter":{"title":"Vim","slug":"/editors/vim"},"sidebar":"docsSidebar","previous":{"title":"Sublime Text","permalink":"/en/docs/editors/sublime-text"},"next":{"title":"Emacs","permalink":"/en/docs/editors/emacs"}}');var l=i(74848),o=i(28453);const s={title:"Vim",slug:"/editors/vim"},a=void 0,r={},c=[{value:"ALE",id:"toc-ale",level:2},{value:"Installation",id:"toc-installation",level:3},{value:"coc.nvim-neovim",id:"toc-coc-nvim-neovim",level:2},{value:"Setup",id:"toc-setup",level:3},{value:"LanguageClient-neovim",id:"toc-languageclient-neovim",level:2},{value:"Requirements",id:"toc-requirements",level:3},{value:"Pathogen",id:"toc-pathogen",level:3},{value:"NeoBundle",id:"toc-neobundle",level:3},{value:"VimPlug",id:"toc-vimplug",level:3},{value:"Setup",id:"toc-setup",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Flow's editor integration is primarily via the ",(0,l.jsx)(n.a,{href:"https://microsoft.github.io/language-server-protocol/",children:"Language Server Protocol"}),". There are ",(0,l.jsx)(n.a,{href:"https://microsoft.github.io/language-server-protocol/implementors/tools/",children:"many vim LSP clients"})," to choose from, such as ",(0,l.jsx)(n.a,{href:"#toc-ale",children:"ALE"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-ale",children:"ALE"}),"\n",(0,l.jsxs)(n.p,{children:["The Asynchronous Lint Engine (ALE) plugin for Vim 8+ and NeoVim, ",(0,l.jsx)(n.a,{href:"https://github.com/w0rp/ale",children:"vim-ale"}),", is a generalized linting engine with support for Flow and many other tools."]}),"\n",(0,l.jsx)(n.h3,{id:"toc-installation",children:"Installation"}),"\n",(0,l.jsxs)(n.p,{children:["Follow the ",(0,l.jsx)(n.a,{href:"https://github.com/w0rp/ale#3-installation",children:"instructions"})," in the ALE README."]}),"\n",(0,l.jsxs)(n.p,{children:["Configure ALE to use the ",(0,l.jsx)(n.code,{children:"flow-language-server"})," linter for JavaScript files:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"\" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n\" Enables only Flow for JavaScript. See :ALEInfo for a list of other available\n\" linters. NOTE: the `flow` linter uses an old API; prefer `flow-language-server`.\nlet b:ale_linters = ['flow-language-server']\n\n\" Or in ~/.vim/vimrc:\nlet g:ale_linters = {\n\\   'javascript': ['flow-language-server'],\n\\}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"toc-coc-nvim-neovim",children:"coc.nvim-neovim"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/neoclide/coc.nvim",children:"Coc"})," is an intellisense engine for vim8 & neovim."]}),"\n",(0,l.jsx)(n.h3,{id:"toc-setup",children:"Setup"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"set nocompatible\nfiletype off\n\n\" install coc.nvim using Plug or preferred plugin manager\ncall plug#begin('~/.vim/plugged')\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\ncall plug#end()\n\nfiletype plugin indent on\n\n\" ======= coc settings\nset updatetime=300\nset shortmess+=c\n\n\" Use leader T to show documentation in preview window\nnnoremap <leader>t :call <SID>show_documentation()<CR>\n\n\nfunction! s:show_documentation()\n  if (index(['vim','help'], &filetype) >= 0)\n    execute 'h '.expand('&lt;cword&gt;')\n  else\n    call CocAction('doHover')\n  endif\nendfunction\n\n\" instead of having ~/.vim/coc-settings.json\nlet s:LSP_CONFIG = {\n\\  'flow': {\n\\    'command': exepath('flow'),\n\\    'args': ['lsp'],\n\\    'filetypes': ['javascript', 'javascriptreact'],\n\\    'initializationOptions': {},\n\\    'requireRootPattern': 1,\n\\    'settings': {},\n\\    'rootPatterns': ['.flowconfig']\n\\  }\n\\}\n\nlet s:languageservers = {}\nfor [lsp, config] in items(s:LSP_CONFIG)\n  let s:not_empty_cmd = !empty(get(config, 'command'))\n  if s:not_empty_cmd | let s:languageservers[lsp] = config | endif\nendfor\n\nif !empty(s:languageservers)\n  call coc#config('languageserver', s:languageservers)\n  endif\n"})}),"\n",(0,l.jsx)(n.h2,{id:"toc-languageclient-neovim",children:"LanguageClient-neovim"}),"\n",(0,l.jsxs)(n.p,{children:["Another way to add support for Flow in Vim is to use ",(0,l.jsx)(n.a,{href:"https://github.com/autozimu/LanguageClient-neovim",children:"LanguageClient-neovim"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Supports vim 8 and neovim"}),"\n",(0,l.jsx)(n.li,{children:"Adds completions to omnifunc"}),"\n",(0,l.jsx)(n.li,{children:"Checks JavaScript files for type errors on save"}),"\n",(0,l.jsx)(n.li,{children:"Look up types under cursor"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"toc-requirements",children:"Requirements"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Requires Flow to be installed and available on your path."}),"\n",(0,l.jsx)(n.li,{children:"Requires projects containing JavaScript files to be initialised with flow init."}),"\n",(0,l.jsx)(n.li,{children:"Requires JavaScript files to be marked with /* @flow */ at the top."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"toc-pathogen",children:"Pathogen"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"cd ~/.vim/bundle\ngit clone git://github.com/autozimu/LanguageClient-neovim.git\n"})}),"\n",(0,l.jsx)(n.h3,{id:"toc-neobundle",children:"NeoBundle"}),"\n",(0,l.jsx)(n.p,{children:"Add this to your ~/.vimrc"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"  NeoBundleLazy 'autozimu/LanguageClient-neovim', {\n    \\ 'autoload': {\n    \\     'filetypes': 'javascript'\n    \\ }}\n"})}),"\n",(0,l.jsx)(n.p,{children:"With Flow build step, using flow-bin"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"  NeoBundleLazy 'autozimu/LanguageClient-neovim', {\n    \\ 'autoload': {\n    \\     'filetypes': 'javascript'\n    \\ },\n    \\ 'build': {\n    \\     'mac': 'npm install -g flow-bin',\n    \\     'unix': 'npm install -g flow-bin'\n    \\ }}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"toc-vimplug",children:"VimPlug"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"  Plug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh && npm install -g flow-bin',\n    \\ }\n"})}),"\n",(0,l.jsx)(n.h3,{id:"toc-setup",children:"Setup"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-vim",children:"let g:LanguageClient_rootMarkers = {\n\\   'javascript': ['.flowconfig', 'package.json']\n\\ }\nlet g:LanguageClient_serverCommands={\n\\   'javascript': ['flow', 'lsp'],\n\\   'javascript.jsx': ['flow', 'lsp']\n\\}\n\n\" check the type under cursor w/ leader T\nnnoremap <leader>t :call LanguageClient_textDocument_hover()<CR>\nnnoremap <leader>y :call LanguageClient_textDocument_definition()<CR>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);