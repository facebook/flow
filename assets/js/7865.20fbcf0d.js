"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7865],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(96540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},87865:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"types/objects","title":"Objects","description":"Objects can be used in many different ways in JavaScript.","source":"@site/docs/types/objects.md","sourceDirName":"types","slug":"/types/objects","permalink":"/en/docs/types/objects","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/objects.md","tags":[],"version":"current","frontMatter":{"title":"Objects","slug":"/types/objects"},"sidebar":"docsSidebar","previous":{"title":"Functions","permalink":"/en/docs/types/functions"},"next":{"title":"Arrays","permalink":"/en/docs/types/arrays"}}');var s=t(74848),r=t(28453);const a={title:"Objects",slug:"/types/objects"},i=void 0,c={},l=[{value:"Optional object type properties",id:"toc-optional-object-type-properties",level:2},{value:"Read-only object properties",id:"read-only-object-properties",level:2},{value:"Object methods",id:"toc-object-methods",level:2},{value:"Object type inference",id:"toc-object-type-inference",level:2},{value:"Exact and inexact object types",id:"exact-and-inexact-object-types",level:2},{value:"Object type spread",id:"object-type-spread",level:2},{value:"Objects as maps",id:"toc-objects-as-maps",level:2},{value:"Keys, values, and indexed access",id:"keys-values-and-indexed-access",level:2},{value:"Arbitrary objects",id:"arbitrary-objects",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Objects can be used in many different ways in JavaScript.\nThere are a number of ways to type them in order to support the different use cases."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Exact object types: An object which has exactly a set of properties, e.g. ",(0,s.jsx)(n.code,{children:"{a: number}"}),". We recommend using exact object types rather than inexact ones, as they are more precise and interact better with other type system features, like ",(0,s.jsx)(n.a,{href:"#object-type-spread",children:"spreads"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#exact-and-inexact-object-types",children:"Inexact object types"}),": An object with at least a set of properties, but potentially other, unknown ones, e.g. ",(0,s.jsx)(n.code,{children:"{a: number, ...}"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#toc-objects-as-maps",children:"Objects with indexers"}),": An object that can used as a map from a key type to a value type, e.g. ",(0,s.jsx)(n.code,{children:"{[string]: boolean}"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../interfaces",children:"Interfaces"}),": Interfaces are separate from object types. Only they can describe instances of classes. E.g. ",(0,s.jsx)(n.code,{children:"interfaces {a: number}"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Object types try to match the syntax for objects in JavaScript as much as\npossible. Using curly braces ",(0,s.jsx)(n.code,{children:"{}"})," and name-value pairs using a colon ",(0,s.jsx)(n.code,{children:":"})," split\nby commas ",(0,s.jsx)(n.code,{children:","}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const obj1: {foo: boolean} = {foo: true};\nconst obj2: {\n  foo: number,\n  bar: boolean,\n  baz: string,\n} = {\n  foo: 1,\n  bar: true,\n  baz: 'three',\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"toc-optional-object-type-properties",children:"Optional object type properties"}),"\n",(0,s.jsxs)(n.p,{children:["In JavaScript, accessing a property that doesn't exist evaluates to\n",(0,s.jsx)(n.code,{children:"undefined"}),". This is a common source of errors in JavaScript programs, so Flow\nturns these into type errors."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":2,"startColumn":5,"endLine":2,"endColumn":7,"description":"Cannot get `obj.bar` because property `bar` is missing in object literal [1]. [prop-missing]"}]',children:'const obj = {foo: "bar"};\nobj.bar; // Error!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you have an object that sometimes does not have a property you can make it\nan ",(0,s.jsx)(n.em,{children:"optional property"})," by adding a question mark ",(0,s.jsx)(n.code,{children:"?"})," after the property name in\nthe object type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":4,"startColumn":11,"endLine":4,"endColumn":17,"description":"Cannot assign `\'hello\'` to `obj.foo` because string [1] is incompatible with boolean [2]. [incompatible-type]"}]',children:"const obj: {foo?: boolean} = {};\n\nobj.foo = true;    // Works!\nobj.foo = 'hello'; // Error!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In addition to their set value type, these optional properties can either be\n",(0,s.jsx)(n.code,{children:"void"})," or omitted altogether. However, they cannot be ",(0,s.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":21,"endLine":7,"endColumn":24,"description":"Cannot call `acceptsObject` with object literal bound to `value` because null [1] is incompatible with string [2] in property `foo`. [incompatible-type]"}]',children:'function acceptsObject(value: {foo?: string}) { /* ... */ }\n\nacceptsObject({foo: "bar"});     // Works!\nacceptsObject({foo: undefined}); // Works!\nacceptsObject({});               // Works!\n\nacceptsObject({foo: null});      // Error!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To make all properties in an object type optional, you can use the ",(0,s.jsx)(n.a,{href:"../utilities/#toc-partial",children:(0,s.jsx)(n.code,{children:"Partial"})})," utility type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type Obj = {\n  foo: string,\n};\n\ntype PartialObj = Partial<Obj>; // Same as `{foo?: string}`\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To make all properties in an object type required, you can use the ",(0,s.jsx)(n.a,{href:"../utilities/#toc-required",children:(0,s.jsx)(n.code,{children:"Required"})})," utility type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type PartialObj = {\n  foo?: string,\n};\n\ntype Obj = Required<PartialObj>; // Same as `{foo: string}`\n"})}),"\n",(0,s.jsx)(n.h2,{id:"read-only-object-properties",children:"Read-only object properties"}),"\n",(0,s.jsxs)(n.p,{children:["You can add ",(0,s.jsx)(n.a,{href:"../../lang/variance",children:"variance"})," annotations to your object properties."]}),"\n",(0,s.jsxs)(n.p,{children:["To mark a property as read-only, you can use the ",(0,s.jsx)(n.code,{children:"+"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":5,"endLine":7,"endColumn":7,"description":"Cannot assign `\'hi\'` to `o.foo` because property `foo` is not writable. [cannot-write]"}]',children:"type Obj = {\n  +foo: string,\n};\n\nfunction func(o: Obj) {\n  const x: string = o.foo; // Works!\n  o.foo = 'hi'; // Error!\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To make all object properties in an object type read-only, you can use the ",(0,s.jsx)(n.a,{href:"../utilities/#toc-readonly",children:(0,s.jsx)(n.code,{children:"$ReadOnly"})})," utility type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type Obj = {\n  foo: string,\n};\n\ntype ReadOnlyObj = $ReadOnly<Obj>; // Same as `{+foo: string}`\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also mark your properties as write-only with ",(0,s.jsx)(n.code,{children:"-"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":23,"endLine":6,"endColumn":25,"description":"Cannot get `o.foo` because property `foo` is not readable. [cannot-read]"}]',children:"type Obj = {\n  -foo: string,\n};\n\nfunction func(o: Obj) {\n  const x: string = o.foo; // Error!\n  o.foo = 'hi'; // Works!\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"toc-object-methods",children:"Object methods"}),"\n",(0,s.jsx)(n.p,{children:"Method syntax in objects has the same runtime behavior as a function property. These two objects are equivalent at runtime:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const a = {\n  foo: function () { return 3; }\n};\nconst b = {\n  foo() { return 3; }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["However, despite their equivalent runtime behavior, Flow checks them slightly differently. In particular, object\nproperties written with method syntax are ",(0,s.jsx)(n.a,{href:"../../lang/variance",children:"read-only"}),"; Flow will not allow you to write a new value to them."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":4,"startColumn":3,"endLine":4,"endColumn":5,"description":"Cannot assign function to `b.foo` because property `foo` is not writable. [cannot-write]"}]',children:"const b = {\n  foo() { return 3; }\n}\nb.foo = () => { return 2; } // Error!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, object methods do not allow the use of ",(0,s.jsx)(n.code,{children:"this"})," in their bodies, in order to guarantee simple behavior\nfor their ",(0,s.jsx)(n.code,{children:"this"})," parameters. Prefer to reference the object by name instead of using ",(0,s.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":18,"endLine":3,"endColumn":21,"description":"Cannot reference `this` from within method `foo` [1]. For safety, Flow restricts access to `this` inside object methods since these methods may be unbound and rebound. Consider replacing the reference to `this` with the name of the object, or rewriting the object as a class. [object-this-reference]"}]',children:"const a = {\n  x: 3,\n  foo() { return this.x; } // Error!\n}\nconst b = {\n  x: 3,\n  foo(): number { return b.x; } // Works!\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"toc-object-type-inference",children:"Object type inference"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["NOTE: The behavior of empty object literals has changed in version 0.191 -\nsee this ",(0,s.jsx)(n.a,{href:"https://medium.com/flow-type/improved-handling-of-the-empty-object-in-flow-ead91887e40c",children:"blog post"})," for more details."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When you create an object value, its type is set at the creation point. You cannot add new properties,\nor modify the type of existing properties."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":9,"startColumn":5,"endLine":9,"endColumn":11,"description":"Cannot get `obj.UNKNOWN` because property `UNKNOWN` is missing in object literal [1]. [prop-missing]"},{"startLine":10,"startColumn":11,"endLine":10,"endColumn":14,"description":"Cannot assign `true` to `obj.foo` because boolean [1] is incompatible with number [2]. [incompatible-type]"}]',children:"const obj = {\n  foo: 1,\n  bar: true,\n};\n\nconst n: number  = obj.foo; // Works!\nconst b: boolean = obj.bar; // Works!\n\nobj.UNKNOWN; // Error - prop `UNKNOWN` is not in the object value\nobj.foo = true; // Error - `foo` is of type `number`\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you supply a type annotation, you can add properties missing in the object value as optional properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const obj: {\n  foo?: number,\n  bar: boolean,\n} = {\n  // `foo` is not set here\n  bar: true,\n};\n\nconst n: number | void = obj.foo; // Works!\nconst b: boolean = obj.bar; // Works!\n\nif (b) {\n  obj.foo = 3; // Works!\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also give a wider type for a particular property:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'const obj: {\n  foo: number | string,\n} = {\n  foo: 1,\n};\n\nconst foo: number | string = obj.foo; // Works!\nobj.foo = "hi"; // Works!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The empty object can be interpreted as a ",(0,s.jsx)(n.a,{href:"#toc-objects-as-maps",children:"dictionary"}),", if you supply the appropriate type annotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const dict: {[string]: number} = {}; // Works!\n"})}),"\n",(0,s.jsx)(n.p,{children:"You may need to add type annotations to an object literal, if it references itself recursively (beyond simple cases):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":1,"startColumn":7,"endLine":1,"endColumn":11,"description":"Cannot compute a type for `Utils` because its definition includes references to itself [1]. Please add an annotation to these definitions [2] [3] [recursive-definition]"}]',children:"const Utils = { // Error\n  foo() {\n    return Utils.bar();\n  },\n  bar() {\n    return 1;\n  }\n};\n\nconst FixedUtils = { // Works!\n  foo(): number {\n    return FixedUtils.bar();\n  },\n  bar(): number {\n    return 1;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"exact-and-inexact-object-types",children:"Exact and inexact object types"}),"\n",(0,s.jsxs)(n.p,{children:["Exact object types are the default (as of version 0.202), unless you have set ",(0,s.jsx)(n.a,{href:"../../config/options#toc-exact-by-default",children:(0,s.jsx)(n.code,{children:"exact_by_default=false"})})," in your ",(0,s.jsx)(n.code,{children:".flowconfig"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Inexact objects (denoted with the ",(0,s.jsx)(n.code,{children:"..."}),") allow extra properties to be passed in:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function method(obj: {foo: string, ...}) { /* ... */ }\n\nmethod({foo: "test", bar: 42}); // Works!\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This is because of ",(0,s.jsx)(n.a,{href:"../../lang/width-subtyping",children:'"width subtyping"'}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"But exact object types do not:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":8,"endLine":3,"endColumn":29,"description":"Cannot call `method` with object literal bound to `obj` because property `bar` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"}]',children:'function method(obj: {foo: string}) { /* ... */ }\n\nmethod({foo: "test", bar: 42}); // Error!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you have set ",(0,s.jsx)(n.code,{children:"exact_by_default=false"}),', you can denote exact object types by adding a pair of "vertical bars" or "pipes" to the inside of the curly braces:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":1,"startColumn":28,"endLine":1,"endColumn":56,"description":"Cannot assign object literal to `x` because property `bar` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"}]',children:'const x: {|foo: string|} = {foo: "Hello", bar: "World!"}; // Error!\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"../intersections",children:"Intersections"})," of exact object types may not work as you expect. If you need to combine exact object types, use ",(0,s.jsx)(n.a,{href:"#object-type-spread",children:"object type spread"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":8,"startColumn":33,"endLine":8,"endColumn":53,"description":"Cannot assign object literal to `fooBarFail` because property `bar` is extra in object literal [1] but missing in `FooT` [2]. Exact objects do not accept extra props. [incompatible-type]"},{"startLine":8,"startColumn":33,"endLine":8,"endColumn":53,"description":"Cannot assign object literal to `fooBarFail` because property `foo` is extra in object literal [1] but missing in `BarT` [2]. Exact objects do not accept extra props. [incompatible-type]"}]',children:"type FooT = {foo: string};\ntype BarT = {bar: number};\n\ntype FooBarT = {...FooT, ...BarT};\nconst fooBar: FooBarT = {foo: '123', bar: 12}; // Works!\n\ntype FooBarFailT = FooT & BarT;\nconst fooBarFail: FooBarFailT = {foo: '123', bar: 12}; // Error!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"object-type-spread",children:"Object type spread"}),"\n",(0,s.jsx)(n.p,{children:"Just like you can spread object values, you can also spread object types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type ObjA = {\n  a: number,\n  b: string,\n};\n\nconst x: ObjA = {a: 1, b: \"hi\"};\n\ntype ObjB = {\n  ...ObjA,\n  c: boolean,\n};\n\nconst y: ObjB = {a: 1, b: 'hi', c: true}; // Works!\nconst z: ObjB = {...x, c: true}; // Works!\n"})}),"\n",(0,s.jsx)(n.p,{children:"You have to be careful spreading inexact objects.\nThe resulting object must also be inexact,\nand the spread inexact object may have unknown properties that can override previous properties in unknown ways:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":13,"endLine":10,"endColumn":1,"description":"Flow cannot determine a type for object type [1]. `Inexact` [2] is inexact, so it may contain `c` with a type that conflicts with `c`\'s definition in object type [1]. Try making `Inexact` [2] exact. [cannot-spread-inexact]"},{"startLine":9,"startColumn":6,"endLine":9,"endColumn":12,"description":"inexact `Inexact` [1] is incompatible with exact object type [2]. [incompatible-exact]"}]',children:"type Inexact = {\n  a: number,\n  b: string,\n  ...\n};\n\ntype ObjB = { // Error!\n  c: boolean,\n  ...Inexact,\n};\n\nconst x: ObjB = {a:1, b: 'hi', c: true};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The same issue exists with objects with ",(0,s.jsx)(n.a,{href:"#toc-objects-as-maps",children:"indexers"}),", as they also have unknown keys:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":13,"endLine":8,"endColumn":1,"description":"Flow cannot determine a type for object type [1]. `Dict` [2] cannot be spread because the indexer string [3] may overwrite properties with explicit keys in a way that Flow cannot track. Try spreading `Dict` [2] first or remove the indexer. [cannot-spread-indexer]"}]',children:"type Dict = {\n  [string]: number,\n};\n\ntype ObjB = { // Error!\n  c: boolean,\n  ...Dict,\n};\n\nconst x: ObjB = {a: 1, b: 2, c: true};\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Spreading an object value at runtime only spreads "own" properties, that is properties that are on the object directly, not the prototype chain.\nObject type spread works in the same way.\nBecause of this, you can\'t spread ',(0,s.jsx)(n.a,{href:"../interfaces",children:"interfaces"}),', as they don\'t track whether a property is "own" or not:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":13,"endLine":9,"endColumn":1,"description":"Flow cannot determine a type for object type [1]. `Iface` [2] cannot be spread because interfaces do not track the own-ness of their properties. Try using an object type instead. [cannot-spread-interface]"}]',children:"interface Iface {\n  a: number;\n  b: string;\n}\n\ntype ObjB = { // Error!\n  c: boolean,\n  ...Iface,\n};\n\nconst x: ObjB = {a: 1, b: 'hi', c: true};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"toc-objects-as-maps",children:"Objects as maps"}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript includes a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:(0,s.jsx)(n.code,{children:"Map"})})," class,\nbut it is still very common to use objects as maps as well. In this use case, an object\nwill likely have properties added to it and retrieved throughout its lifecycle.\nFurthermore, the property keys may not even be known statically, so writing out\na type annotation would not be possible."]}),"\n",(0,s.jsx)(n.p,{children:'For objects like these, Flow provides a special kind of property, called an\n"indexer property." An indexer property allows reads and writes using any key\nthat matches the indexer key type.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'const o: {[string]: number} = {};\no["foo"] = 0;\no["bar"] = 1;\nconst foo: number = o["foo"];\n'})}),"\n",(0,s.jsx)(n.p,{children:"An indexer can be optionally named, for documentation purposes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'const obj: {[user_id: number]: string} = {};\nobj[1] = "Julia";\nobj[2] = "Camille";\nobj[3] = "Justin";\nobj[4] = "Mark";\n'})}),"\n",(0,s.jsx)(n.p,{children:"When an object type has an indexer property, property accesses are assumed to\nhave the annotated type, even if the object does not have a value in that slot\nat runtime. It is the programmer's responsibility to ensure the access is safe,\nas with arrays."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const obj: {[number]: string} = {};\nobj[42].length; // No type error, but will throw at runtime\n"})}),"\n",(0,s.jsx)(n.p,{children:"Indexer properties can be mixed with named properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const obj: {\n  size: number,\n  [id: number]: string\n} = {\n  size: 0\n};\n\nfunction add(id: number, name: string) {\n  obj[id] = name;\n  obj.size++;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can mark an indexer property as read-only (or write-only) using ",(0,s.jsx)(n.a,{href:"../../lang/variance",children:"variance"})," annotations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type ReadOnly = {+[string]: number};\ntype WriteOnly = {-[string]: number};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"keys-values-and-indexed-access",children:"Keys, values, and indexed access"}),"\n",(0,s.jsxs)(n.p,{children:["You can extract the keys of an object type using the ",(0,s.jsx)(n.a,{href:"../utilities/#toc-keys",children:(0,s.jsx)(n.code,{children:"$Keys"})})," utility type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":12,"startColumn":13,"endLine":12,"endColumn":16,"description":"Cannot call `acceptsKeys` with `\'hi\'` bound to `k` because property `hi` is missing in `Obj` [1]. [prop-missing]"}]',children:"type Obj = {\n  foo: string,\n  bar: number,\n};\n\ntype T = $Keys<Obj>;\n\nfunction acceptsKeys(k: T) { /* ... */ }\n\nacceptsKeys('foo'); // Works!\nacceptsKeys('bar'); // Works!\nacceptsKeys('hi'); // Error!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can extract the values of an object type using the ",(0,s.jsx)(n.a,{href:"../utilities/#toc-values",children:(0,s.jsx)(n.code,{children:"$Values"})})," utility type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":12,"startColumn":15,"endLine":12,"endColumn":18,"description":"Cannot call `acceptsValues` with `true` bound to `v` because: [incompatible-type] Either boolean [1] is incompatible with string [2]. Or boolean [1] is incompatible with number [3]."}]',children:"type Obj = {\n  foo: string,\n  bar: number,\n};\n\ntype T = $Values<Obj>;\n\nfunction acceptsValues(v: T) { /* ... */ }\n\nacceptsValues(2); // Works!\nacceptsValues('hi'); // Works!\nacceptsValues(true); // Error!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can get the type of an object type's specific property using ",(0,s.jsx)(n.a,{href:"../indexed-access",children:"indexed access types"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":11,"startColumn":12,"endLine":11,"endColumn":12,"description":"Cannot call `acceptsStr` with `1` bound to `x` because number [1] is incompatible with string [2]. [incompatible-type]"}]',children:"type Obj = {\n  foo: string,\n  bar: number,\n};\n\ntype T = Obj['foo'];\n\nfunction acceptsStr(x: T) { /* ... */ }\n\nacceptsStr('hi'); // Works!\nacceptsStr(1); // Error!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"arbitrary-objects",children:"Arbitrary objects"}),"\n",(0,s.jsx)(n.p,{children:"If you want to accept an arbitrary object safely, there are a couple of patterns you could use."}),"\n",(0,s.jsxs)(n.p,{children:["An empty inexact object ",(0,s.jsx)(n.code,{children:"{...}"})," accepts any object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function func(obj: {...}) {\n  // ...\n}\n\nfunc({}); // Works!\nfunc({a: 1, b: "foo"}); // Works!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It's often the right choice for a ",(0,s.jsx)(n.a,{href:"../generics",children:"generic"})," bounded to accept any object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function func<T: {...}>(obj: T) {\n  // ...\n}\n\nfunc({}); // Works!\nfunc({a: 1, b: "foo"}); // Works!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["However, you can't access any properties off of ",(0,s.jsx)(n.code,{children:"{...}"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also try using a ",(0,s.jsx)(n.a,{href:"#toc-objects-as-maps",children:"dictionary"})," with ",(0,s.jsx)(n.a,{href:"../mixed",children:(0,s.jsx)(n.code,{children:"mixed"})})," values, which would allow you to access any property (with a resulting ",(0,s.jsx)(n.code,{children:"mixed"})," type):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function func(obj: {+[string]: mixed}) {\n  const x: mixed = obj['bar'];\n}\n\nfunc({}); // Works!\nfunc({a: 1, b: \"foo\"}); // Works!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The type ",(0,s.jsx)(n.code,{children:"Object"})," is just an alias for ",(0,s.jsx)(n.a,{href:"../any",children:(0,s.jsx)(n.code,{children:"any"})}),", and is unsafe.\nYou can ban its use in your code with the ",(0,s.jsx)(n.a,{href:"../../linting/rule-reference/#toc-unclear-type",children:"unclear-type lint"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);