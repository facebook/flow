"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8757],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(96540);const o={},r=t.createContext(o);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},68757:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"linting/index","title":"Linting Overview","description":"Learn how to configure Flow\'s linter to find potentially harmful code.","source":"@site/docs/linting/index.md","sourceDirName":"linting","slug":"/linting","permalink":"/en/docs/linting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/linting/index.md","tags":[],"version":"current","frontMatter":{"title":"Linting Overview","slug":"/linting","description":"Learn how to configure Flow\'s linter to find potentially harmful code."},"sidebar":"docsSidebar","previous":{"title":"Error Suppressions","permalink":"/en/docs/errors"},"next":{"title":"Flowlint Comments","permalink":"/en/docs/linting/flowlint-comments"}}');var o=i(74848),r=i(28453);const l={title:"Linting Overview",slug:"/linting",description:"Learn how to configure Flow's linter to find potentially harmful code."},s=void 0,c={},d=[{value:"Configuring Lints in the <code>.flowconfig</code>",id:"toc-configuring-lints-in-the-flowconfig",level:3},{value:"Configuring Lints from the CLI",id:"toc-configuring-lints-from-the-cli",level:3},{value:"Configuring Lints with Comments",id:"toc-configuring-lints-with-comments",level:3},{value:"Lint Settings Precedence",id:"toc-lint-settings-precedence",level:3},{value:"Severity Levels and Meanings",id:"toc-severity-levels-and-meanings",level:3}];function a(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Flow contains a linting framework that can tell you about more than just type errors. This framework is highly configurable in order to show you the information you want and hide the information you don't."}),"\n",(0,o.jsxs)(n.h3,{id:"toc-configuring-lints-in-the-flowconfig",children:["Configuring Lints in the ",(0,o.jsx)(n.code,{children:".flowconfig"})]}),"\n",(0,o.jsxs)(n.p,{children:["Lint settings can be specified in the ",(0,o.jsx)(n.code,{children:"[lints]"})," section of the ",(0,o.jsx)(n.code,{children:".flowconfig"})," as a list of ",(0,o.jsx)(n.code,{children:"rule=severity"})," pairs. These settings apply globally to the entire project."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[lints]\nall=warn\nuntyped-type-import=error\nsketchy-null-bool=off\n"})}),"\n",(0,o.jsx)(n.h3,{id:"toc-configuring-lints-from-the-cli",children:"Configuring Lints from the CLI"}),"\n",(0,o.jsxs)(n.p,{children:["Lint settings can be specified using the ",(0,o.jsx)(n.code,{children:"--lints"})," flag of a Flow server command as a comma-delimited list of ",(0,o.jsx)(n.code,{children:"rule=severity"})," pairs. These settings apply globally to the entire project."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'flow start --lints "all=warn, untyped-type-import=error, sketchy-null-bool=off"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"toc-configuring-lints-with-comments",children:"Configuring Lints with Comments"}),"\n",(0,o.jsxs)(n.p,{children:["Lint settings can be specified inside a file using ",(0,o.jsx)(n.code,{children:"flowlint"})," comments. These\nsettings apply to a region of a file, or a single line, or part of a line. For\nmore details see ",(0,o.jsx)(n.a,{href:"./flowlint-comments",children:"Flowlint Comments"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":4,"startColumn":5,"endLine":4,"endColumn":5,"description":"Sketchy null check on number [1] which is potentially 0. Perhaps you meant to check for null or undefined [2]? [sketchy-null-number]"}]',children:"// flowlint sketchy-null:error\nconst x: ?number = 0;\n\nif (x) {} // Error\n\n// flowlint-next-line sketchy-null:off\nif (x) {} // No Error\n\nif (x) {} /* flowlint-line sketchy-null:off */ // No Error\n\n// flowlint sketchy-null:off\nif (x) {} // No Error\nif (x) {} // No Error\n"})}),"\n",(0,o.jsx)(n.h3,{id:"toc-lint-settings-precedence",children:"Lint Settings Precedence"}),"\n",(0,o.jsxs)(n.p,{children:["Lint settings in ",(0,o.jsx)(n.code,{children:"flowlint"})," comments have the highest priority, followed by lint rules in the ",(0,o.jsx)(n.code,{children:"--lints"})," flag, followed by the ",(0,o.jsx)(n.code,{children:".flowconfig"}),".\nThis order allows you to use ",(0,o.jsx)(n.code,{children:"flowlint"})," comments for fine-grained linting control, the ",(0,o.jsx)(n.code,{children:"--lints"})," flag for trying out new lint settings, and the ",(0,o.jsx)(n.code,{children:".flowconfig"})," for stable project-wide settings."]}),"\n",(0,o.jsxs)(n.p,{children:["Within the ",(0,o.jsx)(n.code,{children:"--lints"})," flag and the ",(0,o.jsx)(n.code,{children:".flowconfig"}),", rules lower down override rules higher up, allowing you to write things like"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[lints]\n# warn on all sketchy-null checks\nsketchy-null=warn\n# ... except for booleans\nsketchy-null-bool=off\n"})}),"\n",(0,o.jsx)(n.p,{children:"The lint settings parser is fairly intelligent and will stop you if you write a redundant rule, a rule that gets completely overwritten, or an unused flowlint suppression. This should prevent most accidental misconfigurations of lint rules."}),"\n",(0,o.jsx)(n.h3,{id:"toc-severity-levels-and-meanings",children:"Severity Levels and Meanings"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"off:"}),"\nThe lint is ignored. Setting a lint to ",(0,o.jsx)(n.code,{children:"off"})," is similar to suppressing a type error with a suppression comment, except with much more granularity."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"warn:"}),"\nWarnings are a new severity level introduced by the linting framework. They are treated differently than errors in a couple of ways:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Warnings don't affect the exit code of Flow. If Flow finds warnings but no errors, it still returns 0."}),"\n",(0,o.jsxs)(n.li,{children:["Warnings aren't shown on the CLI by default, to avoid spew. CLI warnings can be\nenabled by passing the ",(0,o.jsx)(n.code,{children:"--include-warnings"})," flag to the Flow server or the\nFlow client, or by setting ",(0,o.jsx)(n.code,{children:"include_warnings=true"})," in the ",(0,o.jsx)(n.code,{children:".flowconfig"}),".\nThis is good for smaller projects that want to see all project warnings at once."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"error:"}),"\nLints with severity ",(0,o.jsx)(n.code,{children:"error"})," are treated exactly the same as any other Flow error."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);