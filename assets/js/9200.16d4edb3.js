"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9200],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(96540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},99200:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"react/render-types","title":"Render Types","description":"Some component libraries or design systems may want to restrict how components may be composed.","source":"@site/docs/react/render-types.md","sourceDirName":"react","slug":"/react/render-types","permalink":"/en/docs/react/render-types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/react/render-types.md","tags":[],"version":"current","frontMatter":{"title":"Render Types","slug":"/react/render-types"},"sidebar":"docsSidebar","previous":{"title":"Higher-order Components","permalink":"/en/docs/react/hoc"},"next":{"title":"Type Reference","permalink":"/en/docs/react/types"}}');var s=r(74848),a=r(28453);const o={title:"Render Types",slug:"/react/render-types"},d=void 0,i={},c=[{value:"Basic Behavior",id:"basic-behavior",level:2},{value:"Integrating with a design system",id:"integrating-with-a-design-system",level:2},{value:"Rendering Optional Elements",id:"rendering-optional-elements",level:2},{value:"Rendering Lists",id:"rendering-lists",level:2},{value:"Transparent Components",id:"transparent-components",level:2},{value:"Interop with non-Component-Syntax components",id:"interop-with-non-component-syntax-components",level:2},{value:"Subtyping Behavior",id:"subtyping-behavior",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Some component libraries or design systems may want to restrict how components may be composed.\nFor example, a Menu should only ever render MenuItems as children. Render types are a built-in way to support\nthese constraints while still affording users rich flexibility in how they use those components."}),"\n",(0,s.jsx)(n.h2,{id:"basic-behavior",children:"Basic Behavior"}),"\n",(0,s.jsx)(n.p,{children:"A component can declare what it renders using the renders keyword:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Header(size: string, color: string) { return <div /> }\n\ncomponent LargeHeader(color: string) renders Header {\n  return <Header size=\"large\" color={color} />; // Ok!\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"When you declare that your component renders some specific element, you can return any component that eventually renders that component in its renders chain:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'import * as React from \'react\';\n\ncomponent Header(size: string, color: string) { return <div /> }\n\ncomponent LargeHeader(color: string) renders Header {\n  return <Header size="large" color={color} />;\n}\n\ncomponent LargeBlueHeader() renders Header {\n  // You could also use `renders LargeHeader` above\n  return <LargeHeader color="blue" />;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Components can specify props that render specific elements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Header(size: string, color: string, message: string) {\n  return <h1 style={{color}}>{message}</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return (\n    <div>\n      {header}\n      <section>Hi</section>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And you can pass an element of either Header, or an element of a component that renders ",(0,s.jsx)(n.code,{children:"Header"}),", to that prop:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Layout header={<LargeBlueHeader />} />;\n"})}),"\n",(0,s.jsx)(n.p,{children:"You cannot pass a component that does not render a header to a render type expecting a header:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":15,"startColumn":17,"endLine":15,"endColumn":26,"description":"Cannot create `Layout` element because `Footer` element [1] does not render `Header` [2] in property `header`. [incompatible-type]"}]',children:"import * as React from 'react';\n\ncomponent Footer() {\n  return <footer />;\n}\n\ncomponent Header(size: string, color: string, message: string) {\n  return <h1 style={{color}}>{message}</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return <div>{header}</div>;\n}\n\n<Layout header={<Footer />} />; // ERROR Footer does not render Header\n"})}),"\n",(0,s.jsx)(n.h2,{id:"integrating-with-a-design-system",children:"Integrating with a design system"}),"\n",(0,s.jsx)(n.p,{children:"Render types are designed to make integrating with a design system simple. If a prop in the design system component expects a render type, you can copy/paste that type onto your component to integrate with the design system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Header() {\n  return <h1>Header!</h1>;\n}\n\ncomponent Layout(header: renders Header) {\n  return <div>{header}</div>;\n}\n\n// Copy-paste the header props' type!\ncomponent ProductHeader() renders Header {\n  // We must return a value that renders a Header to satisfy the signature\n  return <Header />;\n}\n\n// And now you can integrate with the design system!\n<Layout header={<ProductHeader />} />; // OK!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rendering-optional-elements",children:"Rendering Optional Elements"}),"\n",(0,s.jsxs)(n.p,{children:["You may want to describe a component that can take a child that may eventually render an element or nothing. You can use a specialized render type variant ",(0,s.jsx)(n.code,{children:"renders?"})," to achieve this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent DesignSystemCardFooter() {\n  return <div>Footer Content</div>;\n}\n\ncomponent DesignSystemCard(\n  children: React.Node,\n  footer: renders? DesignSystemCardFooter,\n) {\n  return <div>{children}{footer}</div>;\n}\n\n// With these definitions, all of the following work:\n\n<DesignSystemCard footer={<DesignSystemCardFooter />}>Card</DesignSystemCard>;\n<DesignSystemCard footer={null}>Card</DesignSystemCard>;\n<DesignSystemCard footer={undefined}>Card</DesignSystemCard>;\n<DesignSystemCard footer={false}>Card</DesignSystemCard>;\n\ncomponent ProductFooter(hasFooter?: boolean) renders? DesignSystemCardFooter {\n  return hasFooter && <DesignSystemCardFooter />;\n}\n\n<DesignSystemCard footer={<ProductFooter />}>Card</DesignSystemCard>;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rendering-lists",children:"Rendering Lists"}),"\n",(0,s.jsxs)(n.p,{children:["You may want to describe a component that can take any amount of children that render a specific element as props. You can use a specialized render type variant ",(0,s.jsx)(n.code,{children:"renders*"})," to achieve this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent DesignSystemMenuItem() {\n  return <li>Menu Item</li>;\n}\n\ncomponent DesignSystemMenu(\n  children: renders* DesignSystemMenuItem,\n) {\n  return <ul>{children}</ul>\n}\n\n// With these definitions, all of the following work:\n\nconst menu1 = (\n  <DesignSystemMenu>\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\nconst menu2 = (\n  <DesignSystemMenu>\n    <DesignSystemMenuItem />\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\nconst menu3 = (\n  <DesignSystemMenu>\n    {[\n      <DesignSystemMenuItem />,\n      <DesignSystemMenuItem />,\n    ]}\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n\ncomponent ProductMenuItem() renders DesignSystemMenuItem {\n  return <DesignSystemMenuItem />;\n}\n\nconst menu4 = (\n  <DesignSystemMenu>\n    {[\n      <ProductMenuItem />,\n      <DesignSystemMenuItem />,\n    ]}\n    <DesignSystemMenuItem />\n  </DesignSystemMenu>\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"transparent-components",children:"Transparent Components"}),"\n",(0,s.jsx)(n.p,{children:'Components can be "transparent":'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent TransparentComponent<T: React.Node>(children: T) renders T {\n  // .. do something\n  return children;\n}\n\ncomponent Header(text: string) {\n  return <h1>{text}</h1>;\n}\ncomponent InstagramHeader() renders Header {\n  return <Header text=\"Instagram\" />;\n}\ncomponent Layout(\n  header: renders Header,\n) {\n  return <div>{header}</div>;\n}\n\ncomponent Page() {\n  const wrappedHeader = <TransparentComponent><InstagramHeader /></TransparentComponent>\n  return <Layout header={wrappedHeader} />; // Ok!\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interop-with-non-component-syntax-components",children:"Interop with non-Component-Syntax components"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"renders"})," to annotate function components as well:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Header(text: string) {\n  return <h1>{text}</h1>;\n}\ncomponent InstagramHeader() renders Header {\n  return <Header text=\"Instagram\" />;\n}\ncomponent Layout(\n  header: renders Header,\n) {\n  return <div>{header}</div>;\n}\n\nfunction FunctionHeader(): renders Header {\n  return <InstagramHeader />;\n}\n\nfunction InstagramPage() {\n  return <Layout header={<FunctionHeader />} />; // OK!\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"subtyping-behavior",children:"Subtyping Behavior"}),"\n",(0,s.jsxs)(n.p,{children:["All render types are subtypes of ",(0,s.jsx)(n.code,{children:"React.Node"}),", and only ",(0,s.jsx)(n.code,{children:"renders Foo"})," is subtype of ",(0,s.jsx)(n.code,{children:"React.MixedElement"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Header() {\n return <h1>Hello Header!</h1>;\n}\n\ndeclare const rendersHeader: renders Header;\ndeclare const rendersMaybeHeader: renders? Header;\ndeclare const rendersHeaderList: renders* Header;\n\nrendersHeader as React.Node;\nrendersMaybeHeader as React.Node;\nrendersHeaderList as React.Node;\n\nrendersHeader as React.MixedElement;\nrendersMaybeHeader as React.MixedElement; // ERROR!\nrendersHeaderList as React.MixedElement; // ERROR!\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"renders Foo"})," is a subtype of ",(0,s.jsx)(n.code,{children:"renders? Foo"}),", and ",(0,s.jsx)(n.code,{children:"renders? Foo"})," is a subtype of ",(0,s.jsx)(n.code,{children:"renders* Foo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":15,"startColumn":1,"endLine":15,"endColumn":18,"description":"Cannot cast `rendersMaybeHeader` to renders `Header` because a value that renders nothing [1] does not render `Header` [2]. [incompatible-type]"},{"startLine":16,"startColumn":1,"endLine":16,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders `Header` because `$ReadOnlyArray` [1] does not render `Header` [2]. [incompatible-type]"},{"startLine":16,"startColumn":1,"endLine":16,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders `Header` because a value that renders nothing [1] does not render `Header` [2]. [incompatible-type]"},{"startLine":17,"startColumn":1,"endLine":17,"endColumn":17,"description":"Cannot cast `rendersHeaderList` to renders? `Header` because `$ReadOnlyArray` [1] does not render `Header` [2]. [incompatible-type]"}]',children:"import * as React from 'react';\n\ncomponent Header() {\n return <h1>Hello Header!</h1>;\n}\n\ndeclare const rendersHeader: renders Header;\ndeclare const rendersMaybeHeader: renders? Header;\ndeclare const rendersHeaderList: renders* Header;\n\nrendersHeader as renders? Header;\nrendersHeader as renders* Header;\nrendersMaybeHeader as renders* Header;\n\nrendersMaybeHeader as renders Header; // ERROR\nrendersHeaderList as renders Header; // ERROR\nrendersHeaderList as renders? Header; // ERROR\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);