"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2696],{2696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var s=t(73152),o=t(74848),r=t(28453);const i={title:"Announcing Disjoint Unions","short-title":"Disjoint Unions",author:"Avik Chaudhuri",hide_table_of_contents:!0},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Why we built this",id:"why-we-built-this",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Sometimes programs need to deal with different kinds of data all at once, where the shape of the data can be different based on what kind of data the code is looking at. This kind of programming is so common in functional programming languages that almost all such languages come with a way of:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Specifying such data by a set of disjoint cases, distinguished by \u201ctags\u201d, where each tag is associated with a different \u201crecord\u201d of properties. (These descriptions are called \u201cdisjoint union\u201d or \u201cvariant\u201d types.)"}),"\n",(0,o.jsx)(n.li,{children:"Doing case analysis on such data, by checking tags and then directly accessing the associated record of properties. (The common way to do such case analysis is by pattern matching.)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Examples of programs that analyze or transform such data range from compilers working with abstract syntax trees, to operations that may return exceptional values,  with much more in between!"}),"\n",(0,o.jsx)(n.p,{children:'As of Flow 0.13.1 it is now possible to program in this style in JavaScript in a type-safe manner. You can define a disjoint union of object types and do case analysis on objects of that type by switching on the value of some common property (called a "sentinel") in those object types.'}),"\n",(0,o.jsx)(n.p,{children:"Flow's syntax for disjoint unions looks like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'type BinaryTree =\n  { kind: "leaf", value: number } |\n  { kind: "branch", left: BinaryTree, right: BinaryTree }\n\nfunction sumLeaves(tree: BinaryTree): number {\n  if (tree.kind === "leaf") {\n    return tree.value;\n  } else {\n    return sumLeaves(tree.left) + sumLeaves(tree.right);\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"the-problem",children:"The problem"}),"\n",(0,o.jsx)(n.p,{children:"Consider the following function that returns different objects depending on the data passed into it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"type Result = { status: string, errorCode?: number }\n\nfunction getResult(op): Result {\n  var statusCode = op();\n  if (statusCode === 0) {\n    return { status: 'done' };\n  } else {\n    return { status: 'error', errorCode: statusCode };\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The result contains a ",(0,o.jsx)(n.code,{children:"status"})," property that is either ",(0,o.jsx)(n.code,{children:"'done'"})," or ",(0,o.jsx)(n.code,{children:"'error'"}),",\nand an optional ",(0,o.jsx)(n.code,{children:"errorCode"})," property that holds a numeric status code when the\n",(0,o.jsx)(n.code,{children:"status"})," is ",(0,o.jsx)(n.code,{children:"'error'"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"One may now try to write another function that gets the error code from a result:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function getErrorCode(result: Result): number {\n  switch (result.status) {\n    case 'error':\n      return result.errorCode;\n    default:\n      return 0;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Unfortunately, this code does not typecheck. The ",(0,o.jsx)(n.code,{children:"Result"})," type does not precisely\ncapture the relationship between the ",(0,o.jsx)(n.code,{children:"status"})," property and the ",(0,o.jsx)(n.code,{children:"errorCode"})," property.\nNamely it doesn't capture that when the ",(0,o.jsx)(n.code,{children:"status"})," property is ",(0,o.jsx)(n.code,{children:"'error'"}),", the ",(0,o.jsx)(n.code,{children:"errorCode"}),"\nproperty will be present and defined on the object. As a result, Flow thinks that\n",(0,o.jsx)(n.code,{children:"result.errorCode"})," in the above function may return ",(0,o.jsx)(n.code,{children:"undefined"})," instead of ",(0,o.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Prior to version 0.13.1 there was no way to express this relationship, which meant\nthat it was not possible to check the type safety of this simple, familiar idiom!"}),"\n",(0,o.jsx)(n.h2,{id:"the-solution",children:"The solution"}),"\n",(0,o.jsxs)(n.p,{children:["As of version 0.13.1 it is possible to write a more precise type for ",(0,o.jsx)(n.code,{children:"Result"}),"\nthat better captures the intent and helps Flow narrow down the possible shapes\nof an object based on the outcome of a dynamic ",(0,o.jsx)(n.code,{children:"==="})," check. Now, we can write:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javaScript",children:"type Result = Done | Error\ntype Done = { status: 'done' }\ntype Error = { status: 'error', errorCode: number }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In other words, we can explicitly list out the possible shapes of results. These\ncases are distinguished by the value of the ",(0,o.jsx)(n.code,{children:"status"})," property. Note that here\nwe use the string literal types ",(0,o.jsx)(n.code,{children:"'done'"})," and ",(0,o.jsx)(n.code,{children:"'error'"}),". These match exactly the strings\n",(0,o.jsx)(n.code,{children:"'done'"})," and ",(0,o.jsx)(n.code,{children:"'error'"}),", which means that ",(0,o.jsx)(n.code,{children:"==="})," checks on those values are enough for\nFlow to narrow down the corresponding type cases. With this additional reasoning, the\nfunction ",(0,o.jsx)(n.code,{children:"getErrorCode"})," now typechecks, without needing any changes to the code!"]}),"\n",(0,o.jsx)(n.p,{children:"In addition to string literals, Flow also supports number literals as singleton types\nso they can also be used in disjoint unions and case analyses."}),"\n",(0,o.jsx)(n.h2,{id:"why-we-built-this",children:"Why we built this"}),"\n",(0,o.jsxs)(n.p,{children:["Disjoint unions are at the heart of several good programming practices pervasive in functional programming languages. Supporting them in Flow means that JavaScript can use these practices in a type-safe manner. For example, disjoint unions can be used to write type-safe ",(0,o.jsx)(n.a,{href:"https://facebook.github.io/flux/docs/dispatcher.html",children:"Flux dispatchers"}),". They are also heavily used in a recently released ",(0,o.jsx)(n.a,{href:"https://github.com/graphql/graphql-js",children:"reference implementation of GraphQL"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},73152:e=>{e.exports=JSON.parse('{"permalink":"/blog/2015/07/03/Disjoint-Unions","source":"@site/blog/2015-07-03-Disjoint-Unions.md","title":"Announcing Disjoint Unions","description":"Sometimes programs need to deal with different kinds of data all at once, where the shape of the data can be different based on what kind of data the code is looking at. This kind of programming is so common in functional programming languages that almost all such languages come with a way of:","date":"2015-07-03T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Avik Chaudhuri","key":null,"page":null}],"frontMatter":{"title":"Announcing Disjoint Unions","short-title":"Disjoint Unions","author":"Avik Chaudhuri","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Version-0.14.0","permalink":"/blog/2015/07/29/Version-0.14.0"},"nextItem":{"title":"Announcing Bounded Polymorphism","permalink":"/blog/2015/03/12/Bounded-Polymorphism"}}')}}]);