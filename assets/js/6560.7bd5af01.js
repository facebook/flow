"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6560],{6560:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"libdefs/creation","title":"Creating Library Definitions","description":"Before spending the time to write your own libdef, we recommend that you look to","source":"@site/docs/libdefs/creation.md","sourceDirName":"libdefs","slug":"/libdefs/creation","permalink":"/en/docs/libdefs/creation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/libdefs/creation.md","tags":[],"version":"current","frontMatter":{"title":"Creating Library Definitions","slug":"/libdefs/creation"},"sidebar":"docsSidebar","previous":{"title":"Library Definitions","permalink":"/en/docs/libdefs"},"next":{"title":"Error Suppressions","permalink":"/en/docs/errors"}}');var l=o(74848),r=o(28453),s=o(86543);const a={title:"Creating Library Definitions",slug:"/libdefs/creation"},i=void 0,d={},c=[{value:"Declaring A Global Function",id:"toc-declaring-a-global-function",level:2},{value:"Declaring A Global Class",id:"toc-declaring-a-global-class",level:2},{value:"Declaring A Global Variable",id:"toc-declaring-a-global-variable",level:2},{value:"Declaring A Global Type",id:"toc-declaring-a-global-type",level:2},{value:"Declaring A Global Namespace",id:"toc-declaring-a-global-namespace",level:2},{value:"Declaring A Module",id:"toc-declaring-a-module",level:2},{value:"Declaring a module in the <code>@flowtyped</code> directory  <SinceVersion></SinceVersion>",id:"toc-declaring-a-module-in-at-flowtyped",level:3},{value:"Declaring a module in the global namespace",id:"toc-declaring-a-module-globally",level:3},{value:"Declaring An ES Module",id:"toc-declaring-an-es-module",level:4},{value:"Named Exports",id:"toc-named-exports",level:6},{value:"Default Exports",id:"toc-default-exports",level:6},{value:"Declaring A CommonJS Module",id:"toc-declaring-a-commonjs-module",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h6:"h6",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Before spending the time to write your own libdef, we recommend that you look to\nsee if there is already a libdef for the third-party code that you're addressing.\n",(0,l.jsx)(n.code,{children:"flow-typed"})," is a ",(0,l.jsx)(n.a,{href:"https://github.com/flowtype/flow-typed/",children:"tool and repository"}),"\nfor sharing common libdefs within the Flow community -- so it's a good way to\nknock out a good chunk of any public libdefs you might need for your project."]}),"\n",(0,l.jsxs)(n.p,{children:["However sometimes there isn't a pre-existing libdef or you have third-party\ncode that isn't public and/or you really just need to write a libdef yourself.\nTo do this you'll start by creating a ",(0,l.jsx)(n.code,{children:".js"})," file for each libdef you're going to\nwrite and put them in the ",(0,l.jsx)(n.code,{children:"/flow-typed"})," directory at the root of your project.\nIn these libdef file(s) you'll use a special set of Flow syntax (explained\nbelow) to describe the interfaces of the relevant third-party code."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-global-function",children:"Declaring A Global Function"}),"\n",(0,l.jsxs)(n.p,{children:["To declare a global function that should be accessible throughout your project,\nuse the ",(0,l.jsx)(n.code,{children:"declare function"})," syntax in a libdef file:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myLibDef.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"declare function foo(a: number): string;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This tells Flow that any code within the project can reference the\n",(0,l.jsx)(n.code,{children:"foo"})," global function, and that the function takes one argument (a ",(0,l.jsx)(n.code,{children:"number"}),") and\nit returns a ",(0,l.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-global-class",children:"Declaring A Global Class"}),"\n",(0,l.jsxs)(n.p,{children:["To declare a global class that should be accessible throughout your project,\nuse the ",(0,l.jsx)(n.code,{children:"declare class"})," syntax in a libdef file:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myLibDef.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"declare class URL {\n  constructor(urlStr: string): URL;\n  toString(): string;\n\n  static compare(url1: URL, url2: URL): boolean;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This tells Flow that any code within the project can reference the ",(0,l.jsx)(n.code,{children:"URL"})," global\nclass. Note that this class definition does not have any implementation details\n-- it exclusively defines the interface of the class."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-global-variable",children:"Declaring A Global Variable"}),"\n",(0,l.jsxs)(n.p,{children:["To declare a global variable that should be accessible throughout your project,\nuse the ",(0,l.jsx)(n.code,{children:"declare var"}),", ",(0,l.jsx)(n.code,{children:"declare let"}),", or ",(0,l.jsx)(n.code,{children:"declare const"})," syntax in a libdef file:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myLibDef.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"declare const PI: number;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This tells Flow that any code within the project can reference the ",(0,l.jsx)(n.code,{children:"PI"})," global\nvariable -- which, in this case, is a ",(0,l.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-global-type",children:"Declaring A Global Type"}),"\n",(0,l.jsxs)(n.p,{children:["To declare a global type that should be accessible throughout your project,\nuse the ",(0,l.jsx)(n.code,{children:"declare type"})," syntax in a libdef file:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myLibDef.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"declare type UserID = number;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This tells Flow that any code within the project can reference the ",(0,l.jsx)(n.code,{children:"UserID"}),"\nglobal type -- which, in this case, is just an alias for ",(0,l.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-global-namespace",children:"Declaring A Global Namespace"}),"\n",(0,l.jsx)(n.p,{children:"A namespace defines a collection of values and types:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":1,"endLine":6,"endColumn":7,"description":"Cannot cast `Foo.bar` to `Baz` because string [1] is incompatible with number [2]. [incompatible-type]"}]',children:"declare namespace Foo {\n  declare const bar: string;\n  type Baz = number;\n}\n\nFoo.bar as Foo.Baz; // error\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To declare a global namespace that should be accessible throughout your project,\nuse the ",(0,l.jsx)(n.code,{children:"declare namespace"})," syntax in a libdef file:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myLibDef.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"declare namespace Foo {\n  declare const bar: string;\n  type Baz = number;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This tells Flow that any code within the project can reference the ",(0,l.jsx)(n.code,{children:"Foo"})," global\nnamespace."]}),"\n",(0,l.jsx)(n.p,{children:"If a declared namespace only contains type declarations, then the namespace itself\ncan only be used in a type context."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/myTypeOnlyNamespace.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":1,"endLine":5,"endColumn":11,"description":"Cannot use type-only namespace `TypeOnlyFoo` [1] as a value. Type-only namespaces are erased and don\'t exist at runtime. [type-as-value]"}]',children:"declare namespace TypeOnlyFoo {\n  type Baz = number;\n}\n\nTypeOnlyFoo; // error\ntype T = TypeOnlyFoo.Baz; // ok\n"})}),"\n",(0,l.jsx)(n.h2,{id:"toc-declaring-a-module",children:"Declaring A Module"}),"\n",(0,l.jsx)(n.p,{children:"Often, third-party code is organized in terms of modules rather than globals.\nFlow offers two different ways to declare a module."}),"\n",(0,l.jsxs)(n.h3,{id:"toc-declaring-a-module-in-at-flowtyped",children:["Declaring a module in the ",(0,l.jsx)(n.code,{children:"@flowtyped"})," directory  ",(0,l.jsx)(s.V,{version:"0.251.0"})]}),"\n",(0,l.jsxs)(n.p,{children:["Since v0.251.0, Flow has added support for easily declaring third-party modules in the\n",(0,l.jsx)(n.code,{children:"@flowtyped"})," directory at the root of the project. Before looking into ",(0,l.jsx)(n.code,{children:"node_modules"})," for\nthe module specifier ",(0,l.jsx)(n.code,{children:"foo/bar/baz"}),", Flow will look into ",(0,l.jsx)(n.code,{children:"@flowtyped/foo/bar/baz.js.flow"})," and\n",(0,l.jsx)(n.code,{children:"@flowtyped/foo/bar/baz/index.js.flow"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["For example, if you want to declare the types for ",(0,l.jsx)(n.code,{children:"react"}),", you can do:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:'title="@flowtyped/react.js.flow"',children:"export type SetStateFunction<S> = ((S => S) | S) => void;\ndeclare export function useState<S>(initial: S): [S, SetStateFunction<S>];\n\n// Other stuff...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["which will allow you to import these functions and types from ",(0,l.jsx)(n.code,{children:"react"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:'title="foo/bar/baz/my-product-code.jsx"',children:"import * as React from 'react';\n\nfunction MyComponent({onSelect}: {onSelect: React.SetStateFunction<string>}) {\n  const [a, setA] = React.useState(new Set<string>());\n  return <div />;\n}\n// Other stuff...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you want to declare the types for a scoped package like ",(0,l.jsx)(n.code,{children:"@my-company/library-a"}),", you can do"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:'title="@flowtyped/@my-company/library-a.js.flow"',children:"declare export const foo: string;\ndeclare export const bar: number;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you want to declare the types for a deeply nested module in a package like\n",(0,l.jsx)(n.code,{children:"react-native/internals/foo"}),", you can do:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:'title="@flowtyped/react-native/internals/foo.js.flow"',children:"declare export const SECRET_INTERNALS_Foo: {...};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This approach is preferable to the approach described ",(0,l.jsx)(n.a,{href:"#toc-declaring-a-module-globally",children:"below"}),",\nbecause editing these files will not trigger a restart of Flow server."]}),"\n",(0,l.jsx)(n.h3,{id:"toc-declaring-a-module-globally",children:"Declaring a module in the global namespace"}),"\n",(0,l.jsxs)(n.p,{children:["You can also declare modules using the ",(0,l.jsx)(n.code,{children:"declare module"})," syntax:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"declare module \"some-third-party-library\" {\n  // This is where we'll list the module's exported interface(s)\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The name specified in quotes after ",(0,l.jsx)(n.code,{children:"declare module"})," can be any string, but it\nshould correspond to the same string you'd use to ",(0,l.jsx)(n.code,{children:"require"})," or ",(0,l.jsx)(n.code,{children:"import"})," the\nthird-party module into your project. For defining modules that are accessed via\na relative ",(0,l.jsx)(n.code,{children:"require"}),"/",(0,l.jsx)(n.code,{children:"import"})," path, please see the docs on the ",(0,l.jsxs)(n.a,{href:"../../declarations",children:[(0,l.jsx)(n.code,{children:".flow"})," files"]})]}),"\n",(0,l.jsxs)(n.p,{children:["Within the body of a ",(0,l.jsx)(n.code,{children:"declare module"})," block, you can specify the set of exports\nfor that module. However, before we start talking about exports we have to talk\nabout the two kinds of modules that Flow supports: CommonJS and ES modules."]}),"\n",(0,l.jsxs)(n.p,{children:["Flow can handle both CommonJS and ES modules, but there are some relevant\ndifferences between the two that need to be considered when using\n",(0,l.jsx)(n.code,{children:"declare module"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"toc-declaring-an-es-module",children:"Declaring An ES Module"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export",children:"ES modules"}),"\nhave two kinds of exports: A ",(0,l.jsx)(n.strong,{children:"named"})," export and a ",(0,l.jsx)(n.strong,{children:"default"})," export. Flow supports the ability\nto declare either or both of these kinds of exports within a ",(0,l.jsx)(n.code,{children:"declare module"})," body as follows:"]}),"\n",(0,l.jsx)(n.h6,{id:"toc-named-exports",children:"Named Exports"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/some-es-module.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'declare module "some-es-module" {\n  // Declares a named "concatPath" export\n  declare export function concatPath(dirA: string, dirB: string): string;\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Note that you can also declare other things inside the body of the\n",(0,l.jsx)(n.code,{children:"declare module"}),", and those things will be scoped to the body of the\n",(0,l.jsx)(n.code,{children:"declare module"})," -- ",(0,l.jsx)(n.strong,{children:"but they will not be exported from the module"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/some-es-module.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'declare module "some-es-module" {\n  // Defines the type of a Path class within this `declare module` body, but\n  // does not export it. It can only be referenced by other things inside the\n  // body of this `declare module`\n  declare class Path {\n    toString(): string;\n  }\n\n  // Declares a named "concatPath" export which returns an instance of the\n  // `Path` class (defined above)\n  declare export function concatPath(dirA: string, dirB: string): Path;\n}\n'})}),"\n",(0,l.jsx)(n.h6,{id:"toc-default-exports",children:"Default Exports"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/some-es-module.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'declare module "some-es-module" {\n  declare class URL {\n    constructor(urlStr: string): URL;\n    toString(): string;\n\n    static compare(url1: URL, url2: URL): boolean;\n  }\n\n  // Declares a default export whose type is `typeof URL`\n  declare export default typeof URL;\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["It is also possible to declare both ",(0,l.jsx)(n.strong,{children:"named"})," and ",(0,l.jsx)(n.strong,{children:"default"})," exports in the\nsame ",(0,l.jsx)(n.code,{children:"declare module"})," body."]}),"\n",(0,l.jsx)(n.h4,{id:"toc-declaring-a-commonjs-module",children:"Declaring A CommonJS Module"}),"\n",(0,l.jsxs)(n.p,{children:["CommonJS modules have a single value that is exported (the ",(0,l.jsx)(n.code,{children:"module.exports"}),"\nvalue). To describe the type of this single value within a ",(0,l.jsx)(n.code,{children:"declare module"}),"\nbody, you'll use the ",(0,l.jsx)(n.code,{children:"declare module.exports"})," syntax:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/some-commonjs-module.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'declare module "some-commonjs-module" {\n  // The export of this module is an object with a "concatPath" method\n  declare module.exports: {\n    concatPath(dirA: string, dirB: string): string;\n  };\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Note that you can also declare other things inside the body of the\n",(0,l.jsx)(n.code,{children:"declare module"}),", and those things will be scoped to the body of the\n",(0,l.jsx)(n.code,{children:"declare module"}),", ",(0,l.jsx)(n.strong,{children:"but they will not be exported from the module"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"flow-typed/some-commonjs-module.js"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'declare module "some-commonjs-module" {\n  // Defines the type of a Path class within this `declare module` body, but\n  // does not export it. It can only be referenced by other things inside the\n  // body of this `declare module`\n  declare class Path {\n    toString(): string;\n  }\n\n  // The "concatPath" function now returns an instance of the `Path` class\n  // (defined above).\n  declare module.exports: {\n    concatPath(dirA: string, dirB: string): Path\n  };\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["NOTE: Because a given module cannot be both an ES module and a CommonJS module,\nit is an error to mix ",(0,l.jsx)(n.code,{children:"declare export [...]"})," with\n",(0,l.jsx)(n.code,{children:"declare module.exports: ..."})," in the same ",(0,l.jsx)(n.code,{children:"declare module"})," body."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(96540);const l={},r=t.createContext(l);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},86543:(e,n,o)=>{o.d(n,{V:()=>l,v:()=>r});o(96540);var t=o(74848);function l(e){let{version:n}=e;return(0,t.jsxs)("span",{class:"version added",title:`Added in ${n}`,children:["\u2265",n]})}function r(e){let{version:n}=e;return(0,t.jsxs)("span",{class:"version removed",title:`Removed after ${n}`,children:["\u2264",n]})}}}]);