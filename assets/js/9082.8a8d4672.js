"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9082],{19082:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>p,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"react/component-types","title":"Component Types","description":"Component Types are only available in Flow v0.243.0+. If you are on an older version, please use React.AbstractComponent","source":"@site/docs/react/component-types.md","sourceDirName":"react","slug":"/react/component-types","permalink":"/en/docs/react/component-types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/react/component-types.md","tags":[],"version":"current","frontMatter":{"title":"Component Types","slug":"/react/component-types"},"sidebar":"docsSidebar","previous":{"title":"Hook Syntax","permalink":"/en/docs/react/hook-syntax"},"next":{"title":"Function/Class Components","permalink":"/en/docs/react/function-and-class-components"}}');var r=o(74848),s=o(28453);const p={title:"Component Types",slug:"/react/component-types"},a=void 0,c={},i=[{value:"Specifying Props",id:"specifying-props",level:2},{value:"Specifying Render Types",id:"specifying-render-types",level:2},{value:"Polymorphic Component Types",id:"polymorphic-component-types",level:2},{value:"Annotating Components with Component Types",id:"annotating-components-with-component-types",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Component Types are only available in Flow v0.243.0+. If you are on an older version, please use ",(0,r.jsx)(n.a,{href:"../types#toc-react-abstractcomponent",children:"React.AbstractComponent"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Component Types have syntax similar to our runtime ",(0,r.jsx)(n.a,{href:"../component-syntax",children:"Component Syntax"})," to make it easy to describe\nthe type of a component. Component Types are most useful for writing library definitions."]}),"\n",(0,r.jsx)(n.h2,{id:"specifying-props",children:"Specifying Props"}),"\n",(0,r.jsxs)(n.p,{children:["To declare a Component Type you can use the ",(0,r.jsx)(n.code,{children:"component"})," keyword and list out the props your component expects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ntype ComponentType = component(numberProp: number, optionalProp?: string);\n\ndeclare const Component: ComponentType;\n\n<Component numberProp={3} />; // OK! optionalProp is optional\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Like ",(0,r.jsx)(n.a,{href:"../component-syntax/#rest-parameters",children:"Component Syntax"}),", Component Types also accept a rest parameter:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\n\nimport type {Props as StarProps} from './Star';\nimport Star from './Star';\n\ntype BlueStarType = component(specificProp: string, ...StarProps);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Like Component Syntax, you can also declare an inline ref prop (but not in your rest parameter):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\nimport {useRef} from 'react';\n\ntype ComponentWithRef = component(someProp: number, ref: React.RefSetter<number>);\n\ndeclare const Component: ComponentWithRef;\n\ncomponent Example() {\n    const ref = useRef<number | null>(null);\n    return <Component someProp={42} ref={ref}/>;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"specifying-render-types",children:"Specifying Render Types"}),"\n",(0,r.jsxs)(n.p,{children:["You can also specify the ",(0,r.jsx)(n.a,{href:"../render-types",children:"Render Type"})," for your component just like you can with\n",(0,r.jsx)(n.a,{href:"../render-types/#basic-behavior",children:"Component Syntax"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Foo() { return null }\ntype ComponentWithRenders = component() renders Foo;\n\ndeclare const Component: ComponentWithRenders;\n<Component /> as renders Foo; // OK!\n"})}),"\n",(0,r.jsx)(n.h2,{id:"polymorphic-component-types",children:"Polymorphic Component Types"}),"\n",(0,r.jsx)(n.p,{children:'You can also write polymorphic Component Types, which is helpful for declaring "transparent" components:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ndeclare const TransparentComponent: component<T: React.Node>(children: T) renders T;\n\ncomponent Example() { return null }\n\nconst element: renders Example = (\n    <TransparentComponent>\n        <Example />\n    </TransparentComponent>\n); // OK!\n"})}),"\n",(0,r.jsx)(n.h2,{id:"annotating-components-with-component-types",children:"Annotating Components with Component Types"}),"\n",(0,r.jsx)(n.p,{children:"Here's how you can describe the type of a Component Syntax component using a Component Type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\ncomponent Foo() { return null }\n\ncomponent Example(someProp: number, ref: React.RefSetter<number>) renders Foo {\n    return <Foo />;\n}\n\nExample as component(someProp: number, ref: React.RefSetter<number>) renders Foo; // OK!\n\n\ncomponent PolymorphicExample<T: React.Node>(children: T) renders T {\n    return children;\n}\n\nPolymorphicExample as component<T: React.Node>(children: T) renders T; // OK!\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>p,x:()=>a});var t=o(96540);const r={},s=t.createContext(r);function p(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:p(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);