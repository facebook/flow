"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2480],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var t=s(96540);const i={},a=t.createContext(i);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:n},e.children)}},62480:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"enums/index","title":"Flow Enums","description":"Define a fixed set of constants which create their own type. Exhaustively checked in switch statements.","source":"@site/docs/enums/index.md","sourceDirName":"enums","slug":"/enums","permalink":"/en/docs/enums","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/enums/index.md","tags":[],"version":"current","frontMatter":{"title":"Flow Enums","description":"Define a fixed set of constants which create their own type. Exhaustively checked in switch statements.","slug":"/enums"},"sidebar":"docsSidebar","previous":{"title":"Type Reference","permalink":"/en/docs/react/types"},"next":{"title":"Enabling enums in your project","permalink":"/en/docs/enums/enabling-enums"}}');var i=s(74848),a=s(28453);const c={title:"Flow Enums",description:"Define a fixed set of constants which create their own type. Exhaustively checked in switch statements.",slug:"/enums"},o=void 0,r={},u=[{value:"Benefits",id:"toc-benefits",level:2},{value:"Quickstart",id:"toc-quickstart",level:2},{value:"Defining enums",id:"toc-defining-enums-defining-enums",level:4},{value:"Using enums",id:"toc-using-enums-using-enums",level:4},{value:"When to use Flow Enums",id:"toc-when-to-use-flow-enums",level:2},{value:"When to not use Flow Enums",id:"toc-when-to-not-use-flow-enums",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Flow Enums define a fixed set of constants which create their own type."}),"\n",(0,i.jsx)(n.p,{children:"Unlike other features of Flow, Flow Enums exist as values at runtime, as well as existing as types."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"./enabling-enums/",children:"Read how to enable Flow Enums in your project"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"toc-benefits",children:"Benefits"}),"\n",(0,i.jsx)(n.p,{children:"Enums provide several benefits over existing patterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reduce repetition: Enum declarations provide both the type and the value of the enum."}),"\n",(0,i.jsx)(n.li,{children:"Improve Flow performance: Enums are guaranteed to have good type-checking performance,\nunlike unions which may be expensive to type-check in certain situations."}),"\n",(0,i.jsxs)(n.li,{children:["Enable new functionality: Enums come with a ",(0,i.jsx)(n.code,{children:"cast"})," ",(0,i.jsx)(n.a,{href:"./using-enums/#toc-methods",children:"method"}),", which converts from a primitive type to an enum type safely."]}),"\n",(0,i.jsxs)(n.li,{children:["Enhance safety: Enums define their own type which does not implicitly coerce to and from other types (e.g. from ",(0,i.jsx)(n.code,{children:"string"}),"s),\nand are required to be ",(0,i.jsx)(n.a,{href:"./using-enums/#toc-exhaustively-checking-enums-with-a-switch",children:"exhaustively checked in switch statements"}),". These properties can help prevent logic bugs."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"toc-quickstart",children:"Quickstart"}),"\n",(0,i.jsx)(n.h4,{id:"toc-defining-enums-defining-enums",children:(0,i.jsx)(n.a,{href:"./defining-enums",children:"Defining enums"})}),"\n",(0,i.jsxs)(n.p,{children:["An enum named ",(0,i.jsx)(n.code,{children:"Status"})," with three members: ",(0,i.jsx)(n.code,{children:"Active"}),", ",(0,i.jsx)(n.code,{children:"Paused"}),", and ",(0,i.jsx)(n.code,{children:"Off"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"enum Status {\n  Active,\n  Paused,\n  Off,\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"By default, enums define members with string values which mirror their names. You can also explicitly set values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"enum Status {\n  Active = 'active',\n  Paused = 'paused',\n  Off = 'off',\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can use numbers as well:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"enum Status {\n  Active = 1,\n  Paused = 2,\n  Off = 3,\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Values must be unique, literals, and all of the same type. Check out the ",(0,i.jsx)(n.a,{href:"./defining-enums/",children:"full docs on defining enums"})," to learn more."]}),"\n",(0,i.jsx)(n.h4,{id:"toc-using-enums-using-enums",children:(0,i.jsx)(n.a,{href:"./using-enums/",children:"Using enums"})}),"\n",(0,i.jsx)(n.p,{children:"To access an enum member, use dot access:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Status.Active\n"})}),"\n",(0,i.jsx)(n.p,{children:"To use the enum type as an annotation, use the enum name:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const status: Status = Status.Active;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Cast from the representation type (in this case, a ",(0,i.jsx)(n.code,{children:"string"}),") to the enum type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const status: Status | void = Status.cast(someString);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can easily provide a default value with the ",(0,i.jsx)(n.code,{children:"??"})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const status: Status = Status.cast(someString) ?? Status.Off;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Read more about the  ",(0,i.jsx)(n.a,{href:"./using-enums/#toc-methods",children:"other methods enums provide"}),", including ",(0,i.jsx)(n.code,{children:"isValid"}),", ",(0,i.jsx)(n.code,{children:"members"}),", and ",(0,i.jsx)(n.code,{children:"getName"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Cast an enum type to its representation type (must be done explicitly):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"status as string\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Checks of enums in ",(0,i.jsx)(n.code,{children:"switch"})," statements are exhaustive - we ensure you check all members:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":9,"startColumn":9,"endLine":9,"endColumn":14,"description":"Incomplete exhaustive check: the member `Off` of enum `Status` [1] has not been considered in check of `status`. [invalid-exhaustive-check]"}]',children:"enum Status {\n  Active,\n  Paused,\n  Off,\n}\nconst status: Status = Status.Active;\n\n// ERROR: Incomplete exhaustive check\nswitch (status) {\n  case Status.Active:  break;\n  case Status.Paused: break;\n  // We forgot to add `case: Status.Off:` here, resulting in error above.\n  // Using `default:` would also work to check all remaining members.\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Read more about ",(0,i.jsx)(n.a,{href:"./using-enums/#toc-exhaustively-checking-enums-with-a-switch",children:"exhaustively checking enums"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Check out the ",(0,i.jsx)(n.a,{href:"./using-enums/",children:"the full docs on using enums"})," to learn more."]}),"\n",(0,i.jsx)(n.h2,{id:"toc-when-to-use-flow-enums",children:"When to use Flow Enums"}),"\n",(0,i.jsx)(n.p,{children:"If you previously defined a union type of literals, you can use an enum to define that type instead. Instead of"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type Status =\n  | 'Active'\n  | 'Paused'\n  | 'Off';\n\nconst x: Status = 'Active';\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const Status = Object.freeze({\n  Active: 'Active',\n  Paused: 'Paused',\n  Off: 'Off',\n});\ntype StatusType = $Keys<typeof Status>;\nconst x: StatusType = Status.Active;\n"})}),"\n",(0,i.jsx)(n.p,{children:"you can use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"enum Status {\n  Active,\n  Paused,\n  Off,\n}\nconst x: Status = Status.Active;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"./migrating-legacy-patterns",children:"migrating from legacy patterns"})," to learn more about migrating legacy JavaScript enum patterns to Flow Enums."]}),"\n",(0,i.jsx)(n.h2,{id:"toc-when-to-not-use-flow-enums",children:"When to not use Flow Enums"}),"\n",(0,i.jsxs)(n.p,{children:["Enums are designed to cover many use cases and exhibit certain benefits. The design makes a variety of trade-offs to make this happen, and in certain situations,\nthese trade-offs might not be right for you. In those cases, you can continue to use existing patterns to satisfy your use cases.\n",(0,i.jsx)(n.a,{href:"./using-enums/#toc-when-to-not-use-enums",children:"Read more about those situations"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);