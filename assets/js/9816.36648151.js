"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9816],{19816:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>a});var n=o(40303),s=o(74848),i=o(28453);const r={title:"Announcing Flow Comments","short-title":"Flow Comments",author:"Gabe Levi",hide_table_of_contents:!0},l=void 0,c={authorsImageUrls:[void 0]},a=[];function u(e){const t={a:"a",code:"code",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["As of Flow 0.4.0, you can put your Flow-specific syntax in special comments. If you use these special comments then you do not need to transform away Flow-specific syntax before running your code. While we strongly recommend that you write your code without the special comments, this feature will help people who can't fit a Flow-stripping transformation into their setup. This was one of our ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/flow/issues/3",children:"most requested features"})," and hopefully it will enable even more people to use Flow!"]}),"\n",(0,s.jsxs)(t.p,{children:["This feature introduces 3 special comments: ",(0,s.jsx)(t.code,{children:"/*:"}),", ",(0,s.jsx)(t.code,{children:"/*::"}),", and ",(0,s.jsx)(t.code,{children:"/*flow-include"}),". Flow will read the code inside these special comments and treat the code as if the special comment tokens didn't exist. These special comments are valid JavaScript block comments, so your JavaScript engine will ignore the code inside the comments."]})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>l});var n=o(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},40303:e=>{e.exports=JSON.parse('{"permalink":"/blog/2015/02/20/Flow-Comments","source":"@site/blog/2015-02-20-Flow-Comments.md","title":"Announcing Flow Comments","description":"As of Flow 0.4.0, you can put your Flow-specific syntax in special comments. If you use these special comments then you do not need to transform away Flow-specific syntax before running your code. While we strongly recommend that you write your code without the special comments, this feature will help people who can\'t fit a Flow-stripping transformation into their setup. This was one of our most requested features and hopefully it will enable even more people to use Flow!","date":"2015-02-20T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Gabe Levi","key":null,"page":null}],"frontMatter":{"title":"Announcing Flow Comments","short-title":"Flow Comments","author":"Gabe Levi","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Announcing Bounded Polymorphism","permalink":"/blog/2015/03/12/Bounded-Polymorphism"},"nextItem":{"title":"Announcing Import Type","permalink":"/blog/2015/02/18/Import-Types"}}')}}]);