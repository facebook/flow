"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[139],{139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"react/function-and-class-components","title":"Function/Class Components","description":"Adding Flow types to your React components is incredibly powerful. After typing","source":"@site/docs/react/function-and-class-components.md","sourceDirName":"react","slug":"/react/function-and-class-components","permalink":"/en/docs/react/function-and-class-components","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/react/function-and-class-components.md","tags":[],"version":"current","frontMatter":{"title":"Function/Class Components","slug":"/react/function-and-class-components"},"sidebar":"docsSidebar","previous":{"title":"Component Types","permalink":"/en/docs/react/component-types"},"next":{"title":"Event Handling","permalink":"/en/docs/react/events"}}');var s=t(74848),a=t(28453);const r={title:"Function/Class Components",slug:"/react/function-and-class-components"},c=void 0,i={},d=[{value:"Functional Components",id:"toc-functional-components",level:2},{value:"Adding Default Props to Functional Components",id:"toc-adding-default-props-to-functional-components",level:3},{value:"Class Components",id:"toc-class-components",level:2},{value:"Adding State",id:"toc-adding-state",level:3},{value:"Using Default Props for Class Components",id:"toc-using-default-props-for-class-components",level:3}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Adding Flow types to your ",(0,s.jsx)(n.a,{href:"https://react.dev/learn/your-first-component",children:"React components"})," is incredibly powerful. After typing\nyour component, Flow will statically ensure that you are using the component in\nthe way it was designed to be used."]}),"\n",(0,s.jsx)(n.h2,{id:"toc-functional-components",children:"Functional Components"}),"\n",(0,s.jsxs)(n.p,{children:["Adding Flow types to a functional component is the same as ",(0,s.jsx)(n.a,{href:"../../types/functions/",children:"adding types to a standard function"}),".\nJust create an object type for the props and Flow will ensure that the props passed to the component match up with what is expected."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":9,"startColumn":9,"endLine":9,"endColumn":20,"description":"Cannot get `props.doesNotExist` because property `doesNotExist` is missing in `Props` [1]. [prop-missing]"}]',children:"import React from 'react';\n\ntype Props = {\n  foo: number,\n  bar?: string,\n};\n\nfunction MyComponent(props: Props) {\n  props.doesNotExist; // Error! You did not define a `doesNotExist` prop.\n\n  return <div>{props.bar}</div>;\n}\n\n<MyComponent foo={42} />\n"})}),"\n",(0,s.jsx)(n.h3,{id:"toc-adding-default-props-to-functional-components",children:"Adding Default Props to Functional Components"}),"\n",(0,s.jsxs)(n.p,{children:["A nice pattern to add default props to functional components is to use\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment/#default_value",children:"destructuring with default values"}),".\nBy destructuring the props in the function parameter, you can assign a value to any props that are not passed\nto the component (or passed with the value ",(0,s.jsx)(n.code,{children:"undefined"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import React from 'react';\n\ntype Props = {\n  foo?: number, // foo is optional to pass in.\n  bar: string, // bar is required.\n};\n\nfunction MyComponent({foo = 42, bar}: Props) {\n  // Flow knows that foo is not null or undefined\n  const baz = foo + 1;\n}\n\n// And we don't need to include foo.\n<MyComponent bar={\"abc\"} />;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"toc-class-components",children:"Class Components"}),"\n",(0,s.jsxs)(n.p,{children:["To Flowify a ",(0,s.jsx)(n.a,{href:"https://react.dev/reference/react/Component#defining-a-class-component",children:"class component"}),", the type of the props can be passed as the first\nargument to the ",(0,s.jsx)(n.code,{children:"React.Component"})," type. This will have the same effect as adding types\nto the ",(0,s.jsx)(n.code,{children:"props"})," parameter of a function component."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":10,"startColumn":16,"endLine":10,"endColumn":27,"description":"Cannot get `this.props.doesNotExist` because property `doesNotExist` is missing in `Props` [1]. [prop-missing]"}]',children:"import React from 'react';\n\ntype Props = {\n  foo: number,\n  bar?: string,\n};\n\nclass MyComponent extends React.Component<Props> {\n  render(): React.Node {\n    this.props.doesNotExist; // Error! You did not define a `doesNotExist` prop.\n\n    return <div>{this.props.bar}</div>;\n  }\n}\n\n<MyComponent foo={42} />;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now wherever we use ",(0,s.jsx)(n.code,{children:"this.props"})," in our React component Flow will treat it as\nthe ",(0,s.jsx)(n.code,{children:"Props"})," type we defined."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," If you don't need to use the ",(0,s.jsx)(n.code,{children:"Props"})," type again you could also\ndefine it inline: ",(0,s.jsx)(n.code,{children:"extends React.Component<{ foo: number, bar?: string }>"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"React.Component<Props, State>"})," is a ",(0,s.jsx)(n.a,{href:"../../types/generics",children:"generic type"})," that takes two type\narguments: props and state. The second type argument, ",(0,s.jsx)(n.code,{children:"State"}),", is optional. By\ndefault it is ",(0,s.jsx)(n.code,{children:"undefined"})," so you can see in the example above we did not include\n",(0,s.jsx)(n.code,{children:"State"}),". We will learn more about state in the next section..."]}),"\n",(0,s.jsx)(n.h3,{id:"toc-adding-state",children:"Adding State"}),"\n",(0,s.jsxs)(n.p,{children:["To add a type for state to your React class component: create a new object\ntype, in the example below we name it ",(0,s.jsx)(n.code,{children:"State"}),", and pass it as the second type\nargument to ",(0,s.jsx)(n.code,{children:"React.Component"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import React from 'react';\n\ntype Props = { /* ... */ };\n\ntype State = {\n  count: number,\n};\n\nclass MyComponent extends React.Component<Props, State> {\n  state: State = {\n    count: 0,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(prevState => ({\n        count: prevState.count + 1,\n      }));\n    }, 1000);\n  }\n\n  render(): React.Node {\n    return <div>Count: {this.state.count}</div>;\n  }\n}\n\n<MyComponent />;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above we are using a ",(0,s.jsxs)(n.a,{href:"https://react.dev/reference/react/Component#setstate",children:["React ",(0,s.jsx)(n.code,{children:"setState()"})," updater function"]}),"\nbut you could also pass a partial state object to ",(0,s.jsx)(n.code,{children:"setState()"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," If you don't need to use the ",(0,s.jsx)(n.code,{children:"State"})," type again you could also\ndefine it inline: ",(0,s.jsx)(n.code,{children:"extends React.Component<{}, { count: number }>"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"toc-using-default-props-for-class-components",children:"Using Default Props for Class Components"}),"\n",(0,s.jsxs)(n.p,{children:["React supports the notion of ",(0,s.jsx)(n.code,{children:"defaultProps"})," which you can think of as default\nfunction arguments. When you create an element and do not include a prop\nwhich has a default then React will substitute that prop with its corresponding\nvalue from ",(0,s.jsx)(n.code,{children:"defaultProps"}),". Flow supports this notion as well. To type default\nprops add a ",(0,s.jsx)(n.code,{children:"static defaultProps"})," property to your class."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import React from 'react';\n\ntype Props = {\n  foo: number, // foo is required.\n  bar: string, // bar is required.\n};\n\nclass MyComponent extends React.Component<Props> {\n  static defaultProps: {foo: number} = {\n    foo: 42, // ...but we have a default prop for foo.\n  };\n}\n\n// So we don't need to include foo.\n<MyComponent bar={\"abc\"} />\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," You don't need to make ",(0,s.jsx)(n.code,{children:"foo"})," nullable in your ",(0,s.jsx)(n.code,{children:"Props"})," type. Flow\nwill make sure that ",(0,s.jsx)(n.code,{children:"foo"})," is optional if you have a default prop for ",(0,s.jsx)(n.code,{children:"foo"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you add a type annotation to ",(0,s.jsx)(n.code,{children:"defaultProps"})," you can define the type as"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type DefaultProps = {\n  foo: number,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and spread that into the ",(0,s.jsx)(n.code,{children:"Props"})," type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"type Props = {\n  ...DefaultProps,\n  bar: string,\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"This way you avoid duplicating the properties that happen to have a default value."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," You can also apply this format of default props to functional components\nby adding a ",(0,s.jsx)(n.code,{children:"defaultProps"})," property to a the component function. However, it is generally\nsimpler to use the destructuring pattern described above."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function MyComponent(props: {foo: number}) {}\nMyComponent.defaultProps = {foo: 42};\n"})}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const s={},a=o.createContext(s);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);