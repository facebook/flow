"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1430],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},51430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"lang/variables","title":"Variable Declarations","description":"When you are declaring a new variable, you may optionally declare its type.","source":"@site/docs/lang/variables.md","sourceDirName":"lang","slug":"/lang/variables","permalink":"/en/docs/lang/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/lang/variables.md","tags":[],"version":"current","frontMatter":{"title":"Variable Declarations","slug":"/lang/variables"},"sidebar":"docsSidebar","previous":{"title":"Types & Expressions","permalink":"/en/docs/lang/types-and-expressions"},"next":{"title":"Subsets & Subtypes","permalink":"/en/docs/lang/subtypes"}}');var a=t(74848),s=t(28453),r=t(86543);const o={title:"Variable Declarations",slug:"/lang/variables"},l=void 0,c={},d=[{value:"<code>const</code>",id:"toc-const",level:2},{value:"<code>var</code> and <code>let</code> <SinceVersion></SinceVersion>",id:"toc-var-and-let",level:2},{value:"Variables initialized at their declarations",id:"toc-variables-initialized-at-their-declarations",level:3},{value:"Variables declared without initializers",id:"toc-variables-declared-without-initializers",level:3},{value:"Variables initialized to <code>null</code>",id:"toc-variables-initialized-to-null",level:3},{value:"Catch variables <SinceVersion></SinceVersion>",id:"catch-variables-",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"When you are declaring a new variable, you may optionally declare its type."}),"\n",(0,a.jsx)(n.p,{children:"JavaScript has three ways of declaring local variables:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"var"})," - declares a variable, optionally assigning a value.\n(",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",children:"MDN"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"let"})," - declares a block-scoped variable, optionally assigning a value.\n(",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",children:"MDN"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"const"})," - declares a block-scoped variable, assigning a value that cannot be re-assigned.\n(",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",children:"MDN"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"In Flow these fall into two groups:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"let"})," and ",(0,a.jsx)(n.code,{children:"var"})," - variables that ",(0,a.jsx)(n.strong,{children:"can"})," be reassigned."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"const"})," - variables that ",(0,a.jsx)(n.strong,{children:"cannot"})," be reassigned."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":1,"endLine":7,"endColumn":13,"description":"Cannot reassign constant `constVariable` [1]. [reassign-const]"}]',children:"var varVariable = 1;\nlet letVariable = 1;\nconst constVariable = 1;\n\nvarVariable = 2;   // Works!\nletVariable = 2;   // Works!\nconstVariable = 2; // Error!\n"})}),"\n",(0,a.jsx)(n.h2,{id:"toc-const",children:(0,a.jsx)(n.code,{children:"const"})}),"\n",(0,a.jsxs)(n.p,{children:["Since a ",(0,a.jsx)(n.code,{children:"const"})," variable cannot be re-assigned at a later time it is fairly\nsimple."]}),"\n",(0,a.jsx)(n.p,{children:"Flow can either infer the type from the value you are assigning to it or you\ncan provide it with a type."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"const foo /* : number */ = 1;\nconst bar: number = 2;\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"toc-var-and-let",children:[(0,a.jsx)(n.code,{children:"var"})," and ",(0,a.jsx)(n.code,{children:"let"})," ",(0,a.jsx)(r.V,{version:"0.186"})]}),"\n",(0,a.jsxs)(n.p,{children:["Since ",(0,a.jsx)(n.code,{children:"var"})," and ",(0,a.jsx)(n.code,{children:"let"})," can be re-assigned, there's a few more rules you'll need\nto know about."]}),"\n",(0,a.jsx)(n.p,{children:"When you provide a type, you will be able to re-assign the value, but it must\nalways be of a compatible type."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":7,"endLine":3,"endColumn":9,"description":"Cannot assign `\\"3\\"` to `foo` because string [1] is incompatible with number [2]. [incompatible-type]"}]',children:'let foo: number = 1;\nfoo = 2;   // Works!\nfoo = "3"; // Error!\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the variable has no annotation, Flow infers a precise type based on\ntheir initializer or initial assignment. All subsequent assignments\nto that variable will be constrained by this type. This section shows some examples\nof how Flow determines what type an unannotated variable is inferred to have."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"If you want a variable to have a different type than what Flow infers for it,\nyou can always add a type annotation to the variable\u2019s declaration. That will\noverride everything discussed in this page!"})}),"\n",(0,a.jsx)(n.h3,{id:"toc-variables-initialized-at-their-declarations",children:"Variables initialized at their declarations"}),"\n",(0,a.jsxs)(n.p,{children:["The common case  for unannotated variables is very straightforward: when a\nvariable is declared with an initializer that is not the literal ",(0,a.jsx)(n.code,{children:"null"}),", that\nvariable will from then on have the type of the initializer, and future writes\nto the variable will be constrained by that type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":28,"startColumn":11,"endLine":28,"endColumn":33,"description":"Cannot assign `\'Our new pr...\'` to `product` because string [1] is incompatible with number [2]. \\n\\nAll writes to `product` must be compatible with the type of its initializer [3]. Add an annotation to `product` [3] if a different type is desired. [incompatible-type]"},{"startLine":29,"startColumn":13,"endLine":29,"endColumn":65,"description":"Cannot assign function to `Component` because property `extra_prop` is missing in object type [1] but exists in object type [2] in the first parameter. \\n\\nAll writes to `Component` must be compatible with the type of its initializer [3]. Add an annotation to `Component` [3] if a different type is desired. [incompatible-type]"},{"startLine":30,"startColumn":11,"endLine":30,"endColumn":45,"description":"Cannot assign `<OtherComponent />` to `element` because property `extra_prop` is extra in object type [1] but missing in object type [2]. Exact objects do not accept extra props in type argument `P` [3]. \\n\\nAll writes to `element` must be compatible with the type of its initializer [4]. Add an annotation to `element` [4] if a different type is desired. [incompatible-type]"},{"startLine":30,"startColumn":12,"endLine":30,"endColumn":25,"description":"Cannot assign `<OtherComponent />` to `element` because property `extra_prop` is missing in object type [1] but exists in object type [2] in the first parameter of type argument `ElementType` [3]. \\n\\nAll writes to `element` must be compatible with the type of its initializer [4]. Add an annotation to `element` [4] if a different type is desired. [incompatible-type]"}]',children:"import * as React from 'react';\n\ntype Props = $ReadOnly<{ prop: string }>;\n\ndeclare var x: number;\ndeclare var y: number;\ndeclare var props: Props;\n\nlet product = Math.sqrt(x) + y;\n// `product` has type `number`\n\nlet Component = ({prop}: Props): React.Node => { return <div/> }\n// `Component` has type`React.ComponentType<Props>`\n\nlet element = <Component {...props} />\n// `element` has type `React.Element<React.ComponentType<Props>>`\n\n/* Let's define a new component */\n\ntype OtherProps = $ReadOnly<{ ...Props, extra_prop: number }>;\ndeclare var OtherComponent: (OtherProps) => React.Node;\ndeclare var other_props: OtherProps\n\n/* Any subsequent assignments to `product`, `Component`, or `element` will be\n * checked against the types that Flow infers for the initializers, and if\n * conflicting types are assigned, Flow will signal an error. */\n\nproduct = \"Our new product is...\";\nComponent = ({prop}: OtherProps): React.Node => { return <div/> };\nelement = <OtherComponent {...other_props} />;\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you want these examples to typecheck, and for Flow to realize that different\nkinds of values can be written to these variables, you must add a type\nannotation reflecting this more general type to their declarations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let product: number | string = ...\nlet Component: mixed = ... // No good type to represent this! Consider restructuring\nlet element: React.Node = ...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"toc-variables-declared-without-initializers",children:"Variables declared without initializers"}),"\n",(0,a.jsx)(n.p,{children:'Often variables are declared without initializers. In such cases, Flow will try\nto choose the "first" assignment or assignments to the variable to define its\ntype. "First" here means both top-to-bottom and nearer-scope to\ndeeper-scope\u2014we\u2019ll try to choose an assignment that happens in the same function\nscope as the variable\u2019s declaration, and only look inside nested functions if we\ndon\u2019t find any assignments locally:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":22,"endLine":3,"endColumn":23,"description":"Cannot assign `42` to `topLevelAssigned` because number [1] is incompatible with string [2]. \\n\\nAll writes to `topLevelAssigned` must be compatible with the type of its initial assignment [3]. Add an annotation to `topLevelAssigned` [4] if a different type is desired. [incompatible-type]"},{"startLine":6,"startColumn":20,"endLine":6,"endColumn":23,"description":"Cannot assign `true` to `topLevelAssigned` because boolean [1] is incompatible with string [2]. \\n\\nAll writes to `topLevelAssigned` must be compatible with the type of its initial assignment [3]. Add an annotation to `topLevelAssigned` [4] if a different type is desired. [incompatible-type]"}]',children:'let topLevelAssigned;\nfunction helper() {\n  topLevelAssigned = 42; // Error: `topLevelAssigned` has type `string`\n}\ntopLevelAssigned = "Hello world"; // This write determines the var\'s type\ntopLevelAssigned = true; // Error: `topLevelAssigned` has type `string`\n'})}),"\n",(0,a.jsxs)(n.p,{children:['If there are two or more possible "first assignments," due to an ',(0,a.jsx)(n.code,{children:"if"}),"- or\n",(0,a.jsx)(n.code,{children:"switch"}),"-statement, they\u2019ll both count\u2014this is one of the few ways that Flow\nwill still infer unions for variable types:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":10,"startColumn":20,"endLine":10,"endColumn":24,"description":"Cannot assign `false` to `myNumberOrString` because: [incompatible-type] Either boolean [1] is incompatible with number [2]. Or boolean [1] is incompatible with string [3]. \\nAll writes to `myNumberOrString` must be compatible with the type of one of its initial assignments [4], [5]. Add an annotation to `myNumberOrString` [6] if a different type is desired."}]',children:'let myNumberOrString;\ndeclare var condition: boolean;\nif (condition) {\n  myNumberOrString = 42; // Determines type\n} else {\n  myNumberOrString = "Hello world"; // Determines type\n}\nmyNumberOrString = 21; // fine, compatible with type\nmyNumberOrString = "Goodbye"; // fine, compatible with type\nmyNumberOrString = false; // Error: `myNumberOrString` has type `number | string`\n'})}),"\n",(0,a.jsx)(n.p,{children:"This only applies when the variable is written to in both branches, however. If\nonly one branch contains a write, that write becomes the type of the variable\nafterwards (though Flow will still check to make sure that the variable is\ndefinitely initialized):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":19,"endLine":6,"endColumn":29,"description":"Cannot call `oneBranchAssigned.toUpperCase` because property `toUpperCase` is missing in possibly uninitialized variable [1]. [incompatible-use]"},{"startLine":7,"startColumn":21,"endLine":7,"endColumn":22,"description":"Cannot assign `42` to `oneBranchAssigned` because number [1] is incompatible with string [2]. \\n\\nAll writes to `oneBranchAssigned` must be compatible with the type of its initial assignment [3]. Add an annotation to `oneBranchAssigned` [4] if a different type is desired. [incompatible-type]"}]',children:'let oneBranchAssigned;\ndeclare var condition: boolean;\nif (condition) {\n  oneBranchAssigned = "Hello world!";\n}\noneBranchAssigned.toUpperCase(); // Error: `oneBranchAssigned` may be uninitialized\noneBranchAssigned = 42; // Error: `oneBranchAssigned` has type `string`\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"toc-variables-initialized-to-null",children:["Variables initialized to ",(0,a.jsx)(n.code,{children:"null"})]}),"\n",(0,a.jsxs)(n.p,{children:["Finally, the one exception to the general principle that variable\u2019s types are\ndetermined by their first assignment(s) is when a variable is initialized as (or\nwhose first assignment is) the literal value ",(0,a.jsx)(n.code,{children:"null"}),". In such cases, the ",(0,a.jsx)(n.em,{children:"next"}),"\nnon-null assignment (using the same rules as above) determines the rest of the\nvariable\u2019s type, and the overall type of the variable becomes a union of ",(0,a.jsx)(n.code,{children:"null"}),"\nand the type of the subsequent assignment. This supports the common pattern\nwhere a variable starts off as ",(0,a.jsx)(n.code,{children:"null"})," before getting assigned by a value of some\nother type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function findIDValue<T>(dict: {[key: string]: T}): T {\n  let idVal = null; // initialized as `null`\n  for (const key in dict) {\n    if (key === 'ID') {\n      idVal = dict[key]; // Infer that `idVal` has type `null | T`\n    }\n  }\n  if (idVal === null) {\n    throw new Error(\"No entry for ID!\");\n  }\n  return idVal;\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"catch-variables-",children:["Catch variables ",(0,a.jsx)(r.V,{version:"0.197"})]}),"\n",(0,a.jsxs)(n.p,{children:["If a ",(0,a.jsx)(n.code,{children:"catch"})," variable does not have an annotation, its default type is ",(0,a.jsx)(n.a,{href:"../../types/any",children:(0,a.jsx)(n.code,{children:"any"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can optionally annotate it with exactly ",(0,a.jsx)(n.a,{href:"../../types/mixed",children:(0,a.jsx)(n.code,{children:"mixed"})})," or ",(0,a.jsx)(n.code,{children:"any"}),". E.g."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"try {\n} catch (e: mixed) {\n  if (e instanceof TypeError) {\n    e as TypeError; // OK\n  } else if (e instanceof Error) {\n    e as Error; // OK\n  } else {\n    throw e;\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.code,{children:"mixed"}),", you can improve your safety and Flow ",(0,a.jsx)(n.a,{href:"../../cli/coverage/",children:"coverage"}),",\nat the trade-off of increased runtime checks."]}),"\n",(0,a.jsxs)(n.p,{children:["You can change the default type of ",(0,a.jsx)(n.code,{children:"catch"})," variables when there is no annotation by setting the ",(0,a.jsx)(n.a,{href:"../../config/options/#toc-use-mixed-in-catch-variables",children:(0,a.jsx)(n.code,{children:"use_mixed_in_catch_variables"})})," option to true."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},86543:(e,n,t)=>{t.d(n,{V:()=>a,v:()=>s});t(96540);var i=t(74848);function a(e){let{version:n}=e;return(0,i.jsxs)("span",{class:"version added",title:`Added in ${n}`,children:["\u2265",n]})}function s(e){let{version:n}=e;return(0,i.jsxs)("span",{class:"version removed",title:`Removed after ${n}`,children:["\u2264",n]})}}}]);