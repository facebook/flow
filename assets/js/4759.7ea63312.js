"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4759],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var l=t(96540);const i={},o=l.createContext(i);function s(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),l.createElement(o.Provider,{value:n},e.children)}},94759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"linting/flowlint-comments","title":"Flowlint Comments","description":"You can use flowlint comments to specify more granular lint settings within a file.","source":"@site/docs/linting/flowlint-comments.md","sourceDirName":"linting","slug":"/linting/flowlint-comments","permalink":"/en/docs/linting/flowlint-comments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/linting/flowlint-comments.md","tags":[],"version":"current","frontMatter":{"title":"Flowlint Comments","slug":"/linting/flowlint-comments"},"sidebar":"docsSidebar","previous":{"title":"Linting Overview","permalink":"/en/docs/linting"},"next":{"title":"Lint Rule Reference","permalink":"/en/docs/linting/rule-reference"}}');var i=t(74848),o=t(28453);const s={title:"Flowlint Comments",slug:"/linting/flowlint-comments"},r=void 0,c={},a=[{value:"flowlint",id:"toc-flowlint",level:3},{value:"flowlint-line",id:"toc-flowlint-line",level:3},{value:"flowlint-next-line",id:"toc-flowlint-next-line",level:3}];function f(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"flowlint"})," comments to specify more granular lint settings within a file.\nThese comments come in three forms:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#toc-flowlint",children:"flowlint"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#toc-flowlint-line",children:"flowlint-line"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#toc-flowlint-next-line",children:"flowlint-next-line"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In all forms, whitespace and asterisks between words are ignored, allowing for flexible formatting."}),"\n",(0,i.jsx)(n.h3,{id:"toc-flowlint",children:"flowlint"}),"\n",(0,i.jsxs)(n.p,{children:["The basic ",(0,i.jsx)(n.code,{children:"flowlint"})," comment takes a comma-delimited list of ",(0,i.jsx)(n.code,{children:"rule:severity"})," pairs and\napplies those settings for the rest of the source file until overridden. This has\nthree primary purposes: applying settings over a block, applying settings over a file,\nand applying settings over part of a line."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"settings over a block of code:"}),"\nA pair of ",(0,i.jsx)(n.code,{children:"flowlint"})," comments can be used to apply a certain setting over a block of code.\nFor example, to disable the untyped-type-import lint over a block of type imports would look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import type {\n  // flowlint untyped-type-import:off\n  Foo,\n  Bar,\n  Baz,\n  // flowlint untyped-type-import:error\n} from './untyped.js';\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"settings over a file:"}),"\nA ",(0,i.jsx)(n.code,{children:"flowlint"})," comment doesn't have to have a matching comment to form a block.\nAn unmatched comment simply applies its settings to the rest of the file. You\ncould use this, for example, to suppress all sketchy-null-check lints in a particular file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// flowlint sketchy-null:off\n...\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"settings over part of a line:"}),"\nThe settings applied by ",(0,i.jsx)(n.code,{children:"flowlint"})," start and end right at the comment itself. This\nmeans that you can do things like"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function foo(a: ?boolean, b: ?boolean) {\n  if (/* flowlint sketchy-null-bool:off */a/* flowlint sketchy-null-bool:warn */ && b) {\n    ...\n  } else {\n    ...\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"if you want control at an even finer level than you get from the line-based comments."}),"\n",(0,i.jsx)(n.h3,{id:"toc-flowlint-line",children:"flowlint-line"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"flowlint-line"})," comment works similarly to a ",(0,i.jsx)(n.code,{children:"flowlint"})," comment, except it only\napplies its settings to the current line instead of applying them for the rest of the file.\nThe primary use for ",(0,i.jsx)(n.code,{children:"flowlint-line"})," comments is to suppress a lint on a particular line:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function foo(x: ?boolean) {\n  if (x) { // flowlint-line sketchy-null-bool:off\n    ...\n  } else {\n    ...\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"toc-flowlint-next-line",children:"flowlint-next-line"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"flowlint-next-line"})," works the same as ",(0,i.jsx)(n.code,{children:"flowlint-line"}),", except it applies its settings to the next line instead of the current line:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function foo(x: ?boolean) {\n  // flowlint-next-line sketchy-null-bool:off\n  if (x) {\n    ...\n  } else {\n    ...\n  }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}}}]);