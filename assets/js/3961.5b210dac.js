"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3961],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>r});var s=t(96540);const o={},a=s.createContext(o);function i(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),s.createElement(a.Provider,{value:e},n.children)}},63961:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"types/comments","title":"Comment Types","description":"Flow supports a comment-based syntax, which makes it possible to use Flow","source":"@site/docs/types/comments.md","sourceDirName":"types","slug":"/types/comments","permalink":"/en/docs/types/comments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/comments.md","tags":[],"version":"current","frontMatter":{"title":"Comment Types","slug":"/types/comments"},"sidebar":"docsSidebar","previous":{"title":"Module Types","permalink":"/en/docs/types/modules"},"next":{"title":"Types & Expressions","permalink":"/en/docs/lang/types-and-expressions"}}');var o=t(74848),a=t(28453);const i={title:"Comment Types",slug:"/types/comments"},r=void 0,l={},c=[{value:"Comment types syntax",id:"toc-comment-types-syntax",level:2},{value:"Type include comments",id:"toc-comment-type-include",level:3},{value:"Type annotation comments",id:"toc-comment-type-annotation",level:3}];function m(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Flow supports a comment-based syntax, which makes it possible to use Flow\nwithout having to compile your files."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:'[{"startLine":13,"startColumn":33,"endLine":13,"endColumn":40,"description":"Cannot call `method` with object literal bound to `value` because array literal [1] is incompatible with string [2] in property `baz`. [incompatible-type]"}]',children:'/*::\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nfunction method(value /*: MyAlias */) /*: boolean */ {\n  return value.bar;\n}\n\nmethod({foo: 1, bar: true, baz: ["oops"]});\n'})}),"\n",(0,o.jsx)(e.p,{children:"These comments allow Flow to work in plain JavaScript files without any\nadditional work."}),"\n",(0,o.jsx)(e.h2,{id:"toc-comment-types-syntax",children:"Comment types syntax"}),"\n",(0,o.jsx)(e.p,{children:"There are two primary pieces of the syntax: type includes and type annotations."}),"\n",(0,o.jsx)(e.h3,{id:"toc-comment-type-include",children:"Type include comments"}),"\n",(0,o.jsxs)(e.p,{children:["If you want to have Flow treat a comment as if it were normal syntax, you can\ndo so by adding a double colon ",(0,o.jsx)(e.code,{children:"::"})," to the start of the comment:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"/*::\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nclass MyClass {\n  /*:: prop: string; */\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"This includes the code into the syntax that Flow sees:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"type MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n\nclass MyClass {\n  prop: string;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"But JavaScript ignores these comments, so your code is valid JavaScript syntax:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"class MyClass {\n\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["This syntax is also available in a ",(0,o.jsx)(e.code,{children:"flow-include"})," form:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"/*flow-include\ntype MyAlias = {\n  foo: number,\n  bar: boolean,\n  baz: string,\n};\n*/\n\nclass MyClass {\n  /*flow-include prop: string; */\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"toc-comment-type-annotation",children:"Type annotation comments"}),"\n",(0,o.jsxs)(e.p,{children:["Instead of typing out a full include every time, you can also use the type\nannotation shorthand with a single colon ",(0,o.jsx)(e.code,{children:":"})," at the start of the comment."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"function method(param /*: string */) /*: number */ {\n  return 1;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"This would be the same as including a type annotation inside an include comment."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-flow",metastring:"[]",children:"function method(param /*:: : string */) /*:: : number */ {\n  return 1;\n}\n"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Note:"})," If you want to use optional function parameters you'll need to use\nthe include comment form."]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Special thanks to"}),": ",(0,o.jsx)(e.a,{href:"https://github.com/jareware",children:"Jarno Rantanen"})," for\nbuilding ",(0,o.jsx)(e.a,{href:"https://github.com/jareware/flotate",children:"flotate"})," and supporting us\nmerging his syntax upstream into Flow."]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}}}]);