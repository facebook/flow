"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[714],{20714:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"types/modules","title":"Module Types","description":"Importing and exporting types","source":"@site/docs/types/modules.md","sourceDirName":"types","slug":"/types/modules","permalink":"/en/docs/types/modules","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/modules.md","tags":[],"version":"current","frontMatter":{"title":"Module Types","slug":"/types/modules"},"sidebar":"docsSidebar","previous":{"title":"Utility Types","permalink":"/en/docs/types/utilities"},"next":{"title":"Comment Types","permalink":"/en/docs/types/comments"}}');var o=s(74848),r=s(28453);const i={title:"Module Types",slug:"/types/modules"},l=void 0,p={},c=[{value:"Importing and exporting types",id:"toc-importing-and-exporting-types",level:2},{value:"Importing and exporting values as types",id:"toc-importing-and-exporting-values",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"toc-importing-and-exporting-types",children:"Importing and exporting types"}),"\n",(0,o.jsx)(t.p,{children:"It is often useful to share types between modules (files).\nIn Flow, you can export type aliases, interfaces, and classes from one file and import them in another."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"exports.js"})})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-flow",metastring:"[]",children:"export default class MyClass {};\nexport type MyObject = { /* ... */ };\nexport interface MyInterface { /* ... */ };\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"imports.js"})})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import type MyClass, {MyObject, MyInterface} from './exports';\n"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:(0,o.jsxs)(t.strong,{children:["Don't forget to add ",(0,o.jsx)(t.code,{children:"@flow"})," at the top of your file, otherwise Flow won't report errors"]})}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"toc-importing-and-exporting-values",children:"Importing and exporting values as types"}),"\n",(0,o.jsxs)(t.p,{children:["Flow also supports importing the type of values exported by other modules using ",(0,o.jsx)(t.a,{href:"../typeof/",children:(0,o.jsx)(t.code,{children:"typeof"})}),"."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"exports.js"})})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-flow",metastring:"[]",children:"const myNumber = 42;\nexport default myNumber;\nexport class MyClass { /* ... */ };\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"imports.js"})})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import typeof MyNumber from './exports';\nimport typeof {MyClass} from './exports';\n\nconst x: MyNumber = 1; // Works: like using `number`\n"})}),"\n",(0,o.jsx)(t.p,{children:"Just like other type imports, this code can be stripped away by a compiler so\nthat it does not add a runtime dependency on the other module."})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(96540);const o={},r=n.createContext(o);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);