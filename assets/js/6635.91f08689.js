"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6635],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},96635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"types/literals","title":"Literal Types","description":"Flow has primitive types for","source":"@site/docs/types/literals.md","sourceDirName":"types","slug":"/types/literals","permalink":"/en/docs/types/literals","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/literals.md","tags":[],"version":"current","frontMatter":{"title":"Literal Types","slug":"/types/literals"},"sidebar":"docsSidebar","previous":{"title":"Primitive Types","permalink":"/en/docs/types/primitives"},"next":{"title":"Mixed","permalink":"/en/docs/types/mixed"}}');var i=t(74848),r=t(28453);const l={title:"Literal Types",slug:"/types/literals"},o=void 0,c={},a=[];function d(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Flow has ",(0,i.jsx)(n.a,{href:"../primitives",children:"primitive types"})," for\nliteral values, but can also use literal values as types."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, instead of accepting ",(0,i.jsx)(n.code,{children:"number"})," type, we could accept only the\nliteral value ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":12,"endLine":5,"endColumn":12,"description":"Cannot call `acceptsTwo` with `3` bound to `value` because number literal `3` [1] is incompatible with number literal `2` [2]. [incompatible-type]"},{"startLine":6,"startColumn":12,"endLine":6,"endColumn":14,"description":"Cannot call `acceptsTwo` with `\\"2\\"` bound to `value` because string [1] is incompatible with number literal `2` [2]. [incompatible-type]"}]',children:'function acceptsTwo(value: 2) { /* ... */ }\n\nacceptsTwo(2);   // Works!\n\nacceptsTwo(3);   // Error!\nacceptsTwo("2"); // Error!\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can use primitive values for these types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Booleans: like ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.li,{children:["Numbers: like ",(0,i.jsx)(n.code,{children:"42"})," or ",(0,i.jsx)(n.code,{children:"3.14"})]}),"\n",(0,i.jsxs)(n.li,{children:["Strings: like ",(0,i.jsx)(n.code,{children:'"foo"'})," or ",(0,i.jsx)(n.code,{children:'"bar"'})]}),"\n",(0,i.jsxs)(n.li,{children:["BigInts: like ",(0,i.jsx)(n.code,{children:"42n"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Using these with ",(0,i.jsx)(n.a,{href:"../unions",children:"union types"})," is powerful:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":12,"startColumn":10,"endLine":12,"endColumn":16,"description":"Cannot call `getColor` with `\\"error\\"` bound to `name` because string literal `error` [1] is incompatible with union type [2]. [incompatible-type]"}]',children:'function getColor(name: "success" | "warning" | "danger") {\n  switch (name) {\n    case "success" : return "green";\n    case "warning" : return "yellow";\n    case "danger"  : return "red";\n  }\n}\n\ngetColor("success"); // Works!\ngetColor("danger");  // Works!\n\ngetColor("error");   // Error!\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Consider using ",(0,i.jsx)(n.a,{href:"../../enums",children:"Flow Enums"})," instead of unions of literal types, if they fit your use-case."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);