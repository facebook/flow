"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2581],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var o=n(96540);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}},53037:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/04/10/Unused-Promise","source":"@site/blog/2023-04-10-Unused-Promise.md","title":"Flow can now detect unused Promises","description":"As of v0.201.0, Flow can now lint against unused/floating Promises. Unused promises can be dangerous,","date":"2023-04-10T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"David Richey","key":null,"page":null}],"frontMatter":{"title":"Flow can now detect unused Promises","short-title":"Flow can now detect unused Promises","author":"David Richey","medium-link":"https://medium.com/flow-type/flow-can-now-detect-unused-promises-b49341256640"},"unlisted":false,"prevItem":{"title":"Announcing 5 new Flow tuple type features","permalink":"/blog/2023/08/17/Announcing-5-new-Flow-tuple-type-features"},"nextItem":{"title":"Announcing Partial & Required Flow utility types + catch annotations","permalink":"/blog/2023/03/15/Announcing-Partial-and-Required-Flow-utility-types-and-catch-annotations"}}')},62581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var o=n(53037),s=n(74848),i=n(28453);const a={title:"Flow can now detect unused Promises","short-title":"Flow can now detect unused Promises",author:"David Richey","medium-link":"https://medium.com/flow-type/flow-can-now-detect-unused-promises-b49341256640"},r=void 0,u={authorsImageUrls:[void 0]},l=[];function c(e){const t={p:"p",...(0,i.R)(),...e.components};return(0,s.jsx)(t.p,{children:"As of v0.201.0, Flow can now lint against unused/floating Promises. Unused promises can be dangerous,\nbecause errors are potentially unhandled, and the code may not execute in the intended order. They are\nusually mistakes that Flow is perfectly positioned to warn you about."})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);