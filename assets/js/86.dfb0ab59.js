"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[86],{28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>t});var i=o(96540);const l={},r=i.createContext(l);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},72710:e=>{e.exports=JSON.parse('{"permalink":"/blog/2015/12/01/Version-0.19.0","source":"@site/blog/2015-12-01-Version-0.19.0.md","title":"Version-0.19.0","description":"Flow v0.19.0 was deployed today! It has a ton of changes, which the","date":"2015-12-01T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Gabe Levi","key":null,"page":null}],"frontMatter":{"author":"Gabe Levi","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Version 0.21.0","permalink":"/blog/2016/02/02/Version-0.21.0"},"nextItem":{"title":"Typing Generators with Flow","permalink":"/blog/2015/11/09/Generators"}}')},90086:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var i=o(72710),l=o(74848),r=o(28453);const s={author:"Gabe Levi",hide_table_of_contents:!0},t=void 0,a={authorsImageUrls:[void 0]},d=[{value:"<code>@noflow</code>",id:"noflow",level:3},{value:"Declaration files",id:"declaration-files",level:3},{value:"Order of precedence for lib files",id:"order-of-precedence-for-lib-files",level:3},{value:"Deferred initialization",id:"deferred-initialization",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Flow v0.19.0 was deployed today! It has a ton of changes, which the\n",(0,l.jsx)(n.a,{href:"https://github.com/facebook/flow/blob/master/Changelog.md#v0190",children:"Changelog"}),"\nsummarizes. The Changelog can be a little concise, though, so here are some\nlonger explanations for some of the changes. Hope this helps!"]}),"\n",(0,l.jsx)(n.h3,{id:"noflow",children:(0,l.jsx)(n.code,{children:"@noflow"})}),"\n",(0,l.jsxs)(n.p,{children:["Flow is opt-in by default (you add ",(0,l.jsx)(n.code,{children:"@flow"})," to a file). However we noticed that\nsometimes people would add Flow annotations to files that were missing ",(0,l.jsx)(n.code,{children:"@flow"}),".\nOften, these people didn't notice that the file was being ignored by Flow. So\nwe decided to stop allowing Flow syntax in non-Flow files. This is easily fixed\nby adding either ",(0,l.jsx)(n.code,{children:"@flow"})," or ",(0,l.jsx)(n.code,{children:"@noflow"})," to your file. The former will make the\nfile a Flow file. The latter will tell Flow to completely ignore the file."]}),"\n",(0,l.jsx)(n.h3,{id:"declaration-files",children:"Declaration files"}),"\n",(0,l.jsxs)(n.p,{children:["Files that end with ",(0,l.jsx)(n.code,{children:".flow"})," are now treated specially. They are the preferred\nprovider of modules. That is if both ",(0,l.jsx)(n.code,{children:"foo.js"})," and ",(0,l.jsx)(n.code,{children:"foo.js.flow"})," exist, then\nwhen you write ",(0,l.jsx)(n.code,{children:"import Foo from './foo'"}),", Flow will use the type exported from\n",(0,l.jsx)(n.code,{children:"foo.js.flow"})," rather than ",(0,l.jsx)(n.code,{children:"foo.js"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["We imagine two main ways people will use ",(0,l.jsx)(n.code,{children:".flow"})," files."]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["As interface files. Maybe you have some library ",(0,l.jsx)(n.code,{children:"coolLibrary.js"})," that is\nreally hard to type with inline Flow types. You could put\n",(0,l.jsx)(n.code,{children:"coolLibrary.js.flow"})," next to it and declare the types that ",(0,l.jsx)(n.code,{children:"coolLibrary.js"}),"\nexports."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// coolLibrary.js.flow\ndeclare export var coolVar: number;\ndeclare export function coolFunction(): void;\ndeclare export class coolClass {}\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsxs)(n.li,{children:["As the original source. Maybe you want to ship the minified, transformed\nversion of ",(0,l.jsx)(n.code,{children:"awesomeLibrary.js"}),", but people who use ",(0,l.jsx)(n.code,{children:"awesomeLibrary.js"})," also\nuse Flow. Well you could do something like"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cp awesomeLibraryOriginalCode.js awesomeLibrary.js.flow\nbabel awesomeLibraryOriginalCode --out-file awesomeLibrary.js\n"})}),"\n",(0,l.jsx)(n.h3,{id:"order-of-precedence-for-lib-files",children:"Order of precedence for lib files"}),"\n",(0,l.jsx)(n.p,{children:"Now your local lib files will override the builtin lib files. Is one of the\nbuiltin flow libs wrong? Send a pull request! But then while you're waiting for\nthe next release, you can use your own definition! The order of precedence is\nas follows:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Any paths supplied on the command line via --lib"}),"\n",(0,l.jsxs)(n.li,{children:["The files found in the paths specified in the .flowconfig ",(0,l.jsx)(n.code,{children:"[libs]"})," (in\nlisting order)"]}),"\n",(0,l.jsx)(n.li,{children:"The Flow core library files"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["For example, if I want to override the builtin definition of Array and instead\nuse my own version, I could update my ",(0,l.jsx)(n.code,{children:".flowconfig"})," to contain"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"// .flowconfig\n[libs]\nmyArray.js\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// myArray.js\ndeclare class Array<T> {\n  // Put whatever you like in here!\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"deferred-initialization",children:"Deferred initialization"}),"\n",(0,l.jsxs)(n.p,{children:["Previously the following code was an error, because the initialization of\n",(0,l.jsx)(n.code,{children:"myString"})," happens later. Now Flow is fine with it."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'function foo(someFlag: boolean): string {\n  var myString:string;\n  if (someFlag) {\n    myString = "yup";\n  } else {\n    myString = "nope";\n  }\n  return myString;\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);