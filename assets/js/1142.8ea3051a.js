"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1142],{7119:e=>{e.exports=JSON.parse('{"permalink":"/blog/2015/02/18/Typecasts","source":"@site/blog/2015-02-18-Typecasts.md","title":"Announcing Typecasts","description":"As of version 0.3.0, Flow supports typecast expression.","date":"2015-02-18T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Basil Hosmer","key":null,"page":null}],"frontMatter":{"title":"Announcing Typecasts","short-title":"Typecasts","author":"Basil Hosmer","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Announcing Import Type","permalink":"/blog/2015/02/18/Import-Types"}}')},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(96540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},31142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var s=n(7119),r=n(74848),o=n(28453);const a={title:"Announcing Typecasts","short-title":"Typecasts",author:"Basil Hosmer",hide_table_of_contents:!0},c=void 0,p={authorsImageUrls:[void 0]},i=[];function l(e){const t={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"As of version 0.3.0, Flow supports typecast expression."}),"\n",(0,r.jsx)(t.p,{children:"A typecast expression is a simple way to type-annotate any JavaScript expression. Here are some examples of typecasts:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"(1 + 1 : number);\nvar a = { name: (null: ?string) };\n([1, 'a', true]: Array<mixed>).map(fn);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["For any JavaScript expression ",(0,r.jsx)(t.code,{children:"<expr>"})," and any Flow type ",(0,r.jsx)(t.code,{children:"<type>"}),", you can write"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"(<expr> : <type>)\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note:"})," the parentheses are necessary."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);