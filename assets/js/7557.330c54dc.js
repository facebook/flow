"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7557],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},49938:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var i=n(86198),o=n(74848),s=n(28453);const r={title:"Introducing Flow-Typed","short-title":"Introducing Flow-Typed",author:"Jeff Morrison",hide_table_of_contents:!0},a=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Versioned &amp; Tested Libdefs",id:"versioned--tested-libdefs",level:3},{value:"Automating Libdef Installation",id:"automating-libdef-installation",level:3},{value:"Installing Libdefs",id:"installing-libdefs",level:3},{value:"Why Not Just Use Npm To Distribute Libdefs?",id:"why-not-just-use-npm-to-distribute-libdefs",level:3},{value:"Building a Community",id:"building-a-community",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Having high-quality and community-driven library definitions (\u201clibdefs\u201d) are\nimportant for having a great experience with Flow. Today, we are introducing\n",(0,o.jsx)(t.strong,{children:"flow-typed"}),": A ",(0,o.jsx)(t.a,{href:"https://github.com/flowtype/flow-typed/",children:"repository"})," and\n",(0,o.jsx)(t.a,{href:"http://npmjs.org/packages/flow-typed",children:"CLI tool"})," that represent the first parts\nof a new workflow for building, sharing, and distributing Flow libdefs."]}),"\n",(0,o.jsxs)(t.p,{children:["The goal of this project is to grow an ecosystem of libdefs that\n",(0,o.jsx)(t.a,{href:"https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592",children:"allows Flow's type inference to shine"}),"\nand that aligns with Flow's mission: To extract precise and ",(0,o.jsx)(t.em,{children:"accurate"})," types\nfrom real-world JavaScript. We've learned a lot from similar efforts like\nDefinitelyTyped for TypeScript and we want to bring some of the lessons we've\nlearned to the Flow ecosystem."]}),"\n",(0,o.jsx)(t.p,{children:"Here are some of the objectives of this project:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Libdefs should be ",(0,o.jsx)(t.strong,{children:"versioned"})," \u2014 both against the libraries they describe\n",(0,o.jsx)(t.em,{children:"and"})," against the version(s) of Flow they are compatible with."]}),"\n",(0,o.jsxs)(t.li,{children:["Libdefs should meet a ",(0,o.jsx)(t.strong,{children:"high quality bar"}),", including ",(0,o.jsx)(t.strong,{children:"libdef tests"})," to\nensure that their quality persists over time."]}),"\n",(0,o.jsxs)(t.li,{children:["There must be a straightforward way to ",(0,o.jsx)(t.strong,{children:"contribute libdef improvements over\ntime"})," and for developers to ",(0,o.jsx)(t.strong,{children:"benefit from those improvements"})," over time."]}),"\n",(0,o.jsxs)(t.li,{children:["The process of managing libdefs for a Flow project should be ",(0,o.jsx)(t.strong,{children:"automated,\nsimple, and easy to get right"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"versioned--tested-libdefs",children:"Versioned & Tested Libdefs"}),"\n",(0,o.jsx)(t.p,{children:"Anyone can contribute a libdef (or improve on an existing one), but when doing\nso it's important that we maintain a high quality bar so that all developers\nfeel confident in the libdefs they are using. To address this, flow-typed\nrequires that all libdef contributions are explicitly versioned against both\nthe version of the library they are describing and the version(s) of Flow the\nlibdef is compatible with."}),"\n",(0,o.jsx)(t.p,{children:"Additionally, all libdefs must be accompanied by tests that exercise the\nimportant parts of the API and assert that they yield the correct types. By\nincluding both version information and tests with each libdef, we can\nautomatically verify in Travis that the tests work as expected for all versions\nof Flow a libdef is compatible with. Tests also help to ensure that future\nchanges to the libdef don't regress its features over time."}),"\n",(0,o.jsx)(t.h3,{id:"automating-libdef-installation",children:"Automating Libdef Installation"}),"\n",(0,o.jsxs)(t.p,{children:["We've built a simple CLI tool called ",(0,o.jsx)(t.code,{children:"flow-typed"})," that helps to automate the\nprocess of finding, installing, and upgrading libdefs in your Flow projects. It\nuses the explicit version info associated with each libdef to find all\nnecessary libdefs based on your project's package.json dependencies. This\nminimizes the work you need to do in order to pull in and update libdefs in\nyour projects."]}),"\n",(0,o.jsxs)(t.p,{children:["You can get the flow-typed CLI using either yarn (",(0,o.jsx)(t.code,{children:"yarn global add flow-typed"}),")\nor npm (",(0,o.jsx)(t.code,{children:"npm install -g flow-typed"}),")."]}),"\n",(0,o.jsx)(t.h3,{id:"installing-libdefs",children:"Installing Libdefs"}),"\n",(0,o.jsx)(t.p,{children:"Installing libdefs from the flow-typed repository is a matter of running a\nsingle command on your project after installing your dependencies:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"> yarn install # Or `npm install` if you're old-school :)\n> flow-typed install\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"flow-typed install"})," command reads your project's package.json file,\nqueries the flow-typed repository for libdefs matching your dependencies, and\ninstalls the correctly-versioned libdefs into the ",(0,o.jsx)(t.code,{children:"flow-typed/"})," directory for\nyou. By default, Flow knows to look in the ",(0,o.jsx)(t.code,{children:"flow-typed/"})," directory for libdefs\n\u2014 so there is no additional configuration necessary."]}),"\n",(0,o.jsxs)(t.p,{children:["Note that it's necessary to run this command ",(0,o.jsx)(t.em,{children:"after"})," running ",(0,o.jsx)(t.code,{children:"yarn"})," or\n",(0,o.jsx)(t.code,{children:"npm install"}),". This is because this command will also generate stub libdefs for\nyou if one of your dependencies doesn't have types."]}),"\n",(0,o.jsxs)(t.p,{children:["Once libdefs have been installed, ",(0,o.jsx)(t.strong,{children:"we recommend that you check them in to your\nproject's repo"}),". Libdefs in the flow-typed repository may be improved over\ntime (fixing a bug, more precise types, etc). If this happens for a libdef that\nyou depend on, you'll want to have control over when that update is applied to\nyour project. Periodically you can run ",(0,o.jsx)(t.code,{children:"flow-typed update"})," to download any\nlibdef updates, verify that your project still typechecks, and the commit the\nupdates."]}),"\n",(0,o.jsx)(t.h3,{id:"why-not-just-use-npm-to-distribute-libdefs",children:"Why Not Just Use Npm To Distribute Libdefs?"}),"\n",(0,o.jsx)(t.p,{children:"Over time libdefs in the flow-typed repo may be updated to fix bugs, improve\naccuracy, or make use of new Flow features that better describe the types of\nthe library. As a result, there are really 3 versions that apply to each\nlibdef: The version of the library being described, the current version of the\nlibdef in the flow-typed repo, and the version(s) of Flow the libdef is\ncompatible with."}),"\n",(0,o.jsx)(t.p,{children:"If an update is made to some libdef that you use in your project after you've\nalready installed it, there's a good chance that update may find new type\nerrors in your project that were previously unknown. While it is certainly a\ngood thing to find errors that were previously missed, you'll want to have\ncontrol over when those changes get pulled in to your project."}),"\n",(0,o.jsx)(t.p,{children:"This is the reason we advise that you commit your installed libdefs to version\ncontrol rather than rely on a system like npm+semver to download and install a\nnon-deterministic semver-ranged version from npm. Checking in your libdefs\nensures that all collaborators on your project have consistent output from Flow\nat any given commit in version history."}),"\n",(0,o.jsx)(t.h3,{id:"building-a-community",children:"Building a Community"}),"\n",(0,o.jsxs)(t.p,{children:["This is first and foremost a community project. It was started by a community\nmember (hey ",(0,o.jsx)(t.a,{href:"https://github.com/splodingsocks",children:"@splodingsocks"}),"!) and has\nalready benefitted from hours of work by many others. Moreover, this will\ncontinue to be a community effort: Anyone can create and/or help maintain a\nlibdef for any npm library. Authors may create libdefs for their packages when\npublishing, and/or consumers can create them when someone else hasn't already\ndone so. Either way, everyone benefits!"]}),"\n",(0,o.jsxs)(t.p,{children:["We'd like to send a big shout-out to ",(0,o.jsx)(t.a,{href:"https://github.com/marudor",children:"@marudor"})," for\ncontributing so many of his own libdefs and spending time helping others to\nwrite and contribute libdefs. Additionally we'd like to thank\n",(0,o.jsx)(t.a,{href:"https://github.com/ryyppy",children:"@ryyppy"})," for helping to design and iterate on the\nCLI and installation workflow as well as manage libdef reviews."]}),"\n",(0,o.jsxs)(t.p,{children:["The Flow core team intends to stay invested in developing and improving this\nproject, but in order for it to truly succeed we need your help! If you've\nalready written some libdefs for Flow projects that you work on, we encourage\nyou to ",(0,o.jsx)(t.a,{href:"https://github.com/flowtype/flow-typed/#how-do-i-contribute-library-definitions",children:"contribute"}),"\nthem for others to benefit from them as well. By managing libdefs in a\ncommunity-driven repository, the community as a whole can work together to\nextend Flow's capabilities beyond just explicitly-typed JS."]}),"\n",(0,o.jsx)(t.p,{children:"It's still early days and there's still a lot to do, so we're excited to hear\nyour ideas/feedback and read your pull requests! :)"}),"\n",(0,o.jsx)(t.p,{children:"Happy typing!"})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},86198:e=>{e.exports=JSON.parse('{"permalink":"/blog/2016/10/13/Flow-Typed","source":"@site/blog/2016-10-13-Flow-Typed.md","title":"Introducing Flow-Typed","description":"Having high-quality and community-driven library definitions (\u201clibdefs\u201d) are","date":"2016-10-13T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Jeff Morrison","key":null,"page":null}],"frontMatter":{"title":"Introducing Flow-Typed","short-title":"Introducing Flow-Typed","author":"Jeff Morrison","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Strict Checking of Function Call Arity","permalink":"/blog/2017/05/07/Strict-Function-Call-Arity"},"nextItem":{"title":"Property Variance and Other Upcoming Changes","permalink":"/blog/2016/10/04/Property-Variance"}}')}}]);