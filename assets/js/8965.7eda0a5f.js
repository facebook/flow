"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8965],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},48965:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"types/mixed","title":"Mixed","description":"mixed is the supertype of all types. All values are mixed.","source":"@site/docs/types/mixed.md","sourceDirName":"types","slug":"/types/mixed","permalink":"/en/docs/types/mixed","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/mixed.md","tags":[],"version":"current","frontMatter":{"title":"Mixed","slug":"/types/mixed"},"sidebar":"docsSidebar","previous":{"title":"Literal Types","permalink":"/en/docs/types/literals"},"next":{"title":"Empty","permalink":"/en/docs/types/empty"}}');var i=s(74848),r=s(28453);const o={title:"Mixed",slug:"/types/mixed"},l=void 0,a={},c=[{value:"Anything goes in, Nothing comes out",id:"toc-anything-goes-in-nothing-comes-out",level:2},{value:"Versus <code>any</code>",id:"versus-any",level:2},{value:"Versus <code>empty</code>",id:"versus-empty",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mixed"})," is the ",(0,i.jsx)(n.a,{href:"../../lang/type-hierarchy",children:"supertype of all types"}),". All values are ",(0,i.jsx)(n.code,{children:"mixed"}),".\nHowever, this means that very few operations are permitted on it, without refining to some more specific type.\nThat's because the valid operations on ",(0,i.jsx)(n.code,{children:"mixed"})," must be valid for all types."]}),"\n",(0,i.jsx)(n.p,{children:"In general, programs have several different categories of types:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A single type:"})}),"\n",(0,i.jsxs)(n.p,{children:["Here the input value can only be a ",(0,i.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function square(n: number) {\n  return n * n;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A group of different possible types:"})}),"\n",(0,i.jsxs)(n.p,{children:["Here the input value could be either a ",(0,i.jsx)(n.code,{children:"string"})," or a ",(0,i.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function stringifyBasicValue(value: string | number) {\n  return '' + value;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A type based on another type:"})}),"\n",(0,i.jsx)(n.p,{children:"Here the return type will be the same as the type of whatever value is passed\ninto the function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function identity<T>(value: T): T {\n  return value;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"These three are the most common categories of types. They will make up the\nmajority of the types you'll be writing."}),"\n",(0,i.jsx)(n.p,{children:"However, there is also a fourth category."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"An arbitrary type that could be anything:"})}),"\n",(0,i.jsx)(n.p,{children:"Here the passed in value is an unknown type, it could be any type and the\nfunction would still work."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function getTypeOf(value: mixed): string {\n  return typeof value;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"These unknown types are less common, but are still useful at times."}),"\n",(0,i.jsxs)(n.p,{children:["You should represent these values with ",(0,i.jsx)(n.code,{children:"mixed"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"toc-anything-goes-in-nothing-comes-out",children:"Anything goes in, Nothing comes out"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mixed"})," will accept any type of value. Strings, numbers, objects, functions\u2013\nanything will work."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function stringify(value: mixed) {\n  // ...\n}\n\nstringify("foo");\nstringify(3.14);\nstringify(null);\nstringify({});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When you try to use a value of a ",(0,i.jsx)(n.code,{children:"mixed"})," type you must first figure out what\nthe actual type is or you'll end up with an error."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":2,"startColumn":10,"endLine":2,"endColumn":19,"description":"Cannot use operator `+` with operands string [1] and mixed [2] [unsafe-addition]"}]',children:'function stringify(value: mixed) {\n  return "" + value; // Error!\n}\n\nstringify("foo");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Instead you must ensure the value is a certain type by ",(0,i.jsx)(n.a,{href:"../../lang/refinements/",children:"refining"})," it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function stringify(value: mixed) {\n  if (typeof value === \'string\') {\n    return "" + value; // Works!\n  } else {\n    return "";\n  }\n}\n\nstringify("foo");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Because of the ",(0,i.jsx)(n.code,{children:"typeof value === 'string'"})," check, Flow knows the ",(0,i.jsx)(n.code,{children:"value"})," can\nonly be a ",(0,i.jsx)(n.code,{children:"string"})," inside of the ",(0,i.jsx)(n.code,{children:"if"})," statement. This is known as a\n",(0,i.jsx)(n.a,{href:"../../lang/refinements/",children:"refinement"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"versus-any",children:["Versus ",(0,i.jsx)(n.code,{children:"any"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mixed"})," is safe, while ",(0,i.jsx)(n.a,{href:"../any",children:(0,i.jsx)(n.code,{children:"any"})})," is not. Both accept all values, but ",(0,i.jsx)(n.code,{children:"any"})," also unsafely allows all operations."]}),"\n",(0,i.jsxs)(n.h2,{id:"versus-empty",children:["Versus ",(0,i.jsx)(n.code,{children:"empty"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mixed"})," is the opposite of ",(0,i.jsx)(n.a,{href:"../empty",children:(0,i.jsx)(n.code,{children:"empty"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Everything is a ",(0,i.jsx)(n.code,{children:"mixed"}),", but few operations are permitted on it without first refining to a specific type. It is the supertype of all types."]}),"\n",(0,i.jsxs)(n.li,{children:["Nothing is ",(0,i.jsx)(n.code,{children:"empty"}),", but any operation is permitted on it. It is the subtype of all types."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);