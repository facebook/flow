"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1500],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},51500:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"types/intersections","title":"Intersections","description":"Sometimes it is useful to create a type which is all of a set of other","source":"@site/docs/types/intersections.md","sourceDirName":"types","slug":"/types/intersections","permalink":"/en/docs/types/intersections","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/intersections.md","tags":[],"version":"current","frontMatter":{"title":"Intersections","slug":"/types/intersections"},"sidebar":"docsSidebar","previous":{"title":"Unions","permalink":"/en/docs/types/unions"},"next":{"title":"Indexed Access Types","permalink":"/en/docs/types/indexed-access"}}');var o=t(74848),s=t(28453);const r={title:"Intersections",slug:"/types/intersections"},a=void 0,c={},l=[{value:"Intersection type syntax",id:"toc-intersection-type-syntax",level:2},{value:"Intersection types require all in, but one out",id:"intersection-types-require-all-in-but-one-out",level:2},{value:"Intersection of function types",id:"toc-intersection-of-function-types",level:2},{value:"Calling an overloaded function",id:"calling-an-overloaded-function",level:3},{value:"Declaring overloaded functions",id:"declaring-overloaded-functions",level:3},{value:"Intersections of object types",id:"toc-intersections-of-object-types",level:2},{value:"Impossible intersection types",id:"toc-impossible-intersection-types",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Sometimes it is useful to create a type which is ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"all of"})})," a set of other\ntypes. For example, you might want to write a function which accepts a value that\nimplements two different ",(0,o.jsx)(n.a,{href:"../interfaces",children:"interfaces"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":20,"startColumn":6,"endLine":20,"endColumn":16,"description":"Cannot call `func` with object literal bound to `value` because property `serialize` is missing in object literal [1] but exists in `Serializable` [2]. [incompatible-type]"}]',children:"interface Serializable {\n  serialize(): string;\n}\n\ninterface HasLength {\n  length: number;\n}\n\nfunction func(value: Serializable & HasLength) {\n  // ...\n}\n\nfunc({\n  length: 3,\n  serialize() {\n    return '3';\n  },\n}); // Works\n\nfunc({length: 3}); // Error! Doesn't implement both interfaces\n"})}),"\n",(0,o.jsx)(n.h2,{id:"toc-intersection-type-syntax",children:"Intersection type syntax"}),"\n",(0,o.jsxs)(n.p,{children:["Intersection types are any number of types which are joined by an ampersand ",(0,o.jsx)(n.code,{children:"&"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"Type1 & Type2 & ... & TypeN\n"})}),"\n",(0,o.jsx)(n.p,{children:"You may also add a leading ampersand which is useful when breaking intersection\ntypes onto multiple lines."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"type Foo =\n  & Type1\n  & Type2\n  & ...\n  & TypeN\n"})}),"\n",(0,o.jsx)(n.p,{children:"Each of the members of a intersection type can be any type, even another\nintersection type."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"type Foo = Type1 & Type2;\ntype Bar = Type3 & Type4;\n\ntype Baz = Foo & Bar;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"intersection-types-require-all-in-but-one-out",children:"Intersection types require all in, but one out"}),"\n",(0,o.jsxs)(n.p,{children:["Intersection types are the opposite of union types. When calling a function\nthat accepts an intersection type, we must pass in ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"all of those types"})}),". But\ninside of our function we only have to treat it as ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"any one of those\ntypes"})}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type A = {a: number, ...};\ntype B = {b: boolean, ...};\ntype C = {c: string, ...};\n\nfunction func(value: A & B & C) {\n  const a: A = value;\n  const b: B = value;\n  const c: C = value;\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Even as we treat our value as just one of the types, we do not get an error\nbecause it satisfies all of them."}),"\n",(0,o.jsx)(n.h2,{id:"toc-intersection-of-function-types",children:"Intersection of function types"}),"\n",(0,o.jsx)(n.p,{children:"A common use of intersection types is to express functions that return\ndifferent results based on the input we pass in. Suppose for example\nthat we want to write the type of a function that:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["returns a string, when we pass in the value ",(0,o.jsx)(n.code,{children:'"string"'}),","]}),"\n",(0,o.jsxs)(n.li,{children:["returns a number, when we pass in the value ",(0,o.jsx)(n.code,{children:'"number"'}),", and"]}),"\n",(0,o.jsxs)(n.li,{children:["returns any possible type (",(0,o.jsx)(n.code,{children:"mixed"}),"), when we pass in any other string."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The type of this function will be"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'type Fn =\n  & ((x: "string") => string)\n  & ((x: "number") => number)\n  & ((x: string) => mixed);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Each line in the above definition is called an ",(0,o.jsx)(n.em,{children:"overload"}),", and we say that functions\nof type ",(0,o.jsx)(n.code,{children:"Fn"})," are ",(0,o.jsx)(n.em,{children:"overloaded"}),"."]}),"\n",(0,o.jsx)(n.p,{children:'Note the use of parentheses around the arrow types. These are necessary to override\nthe precedence of the "arrow" constructor over the intersection.'}),"\n",(0,o.jsx)(n.h3,{id:"calling-an-overloaded-function",children:"Calling an overloaded function"}),"\n",(0,o.jsxs)(n.p,{children:["Using the above definition we can declare a function ",(0,o.jsx)(n.code,{children:"fn"})," that has the following behavior:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":8,"startColumn":20,"endLine":8,"endColumn":32,"description":"Cannot assign `fn(...)` to `b` because mixed [1] is incompatible with boolean [2]. [incompatible-type]"}]',children:'declare const fn:\n  & ((x: "string") => string)\n  & ((x: "number") => number)\n  & ((x: string) => mixed);\n\nconst s: string = fn("string"); // Works\nconst n: number = fn("number"); // Works\nconst b: boolean = fn("boolean"); // Error!\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Flow achieves this behavior by matching the type of the argument to the ",(0,o.jsx)(n.em,{children:"first"}),"\noverload with a compatible parameter type. Notice for example that the argument\n",(0,o.jsx)(n.code,{children:'"string"'})," matches both the first and the last overload. Flow will\njust pick the first one. If no overload matches, Flow will raise an error at the\ncall site."]}),"\n",(0,o.jsx)(n.h3,{id:"declaring-overloaded-functions",children:"Declaring overloaded functions"}),"\n",(0,o.jsxs)(n.p,{children:["An equivalent way to declare the same function ",(0,o.jsx)(n.code,{children:"fn"}),' would be by using consecutive\n"declare function" statements']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'declare function fn(x: "string"): string;\ndeclare function fn(x: "number"): number;\ndeclare function fn(x: string): mixed;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A limitation in Flow is that it can't ",(0,o.jsx)(n.em,{children:"check"})," the body of a function against\nan intersection type. In other words, if we provided the following implementation\nfor ",(0,o.jsx)(n.code,{children:"fn"})," right after the above declarations"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function fn(x: mixed) {\n  if (x === "string") { return ""; }\n  else if (x === "number") { return 0; }\n  else { return null; }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Flow silently accepts it (and uses ",(0,o.jsx)(n.code,{children:"Fn"})," as the inferred type), but does not check\nthe implementation against this signature. This makes this kind of declaration\na better suited candidate for ",(0,o.jsx)(n.a,{href:"../../libdefs/",children:"library definitions"}),", where implementations are omitted."]}),"\n",(0,o.jsx)(n.h2,{id:"toc-intersections-of-object-types",children:"Intersections of object types"}),"\n",(0,o.jsxs)(n.p,{children:["When you create an intersection of ",(0,o.jsx)(n.a,{href:"../objects/#exact-and-inexact-object-types",children:"inexact object types"}),",\nyou are saying that your object satisfies each member of the intersection."]}),"\n",(0,o.jsx)(n.p,{children:"For example, when you create an intersection of two inexact objects with different sets\nof properties, it will result in an object with all of the properties."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type One = {foo: number, ...};\ntype Two = {bar: boolean, ...};\n\ntype Both = One & Two;\n\nconst value: Both = {\n  foo: 1,\n  bar: true\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"When you have properties that overlap by having the same name, Flow follows the same\nstrategy as with overloaded functions: it will return the type of the first property\nthat matches this name."}),"\n",(0,o.jsxs)(n.p,{children:["For example, if you merge two inexact objects with a property named ",(0,o.jsx)(n.code,{children:"prop"}),", first with a\ntype of ",(0,o.jsx)(n.code,{children:"number"})," and second with a type of ",(0,o.jsx)(n.code,{children:"boolean"}),", accessing ",(0,o.jsx)(n.code,{children:"prop"})," will return\n",(0,o.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":24,"endLine":7,"endColumn":32,"description":"Cannot assign `both.prop` to `prop2` because number [1] is incompatible with boolean [2]. [incompatible-type]"}]',children:"type One = {prop: number, ...};\ntype Two = {prop: boolean, ...};\n\ndeclare const both: One & Two;\n\nconst prop1: number = both.prop; // Works\nconst prop2: boolean = both.prop; // Error!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To combine exact object types, you should use ",(0,o.jsx)(n.a,{href:"../objects/#object-type-spread",children:"object type spread"})," instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"type One = {foo: number};\ntype Two = {bar: boolean};\n\ntype Both = {\n  ...One,\n  ...Two,\n};\n\nconst value: Both = {\n  foo: 1,\n  bar: true\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," When it comes to objects, the order-specific way in which intersection\ntypes are implemented in Flow, may often seem counter-intuitive from a set theoretic\npoint of view. In sets, the operands of intersection can change order arbitrarily\n(commutative property). For this reason, it is a better practice to define this\nkind of operation over object types using object type spread where the ordering\nsemantics are better specified."]}),"\n",(0,o.jsx)(n.h2,{id:"toc-impossible-intersection-types",children:"Impossible intersection types"}),"\n",(0,o.jsx)(n.p,{children:"Using intersection types, it is possible to create types which are impossible\nto create at runtime. Intersection types will allow you to combine any set of\ntypes, even ones that conflict with one another."}),"\n",(0,o.jsx)(n.p,{children:"For example, you can create an intersection of a number and a string."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":6,"endLine":5,"endColumn":9,"description":"Cannot call `func` with `3.14` bound to `value` because number [1] is incompatible with string [2]. [incompatible-type]"},{"startLine":6,"startColumn":6,"endLine":6,"endColumn":9,"description":"Cannot call `func` with `\'hi\'` bound to `value` because string [1] is incompatible with number [2]. [incompatible-type]"}]',children:"type NumberAndString = number & string;\n\nfunction func(value: NumberAndString) { /* ... */ }\n\nfunc(3.14); // Error!\nfunc('hi'); // Error!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["But you can't possibly create a value which is both a ",(0,o.jsx)(n.em,{children:"number and a string"}),",\nbut you can create a type for it. There's no practical use for creating types\nlike this, but it's a side effect of how intersection types work."]}),"\n",(0,o.jsxs)(n.p,{children:["An accidental way to create an impossible type is to create an intersection of\n",(0,o.jsx)(n.a,{href:"../objects/#exact-and-inexact-object-types",children:"exact object types"}),". For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":6,"endLine":3,"endColumn":11,"description":"Cannot call `func` with object literal bound to `obj` because property `a` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"},{"startLine":3,"startColumn":6,"endLine":3,"endColumn":11,"description":"Cannot call `func` with object literal bound to `obj` because property `b` is missing in object literal [1] but exists in object type [2]. [incompatible-type]"},{"startLine":4,"startColumn":6,"endLine":4,"endColumn":14,"description":"Cannot call `func` with object literal bound to `obj` because property `a` is missing in object literal [1] but exists in object type [2]. [incompatible-type]"},{"startLine":4,"startColumn":6,"endLine":4,"endColumn":14,"description":"Cannot call `func` with object literal bound to `obj` because property `b` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"},{"startLine":5,"startColumn":6,"endLine":5,"endColumn":20,"description":"Cannot call `func` with object literal bound to `obj` because property `a` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"},{"startLine":5,"startColumn":6,"endLine":5,"endColumn":20,"description":"Cannot call `func` with object literal bound to `obj` because property `b` is extra in object literal [1] but missing in object type [2]. Exact objects do not accept extra props. [incompatible-type]"}]',children:"function func(obj: {a: number} & {b: string}) { /* ... */ }\n\nfunc({a: 1}); // Error!\nfunc({b: 'hi'}); // Error!\nfunc({a: 1, b: 'hi'}); // Error!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It's not possible for an object to have exactly the property ",(0,o.jsx)(n.code,{children:"a"})," and no other\nproperties, and simultaneously exactly the property ",(0,o.jsx)(n.code,{children:"b"})," and no other properties."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);