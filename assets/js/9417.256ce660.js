"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9417],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},49417:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"react/hook-syntax","title":"Hook Syntax","description":"Hook Syntax is first-class syntax and typechecking support for React hooks, bringing hooks into","source":"@site/docs/react/hook-syntax.md","sourceDirName":"react","slug":"/react/hook-syntax","permalink":"/en/docs/react/hook-syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/react/hook-syntax.md","tags":[],"version":"current","frontMatter":{"title":"Hook Syntax","slug":"/react/hook-syntax"},"sidebar":"docsSidebar","previous":{"title":"Component Syntax","permalink":"/en/docs/react/component-syntax"},"next":{"title":"Component Types","permalink":"/en/docs/react/component-types"}}');var a=t(74848),s=t(28453);const r={title:"Hook Syntax",slug:"/react/hook-syntax"},i=void 0,l={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Hook Type Annotations",id:"hook-type-annotations",level:2},{value:"Enforcing the Rules of React with Hook Syntax",id:"enforcing-the-rules-of-react-with-hook-syntax",level:2},{value:"Preventing Unsafe Mutation",id:"preventing-unsafe-mutation",level:3},{value:"Preventing Conditional Hook Calls",id:"preventing-conditional-hook-calls",level:3},{value:"Preventing Conflation of Hooks and Functions",id:"preventing-conflation-of-hooks-and-functions",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Hook Syntax is first-class syntax and typechecking support for React hooks, bringing hooks into\nthe React language as their own entities that are syntactically and semantically distinct from\nregular functions, and using Flow to enforce that the ",(0,a.jsx)(n.a,{href:"https://react.dev/reference/rules",children:"Rules of React"})," aren\u2019t violated."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsxs)(n.p,{children:["The primary difference between writing a function and a hook is the ",(0,a.jsx)(n.code,{children:"hook"})," keyword:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import {useState, useEffect} from 'react';\n\nhook useOnlineStatus(initial: boolean): boolean {\n  const [isOnline, setIsOnline] = useState(initial);\n  useEffect(() => {\n    // ...\n  }, []);\n  return isOnline;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Hooks can be called just like regular functions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"import * as React from 'react';\n\nhook useOnlineStatus(): boolean {\n    return true;\n}\n\ncomponent StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '\u2705 Online' : '\u274c Disconnected'}</h1>;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Hooks can be exported just like normal functions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"export hook useNamedExportedHook(): boolean {\n    return true;\n}\n\nexport default hook useDefaultExportedHook(): boolean {\n    return true;\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"hook-type-annotations",children:"Hook Type Annotations"}),"\n",(0,a.jsx)(n.p,{children:"There are a few cases where you might wish to define a value as having the type of a\nhook. Because function types and hook types aren\u2019t compatible (more on this below!),\nwe also introduce a new syntax for hook type annotations, which is simply the\nexisting function type annotation but preceded by hook."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export const useGKOnlineStatus: hook (boolean) => boolean = \n  experiment('show_online_status')\n  ? useOnlineStatus\n  : useAlwaysOnlineStatus\n"})}),"\n",(0,a.jsx)(n.h2,{id:"enforcing-the-rules-of-react-with-hook-syntax",children:"Enforcing the Rules of React with Hook Syntax"}),"\n",(0,a.jsxs)(n.p,{children:["With hook syntax, we can now unambiguously distinguish syntactically between hooks and\nnon-hooks. Flow will use this information to enforce a number of the rules of hooks and\n",(0,a.jsx)(n.a,{href:"https://react.dev/reference/rules",children:"Rules of React"})," generally."]}),"\n",(0,a.jsx)(n.h3,{id:"preventing-unsafe-mutation",children:"Preventing Unsafe Mutation"}),"\n",(0,a.jsxs)(n.p,{children:["According to the ",(0,a.jsx)(n.a,{href:"https://react.dev/reference/rules",children:"Rules of React"}),", refs aren\u2019t allowed\nto be read from or written to while a component is rendering, and the return value of\nother hooks (especially `useState``) cannot be safely mutated directly at all. By making\nFlow aware of hooks as a first-class concept, we can now detect these issues in many cases\nand raise errors early, rather than depending on testing to uncover them."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":8,"startColumn":9,"endLine":8,"endColumn":11,"description":"Cannot assign `42` to `state.val` because property `val` is not writable. \\n\\nThe return value of a React hook [1] cannot be written to. (https://react.dev/reference/rules/components-and-hooks-must-be-pure#return-values-and-arguments-to-hooks-are-immutable). [react-rule-hook-mutation]"},{"startLine":12,"startColumn":8,"endLine":12,"endColumn":10,"description":"Cannot read `current` from `ref` [1] because `ref` values may not be read during render. (https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]"}]',children:"import {useState, useEffect, useRef} from 'react';\nimport * as React from 'react';\n\ncomponent MyComponent() { \n  const ref = useRef<?number>(null);\n  const [state, setState] = useState<{ val: number }>({val: 0});\n\n  state.val = 42; // Flow error: cannot mutate return value of hook\n\n  return (\n    <div>\n      {ref.current /* Flow error: cannot read ref during rendering */}\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Flow currently prevents component props from being modified within the component.\nHook syntax allows us to extend this checking to hooks, and will let us detect and\nraise errors when illegal mutations occur within hook declarations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":2,"startColumn":3,"endLine":2,"endColumn":11,"description":"Cannot assign `42` to `values[0]` because read-only arrays cannot be written to. \\n\\nReact hook arguments [1] and their nested elements cannot be written to. (https://react.dev/reference/rules/components-and-hooks-must-be-pure#return-values-and-arguments-to-hooks-are-immutable). [react-rule-unsafe-mutation]"}]',children:"hook useIllegalMutation(values: Array<number>) {\n  values[0] = 42; // Flow error: mutating argument to hook\n  // ...\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"preventing-conditional-hook-calls",children:"Preventing Conditional Hook Calls"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://react.dev/reference/rules#rules-of-hooks",children:"The Rules of Hooks"})," prohibit hooks\nfrom being called conditionally. This is covered by ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/eslint-plugin-react-hooks",children:"React's ESLint plugin"}),",\nbut now Flow will check for these violations too."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":7,"startColumn":26,"endLine":7,"endColumn":42,"description":"Cannot call hook [1] because React hooks cannot be called in conditional contexts. (https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-conditional]"}]',children:"hook useOnlineStatus(): boolean {\n    return true;\n}\n\ncomponent StatusBar(shouldShowOnlineStatus: boolean) {\n  if (shouldShowOnlineStatus) {\n    const onlineStatus = useOnlineStatus();\n  }\n\n  return null;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"preventing-conflation-of-hooks-and-functions",children:"Preventing Conflation of Hooks and Functions"}),"\n",(0,a.jsx)(n.p,{children:"The distinction between hooks and regular functions is reflected in the Flow type system.\nBecause of the different properties that hooks and functions must obey, it\u2019s Flow error\nto pass a value defined as a hook into a position that expects a function type, and\nan error to pass a regular JavaScript function into a position that expects a hook."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":10,"startColumn":29,"endLine":10,"endColumn":41,"description":"Cannot call `args.map` because function [1] is a React hook but function type [2] is not a hook in the first argument. \\n\\nReact component properties [3] and their nested props and elements cannot be written to. (https://react.dev/reference/rules/components-and-hooks-must-be-pure#props).\\nReact hooks and other functions are not compatible with each other, because hooks cannot be called conditionally. [react-rule-hook-incompatible]"}]',children:"import {useState, useEffect} from 'react';\n\nhook useMultiplier(x: number): number {\n  const [y, setY] = useState(1);\n  useEffect(() => { setY(0) })\n  return x * y;\n}\n\ncomponent Mapper(args: Array<number>) {\n  const multArgs = args.map(useMultiplier);\n  \n  return multArgs;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"In addition, Flow enforces that callees with hook-like names inside hooks and components\nare indeed hooks. We also ensure that callees inside of regular function definitions\nare never hooks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":4,"startColumn":13,"endLine":4,"endColumn":21,"description":"Cannot call hook [1] because React hooks can only be called within components or hooks. This hook is definitely not called in a component or hook. (https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-definitely-not-in-component-or-hook]"},{"startLine":9,"startColumn":3,"endLine":9,"endColumn":15,"description":"Cannot call hook because callee [1]\'s name does not conform to React hook rules. Hook names must begin with `use` followed by a capitalized letter. (https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook-naming-convention]"}]',children:"hook useHook() { return null }\n\nfunction regularJavascript() {\n  const x = useHook(); // Flow error: cannot call a hook outside of a component or hook\n}\n\ncomponent Component() { \n  const renamedHook = useHook;\n  renamedHook(); // Flow error: cannot call a hook whose name does not begin with `use`\n\n  return null;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);