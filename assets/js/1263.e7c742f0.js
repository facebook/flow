"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1263],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},51263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"lang/width-subtyping","title":"Width Subtyping","description":"It\'s safe to use an object with \\"extra\\" properties in a position that is","source":"@site/docs/lang/width-subtyping.md","sourceDirName":"lang","slug":"/lang/width-subtyping","permalink":"/en/docs/lang/width-subtyping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/lang/width-subtyping.md","tags":[],"version":"current","frontMatter":{"title":"Width Subtyping","slug":"/lang/width-subtyping"},"sidebar":"docsSidebar","previous":{"title":"Depth Subtyping","permalink":"/en/docs/lang/depth-subtyping"},"next":{"title":"Type Refinements","permalink":"/en/docs/lang/refinements"}}');var o=t(74848),i=t(28453);const r={title:"Width Subtyping",slug:"/lang/width-subtyping"},a=void 0,c={},l=[];function p(e){const n={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:['It\'s safe to use an object with "extra" properties in a position that is\nannotated with a specific set of properties, if that object type is ',(0,o.jsx)(n.a,{href:"../../types/objects/#exact-and-inexact-object-types",children:"inexact"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:'function func(obj: {foo: string, ...}) {\n  // ...\n}\n\nfunc({\n  foo: "test", // Works!\n  bar: 42      // Works!\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Within ",(0,o.jsx)(n.code,{children:"func"}),", we know that ",(0,o.jsx)(n.code,{children:"obj"})," has at least a property ",(0,o.jsx)(n.code,{children:"foo"})," and the\nproperty access expression ",(0,o.jsx)(n.code,{children:"obj.foo"})," will have type ",(0,o.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,o.jsx)(n.p,{children:'This is a kind of subtyping commonly referred to as "width subtyping" because\na type that is "wider" (i.e., has more properties) is a subtype of a\nnarrower type.'}),"\n",(0,o.jsxs)(n.p,{children:["So in the following example, ",(0,o.jsx)(n.code,{children:"obj2"})," is a ",(0,o.jsx)(n.em,{children:"subtype"})," of ",(0,o.jsx)(n.code,{children:"obj1"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"let obj1: {foo: string, ...}  = {foo: 'test'};\nlet obj2 = {foo: 'test', bar: 42};\nobj2 as {foo: string, ...};\n"})}),"\n",(0,o.jsx)(n.p,{children:"However, it's often useful to know that a property is definitely absent."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":3,"startColumn":5,"endLine":3,"endColumn":11,"description":"Cannot cast `obj.foo` to string because property `foo` of unknown type [1] is incompatible with string [2]. [incompatible-type]"}]',children:"function func(obj: {foo: string, ...} | {bar: number, ...}) {\n  if (obj.foo) {\n    obj.foo as string; // Error!\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The above code has a type error because Flow would also allow the call\nexpression ",(0,o.jsx)(n.code,{children:"func({foo: 1, bar: 2})"}),", because ",(0,o.jsx)(n.code,{children:"{foo: number, bar: number}"}),"\nis a subtype of ",(0,o.jsx)(n.code,{children:"{bar: number, ...}"}),", one of the members of the parameter's union\ntype."]}),"\n",(0,o.jsxs)(n.p,{children:["For cases like this where it's useful to assert the absence of a property,\nYou can use ",(0,o.jsx)(n.a,{href:"../../types/objects/#exact-and-inexact-object-types",children:"exact object types"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-flow",metastring:"[]",children:"function func(obj: {foo: string} | {bar: number}) {\n  if (obj.foo) {\n    obj.foo as string; // Works!\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"../../types/objects/#exact-and-inexact-object-types",children:"Exact object types"})," disable width\nsubtyping, and do not allow additional properties to exist."]}),"\n",(0,o.jsxs)(n.p,{children:["Using exact object types lets Flow know that no extra properties will exist at\nruntime, which allows ",(0,o.jsx)(n.a,{href:"../refinements/",children:"refinements"})," to get more specific."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);