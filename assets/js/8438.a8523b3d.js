"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8438],{16815:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021/07/21/Introducing-Flow-Indexed-Access-Types","source":"@site/blog/2021-07-21-Introducing-Flow-Indexed-Access-Types.md","title":"Introducing Flow Indexed Access Types","description":"Flow\u2019s Indexed Access Types are a new type annotation syntax that allows you to get the type of a property from an object, array, or tuple type.","date":"2021-07-21T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"George Zahariev","key":null,"page":null}],"frontMatter":{"title":"Introducing Flow Indexed Access Types","short-title":"Flow Indexed Access Types","author":"George Zahariev","medium-link":"https://medium.com/flow-type/introducing-flow-indexed-access-types-b27175251fd0"},"unlisted":false,"prevItem":{"title":"TypeScript Enums vs. Flow Enums","permalink":"/blog/2021/09/13/TypeScript-Enums-vs-Flow-Enums"},"nextItem":{"title":"Sound Typing for \'this\' in Flow","permalink":"/blog/2021/06/02/Sound-Typing-for-this-in-Flow"}}')},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var o=n(96540);const s={},r=o.createContext(s);function c(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:t},e.children)}},88438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var o=n(16815),s=n(74848),r=n(28453);const c={title:"Introducing Flow Indexed Access Types","short-title":"Flow Indexed Access Types",author:"George Zahariev","medium-link":"https://medium.com/flow-type/introducing-flow-indexed-access-types-b27175251fd0"},a=void 0,i={authorsImageUrls:[void 0]},l=[];function p(e){const t={p:"p",...(0,r.R)(),...e.components};return(0,s.jsx)(t.p,{children:"Flow\u2019s Indexed Access Types are a new type annotation syntax that allows you to get the type of a property from an object, array, or tuple type."})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);