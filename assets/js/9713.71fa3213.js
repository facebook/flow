"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9713],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(96540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},92094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"react/refs","title":"Ref Functions","description":"React allows you to grab the instance of an element or component with refs.","source":"@site/docs/react/refs.md","sourceDirName":"react","slug":"/react/refs","permalink":"/en/docs/react/refs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/react/refs.md","tags":[],"version":"current","frontMatter":{"title":"Ref Functions","slug":"/react/refs"},"sidebar":"docsSidebar","previous":{"title":"Event Handling","permalink":"/en/docs/react/events"},"next":{"title":"Higher-order Components","permalink":"/en/docs/react/hoc"}}');var s=t(74848),r=t(28453);const a={title:"Ref Functions",slug:"/react/refs"},c=void 0,i={},l=[{value:"Refs in Functional Components",id:"toc-refs-in-functional-components",level:2},{value:"Refs in Class Components",id:"toc-refs-in-class-components",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["React allows you to grab the instance of an element or component with ",(0,s.jsx)(n.a,{href:"https://react.dev/learn/manipulating-the-dom-with-refs",children:"refs"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"toc-refs-in-functional-components",children:"Refs in Functional Components"}),"\n",(0,s.jsxs)(n.p,{children:["Inside a functional component, refs are accessed with the ",(0,s.jsx)(n.code,{children:"useRef"})," hook:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":21,"endLine":5,"endColumn":58,"description":"Cannot call hook [1] because React hooks can only be called within components or hooks. Under the current configuration, we only infer component-syntax components to be components and hook-syntax hooks to be hooks. (https://react.dev/reference/rules/rules-of-hooks) [react-rule-hook]"},{"startLine":5,"startColumn":35,"endLine":5,"endColumn":51,"description":"Cannot resolve name `HTMLButtonElement`. [cannot-resolve-name]"},{"startLine":6,"startColumn":33,"endLine":6,"endColumn":49,"description":"Cannot resolve name `HTMLButtonElement`. [cannot-resolve-name]"}]',children:"import {useRef} from 'react';\nimport * as React from 'react';\n\nfunction MyComponent() {\n  const buttonRef = useRef<null | HTMLButtonElement>(null);\n  buttonRef as {current: null | HTMLButtonElement}; // useRef wraps the ref value in an object\n  return <button ref={buttonRef}>Toggle</button>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:"useRef"})," wraps the ref value in an object with a ",(0,s.jsx)(n.code,{children:"current"})," property. This must be\nreflected in the type of anything accepting the ref value."]}),"\n",(0,s.jsx)(n.h2,{id:"toc-refs-in-class-components",children:"Refs in Class Components"}),"\n",(0,s.jsxs)(n.p,{children:["Refs in class components are similar to function components. To create one, add a\nproperty to your class and assign the result of ",(0,s.jsx)(n.code,{children:"React.createRef"})," to it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-flow",metastring:'[{"startLine":5,"startColumn":31,"endLine":5,"endColumn":47,"description":"Cannot resolve name `HTMLButtonElement`. [cannot-resolve-name]"},{"startLine":8,"startColumn":5,"endLine":8,"endColumn":9,"description":"Cannot call `super` because function [1] requires another argument. [incompatible-type]"},{"startLine":9,"startColumn":38,"endLine":9,"endColumn":54,"description":"Cannot resolve name `HTMLButtonElement`. [cannot-resolve-name]"}]',children:"import * as React from 'react';\n\nclass MyComponent extends React.Component<{}> {\n  // The `null` here is important because you may not always have the instance.\n  buttonRef: {current: null | HTMLButtonElement};\n\n  constructor() {\n    super();\n    this.buttonRef = React.createRef<HTMLButtonElement>();\n  }\n\n  render(): React.Node {\n    return <button ref={this.buttonRef}>Toggle</button>;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["One notable difference between ",(0,s.jsx)(n.code,{children:"useRef"})," and ",(0,s.jsx)(n.code,{children:"createRef"})," is that ",(0,s.jsx)(n.code,{children:"createRef"})," does not accept\na default value. It will initialize the ref with the value ",(0,s.jsx)(n.code,{children:"null"}),". This is because\nDOM elements will not exist until the first render of ",(0,s.jsx)(n.code,{children:"MyComponent"})," and so a ",(0,s.jsx)(n.code,{children:"null"})," value\nmust be used."]}),"\n",(0,s.jsxs)(n.p,{children:["Again, note that the ref value is wrapped in an object with a ",(0,s.jsx)(n.code,{children:"current"})," property."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);