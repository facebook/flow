"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9213],{28453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var o=t(96540);const s={},i=o.createContext(s);function a(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),o.createElement(i.Provider,{value:e},n.children)}},29213:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"types/index","title":"Type Annotations","description":"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more.","source":"@site/docs/types/index.md","sourceDirName":"types","slug":"/types","permalink":"/en/docs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/flow/edit/main/website/docs/types/index.md","tags":[],"version":"current","frontMatter":{"title":"Type Annotations","slug":"/types","description":"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more."},"sidebar":"docsSidebar","previous":{"title":"FAQ","permalink":"/en/docs/faq"},"next":{"title":"Primitive Types","permalink":"/en/docs/types/primitives"}}');var s=t(74848),i=t(28453);const a={title:"Type Annotations",slug:"/types",description:"Learn how to add Flow type annotations to your code: Primitives, Objects, Functions, Classes, and more."},r=void 0,c={},l=[];function d(n){const e={code:"code",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"Adding type annotations is an important part of your interaction with Flow."}),"\n",(0,s.jsxs)(e.p,{children:["Flow has a powerful ability to infer the types of your programs. The majority\nFor example, you don't have to produce annotations for common patterns like ",(0,s.jsx)(e.code,{children:"Array.map"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-flow",metastring:"[]",children:'["foo", "bar"].map(s => ( // s is inferred to have type string\n  s.length\n));\n'})}),"\n",(0,s.jsx)(e.p,{children:"Still, there are places where you'll want to add types."}),"\n",(0,s.jsxs)(e.p,{children:["Imagine the following ",(0,s.jsx)(e.code,{children:"concat"})," function for concatenating two strings together."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-flow",metastring:'[{"startLine":1,"startColumn":17,"endLine":1,"endColumn":17,"description":"Missing an annotation on `a`. [missing-local-annot]"},{"startLine":1,"startColumn":20,"endLine":1,"endColumn":20,"description":"Missing an annotation on `b`. [missing-local-annot]"}]',children:"function concat(a, b) {\n  return a + b;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["You need to add annotations on parameters of ",(0,s.jsx)(e.code,{children:"concat"}),", so that Flow can type\ncheck its body. Now you'll get a warning from Flow if you are calling this\nfunction with unexpected types."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-flow",metastring:'[{"startLine":6,"startColumn":8,"endLine":6,"endColumn":8,"description":"Cannot call `concat` with `1` bound to `a` because number [1] is incompatible with string [2]. [incompatible-type]"},{"startLine":6,"startColumn":11,"endLine":6,"endColumn":11,"description":"Cannot call `concat` with `2` bound to `b` because number [1] is incompatible with string [2]. [incompatible-type]"}]',children:'function concat(a: string, b: string) {\n  return a + b;\n}\n\nconcat("A", "B"); // Works!\nconcat(1, 2); // Error!\n'})}),"\n",(0,s.jsx)(e.p,{children:"This guide will teach you the syntax and semantics of all the different types\nyou can have in Flow."})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);