"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[9863],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},42244:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=i(83100),t=i(74848),r=i(28453);const o={title:"Version 0.21.0","short-title":"Version 0.21.0",author:"Gabe Levi",hide_table_of_contents:!0},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"JSX Intrinsics",id:"jsx-intrinsics",level:3},{value:"Example of how to use JSX intrinsics",id:"example-of-how-to-use-jsx-intrinsics",level:4},{value:"What is going on here?",id:"what-is-going-on-here",level:4},{value:"Smarter string refinements",id:"smarter-string-refinements",level:3},{value:"New string refinements",id:"new-string-refinements",level:4}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Yesterday we deployed Flow v0.21.0! As always, we've listed out the most\ninteresting changes in the\n",(0,t.jsx)(n.a,{href:"https://github.com/facebook/flow/blob/master/Changelog.md#v0210",children:"Changelog"}),".\nHowever, since I'm on a plane and can't sleep, I thought it might be fun to\ndive into a couple of the changes! Hope this blog post turns out interesting\nand legible!"]}),"\n",(0,t.jsx)(n.h3,{id:"jsx-intrinsics",children:"JSX Intrinsics"}),"\n",(0,t.jsx)(n.p,{children:"If you're writing JSX, it's probably a mix of your own React Components and\nsome intrinsics. For example, you might write"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'render() {\n  return <div><FluffyBunny name="Fifi" /></div>;\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"FluffyBunny"})," is a React Component you wrote and ",(0,t.jsx)(n.code,{children:"div"})," is a\nJSX intrinsic. Lower-cased JSX elements are assumed to be intrinsics by React\nand by Flow. Up until Flow v0.21.0, Flow ignored intrinsics and gave them the\ntype ",(0,t.jsx)(n.code,{children:"any"}),". This meant Flow let you set any property on JSX intrinsics. Flow\nv0.21.0 will, by default, do the same thing as v0.20.0, However now you can\nalso configure Flow to properly type your JSX intrinsics!"]}),"\n",(0,t.jsx)(n.h4,{id:"example-of-how-to-use-jsx-intrinsics",children:"Example of how to use JSX intrinsics"}),"\n",(0,t.jsx)(n.p,{children:".flowconfig"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[libs]\nmyLib.js\n"})}),"\n",(0,t.jsx)(n.p,{children:"myLib.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// JSXHelper is a type alias to make this example more concise.\n// There\'s nothing special or magic here.\n// JSXHelper<{name: string}> is a React component\n// with the single string property "name", which has a default\ntype JSXHelper<T> = Class<ReactComponent<T,T,mixed>>;\n\n// $JSXIntrinsics is special and magic.\n// This declares the types for `div` and `span`\ntype $JSXIntrinsics = {\n  div: JSXHelper<{id: string}>,\n  span: JSXHelper<{id: string, class: string}>,\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"myCode.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'<div id="asdf" />; // No error\n<div id={42} />; // Error: `id` prop is a string, not a number!\n'})}),"\n",(0,t.jsx)(n.h4,{id:"what-is-going-on-here",children:"What is going on here?"}),"\n",(0,t.jsxs)(n.p,{children:["The new bit of magic is this ",(0,t.jsx)(n.code,{children:"$JSXIntrinsics"})," type alias. When Flow sees\n",(0,t.jsx)(n.code,{children:"<foo />"})," it will look to see if ",(0,t.jsx)(n.code,{children:"$JSXIntrinsics"})," exists and if so will grab\nthe type of ",(0,t.jsx)(n.code,{children:"$JSXIntrinsics['foo']"}),". It will use this type to figure out which\nproperties are available and need to be set."]}),"\n",(0,t.jsx)(n.p,{children:"We haven't hardcoded the intrinsics into Flow since the available intrinsics\nwill depend on your environment. For example, React native would have different\nintrinsics than React for the web would."}),"\n",(0,t.jsx)(n.h3,{id:"smarter-string-refinements",children:"Smarter string refinements"}),"\n",(0,t.jsx)(n.p,{children:"One of the main ways that we make Flow smarter is by teaching it to recognize\nmore ways that JavaScript programmers refine types. Here's an example of a\ncommon way to refine nullable values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class Person {\n  name: ?string;\n  ...\n  getName(): string {\n    // Before the if, this.name could be null, undefined, or a string\n    if (this.name != null) {\n      // But now the programmer has refined this.name to definitely be a string\n      return this.name;\n    }\n    // And now we know that this.name is null or undefined.\n    return 'You know who';\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"new-string-refinements",children:"New string refinements"}),"\n",(0,t.jsx)(n.p,{children:"In v0.21.0, one of the refinements we added is the ability to refine types by\ncomparing them to strings."}),"\n",(0,t.jsx)(n.p,{children:"This is useful for refining unions of string literals into string literals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function test(x: 'foo' | 'bar'): 'foo' {\n  if (x === 'foo') {\n    // Now Flow understands that x has the type 'foo'\n    return x;\n  } else {\n    return 'foo';\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"And can also narrow the value of strings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function test(x: string): 'foo' {\n  if (x === 'foo') {\n    // Now Flow knows x has the type 'foo'\n    return x;\n  } else {\n    return 'foo';\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is one of the many refinements that Flow currently can recognize and\nfollow, and we'll keep adding more! Stay tuned!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},83100:e=>{e.exports=JSON.parse('{"permalink":"/blog/2016/02/02/Version-0.21.0","source":"@site/blog/2016-02-02-Version-0.21.0.md","title":"Version 0.21.0","description":"Yesterday we deployed Flow v0.21.0! As always, we\'ve listed out the most","date":"2016-02-02T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Gabe Levi","key":null,"page":null}],"frontMatter":{"title":"Version 0.21.0","short-title":"Version 0.21.0","author":"Gabe Levi","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"New Implementation of Unions and Intersections","permalink":"/blog/2016/07/01/New-Unions-Intersections"},"nextItem":{"title":"Version-0.19.0","permalink":"/blog/2015/12/01/Version-0.19.0"}}')}}]);