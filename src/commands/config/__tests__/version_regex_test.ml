(**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *)

open OUnit2

let assert_regex ~ctxt ~regex exp act =
  assert_equal
    ~ctxt
    ~printer:(fun x -> x)
    ~msg:("regex for " ^ act ^ " didn't match")
    exp
    (regex act)

let assert_lte ~ctxt exp act =
  let regex = Version_regex.less_than_or_equal_to_version in
  assert_regex ~ctxt ~regex exp act

let tests =
  "version_regex"
  >::: [
         ( "less_than_or_equal_to_zero" >:: fun ctxt ->
           assert_lte ~ctxt {|0\(\.0\(\.0\)?\)?|} "0.0.0" );
         ( "less_than_or_equal_to_pre_1_0" >:: fun ctxt ->
           assert_lte ~ctxt {|0\(\.\(1\(\.0\)?\|0\(\.[0-9]+\)?\)\)?|} "0.1.0";
           assert_lte ~ctxt {|0\(\.\(2\(\.[0-4]\)?\|[0-1]\(\.[0-9]+\)?\)\)?|} "0.2.4" );
         ( "less_than_or_equal_to_1_X" >:: fun ctxt ->
           assert_lte ~ctxt {|\(1\(\.0\(\.0\)?\)?\|0\(\.[0-9]+\)?\(\.[0-9]+\)?\)|} "1.0.0";
           assert_lte
             ~ctxt
             {|\(1\(\.\(1\(\.0\)?\|0\(\.[0-9]+\)?\)\)?\|0\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "1.1.0";
           assert_lte
             ~ctxt
             {|\(1\(\.\(1\(\.[0-1]\)?\|0\(\.[0-9]+\)?\)\)?\|0\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "1.1.1";
           assert_lte
             ~ctxt
             {|\(1\(\.\(2\(\.0\)?\|[0-1]\(\.[0-9]+\)?\)\)?\|0\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "1.2.0";
           assert_lte
             ~ctxt
             {|\(1\(\.\(2\(\.[0-4]\)?\|[0-1]\(\.[0-9]+\)?\)\)?\|0\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "1.2.4" );
         ( "less_than_or_equal_to_10_X" >:: fun ctxt ->
           assert_lte ~ctxt {|\(10\(\.0\(\.0\)?\)?\|[0-9]\(\.[0-9]+\)?\(\.[0-9]+\)?\)|} "10.0.0";
           assert_lte
             ~ctxt
             {|\(10\(\.\(10\(\.0\)?\|[0-9]\(\.[0-9]+\)?\)\)?\|[0-9]\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "10.10.0";
           assert_lte
             ~ctxt
             {|\(10\(\.\(10\(\.\(10\|[0-9]\)\)?\|[0-9]\(\.[0-9]+\)?\)\)?\|[0-9]\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "10.10.10";
           assert_lte
             ~ctxt
             {|\(10\(\.\(20\(\.0\)?\|\(1[0-9]\|[0-9]\)\(\.[0-9]+\)?\)\)?\|[0-9]\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "10.20.0";
           assert_lte
             ~ctxt
             {|\(10\(\.\(20\(\.[0-4]\)?\|\(1[0-9]\|[0-9]\)\(\.[0-9]+\)?\)\)?\|[0-9]\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "10.20.4" );
         ( "less_than_or_equal_to_20_X" >:: fun ctxt ->
           assert_lte
             ~ctxt
             (* (20(\.0(\.0)?)?|(1[0-9]|[0-9])(\.[0-9]+)?(\.[0-9]+)?) *)
             {|\(20\(\.0\(\.0\)?\)?\|\(1[0-9]\|[0-9]\)\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "20.0.0" );
         ( "less_than_or_equal_to_21_X" >:: fun ctxt ->
           assert_lte
             ~ctxt
             (* (21(\.0(\.0)?)?|(20|[0-1][0-9]|[0-9])(\.[0-9]+)?(\.[0-9]+)?) *)
             {|\(21\(\.0\(\.0\)?\)?\|\(20\|[0-1][0-9]\|[0-9]\)\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "21.0.0" );
         ( "less_than_or_equal_to_110_X" >:: fun ctxt ->
           assert_lte
             ~ctxt
             (* (110(\.0(\.0)?)?|(10[0-9]|[0-9][0-9]?)(\.[0-9]+)?(\.[0-9]+)?) *)
             {|\(110\(\.0\(\.0\)?\)?\|\(10[0-9]\|[0-9][0-9]?\)\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "110.0.0" );
         ( "less_than_or_equal_to_111_X" >:: fun ctxt ->
           assert_lte
             ~ctxt
             (* (111(\.0(\.0)?)?|(1(10|0[0-9]|[0-9])|[0-9][0-9]|[0-9])(\.[0-9]+)?(\.[0-9]+)?) *)
             {|\(111\(\.0\(\.0\)?\)?\|\(1\(10\|0[0-9]\|[0-9]\)\|[0-9][0-9]?\)\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "111.0.0" );
         ( "less_than_or_equal_to_1111_X" >:: fun ctxt ->
           assert_lte
             ~ctxt
             (*
              (
                1111(\.0(\.0)?)?
              | (
                  1 (                     # all numbers that start with 1 between 10 and 1110:
                      1(10|0[0-9]|[0-9])  #   1110 | 1100-1109 | 110-119
                    | 0[0-9][0-9]         #   1000-1099
                    | [0-9][0-9]?         #   100-199 | 10-19
                    )
                | [0-9][0-9]?[0-9]?       # any 1, 2 or 3 digit number
                )
                (\.[0-9]+)?
                (\.[0-9]+)?
              )
            *)
             {|\(1111\(\.0\(\.0\)?\)?\|\(1\(1\(10\|0[0-9]\|[0-9]\)\|0[0-9][0-9]\|[0-9][0-9]?\)\|[0-9][0-9]?[0-9]?\)\(\.[0-9]+\)?\(\.[0-9]+\)?\)|}
             "1111.0.0" );
       ]
