(**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the "hack" directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 *)

begin library "ROOTPROJECT"
  files = []
end

comp += [ "-w" "@a-4-6-29-35-44-48-50" ]

begin library "flow-commands"
  sort = true
  files = begin fb-glob "src/commands"
    excludes = [ "shellCompleteCommand.ml" ]
  end
  files += [
    "src/commands/shellCompleteCommand.ml" (comp += [ "-w" "-3" ])
  ]
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-dts"
    "flow-embedded"
    "flow-parser"
    "flow-stubs"
    "flow-server"
    "flow-server-env"
    "flow-services-autocomplete"
    "flow-services-inference"
    "flow-services-flowFileGen"
    "flow-typing"
    "hh-find"
    "hh-heap"
    "hh-socket"
    "tp-core"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin library "flow-common"
  sort = true
  files = begin fb-glob "src/common"
    excludes = [ "utils_js.ml" ]
  end
  requires = [
    "flow-common-utils"
    "flow-stubs"
    "flow-parser"
    "hh-heap"
    "hh-procs"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin library "flow-common-utils"
  sort = true
  files = [ "src/common/utils_js.ml" ]
  requires = [
    "flow-parser"
    "hh-utils"
    "hh-utils-collections"
  ]
end

begin library "flow-dts"
  sort = true
  files = begin fb-glob "src/dts"
  end
  requires = [
    "flow-common-utils"
    "flow-parser"
    "hh-utils"
    "hh-utils-collections"
  ]
end

(* This library is used to extract the archive embedded in the Elf binary.
 * The archive contains the standard library for Flow and is extracted
 * into /tmp. This way, Flow can be distributed as a simple binary, and
 * will install itself the first time it is run. *)
begin library "flow-embedded"
  sort = true
  files = begin fb-glob "src/embedded"
  end
  requires = [
    "flow-common"
    "flow-shmem"
    "hh-win32res"
    "hh-find"
  ]
  if (os_type = "Win32") then {
    flow_source = ".\flowlib.rc"
    flow_target = "%{flow-embedded_FULL_DST_DIR}%/flow_res.o"
    cclib = [ flow_target ]
    build_rules = [
      flow_target (
        sources = [ flow_source ]
        commands = [
          { "windres"
            "--preprocessor=x86_64-w64-mingw32-gcc.exe"
            "--preprocessor-arg=-E"
            "--preprocessor-arg=-xc-header"
            flow_source flow_target }
          ]
          build_target = true
      )
    ]
  } else if (system = "macosx" && os_type = "Unix") then {
      cclib = [
        "-sectcreate" "__text" "flowlib"
        "%{ROOTPROJECT_FULL_SRC_DIR}%/bin/flowlib.tar.gz"
        "-framework" "CoreServices"
        "-framework" "CoreFoundation"
      ]
  }
end

begin library "flow-parser"
  sort = true
  files = begin fb-glob "src/parser"
    excludes = [
      "flow_parser_js.ml"
      "flow_parser_dot_js.ml"
    ]
  end
end

begin library "flow-parsing"
  sort = true
  files = begin fb-glob "src/parsing"
  end
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-parser"
    "flow-shmem"
    "hh-procs"
    "hh-heap"
    "hh-utils"
    "hh-utils-json"
  ]
end

begin library "flow-server-files"
  sort = true
  files = [
    "src/server/server_files_js.mli"
    "src/server/server_files_js.ml"
  ]
  requires = [
    "flow-common"
    "hh-utils-sys"
  ]
end

begin library "flow-shmem"
  sort = true
  files = [
    "src/server/sharedMem_js.ml"
  ]
  requires = [
    "flow-server-files"
    "flow-common"
    "hh-heap"
    "hh-utils-sys"
    "hh-utils-collections"
  ]
end

begin library "flow-server"
  sort = true
  files = begin fb-glob "src/server"
    excludes = [ 
      "serverEnv.ml" 
      "server_files_js.ml" 
      "server_files_js.mli"  
      "sharedMem_js.ml"
    ]
  end
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-embedded"
    "flow-shmem"
    "flow-stubs"
    "flow-parser"
    "flow-parsing"
    "flow-server-files"
    "flow-services-autocomplete"
    "flow-services-flowFileGen"
    "flow-services-inference"
    "flow-services-port"
    "flow-typing"
    "hh-stubs"
    "hh-dfind"
    "hh-procs"
    "hh-socket"
    "tp-core"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin library "flow-server-env"
  sort = true
  dirname = "src/server"
  files = [
    "serverEnv.ml"
  ]
  requires = [
    "flow-common"
    "flow-common-utils"
    "hh-dfind"
    "hh-procs"
    "hh-utils-collections"
  ]
end

begin library "flow-services-autocomplete"
  sort = true
  files = begin fb-glob "src/services/autocomplete"
  end
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-stubs"
    "flow-parser"
    "flow-parsing"
    "flow-typing"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin library "flow-services-inference"
  sort = true
  files = begin fb-glob "src/services/inference"
    excludes = [ "module_js.ml" ]
  end
  files += [
    "src/services/inference/module_js.ml" (comp += [ "-w" "-3" ])
  ]
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-stubs"
    "flow-parser"
    "flow-parsing"
    "flow-server-env"
    "flow-server-files"
    "flow-shmem"
    "flow-typing"
    "hh-heap"
    "hh-procs"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin library "flow-services-flowFileGen"
  sort = true
  files = begin fb-glob "src/services/flowFileGen"
  end
  requires = [
    "flow-typing"
    "hh-utils-collections"
  ]
end

begin library "flow-services-port"
  sort = true
  files = begin fb-glob "src/services/port"
  end
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-parser"
    "flow-parsing"
    "hh-utils"
    "hh-utils-collections"
  ]
end

begin library "flow-stubs"
  sort = true
  files = begin fb-glob "src/stubs"
  end
end

begin library "flow-typing"
  sort = true
  files = begin fb-glob "src/typing"
    excludes = [
      "flow_error.ml"
      "statement.ml"
    ]
  end
  files += [
    "src/typing/flow_error.ml" (comp += [ "-w" "-3" ])
    "src/typing/statement.ml" (comp += [ "-w" "-3" ])
  ]
  requires = [
    "flow-common"
    "flow-common-utils"
    "flow-parser"
    "tp-core"
    "hh-utils"
    "hh-utils-collections"
    "hh-utils-json"
  ]
end

begin program "flow"
  requires = [ "flow-commands" "flow-embedded" ]
  dirname = "src"
  (* There doesn't seem to be a good way to force the linker to run if
   * flow-embedded has changed. Well, this seems to work. *)
  if (os_type = "Win32") then {
    rule_sources = "%{flow-embedded_FULL_DST_DIR}%/flow_res.o"
  }
  files = [
    "flow.ml" (comp += [ "-w" "-3" ])
  ]
end

begin program "flow-parser-hardcoded-test"
  sort = true
  dirname = "src/parser/test"
  files = [
    "hardcoded_test_runner.ml"
    "run_hardcoded_tests.ml"
  ]
  requires = [
    "flow-parser"
    "flow-common-utils"
  ]
  tests = [ "hardcoded_tests" ]
  test_args = [ "%{sources}%\hardcoded_tests.js" ]
end
