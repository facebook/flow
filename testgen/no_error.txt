// Good program ==========
var v_0 = 1.1
assert_type(v_0, 1.1);
function f6(param  : {p_0 : number | string}) : void {
assert_type(param, {p_0 : [1.1, "foo"]});

param.p_0 = v_0;
}

/*
Env:
({p_0 : number | string}) => void
f6 : ({p_0 : number | string}) => void
1.1 : number
v_0 : number
{p_0 : string}
{p_0 : "foo"} : {p_0 : string}
{p_0 : number | string}
number | string
string
"foo" : string
number
*/



// Good program ==========
var v_0 = 1.1
assert_type(v_0, 1.1);
function f5(param  : {p_0 : number | string}) : void {
assert_type(param, {p_0 : [1.1, "foo"]});

param.p_0 = "foo";
}

/*
Env:
({p_0 : number | string}) => void
f5 : ({p_0 : number | string}) => void
1.1 : number
v_0 : number
{p_0 : string}
{p_0 : "foo"} : {p_0 : string}
{p_0 : number | string}
number | string
string
"foo" : string
number
*/



// Good program ==========
var v_5 = {p_0 : 1.1}
f9(v_5);
assert_type(v_5.p_0, 1.1);
function f9(param  : {p_0 : number | string}) : void {
assert_type(param, {p_0 : [1.1, "foo"]});

param.p_0 = 1.1;
}

/*
Env:
{p_0 : number}
v_5 : {p_0 : number}
{p_0 : 1.1} : {p_0 : number}
{p_0 : number | string}
number | string
string
"foo" : string
v_5.p_0 : number
void
f9(v_5) : void
({p_0 : number | string}) => void
f9 : ({p_0 : number | string}) => void
1.1 : number
number
*/



// Good program ==========
var v_4 = "foo"
assert_type(v_4, "foo");
function f12(param  : {p_0 : number | string}) : void {
assert_type(param, {p_0 : [1.1, "foo"]});

param.p_0 = 1.1;
}

/*
Env:
({p_0 : number | string}) => void
f12 : ({p_0 : number | string}) => void
1.1 : number
number
"foo" : string
v_4 : string
{p_0 : number}
{p_0 : 1.1} : {p_0 : number}
{p_0 : number | string}
number | string
string
*/
