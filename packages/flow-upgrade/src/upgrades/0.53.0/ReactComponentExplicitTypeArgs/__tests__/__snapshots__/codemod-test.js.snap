// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`All.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<DefaultProps, Props, State> {
    static defaultProps: DefaultProps = {};
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`AllGood.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<DefaultProps, Props, State> {
  static defaultProps: BadDefaultProps = {};
  props: BadProps;
  state: BadState = {};
}

const expression = () =>
  class extends React.Component<DefaultProps, Props, State> {
    static defaultProps: BadDefaultProps = {};
    props: BadProps;
    state: BadState = {};
  }
"
`;

exports[`ComponentNamedImport.js 1`] = `
"// @flow

import {Component} from 'react';

class MyComponent extends Component<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends Component<DefaultProps, Props, State> {
    static defaultProps: DefaultProps = {};
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`DefaultProps.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<DefaultProps, Props> {
  static defaultProps: DefaultProps = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<DefaultProps, Props> {
    static defaultProps: DefaultProps = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`DefaultPropsInferred.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<$FlowFixMeDefaultProps, Props> {
  static defaultProps = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<$FlowFixMeDefaultProps, Props> {
    static defaultProps = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`DefaultPropsInline.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<{a: number, b: number, c: number}, Props> {
  static defaultProps: {a: number, b: number, c: number} = {a: 1, b: 2, c: 3};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<{a: number, b: number, c: number}, Props> {
    static defaultProps: {a: number, b: number, c: number} = {a: 1, b: 2, c: 3};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`DefaultPropsUninitialized.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<DefaultProps, Props> {
  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<DefaultProps, Props> {
    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`FlowNone.js 1`] = `
"import React from 'react';

class MyComponent extends React.Component<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<DefaultProps, Props, State> {
    static defaultProps: DefaultProps = {};
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`LifecycleMethodsInferred.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, $FlowFixMeProps> {
  componentWillReceiveProps(nextProps) {}
}

class MyComponent2 extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
  shouldComponentUpdate(prevProps, prevState) {}
}

class MyComponent3 extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
  componentWillUpdate(prevProps, prevState) {}
}

class MyComponent4 extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
  componentDidUpdate(prevProps, prevState) {}
}

const expression1 = () =>
  class extends React.Component<void, $FlowFixMeProps> {
    componentWillReceiveProps(nextProps) {}
  }

const expression2 = () =>
  class extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
    shouldComponentUpdate(prevProps, prevState) {}
  }

const expression3 = () =>
  class extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
    componentWillUpdate(prevProps, prevState) {}
  }

const expression4 = () =>
  class extends React.Component<void, $FlowFixMeProps, $FlowFixMeState> {
    componentDidUpdate(prevProps, prevState) {}
  }
"
`;

exports[`LifecycleMethodsNone.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, {}> {
  componentWillReceiveProps() {}
}

class MyComponent2 extends React.Component<void, {}> {
  shouldComponentUpdate() {}
}

class MyComponent3 extends React.Component<void, {}> {
  componentWillUpdate() {}
}

class MyComponent4 extends React.Component<void, {}> {
  componentDidUpdate() {}
}

const expression1 = () =>
  class extends React.Component<void, {}> {
    componentWillReceiveProps() {}
  }

const expression2 = () =>
  class extends React.Component<void, {}> {
    shouldComponentUpdate() {}
  }

const expression3 = () =>
  class extends React.Component<void, {}> {
    componentWillUpdate() {}
  }

const expression4 = () =>
  class extends React.Component<void, {}> {
    componentDidUpdate() {}
  }
"
`;

exports[`LifecycleMethodsProps.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, Props> {
  componentWillReceiveProps(nextProps: Props) {}
}

class MyComponent2 extends React.Component<void, Props> {
  shouldComponentUpdate(prevProps: Props) {}
}

class MyComponent3 extends React.Component<void, Props> {
  componentWillUpdate(prevProps: Props) {}
}

class MyComponent4 extends React.Component<void, Props> {
  componentDidUpdate(prevProps: Props) {}
}

const expression1 = () =>
  class extends React.Component<void, Props> {
    componentWillReceiveProps(nextProps: Props) {}
  }

const expression2 = () =>
  class extends React.Component<void, Props> {
    shouldComponentUpdate(prevProps: Props) {}
  }

const expression3 = () =>
  class extends React.Component<void, Props> {
    componentWillUpdate(prevProps: Props) {}
  }

const expression4 = () =>
  class extends React.Component<void, Props> {
    componentDidUpdate(prevProps: Props) {}
  }
"
`;

exports[`LifecycleMethodsPropsAndState.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, Props> {
  componentWillReceiveProps(nextProps: Props) {}
}

class MyComponent2 extends React.Component<void, Props, State> {
  shouldComponentUpdate(prevProps: Props, prevState: State) {}
}

class MyComponent3 extends React.Component<void, Props, State> {
  componentWillUpdate(prevProps: Props, prevState: State) {}
}

class MyComponent4 extends React.Component<void, Props, State> {
  componentDidUpdate(prevProps: Props, prevState: State) {}
}

const expression1 = () =>
  class extends React.Component<void, Props> {
    componentWillReceiveProps(nextProps: Props) {}
  }

const expression2 = () =>
  class extends React.Component<void, Props, State> {
    shouldComponentUpdate(prevProps: Props, prevState: State) {}
  }

const expression3 = () =>
  class extends React.Component<void, Props, State> {
    componentWillUpdate(prevProps: Props, prevState: State) {}
  }

const expression4 = () =>
  class extends React.Component<void, Props, State> {
    componentDidUpdate(prevProps: Props, prevState: State) {}
  }
"
`;

exports[`Props.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, Props> {
  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, Props> {
    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsConstructor.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, Props> {
  constructor(props: Props) {}

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

class MyComponent2 extends React.Component<void, Props> {
  constructor(props: Props) {}

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression1 = () =>
  class extends React.Component<void, Props> {
    constructor(props: Props) {}

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }

const expression2 = () =>
  class extends React.Component<void, Props> {
    constructor(props: Props) {}

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsConstructorAlias.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, {a: number, b: number, c: number}> {
  constructor(props: {a: number, b: number, c: number}) {}

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, {a: number, b: number, c: number}> {
    constructor(props: {a: number, b: number, c: number}) {}

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsConstructorInferred.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, $FlowFixMeProps> {
  constructor(props) {}

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

class MyComponent2 extends React.Component<void, Props> {
  constructor(props) {}

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression1 = () =>
  class extends React.Component<void, $FlowFixMeProps> {
    constructor(props) {}

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }

const expression2 = () =>
  class extends React.Component<void, Props> {
    constructor(props) {}

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsConstructorNoArgs.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, {}> {
  constructor() {}

  defaultProps: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, {}> {
    constructor() {}

    defaultProps: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsInline.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, {a: number, b: number, c: number}> {
  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, {a: number, b: number, c: number}> {
    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsNotDefined.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, {}> {
  defaultProps: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, {}> {
    defaultProps: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PropsNotDefinedButUsed.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, $FlowFixMeProps, State> {
  state: State = {
    initialValue: this.props.value,
  };
}

class MyComponent2 extends React.Component<void, $FlowFixMeProps> {
  render() {
    return this.props.children;
  }
}

class MyComponent3 extends React.Component<void, $FlowFixMeProps> {
  render() {
    const props = {};
    return props;
  }
}

const expression1 = () =>
  class extends React.Component<void, $FlowFixMeProps, State> {
    state: State = {
      initialValue: this.props.value,
    };
  }

const expression2 = () =>
  class extends React.Component<void, $FlowFixMeProps> {
    render() {
      return this.props.children;
    }
  }

const expression3 = () =>
  class extends React.Component<void, $FlowFixMeProps> {
    render() {
      const props = {};
      return props;
    }
  }
"
`;

exports[`PureComponent.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.PureComponent<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.PureComponent<DefaultProps, Props, State> {
    static defaultProps: DefaultProps = {};
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`PureComponentNamedImport.js 1`] = `
"// @flow

import {PureComponent} from 'react';

class MyComponent extends PureComponent<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends PureComponent<DefaultProps, Props, State> {
    static defaultProps: DefaultProps = {};
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`ReactNone.js 1`] = `null`;

exports[`ReactRequire.js 1`] = `
"// @flow

const React = require('react');

class MyComponent1 extends React.Component<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

class MyComponent2 extends Component<DefaultProps, Props, State> {
  static defaultProps: DefaultProps = {};
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}
"
`;

exports[`State.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, Props, State> {
  state: State = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, Props, State> {
    state: State = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`StateInferred.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, Props, $FlowFixMeState> {
  state = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, Props, $FlowFixMeState> {
    state = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`StateInline.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, Props, {a: number, b: number, c: number}> {
  state: {a: number, b: number, c: number} = {a: 1, b: 2, c: 3};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, Props, {a: number, b: number, c: number}> {
    state: {a: number, b: number, c: number} = {a: 1, b: 2, c: 3};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;

exports[`StateNotDefinedButUsed.js 1`] = `
"// @flow

import React from 'react';

class MyComponent1 extends React.Component<void, {}, $FlowFixMeState> {
  render() {
    return this.state.children;
  }
}

class MyComponent2 extends React.Component<void, {}, $FlowFixMeState> {
  render() {
    const state = {};
    return state;
  }
}

const expression1 = () =>
  class extends React.Component<void, {}, $FlowFixMeState> {
    render() {
      return this.state.children;
    }
  }

const expression2 = () =>
  class extends React.Component<void, {}, $FlowFixMeState> {
    render() {
      const state = {};
      return state;
    }
  }
"
`;

exports[`StateUninitialized.js 1`] = `
"// @flow

import React from 'react';

class MyComponent extends React.Component<void, Props, State> {
  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<void, Props, State> {
    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
"
`;
