/*  */
// @nolint

// multi-byte chars: Гарного дня, котики!

// Regular import
import {
  Something,
} from 'some-module';

// Import types

// Typed function
async function test(x, y /*.*/ /*.*/ , z /*.*/ /*.*/ = 123) {
  // Typed expression
  return await (x);
}

// Interface

// Exported interface

// Interface extends

// Implements interface
class Bar extends Other /*.*/ {
  // Class Property with default value
  answer = 42;

  // Class Property

  method() {
    return;
  }
}

// Class expression implements interface
var SomeClass = class Baz {

  method() {
    return;
  }
};

// Parametric class
class Wrapper {
  get() {
    return this.value;
  }

  map() {
    // do something
  }
}

// Extends Parametric class
class StringWrapper extends Wrapper {
  // ...
}

// Declare class

// Declare funtion

// Declare interface

// Declare module

// Declare type alias

// Declare variable

// Type alias

// Export type

// Regular export
export { Wrapper };

// Exported type alias

// Object with types within
var someObj = {
  objMethod() {
    // do nothing.
  }
}

// Example from README
import SomeClass from 'some-module'

export class MyClass extends SomeClass {


  constructor(value) {
    this.value = value
  }

  get() {
    return this.value
  }

}

// Test async/await functions
async function asyncFunction(input) {
  return await t;
}

// Test read-only data

// Test covariant type variant class with constaint and default.
export class TestClassWithDefault {

  constructor() {}
}

var newline_arrow = () => 42;

var newline_arrow_2 = ()=>42;

// Test calling a function with explicit type arguments
doSomething(3);
doSomething(3);

// Test invoking a constructor with explicit type arguments
new Event();

// Test type union and intersection syntax with leading "operator"
var union;
var intersection;

// Test generic async arrow funcion
const f = async() => {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxzdGRpbj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkdBQUcsQUFBSzs7Ozs7Ozs7RUFRTixBQUFBLEFBQUksQ0FBQyxBQUFBLEFBQVEsQUFBQyxBQUFBO0VBQ2QsQUFBQSxBQUFNLENBQUMsQUFBQSxBQUFjLEFBQUE7Ozs7QUFJdkIsQUFBNEMsQUFBQTs7O3FCQUd2QixBQUFNLFVBQVUsQUFBQSxBQUFDLGlCQUFpQixBQUFBLEFBQUMsT0FBTyxBQUFBLEFBQWMsT0FBTyxBQUFROztpQkFFM0UsQUFBSzs7OztBQUl0QixBQUlDLEFBQUE7OztBQUdELEFBRUMsQUFBQTs7O0FBR0QsQUFFQyxBQUFBOzs7d0JBR3VCLEFBQUEsQUFBVSxPQUFPLEFBQUEsQUFBRyxBQUFDLENBQUMsQUFBQSxBQUFVOztRQUVoRCxBQUFROzs7RUFHZCxBQUFBLEFBQVUsQUFBQTs7VUFFRixBQUFPOzs7Ozs7MEJBTVMsQUFBQSxBQUFVLENBQUMsQUFBQSxBQUFHO0VBQ3RDLEFBQUEsQUFBVSxBQUFBOztVQUVGLEFBQU87Ozs7OzthQU1KLEFBQUc7T0FDVCxBQUFHOzs7O0tBSUwsQUFBRyxFQUFFLEFBQVk7Ozs7OzttQ0FNYSxBQUFROzs7OztBQUszQyxBQUVDLEFBQUE7OztBQUdELEFBQWtDLEFBQUE7OztBQUdsQyxBQUVDLEFBQUE7OztBQUdELEFBRUMsQUFBQTs7O0FBR0QsQUFHRSxBQUFBOzs7QUFHRixBQUErQixBQUFBOzs7QUFHL0IsQUFBZ0IsQUFBQTs7O0FBR2hCLEFBQWtCLEFBQUE7Ozs7OztBQU1sQixBQUFrQyxBQUFBOzs7O2FBSXJCLEFBQU07Ozs7Ozs7QUFPbkIsQUFBZ0QsQUFBQTs7b0JBRTVCLEFBQUcsbUJBQW1CLEFBQUEsQUFBVSxDQUFDLEFBQUEsQUFBYTs7RUFFaEUsQUFBQSxBQUFRLEFBQUE7O21CQUVTLEFBQUc7Ozs7T0FJZixBQUFHOzs7Ozs7OzRCQU9rQixBQUFHLE1BQU0sQUFBRyxDQUFDLEFBQVk7Ozs7O0FBS3JELEFBRUcsQUFBQTs7O2lDQUc4QixBQUFpQzs7Ozs7c0JBSzVDLEFBQ2hCOzt5QkFFbUIsQUFBQSxBQUNuQjs7O1dBR0ssQUFBUTtZQUNQLEFBQUEsQUFBTTs7O1NBR1QsQUFBUTs7O1NBR1IsQUFBUztnQkFDRixBQUFTOzs7Z0JBR1QsQUFBQSxBQUFHLEVBQUUsQUFBRyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG4vLyBAbm9saW50XG5cbi8vIG11bHRpLWJ5dGUgY2hhcnM6INCT0LDRgNC90L7Qs9C+INC00L3Rjywg0LrQvtGC0LjQutC4IVxuXG4vLyBSZWd1bGFyIGltcG9ydFxuaW1wb3J0IHtcbiAgU29tZXRoaW5nLFxuICB0eXBlIFNvbWVUeXBlLFxuICB0eXBlb2YgU29tZU90aGVyVGhpbmdcbn0gZnJvbSAnc29tZS1tb2R1bGUnO1xuXG4vLyBJbXBvcnQgdHlwZXNcbmltcG9ydCB0eXBlIHsgU29tZVR5cGUgfSBmcm9tICdzb21lLW1vZHVsZSc7XG5cbi8vIFR5cGVkIGZ1bmN0aW9uXG5hc3luYyBmdW5jdGlvbiB0ZXN0KHg6IFR5cGUsIHkgLyouKi8gPyAvKi4qLyAsIHogLyouKi8gPyAvKi4qLyA6IC8qLiovIG51bWJlciA9IDEyMyk6IHN0cmluZyB7XG4gIC8vIFR5cGVkIGV4cHJlc3Npb25cbiAgcmV0dXJuIGF3YWl0ICh4OiBhbnkpO1xufVxuXG4vLyBJbnRlcmZhY2VcbmludGVyZmFjZSBGb28ge1xuICBwcm9wOiBhbnk7XG5cbiAgbWV0aG9kKCk6IG1peGVkO1xufVxuXG4vLyBFeHBvcnRlZCBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgSVRoaW5nIHtcbiAgZXhwb3J0ZWQ6IHRydWU7XG59XG5cbi8vIEludGVyZmFjZSBleHRlbmRzXG5pbnRlcmZhY2UgU2lsbHlGb28gZXh0ZW5kcyBGb28ge1xuICBzaWxseTogc3RyaW5nO1xufVxuXG4vLyBJbXBsZW1lbnRzIGludGVyZmFjZVxuY2xhc3MgQmFyIGV4dGVuZHMgT3RoZXIgaW1wbGVtZW50cyAvKi4qLyBGb28sIElTb21ldGhpbmcge1xuICAvLyBDbGFzcyBQcm9wZXJ0eSB3aXRoIGRlZmF1bHQgdmFsdWVcbiAgYW5zd2VyOiBudW1iZXIgPSA0MjtcblxuICAvLyBDbGFzcyBQcm9wZXJ0eVxuICBwcm9wOiBhbnk7XG5cbiAgbWV0aG9kKCk6IG1peGVkIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLy8gQ2xhc3MgZXhwcmVzc2lvbiBpbXBsZW1lbnRzIGludGVyZmFjZVxudmFyIFNvbWVDbGFzcyA9IGNsYXNzIEJheiBpbXBsZW1lbnRzIEZvbyB7XG4gIHByb3A6IGFueTtcblxuICBtZXRob2QoKTogbWl4ZWQge1xuICAgIHJldHVybjtcbiAgfVxufTtcblxuLy8gUGFyYW1ldHJpYyBjbGFzc1xuY2xhc3MgV3JhcHBlcjxUPiB7XG4gIGdldCgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIG1hcDxNPigpOiBXcmFwcGVyPE0+IHtcbiAgICAvLyBkbyBzb21ldGhpbmdcbiAgfVxufVxuXG4vLyBFeHRlbmRzIFBhcmFtZXRyaWMgY2xhc3NcbmNsYXNzIFN0cmluZ1dyYXBwZXIgZXh0ZW5kcyBXcmFwcGVyPHN0cmluZz4ge1xuICAvLyAuLi5cbn1cblxuLy8gRGVjbGFyZSBjbGFzc1xuZGVjbGFyZSBjbGFzcyBCYXoge1xuICBtZXRob2QoKTogbWl4ZWQ7XG59XG5cbi8vIERlY2xhcmUgZnVudGlvblxuZGVjbGFyZSBmdW5jdGlvbiBzb21lRnVuYygpOiB2b2lkO1xuXG4vLyBEZWNsYXJlIGludGVyZmFjZVxuZGVjbGFyZSBpbnRlcmZhY2UgSVNvbWV0aGluZyB7XG4gIGFuc3dlcjogbnVtYmVyO1xufVxuXG4vLyBEZWNsYXJlIG1vZHVsZVxuZGVjbGFyZSBtb2R1bGUgJ2ZzJyB7XG4gIGRlY2xhcmUgZnVuY3Rpb24gcmVhZFRoaW5nKHBhdGg6IHN0cmluZyk6IHN0cmluZztcbn1cblxuLy8gRGVjbGFyZSB0eXBlIGFsaWFzXG5kZWNsYXJlIHR5cGUgTG9jYXRpb24gPSB7XG4gIGxhdDogbnVtYmVyLFxuICBsb246IG51bWJlclxufTtcblxuLy8gRGVjbGFyZSB2YXJpYWJsZVxuZGVjbGFyZSB2YXIgU09NRV9DT05TVDogc3RyaW5nO1xuXG4vLyBUeXBlIGFsaWFzXG50eXBlIFQgPSBzdHJpbmc7XG5cbi8vIEV4cG9ydCB0eXBlXG5leHBvcnQgdHlwZSB7IFQgfTtcblxuLy8gUmVndWxhciBleHBvcnRcbmV4cG9ydCB7IFdyYXBwZXIgfTtcblxuLy8gRXhwb3J0ZWQgdHlwZSBhbGlhc1xuZXhwb3J0IHR5cGUgT05FID0geyBvbmU6IG51bWJlciB9O1xuXG4vLyBPYmplY3Qgd2l0aCB0eXBlcyB3aXRoaW5cbnZhciBzb21lT2JqID0ge1xuICBvYmpNZXRob2QoKTogdm9pZCB7XG4gICAgLy8gZG8gbm90aGluZy5cbiAgfVxufVxuXG4vLyBFeGFtcGxlIGZyb20gUkVBRE1FXG5pbXBvcnQgU29tZUNsYXNzIGZyb20gJ3NvbWUtbW9kdWxlJ1xuaW1wb3J0IHR5cGUgeyBTb21lSW50ZXJmYWNlIH0gZnJvbSAnc29tZS1tb2R1bGUnXG5cbmV4cG9ydCBjbGFzcyBNeUNsYXNzPFQ+IGV4dGVuZHMgU29tZUNsYXNzIGltcGxlbWVudHMgU29tZUludGVyZmFjZSB7XG5cbiAgdmFsdWU6IFRcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0KCk6IFQge1xuICAgIHJldHVybiB0aGlzLnZhbHVlXG4gIH1cblxufVxuXG4vLyBUZXN0IGFzeW5jL2F3YWl0IGZ1bmN0aW9uc1xuYXN5bmMgZnVuY3Rpb24gYXN5bmNGdW5jdGlvbjxUPihpbnB1dDogVCk6IFByb21pc2U8VD4ge1xuICByZXR1cm4gYXdhaXQgdDtcbn1cblxuLy8gVGVzdCByZWFkLW9ubHkgZGF0YVxuZXhwb3J0IHR5cGUgVGVzdFJlYWRPbmx5ID0ge3xcbiAgK3JlYWRPbmx5OiAkUmVhZE9ubHlBcnJheTw+XG58fTtcblxuLy8gVGVzdCBjb3ZhcmlhbnQgdHlwZSB2YXJpYW50IGNsYXNzIHdpdGggY29uc3RhaW50IGFuZCBkZWZhdWx0LlxuZXhwb3J0IGNsYXNzIFRlc3RDbGFzc1dpdGhEZWZhdWx0PCtUOiBUZXN0UmVhZE9ubHkgPSBUZXN0UmVhZE9ubHk+IHtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbnZhciBuZXdsaW5lX2Fycm93ID0gKCk6XG5udW1iZXIgPT4gNDI7XG5cbnZhciBuZXdsaW5lX2Fycm93XzIgPSAoKSA6XG5udW1iZXI9PjQyO1xuXG4vLyBUZXN0IGNhbGxpbmcgYSBmdW5jdGlvbiB3aXRoIGV4cGxpY2l0IHR5cGUgYXJndW1lbnRzXG5kb1NvbWV0aGluZzxudW1iZXI+KDMpO1xuZG9Tb21ldGhpbmcgPFQsIFU+KDMpO1xuXG4vLyBUZXN0IGludm9raW5nIGEgY29uc3RydWN0b3Igd2l0aCBleHBsaWNpdCB0eXBlIGFyZ3VtZW50c1xubmV3IEV2ZW50PG51bWJlcj4oKTtcblxuLy8gVGVzdCB0eXBlIHVuaW9uIGFuZCBpbnRlcnNlY3Rpb24gc3ludGF4IHdpdGggbGVhZGluZyBcIm9wZXJhdG9yXCJcbnZhciB1bmlvbjogfCBUIHwgVTtcbnZhciBpbnRlcnNlY3Rpb246ICYgVCAmIFU7XG5cbi8vIFRlc3QgZ2VuZXJpYyBhc3luYyBhcnJvdyBmdW5jaW9uXG5jb25zdCBmID0gYXN5bmMgPFQ+KCk6IFQgPT4ge307XG4iXX0=
